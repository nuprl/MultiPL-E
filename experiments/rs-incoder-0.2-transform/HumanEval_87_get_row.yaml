name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize, isize)>::new()\n\
  /// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst:\
  \ Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut result = Vec::new();\n    for row in lst {\n        let\
    \ mut row_result = Vec::new();\n        for cell in row.iter() {\n           \
    \ if cell == x {\n                row_result.push((cell.0, cell.1));\n       \
    \     }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.iter().rev().cloned());\n    result.sort_by_key(|&(_, y)| y.iter().cloned());\n\
    \    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let\
    \ mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n  \
    \  let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n\
    \    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n   \
    \ let mut row_len = lst.len();\n    let mut col_len = lst.first().len();\n   \
    \ let mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut col_max = col_len;\n\
    \    let mut row_max = row_len;\n    let mut col_min = col_len;\n    let mut row_min\
    \ = row_len;\n    let mut col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n\
    \    let mut col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n    let\
    \ mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n    let mut\
    \ col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let mut col_max_idx\
    \ = col_len;\n    let mut row_max_idx = row_len;\n    let mut col_min_idx = col_len;\n\
    \    let mut row_min_idx = row_len;\n    let mut col_max_pos = col_len;\n    let\
    \ mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;\n    let mut\
    \ row_min_pos = row_len;\n    let mut col_max_idx = col_len;\n    let mut row_max_idx\
    \ = row_len;\n    let mut col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n\
    \    let mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n    let\
    \ mut col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let mut\
    \ col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n    let mut col_min_idx\
    \ = col_len;\n    let mut row_min_idx = row_len;\n    let mut col_max_pos = col_len;\n\
    \    let mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;\n    let\
    \ mut row_min_pos = row_len;\n    let mut col_max_idx = col_len;\n    let mut\
    \ row_max_idx = row_len;\n    let mut col_min_idx = col_len;\n    let mut row_min_idx\
    \ = row_len;\n    let mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n\
    \    let mut col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let\
    \ mut col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n    let mut\
    \ col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n    let mut col_max_pos\
    \ = col_len;\n    let mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n  \
    \  let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n\
    \    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 =\
    \ 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sort = vec![];\n    let mut\
    \ col_sort = vec![];\n    let mut i = 0;\n    let mut j = 0;\n    while i < rows\
    \ {\n        row_sort.clear();\n        col_sort.clear();\n        row_sort.push(i);\n\
    \        col_sort.push(i);\n        row_coords.clear();\n        col_coords.clear();\n\
    \        while j < cols {\n            if lst[i][j] == x {\n                row_sort.push(j);\n\
    \                col_sort.push(j);\n                row_coords.push(i);\n    \
    \            col_coords.push(i);\n            }\n            j += 1\n        }\n\
    \        row_sorted.clear();\n        col_sorted.clear();\n        row_sorted.push(row_sort);\n\
    \        col_sorted.push(col_sort);\n        coords.push(row_coords);\n      \
    \  coords.push(col_coords);\n        i += 1;\n        j = 0;\n    }\n    coords",
  "    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize,\
    \ isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n    let mut\
    \ col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<isize>::new();\n    let mut col_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sort_reversed = Vec::<isize>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n\
    \    let mut col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<isize>::new();\n    let mut col_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<isize>::new();\n    let mut col_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sort_reversed = Vec::<isize>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n\
    \    let mut col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<isize>::new();\n    let mut col_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<isize>::new();\n    let mut col_sort_reversed = Vec::<isize>::new();\n\
    \    let ", "    let mut result = Vec::<(isize, isize)>::new();\n    for row in\
    \ lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n        for\
    \ element in row {\n            if element == x {\n                row_result.push((row,\
    \ element));\n            }\n        }\n        result.push(row_result.iter().cloned().collect());\n\
    \    }\n    result.sort_by_key(|row| row.iter().cloned().collect::<Vec<_>>());\n\
    \    result.sort_by_key(|row| row.iter().cloned().rev().collect::<Vec<_>>());\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n  \
    \  while row < rows {\n        let mut found = false;\n        while !found &&\
    \ col < cols {\n            if lst[row][col] == x {\n                found = true;\n\
    \                coords.push((row, col));\n            }\n            col += 1;\n\
    \        }\n        row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n \
    \   coords", "    let mut result = Vec::<(isize, isize)>::new();\n    for row\
    \ in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n     \
    \   for (i, val) in row.iter().enumerate() {\n            if i == x {\n      \
    \          row_result.push((i, val));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_, y)|\
    \ -y.1);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_max =\
    \ 0;\n    for row in lst {\n        row_idx_max = row.iter().max().unwrap();\n\
    \        col_max = row.iter().map(|x| x.unwrap()).max().unwrap();\n        if\
    \ row_idx < row_idx_max && col_max < col_max {\n            if row[row_idx][col_max]\
    \ == x {\n                row.push(row_idx, col_max);\n            }\n       \
    \ }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mu", "    let mut result = vec![];\n    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_sorted\
    \ = vec![];\n        let mut col_sorted = vec![];\n        let mut row_row_idx\
    \ = 0;\n        let mut col_col_idx = 0;\n        while col_col_idx < cols {\n\
    \            if row_row_idx < rows && col_col_idx < cols {\n                if\
    \ row_row_idx != row_idx {\n                    row_sorted.push((row_row_idx,\
    \ row_idx));\n                }\n                if col_col_idx != col_idx {\n\
    \                    col_sorted.push((col_col_idx, col_idx));\n              \
    \  }\n                row_row_idx += 1;\n                col_col_idx += 1;\n \
    \           } else {\n                break;\n            }\n        }\n     \
    \   result.push((row_sorted.len(), col_sorted.len()));\n        row_idx += 1;\n\
    \        col_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut result = Vec::new();\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_coord\
    \ = vec![];\n        while col_idx < cols {\n            if row_idx == row_idx\
    \ {\n                row_coord.push((row_idx, col_idx));\n            }\n    \
    \        if col_idx == col_idx {\n                row_coord.push((row_idx, col_idx));\n\
    \            }\n            if row_idx == row_idx && col_idx == col_idx {\n  \
    \              row_coord.push((row_idx, col_idx));\n            }\n          \
    \  col_idx += 1;\n        }\n        result.push(row_coord);\n        row_idx\
    \ += 1;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result", "    let mut coords\
    \ = vec![];\n    for row in lst {\n        let mut coord = vec![];\n        for\
    \ col in row.iter().rev() {\n            if col == x {\n                coord.push((row.len(),\
    \ col.len()));\n            }\n        }\n        coords.push_back(coord);\n \
    \   }\n    coords.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n    coords.sort_by(|a,\
    \ b| b.iter().cmp(&a.iter()).reverse());\n    coords", "    let mut result = Vec::new();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let\
    \ mut row_start2 = 0;\n    let mut col_start2 = 0;\n    let mut row_end2 = 0;\n\
    \    let mut col_end2 = 0;\n    while row_idx < row_len {\n        row_end = 0;\n\
    \        col_end = 0;\n        while col_idx < col_len {\n            row_end2\
    \ = row_end;\n            col_end2 = col_end;\n            row_start = row_idx;\n\
    \            col_start = col_idx;\n            if row_idx < row_len {\n      \
    \          row_end += lst[row_idx].len();\n            }\n            if col_idx\
    \ < col_len {\n                col_end += lst[row_idx][col_idx].len();\n     \
    \       }\n            if row_start <= row_end2 && col_start <= col_end2 {\n \
    \               if lst[row_idx][col_idx] == x {\n                    result.push((row_idx,\
    \ col_idx));\n                }\n            }\n            col_idx += 1;\n  \
    \      }\n        row_idx += 1;\n        col_idx = 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n\
    \    let mut col_sort_idx2 = vec![];\n    let mut row_sort_idx3 = vec![];\n  \
    \  let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4 = vec![];\n    let\
    \ mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 = vec![];\n    let mut\
    \ col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6\
    \ = vec![];\n    let mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 =\
    \ vec![];\n    let mut row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n\
    \    let mut row_sort_idx9 = vec![];\n    let mut col_sort_idx9 = vec![];\n  \
    \  let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10 = vec![];\n  \
    \  let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11 = vec![];\n  \
    \  let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12 = vec![];\n  \
    \  let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13 = vec![];\n  \
    \  let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14 = vec![];\n  \
    \  let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15 = vec![];\n  \
    \  let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16 = vec![];\n  \
    \  let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17 = vec![];\n  \
    \  let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18 = vec![];\n  \
    \  let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19 = vec![];\n  \
    \  let mut row_sort_idx20 = vec![];\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_pos = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        if row_len == x {\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.", " \
    \   let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n    let mut\
    \ row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n   \
    \ let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = ", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords =\
    \ vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorter: Vec<(isize, isize)>\
    \ = vec![];\n    let mut col_sorter: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_sorter_index = 0;\n    let mut col_sorter_index = 0;\n    let mut row_sorter_index2\
    \ = 0;\n    let mut col_sorter_index2 = 0;\n    let mut row_sorter_index3 = 0;\n\
    \    let mut col_sorter_index3 = 0;\n    let mut row_sorter_index4 = 0;\n    let\
    \ mut col_sorter_index4 = 0;\n    let mut row_sorter_index5 = 0;\n    let mut\
    \ col_sorter_index5 = 0;\n    let mut row_sorter_index6 = 0;\n    let mut col_sorter_index6\
    \ = 0;\n    let mut row_sorter_index7 = 0;\n    let mut col_sorter_index7 = 0;\n\
    \    let mut row_sorter_index8 = 0;\n    let mut col_sorter_index8 = 0;\n    let\
    \ mut row_sorter_index9 = 0;\n    let mut col_sorter_index9 = 0;\n    let mut\
    \ row_sorter_index10 = 0;\n    let mut col_sorter_index10 = 0;\n    let mut row_sorter_index11\
    \ = 0;\n    let mut col_sorter_index11 = 0;\n    let mut row_sorter_index12 =\
    \ 0;\n    let mut col_sorter_index12 = 0;\n    let mut row_sorter_index13 = 0;\n\
    \    let mut col_sorter_index13 = 0;\n    let mut row_sorter_index14 = 0;\n  \
    \  let mut col_sorter_index14 = 0;\n    let mut row_sorter_index15 = 0;\n    let\
    \ mut col_sorter_index15 = 0;\n    let mut row_sorter_index16 = 0;\n    let mut\
    \ col_sorter_index16 = 0;\n    let mut row_sorter_index17 = 0;\n    let mut col_sorter_index17\
    \ = 0;\n    let mut row_sorter_index18 = 0;\n    let mut col_sorter_index18 =\
    \ 0;\n    let mut row_sorter_index19 = 0;\n    let mut col_sorter_index19 = 0;\n\
    \    let mut row_sorter_index20 = 0;\n    let mut col_sorter_index20 = 0;\n  \
    \  let mut row_sorter_index21 = 0;\n    let mut col_sorter_index", "    let mut\
    \ row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n        let mut\
    \ col_max = 0;\n        let mut col_min = 0;\n        for col in row {\n     \
    \       if col > col_max {\n                col_max = col;\n            }\n  \
    \          if col < col_min {\n                col_min = col;\n            }\n\
    \        }\n        if col_min == col_max {\n            continue;\n        }\n\
    \        let mut row_idx = 0;\n        for col in row {\n            if col ==\
    \ x {\n                row_idx += 1;\n            }\n        }\n        let mut\
    \ row_idx = row_idx as isize;\n        let mut col_max = col_max as isize;\n \
    \       let mut col_min = col_min as isize;\n        for col in row {\n      \
    \      if col > col_max {\n                col_max = col;\n            }\n   \
    \         if col < col_min {\n                col_min = col;\n            }\n\
    \        }\n        if col_min == col_max {\n            continue;\n        }\n\
    \        let mut row_idx = row_idx as isize;\n        let mut col_max = col_max\
    \ as isize;\n        let mut col_min = col_min as isize;\n        for col in row\
    \ {\n            if col > col_max {\n                col_max = col;\n        \
    \    }\n            if col < col_min {\n                col_min = col;\n     \
    \       }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_min as isize;\n        for\
    \ col in row {\n            if col > col_max {\n                col_max = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \            }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_min as isize;\n        for\
    \ col in row {\n            if col > col_max {\n                col_max = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \            }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_m", "    if lst.is_empty()\
    \ {\n        vec![]\n    } else {\n        let mut rows = lst.len();\n       \
    \ let mut cols = lst[0].len();\n        let mut coords = vec![];\n        let\
    \ mut row_coords = vec![];\n        let mut col_coords = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n        let\
    \ mut row_sorted = vec![];\n        let ", "    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while col_idx < cols\
    \ {\n        if row_idx == rows {\n            break;\n        }\n        let\
    \ mut row_value = vec![0; cols];\n        for row_idx in 0..rows {\n         \
    \   row_value[col_idx] = lst[row_idx][col_idx];\n            col_idx += 1;\n \
    \       }\n        if row_value[x] == x {\n            result.push((row_idx, col_idx));\n\
    \        }\n        row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(x));\n    result.sort_by_key(|&(_, y)| -y.cmp(x));\n    result", " \
    \   let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut row_idx_min = std::cmp::min(lst.len(),\
    \ x);\n    let mut col_max = 0;\n    let mut col_min = std::cmp::min(lst.len(),\
    \ x);\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let\
    \ mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut\
    \ col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx\
    \ = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n\
    \    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let\
    \ mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let\
    \ mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut\
    \ col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx\
    \ = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n\
    \    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let\
    \ mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_", "    let mut result\
    \ = Vec::new();\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n\
    \        let mut row_row_idx = 0;\n        let mut col_col_idx = 0;\n        while\
    \ col_idx < col_len {\n            if row_row_idx < row_len {\n              \
    \  row_sorted.push(row_idx);\n                row_row_idx += 1;\n            }\n\
    \            if col_col_idx < col_len {\n                col_sorted.push(col_idx);\n\
    \                col_col_idx += 1;\n            }\n        }\n        if row_row_idx\
    \ < row_len {\n            row_sorted.push(row_idx);\n            row_row_idx\
    \ += 1;\n        }\n        if col_col_idx < col_len {\n            col_sorted.push(col_idx);\n\
    \            col_col_idx += 1;\n        }\n        if row_row_idx < row_len &&\
    \ col_col_idx < col_len {\n            let mut row_row_idx = row_row_idx;\n  \
    \          let mut col_col_idx = col_col_idx;\n            while row_row_idx <\
    \ row_len && col_col_idx < col_len {\n                if row_row_idx < row_len\
    \ {\n                    row_sorted.push(row_row_idx);\n                    row_row_idx\
    \ += 1;\n                }\n                if col_col_idx < col_len {\n     \
    \               col_sorted.push(col_col_idx);\n                    col_col_idx\
    \ += 1;\n                }\n            }\n        }\n        result.push((row_sorted,\
    \ col_sorted));\n        row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.iter().rev().cloned());\n    result", "    let mut rows: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    for row\
    \ in lst {\n        let mut row_idx = 0;\n        let mut col_idx = 0;\n     \
    \   for el in row {\n            if el == x {\n                rows.push((row_idx,\
    \ col_idx));\n            }\n            row_idx += 1;\n            col_idx +=\
    \ 1;\n        }\n    }\n    sort_rows(rows);\n    sort_cols(rows);\n    rows",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    for row in lst {\n        row_len += row.len();\n        if row_len == x\
    \ {\n            row_idx += 1;\n            col_pos = 0;\n            col_len\
    \ = 0;\n        }\n        for col in row {\n            col_len += 1;\n     \
    \       if col_len == x {\n                row.swap(row_idx, col_pos);\n     \
    \           row_idx += 1;\n                col_pos += 1;\n                col_len\
    \ -= 1;\n            }\n        }\n    }\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut col_len_idx = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let ", "    let\
    \ mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows {\n        let mut row_result = Vec::new();\n        while col_idx\
    \ < cols {\n            if row_idx == row_idx {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            if col_idx > cols {\n               \
    \ break;\n            }\n            if lst[row_idx][col_idx] == x {\n       \
    \         col_idx++;\n            } else {\n                col_idx = 0;\n   \
    \         }\n        }\n        result.push(row_result);\n        row_idx++;\n\
    \        col_idx = 0;\n    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x|\
    \ x.1, |a, b| b.0 - a.0);\n    result", "    let mut result = vec![];\n    let\
    \ mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_coord = vec![];\n        let mut col_coord = vec![];\n        for _\
    \ in 0..col_len {\n            row_coord.push((row_idx, col_idx));\n         \
    \   col_coord.push((row_idx, col_idx));\n            col_idx += 1;\n        }\n\
    \        result.push((row_idx, row_coord));\n        row_idx += 1;\n    }\n  \
    \  result.sort_by_key(|(_, coord)| coord.0);\n    result.sort_by_key(|(_, coord)|\
    \ coord.1);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < rows {\n        row_coord.clear();\n        col_coord.clear();\n \
    \       row_coord.push((row, 0));\n        col_coord.push((0, col));\n       \
    \ while j < cols {\n            if lst[i][j] == x {\n                coords.push(row_coord);\n\
    \                coords.push(col_coord);\n                i += 1;\n          \
    \      j += 1;\n            } else {\n                row_coord.push((row, j));\n\
    \                col_coord.push((i, j));\n            }\n        }\n        row\
    \ += 1;\n        col += 1;\n    }\n    coords", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n \
    \   let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col", "    let mut result =\
    \ Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut\
    \ row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_idx = 1;\n        while col_idx < col_len {\n\
    \            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        row_idx += 1;\n        col_len = lst[row_idx].len();\n   \
    \ }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ -y.0);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_pos = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_pos = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_pos = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_pos = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len", "    let mut lst = lst.clone();\n\
    \    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos\
    \ = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    while\
    \ row_len < lst.len() {\n        let mut col_pos_len = 0;\n        while col_pos_len\
    \ < lst.len() {\n            let mut col_pos_idx = 0;\n            while col_pos_idx\
    \ < lst.len() {\n                let mut col_pos = 0;\n                while col_pos\
    \ < lst.len() {\n                    let mut col_pos_len = 0;\n              \
    \      while col_pos_len < lst.len() {\n                        let mut col_pos_idx\
    \ = 0;\n                        while col_pos_idx < lst.len() {\n            \
    \                let mut col_pos = 0;\n                            while col_pos\
    \ < lst.len() {\n                                if col_pos == col_pos_idx {\n\
    \                                    if col_pos == col_pos_len {\n           \
    \                             row.push((row_idx, col_pos));\n                \
    \                        break;\n                                    }\n     \
    \                               col_pos_len += 1;\n                          \
    \      }\n                                col_pos += 1;\n                    \
    \        }\n                            col_pos_idx += 1;\n                  \
    \      }\n                        col_pos_len += 1;\n                    }\n \
    \                   col_pos_len += 1;\n                }\n                col_pos_idx\
    \ += 1;\n            }\n            col_pos_len += 1;\n        }\n        row_len\
    \ += 1;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n    row.sort_by_key(|&(x, y)|\
    \ y.1);\n    row", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n    \
    \    row_idx += 1;\n        if row_len == x {\n            rows.push((row_idx,\
    \ col_idx));\n            row_len = 0;\n            row_idx = 0;\n           \
    \ col_idx = 0;\n        }\n        for col in row {\n            col_len += 1;\n\
    \            col_idx += 1;\n            if col_len == x {\n                rows.push((row_idx,\
    \ col_idx));\n                col_len = 0;\n                col_idx = 0;\n   \
    \         }\n        }\n    }\n    rows\n        .iter()\n        .sort_by(|a,\
    \ b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0))\n        .collect()",
  "    let mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    let\
    \ mut row_coords = vec![];\n    let mut col_coords = vec![];\n    for row in lst\
    \ {\n        row_coords.clear();\n        col_coords.clear();\n        for col\
    \ in row {\n            if col == x {\n                row_coords.push((row, col));\n\
    \                col_coords.push((row, col));\n            }\n        }\n    \
    \    coords.push_back(row_coords);\n        coords.push_back(col_coords);\n  \
    \  }\n    coords.sort_by_key(|&(_, y)| y.0);\n    coords.sort_by_key(|&(_, y)|\
    \ y.1, |x, y| x.0 > y.0);\n    coords", "    let mut lst = lst.clone();\n    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    while row_idx < lst.len() {\n        let mut row_idx =\
    \ 0;\n        while col_idx < lst[row_idx].len() {\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            } else {\n               \
    \ col_idx += 1;\n            }\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.0);\n    row.sort_by_key(|&(_, y)| -y.1);\n    row", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_max\
    \ = lst[0].len();\n    for row in lst {\n        let mut col_min = col_max;\n\
    \        for col in row.iter() {\n            if col < col_min {\n           \
    \     col_min = col;\n            }\n        }\n        if col_min == col_max\
    \ {\n            row.push((row_idx, col_min));\n        } else {\n           \
    \ row.push((row_idx, col_min));\n            row.push((row_idx, col_max));\n \
    \       }\n        row_idx += 1;\n        col_max = col_min;\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.0);\n    row.sort_by_key(|&(_, y)| -y.1);\n    row", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut row: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    for row in lst {\n        row_len += row.len();\n        col_len = row.len();\n\
    \    }\n    for row in lst {\n        if row_idx < row.len() {\n            let\
    \ mut row_idx = row.iter().enumerate().filter(|&(i, _)| i == row_idx).count();\n\
    \            let mut row_idx = row_idx / col_len;\n            let mut row_idx\
    \ = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n         \
    \   let mut row_idx = row_idx / col_len;\n            let mut row_idx = row_idx\
    \ - 1;\n            let mut row_idx = row_idx % col_len;\n            let mut\
    \ row_idx = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n \
    \           let mut row_idx = row_idx % col_len;\n            let mut row_idx\
    \ = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n         \
    \   let mut row_idx = row_idx % col_len;\n            let mut row_idx = row_idx\
    \ / col_len;\n            let mut row_idx = row_idx - 1;\n            let mut\
    \ row_idx = row_idx % col_len;\n            let mut row_idx = row_idx / col_len;\n\
    \            let mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx\
    \ % col_len;\n            let mut row_idx = row_idx / col_len;\n            let\
    \ mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n\
    \            let mut row_idx = row_idx / col_len;\n            let mut row_idx\
    \ = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n         \
    \   let mut row_idx = row_idx / col_len;\n            let mut row_idx = row_idx\
    \ - 1;\n            let mut row_idx = row_idx % col_len;\n            let mut\
    \ row_idx = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n \
    \           let mut row_idx = row_idx % col_len;\n            let mut row_idx\
    \ = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n         \
    \   let mut row_idx = row_idx % col_len;\n            let mut row_idx = row_idx\
    \ / col_len;\n            let mut row_idx = row_idx - 1;\n            let mut\
    \ row_idx = row_idx % col_len;\n            let mut row_idx = row_idx / col_len;\n\
    \            let mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx ",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut i = 0;\n \
    \   let mut j = 0;\n    while i < rows {\n        let mut row_sorted = vec![];\n\
    \        let mut col_sorted = vec![];\n        let mut row_coord = vec![];\n \
    \       let mut col_coord = vec![];\n        let mut j = 0;\n        while j <\
    \ cols {\n            if lst[i][j] == x {\n                row_sorted.push((i,\
    \ j));\n                col_sorted.push((j, i));\n                row_coord.push((i,\
    \ j));\n                col_coord.push((j, i));\n            }\n            j\
    \ += 1\n        }\n        row_sorted.sort_by_key(|&(x, y)| x.0);\n        col_sorted.sort_by_key(|&(x,\
    \ y)| y.0);\n        row_coord.sort_by_key(|&(x, y)| x.0);\n        col_coord.sort_by_key(|&(x,\
    \ y)| y.0);\n        coords.push(row_coord);\n        coords.push(col_coord);\n\
    \        row_sorted.sort_by_key(|&(x, y)| y.0);\n        col_sorted.sort_by_key(|&(x,\
    \ y)| x.0);\n        row_coord.sort_by_key(|&(x, y)| y.0);\n        col_coord.sort_by_key(|&(x,\
    \ y)| x.0);\n        coords.push(row_coord);\n        coords.push(col_coord);\n\
    \        i += 1;\n    }\n    coords", "    if lst.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut rows = lst.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \    rows.sort_by_key(|row| row.iter().cloned());\n    rows.sort_by_key(|row|\
    \ row.iter().cloned().rev());\n    let mut cols = rows.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \    cols.sort_by_key(|col| col.iter().cloned());\n    cols.sort_by_key(|col|\
    \ col.iter().cloned().rev());\n    let mut result = vec![];\n    for row in rows.iter()\
    \ {\n        let mut col = row.iter().cloned();\n        let mut found = false;\n\
    \        for col in cols.iter() {\n            if col.contains(&x) {\n       \
    \         result.push((row.iter().cloned(), col.iter().cloned()));\n         \
    \       found = true;\n                break;\n            }\n        }\n    \
    \    if !found {\n            result.push((row.iter().cloned(), col.iter().cloned()));\n\
    \        }\n    }\n    result", "    if lst.is_empty() {\n        vec![]\n   \
    \ } else {\n        let mut row: Vec<(isize, isize)> = vec![];\n        let mut\
    \ row_idx = 0;\n        for row_idx in 0..lst.len() {\n            let mut row_idx2\
    \ = row_idx;\n            let mut row_idx3 = row_idx;\n            let mut row_idx4\
    \ = row_idx;\n            let mut row_idx5 = row_idx;\n            let mut row_idx6\
    \ = row_idx;\n            let mut row_idx7 = row_idx;\n            let mut row_idx8\
    \ = row_idx;\n            let mut row_idx9 = row_idx;\n            let mut row_idx10\
    \ = row_idx;\n            let mut row_idx11 = row_idx;\n            let mut row_idx12\
    \ = row_idx;\n            let mut row_idx13 = row_idx;\n            let mut row_idx14\
    \ = row_idx;\n            let mut row_idx15 = row_idx;\n            let mut row_idx16\
    \ = row_idx;\n            let mut row_idx17 = row_idx;\n            let mut row_idx18\
    \ = row_idx;\n            let mut row_idx19 = row_idx;\n            let mut row_idx20\
    \ = row_idx;\n            let mut row_idx21 = row_idx;\n            let mut row_idx22\
    \ = row_idx;\n            let mut row_idx23 = row_idx;\n            let mut row_idx24\
    \ = row_idx;\n            let mut row_idx25 = row_idx;\n            let mut row_idx26\
    \ = row_idx;\n            let mut row_idx27 = row_idx;\n            let mut row_idx28\
    \ = row_idx;\n            let mut row_idx29 = row_idx;\n            let mut row_idx30\
    \ = row_idx;\n            let mut row_idx31 = row_idx;\n            let mut row_idx32\
    \ = row_idx;\n            let mut row_idx33 = row_idx;\n            let mut row_idx34\
    \ = row_idx;\n            let mut row_idx35 = row_idx;\n            let mut row_idx36\
    \ = row_idx;\n            let mut row_idx37 = row_idx;\n            let mut row_idx38\
    \ = row_idx;\n            let mut row_idx39 = row_idx;\n            let mut row_idx40\
    \ = row_idx;\n            let mut row_idx41 = row_idx;\n            let mut row_idx42\
    \ = row_idx;\n            let mut row_idx43 = row_idx;\n            let mut row_idx44\
    \ = row_idx;\n            let mu", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_max_idx =\
    \ 0;\n    let mut row_max = vec![];\n    for row in lst {\n        row_max.push(row.iter().max().unwrap());\n\
    \        if row_idx == x {\n            col_max_idx = row.iter().max().unwrap();\n\
    \            break;\n        }\n        col_num = row.iter().max().unwrap();\n\
    \        if col_num > col_max_idx {\n            col_max_idx = col_num;\n    \
    \    }\n        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut row_max\
    \ = 0;\n    let mut row_min = 0;\n    let mut col_sum = 0;\n    let mut col_product\
    \ = 0;\n    let mut col_product_max = 0;\n    let mut col_product_min = 0;\n \
    \   let mut col_product_sum = 0;\n    let mut col_product_product = 0;\n    let\
    \ mut col_product_product_max = 0;\n    let mut col_product_product_min = 0;\n\
    \    let mut col_product_product_sum = 0;\n    let mut col_product_product_product\
    \ = 0;\n    let mut col_product_product_product_max = 0;\n    let mut col_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_sum = 0;\n    let mut col_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_max = 0;\n    let mut\
    \ col_product_product_product_product_min = 0;\n    let mut col_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product = 0;\n    let\
    \ mut col_product_product_product_product_product_max = 0;\n    let mut col_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_sum = 0;\n   \
    \ let mut col_product_product_product_product_product_product = 0;\n    let mut\
    \ col_product_product_product_product_product_product_max = 0;\n    let mut col_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_sum =\
    \ 0;\n    let mut col_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut result = Vec::new();\n\
    \    for row in lst {\n        let mut row_result = Vec::new();\n        for col\
    \ in row.iter().rev() {\n            if col == x {\n                row_result.push((row.len(),\
    \ col.len()));\n            }\n        }\n        result.push(row_result);\n \
    \   }\n    result.sort_by(|a, b| b.iter().cmp(a.iter()).rev());\n    result.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).rev());\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = row_idx_max;\n    let mut col_max = 0;\n    let mut\
    \ col_min = col_max;\n    for row in lst {\n        let mut col = 0;\n       \
    \ let mut col_max = 0;\n        let mut col_min = col_max;\n        for col in\
    \ row {\n            if col == x {\n                row.push(col_max);\n     \
    \           row.push(col_min);\n                row_idx_max = row_idx;\n     \
    \           row_idx_min = row_idx;\n                col_max = col;\n         \
    \       col_min = col;\n            }\n            col_max = std::cmp::max(col_max,\
    \ col);\n            col_min = std::cmp::min(col_min, col);\n        }\n     \
    \   row.push(col_max);\n        row.push(col_min);\n        row_idx += 1;\n  \
    \  }\n    row.sort_by_key(|&x| x.0);\n    row.sort_by_key(|&x| x.1);\n    row",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        col_len = row.len();\n        if row_len\
    \ == x {\n            row.sort_by(|a, b| a.cmp(b));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            ", " \
    \   let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut\
    \ row_max = lst[0].len();\n    let mut col_max = lst[0].len();\n    while row_idx\
    \ < rows {\n        let mut row_min = row_max;\n        while col_idx < cols {\n\
    \            if row_idx < rows && col_idx < cols {\n                if row_idx\
    \ < rows {\n                    if row_idx < row_max {\n                     \
    \   if row_idx < row_min {\n                            row_min = row_idx;\n \
    \                       }\n                    }\n                }\n        \
    \        if col_idx < cols {\n                    if col_idx < col_max {\n   \
    \                     if col_idx < col_min {\n                            col_min\
    \ = col_idx;\n                        }\n                    }\n             \
    \   }\n            }\n            col_idx++;\n        }\n        row_idx++;\n\
    \        col_idx = 0;\n        row_max = row_min;\n        col_max = col_min;\n\
    \        result.push((row_min, col_min));\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| -x.1);\n    result", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n\
    \    let mut row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n\
    \    let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let\
    \ mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sort\
    \ = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sorted =\
    \ Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n\
    \    let mut col_sort = Vec::new();\n    let mut row_sorted = Vec::new();\n  \
    \  let mut col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n    let\
    \ mut col_sort = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut\
    \ col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sort =\
    \ Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n  \
    \  let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut\
    \ row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n\
    \    let mut col_sort = Vec::new();\n    let mut row_sorted = Vec::new();\n  \
    \  let mut col_sort = Vec::new();\n", "    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx = vec![];\n   \
    \ let mut col_sort_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut col_max = lst[0].len();\n    for row in lst {\n        let mut col_min\
    \ = col_max;\n        for col in row.iter() {\n            if col < col_min {\n\
    \                col_min = col;\n            }\n        }\n        if col_min\
    \ == col_max {\n            continue;\n        }\n        let mut row_idx = 0;\n\
    \        for col in row.iter() {\n            if col == x {\n                row_idx\
    \ += 1;\n            }\n        }\n        row.sort_by(|a, b| a.cmp(b));\n   \
    \     row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n \
    \       row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    if lst.is_empty() {\n\
    \        vec![]\n    } else {\n        let mut row: Vec<(isize, isize)> = vec![];\n\
    \        let mut row_idx = 0;\n        let mut row_idx2 = 0;\n        let mut\
    \ row_idx3 = 0;\n        let mut row_idx4 = 0;\n        let mut row_idx5 = 0;\n\
    \        let mut row_idx6 = 0;\n        let mut row_idx7 = 0;\n        let mut\
    \ row_idx8 = 0;\n        let mut row_idx9 = 0;\n        let mut row_idx10 = 0;\n\
    \        let mut row_idx11 = 0;\n        let mut row_idx12 = 0;\n        let mut\
    \ row_idx13 = 0;\n        let mut row_idx14 = 0;\n        let mut row_idx15 =\
    \ 0;\n        let mut row_idx16 = 0;\n        let mut row_idx17 = 0;\n       \
    \ let mut row_idx18 = 0;\n        let mut row_idx19 = 0;\n        let mut row_idx20\
    \ = 0;\n        let mut row_idx21 = 0;\n        let mut row_idx22 = 0;\n     \
    \   let mut row_idx23 = 0;\n        let mut row_idx24 = 0;\n        let mut row_idx25\
    \ = 0;\n        let mut row_idx26 = 0;\n        let mut row_idx27 = 0;\n     \
    \   let mut row_idx28 = 0;\n        let mut row_idx29 = 0;\n        let mut row_idx30\
    \ = 0;\n        let mut row_idx31 = 0;\n        let mut row_idx32 = 0;\n     \
    \   let mut row_idx33 = 0;\n        let mut row_idx34 = 0;\n        let mut row_idx35\
    \ = 0;\n        let mut row_idx36 = 0;\n        let mut row_idx37 = 0;\n     \
    \   let mut row_idx38 = 0;\n        let mut row_idx39 = 0;\n        let mut row_idx40\
    \ = 0;\n        let mut row_idx41 = 0;\n        let mut row_idx42 = 0;\n     \
    \   let mut row_idx43 = 0;\n        let mut row_idx44 = 0;\n        let mut row_idx45\
    \ = 0;\n        let mut row_idx46 = 0;\n        let mut row_idx47 = 0;\n     \
    \   let mut row_idx48 = 0;\n        let mut row_idx49 = 0;\n        let mut row_idx50\
    \ = 0;\n        let mut row_idx51 = 0;\n        let mut row_idx52 = 0;\n     \
    \   let mut row_idx53 = 0;\n        let mut row_idx54 = 0;\n        let mut row_idx55\
    \ = 0;\n        let mut row_idx56 = 0;\n        let mut row_idx57 = 0;\n     \
    \   let mut row_idx58 = 0;\n        let mut row_idx59 = 0;\n        let mut row_idx60\
    \ = 0;\n        let mut row_idx61", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_col_len = col_len;\n        while col_idx < row_col_len {\n        \
    \    if row_idx == row_idx {\n                let mut row_col = vec![];\n    \
    \            for _ in 0..col_len {\n                    row_col.push((row_idx,\
    \ col_idx));\n                    col_idx += 1;\n                }\n         \
    \       row.push(row_col);\n            } else {\n                if row_idx ==\
    \ row_idx {\n                    let mut row_col = vec![];\n                 \
    \   for _ in 0..col_len {\n                        row_col.push((row_idx, col_idx));\n\
    \                        col_idx += 1;\n                    }\n              \
    \      row.push(row_col);\n                } else {\n                    let mut\
    \ row_col = vec![];\n                    for _ in 0..col_len {\n             \
    \           row_col.push((row_idx, col_idx));\n                        col_idx\
    \ += 1;\n                    }\n                    row.push(row_col);\n     \
    \           }\n            }\n        }\n        col_idx = 0;\n        row_idx\
    \ += 1;\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n    row.sort_by_key(|&(_,\
    \ y)| y.1);\n    row", "    if lst.is_empty() {\n        return vec![];\n    }\n\
    \    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n  \
    \  let mut row_col = 0;\n    let mut row_col_max = lst.len();\n    let mut row_col_min\
    \ = row_col_max - 1;\n    let mut row_col_mid = row_col_max / 2;\n    let mut\
    \ row_col_mid_idx = row_col_mid;\n    let mut row_col_mid_idx_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_min = row_col_mid;\n    let mut row_col_mid_idx_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_max = row_col_mid;\n    let\
    \ mut row_col_mid_idx_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_max = row_col_mid;\n   \
    \ let mut row_col_mid_idx_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_mid_min = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    for row in lst {\n        let\
    \ mut row_sorted = vec![];\n        for elem in row.iter() {\n            if elem.0\
    \ == x {\n                row_sorted.push((elem.0, elem.1));\n            }\n\
    \        }\n        row_sorted.sort_by_key(|&(_, y)| y.0);\n        row_sorted.sort_by_key(|&(_,\
    \ y)| y.1);\n        row_sorted.reverse();\n        return row_sorted;\n    }\n\
    \    vec![]", "    let mut result = Vec::new();\n    for row in lst {\n      \
    \  let mut row_result = Vec::new();\n        for col in row.iter().rev() {\n \
    \           if col == x {\n                row_result.push((row.len(), col.len()));\n\
    \            }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|row|\
    \ row[0].cmp(&row[1]));\n    result.sort_by_key(|row| row[1].cmp(&row[0]));\n\
    \    result", "    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    lst.iter().enumerate().filter(|(i,\
    \ row)| {\n        if i == 0 {\n            true\n        } else {\n         \
    \   row.iter().any(|&x| x == x)\n        }\n    }).map(|(i, row)| {\n        (i,\
    \ row.iter().enumerate().filter(|(_, y)| y.1 == x).map(|(_, y)| y.0).collect())\n\
    \    }).collect()", "    let mut result = Vec::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else if row_idx < rows {\n        \
    \    col_idx += 1;\n        } else {\n            row_idx += 1;\n        }\n \
    \   }\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n   \
    \ let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n\
    \    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 =\
    \ 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_max = 0;\n    for row in lst {\n        let mut col_max = 0;\n     \
    \   for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        if col_max > x {\n            break;\n\
    \        }\n        row_idx += 1;\n    }\n    let mut row_max = row_idx;\n   \
    \ let mut col_min = col_max;\n    for row in lst {\n        let mut col_min =\
    \ 0;\n        for col in row {\n            if col < col_min {\n             \
    \   col_min = col;\n            }\n        }\n        if col_min < x {\n     \
    \       break;\n        }\n        row_max += 1;\n    }\n    let mut row_min =\
    \ row_idx;\n    let mut col_mid = col_max;\n    for row in lst {\n        let\
    \ mut col_mid = 0;\n        for col in row {\n            if col > col_mid {\n\
    \                col_mid = col;\n            }\n        }\n        if col_mid\
    \ < x {\n            break;\n        }\n        row_min += 1;\n    }\n    let\
    \ mut row_mid = row_idx;\n    let mut col_left = col_mid;\n    let mut col_right\
    \ = col_max;\n    for row in lst {\n        let mut col_left = 0;\n        for\
    \ col in row {\n            if col < col_left {\n                col_left = col;\n\
    \            }\n        }\n        if col_left < x {\n            break;\n   \
    \     }\n        row_mid += 1;\n    }\n    let mut row_right = row_idx;\n    let\
    \ mut col_top = col_mid;\n    let mut col_bottom = col_min;\n    for row in lst\
    \ {\n        let mut col_top = 0;\n        for col in row {\n            if col\
    \ > col_top {\n                col_top = col;\n            }\n        }\n    \
    \    if col_top > x {\n            break;\n        }\n        row_right += 1;\n\
    \    }\n    let mut row_top = row_idx;\n    let mut col_mid = col_min;\n    for\
    \ row in lst {\n        let mut col_mid = 0;\n        for col in row {\n     \
    \       if col < col_mid {\n                col_mid = col;\n            }\n  \
    \      }\n        if col_mid < x {\n            break;\n        }\n        row_top\
    \ += 1;\n    }\n    let mut row_bottom = row_idx;\n    let mut col_left = col_mid;\n\
    \    let mut col_right = col_mid;\n    for row in lst {\n        let mut ", " \
    \   let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n   \
    \ let mut row_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \    }\n    for row in lst {\n        if row_idx >= row.len() {\n            break;\n\
    \        }\n        if row_len == row.len() {\n            row_idx += 1;\n   \
    \         continue;\n        }\n        let mut row_idx2 = 0;\n        let mut\
    \ row_len2 = 0;\n        for row_idx2 in row {\n            row_len2 += 1;\n \
    \       }\n        if row_len2 < row_len {\n            break;\n        }\n  \
    \      if row_idx2 == x {\n            row_idx += 1;\n            continue;\n\
    \        }\n        if row_idx2 < x {\n            break;\n        }\n       \
    \ if row_idx2 == x {\n            row_idx += 1;\n            continue;\n     \
    \   }\n        if row_idx2 < x {\n            break;\n        }\n        if row_idx2\
    \ == x {\n            row_idx += 1;\n            continue;\n        }\n      \
    \  if row_idx2 < x {\n            break;\n        }\n        if row_idx2 == x\
    \ {\n            row_idx += 1;\n            continue;\n        }\n        if row_idx2\
    \ < x {\n            break;\n        }\n        if row_idx2 == x {\n         \
    \   row_idx += 1;\n            continue;\n        }\n        if row_idx2 < x {\n\
    \            break;\n        }\n        if row_idx2 == x {\n            row_idx\
    \ += 1;\n            continue;\n        }\n        if row_idx2 < x {\n       \
    \     break;\n        }\n        if row_idx2 == x {\n            row_idx += 1;\n\
    \            continue;\n        }\n        if row_idx2 < x {\n            break;\n\
    \        }\n        if row_idx2 == x {\n            row_idx += 1;\n          \
    \  continue;\n        }\n        if row_idx2 < x {\n            break;\n     \
    \   }\n        if row_idx2 == x {\n            row_idx += 1;\n            continue;\n\
    \        }\n        if row_idx2 < x {\n            break;\n        }\n       \
    \ if row_idx2 == x {\n            row_idx += 1;\n            continue;\n     \
    \   }\n        if row_idx2 < x {\n            break;\n        }\n        if row_idx2\
    \ == x {\n            row_idx += 1;\n            continue;\n        }\n      \
    \  if row_idx2 < x {\n            break;\n        }\n        if row_idx2 == x\
    \ {\n            row_idx += 1;\n            continue;\n        }\n        if row_idx2\
    \ < x {\n            break;\n        }\n        if row_idx2 == x {\n         \
    \   row_idx += 1;\n            continue;\n        }\n        if row_idx2 < x {\n\
    \            break;\n        }\n        if row_idx2 == x {\n            row_",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos\
    \ = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut\
    \ col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_len = 0;\n \
    \   let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx =\
    \ 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n\
    \    let mut row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut\
    \ col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n \
    \   let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len\
    \ = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut\
    \ col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n \
    \   let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mu", " \
    \   let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while\
    \ col_idx < cols {\n        if row_idx == rows {\n            break;\n       \
    \ }\n        let mut row_start = row_idx;\n        let mut row_end = row_idx;\n\
    \        let mut col_start = col_idx;\n        let mut col_end = col_idx;\n  \
    \      while row_end < rows && col_end < cols {\n            if row_end == rows\
    \ {\n                row_end += 1;\n                col_end += 1;\n          \
    \      continue;\n            }\n            if col_end == cols {\n          \
    \      row_end += 1;\n                col_end += 1;\n                continue;\n\
    \            }\n            if lst[row_end][col_end] == x {\n                result.push((row_start,\
    \ col_start));\n                row_end += 1;\n                col_end += 1;\n\
    \                continue;\n            }\n            row_end += 1;\n       \
    \     col_end += 1;\n        }\n        row_idx += 1;\n        col_idx += 1;\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n  \
    \  let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut col_pos_idx =\
    \ 0;\n    let mut row_pos_idx = 0;\n    let mut col_pos_idx2 = 0;\n    let mut\
    \ row_pos_idx2 = 0;\n    let mut col_pos_idx3 = 0;\n    let mut row_pos_idx3 =\
    \ 0;\n    let mut col_pos_idx4 = 0;\n    let mut row_pos_idx4 = 0;\n    let mut\
    \ col_pos_idx5 = 0;\n    let mut row_pos_idx5 = 0;\n    let mut col_pos_idx6 =\
    \ 0;\n    let mut row_pos_idx6 = 0;\n    let mut col_pos_idx7 = 0;\n    let mut\
    \ row_pos_idx7 = 0;\n    let mut col_pos_idx8 = 0;\n    let mut row_pos_idx8 =\
    \ 0;\n    let mut col_pos_idx9 = 0;\n    let mut row_pos_idx9 = 0;\n    let mut\
    \ col_pos_idx10 = 0;\n    let mut row_pos_idx10 = 0;\n    let mut col_pos_idx11\
    \ = 0;\n    let mut row_pos_idx11 = 0;\n    let mut col_pos_idx12 = 0;\n    let\
    \ mut row_pos_idx12 = 0;\n    let mut col_pos_idx13 = 0;\n    let mut row_pos_idx13\
    \ = 0;\n    let mut col_pos_idx14 = 0;\n    let mut row_pos_idx14 = 0;\n    let\
    \ mut col_pos_idx15 = 0;\n    let mut row_pos_idx15 = 0;\n    let mut col_pos_idx16\
    \ = 0;\n    let mut row_pos_idx16 = 0;\n    let mut col_pos_idx17 = 0;\n    let\
    \ mut row_pos_idx17 = 0;\n    let mut col_pos_idx18 = 0;\n    let mut row_pos_idx18\
    \ = 0;\n    let mut col_pos_idx19 = 0;\n    let mut row_pos_idx19 = 0;\n    let\
    \ mut col_pos_idx20 = 0;\n    let mut row_pos_idx20 = 0;\n    let mut col_pos_idx21\
    \ = 0;\n    let mut row_pos_idx21 = 0;\n    let mut col_pos_idx22 = 0;\n    let\
    \ mut row_pos_idx22 = 0;\n    let mut col_pos_idx23 = 0;\n    let mut row_pos_idx23\
    \ = 0;\n    let mut col_pos_idx24 = 0;\n    let mut row_pos_idx24 = 0;\n    let\
    \ mut col_pos_idx25 = 0;\n    let mut row_pos_idx25 = 0;\n    let mut col_pos_idx26\
    \ = 0;\n    let mut row_pos_idx26 = 0;\n    let ", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n\
    \        let mut row_coords = vec![];\n        let mut row_cols = vec![];\n  \
    \      for col in row {\n            if col == x {\n                row_coords.push((row,\
    \ col));\n            }\n            row_cols.push((col, row));\n        }\n \
    \       row_coords.sort_by(|a, b| a.1.cmp(&b.1));\n        row_coords.reverse();\n\
    \        row_cols.sort_by(|a, b| b.1.cmp(&a.1));\n        row_cols.reverse();\n\
    \        row_coords.reverse();\n        row_cols.reverse();\n        coords.push(row_coords);\n\
    \        rows.push(row_cols);\n        cols.push(row_cols);\n    }\n    coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    coords.reverse();\n    rows.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    rows.reverse();\n    cols.sort_by(|a, b| b.0.cmp(&a.0));\n    cols.reverse();\n\
    \    coords.reverse();\n    rows.reverse();\n    cols.reverse();\n    coords",
  "    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((col, row.len()));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by(|a, b| b.iter().rev().collect::<Vec<_>>().cmp(a.iter().rev().collect::<Vec<_>>()));\n\
    \    result.sort_by(|a, b| b.iter().collect::<Vec<_>>().cmp(a.iter().collect::<Vec<_>>()));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut\
    \ row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n\
    \    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize>\
    \ = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8:\
    \ Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut\
    \ row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n\
    \    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize>\
    \ = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15:\
    \ Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut\
    \ row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n\
    \    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize>\
    \ = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22:\
    \ Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut\
    \ row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n\
    \    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize>\
    \ = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29:\
    \ Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    for row in lst {\n        let mut cols = vec![];\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols.push(col);\n        }\n        rows.push(cols);\n\
    \    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.iter().map(|&(x, y)| x).collect()", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    while row_idx < row_len {\n        let\
    \ row_end = row_start + lst[row_idx].len();\n        while col_idx < col_len {\n\
    \            let col_end = col_start + lst[row_idx][col_idx].len();\n        \
    \    if row_end >= row_start && col_end >= col_start {\n                if lst[row_idx][col_idx]\
    \ == x {\n                    rows.push((row_idx, col_idx));\n               \
    \ }\n            }\n            col_idx += 1;\n        }\n        row_start +=\
    \ lst[row_idx].len();\n        col_idx = 0;\n        row_idx += 1;\n    }\n  \
    \  rows", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut row = Vec::<(isize,\
    \ isize)>::new();\n    for row in lst {\n        let mut col = Vec::<isize>::new();\n\
    \        for col in row {\n            if col == x {\n                row.push(col);\n\
    \            }\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.cmp(y));\n \
    \   row.sort_by_key(|&(x, y)| y.cmp(x));\n    row", "    let mut row = Vec::<(isize,\
    \ isize)>::new();\n    for col in lst {\n        if col[x] == x {\n          \
    \  row.push((col, x));\n        }\n    }\n    row.sort_by_key(|&(_, y)| y);\n\
    \    row.sort_by_key(|&(_, y)| -y);\n    row", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut\
    \ row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < rows {\n     \
    \   row_sorted.clear();\n        col_sorted.clear();\n        row_coords.clear();\n\
    \        col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut row_pos\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n \
    \   }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n  \
    \  }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n   \
    \ }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n\
    \    for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n \
    \   for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n  \
    \  for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n   \
    \ for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for\
    \ row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row\
    \ in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row in\
    \ lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row in lst\
    \ {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n\
    \        row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n \
    \       row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n  \
    \      row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n   \
    \     row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n    \
    \    row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n     \
    \   row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n      \
    \  row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n       \
    \ row_len += 1;\n        col_len += 1;\n    }\n    for row in lst {\n        row_len\
    \ += 1;\n        col_len += 1;\n    }\n    for row in lst {\n        row_len +=\
    \ 1;\n        col_len += 1;\n", "    let mut result = vec![];\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_coord\
    \ = vec![];\n        while col_idx < cols {\n            row_coord.push((row_idx,\
    \ col_idx));\n            col_idx += 1;\n        }\n        result.push(row_coord);\n\
    \        row_idx += 1;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mu", "    let mut rows = lst.len();\n  \
    \  let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < rows {\n        let mut row_sort =\
    \ vec![];\n        let mut col_sort = vec![];\n        let mut row_sorted = vec![];\n\
    \        let mut col_sorted = vec![];\n        while j < cols {\n            if\
    \ lst[i][j] == x {\n                row_sort.push((i, j));\n                col_sort.push((j,\
    \ i));\n                row_sorted.push((i, j));\n                col_sorted.push((j,\
    \ i));\n            }\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            ", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_max = lst.len();\n \
    \   let mut col_max = lst[0].len();\n    let mut row_min = 0;\n    let mut col_min\
    \ = 0;\n    let mut row_max_idx = 0;\n    let mut col_max_idx = 0;\n    let mut\
    \ row_min_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max_idx2 = 0;\n\
    \    let mut col_max_idx2 = 0;\n    let mut row_min_idx2 = 0;\n    let mut col_min_idx2\
    \ = 0;\n    let mut row_max_idx3 = 0;\n    let mut col_max_idx3 = 0;\n    let\
    \ mut row_min_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let mut row_max_idx4\
    \ = 0;\n    let mut col_max_idx4 = 0;\n    let mut row_min_idx4 = 0;\n    let\
    \ mut col_min_idx4 = 0;\n    let mut row_max_idx5 = 0;\n    let mut col_max_idx5\
    \ = 0;\n    let mut row_min_idx5 = 0;\n    let mut col_min_idx5 = 0;\n    let\
    \ mut row_max_idx6 = 0;\n    let mut col_max_idx6 = 0;\n    let mut row_min_idx6\
    \ = 0;\n    let mut col_min_idx6 = 0;\n    let mut row_max_idx7 = 0;\n    let\
    \ mut col_max_idx7 = 0;\n    let mut row_min_idx7 = 0;\n    let mut col_min_idx7\
    \ = 0;\n    let mut row_max_idx8 = 0;\n    let mut col_max_idx8 = 0;\n    let\
    \ mut row_min_idx8 = 0;\n    let mut col_min_idx8 = 0;\n    let mut row_max_idx9\
    \ = 0;\n    let mut col_max_idx9 = 0;\n    let mut row_min_idx9 = 0;\n    let\
    \ mut col_min_idx9 = 0;\n    let mut row_max_idx10 = 0;\n    let mut col_max_idx10\
    \ = 0;\n    let mut row_min_idx10 = 0;\n    let mut col_min_idx10 = 0;\n    let\
    \ mut row_max_idx11 = 0;\n    let mut col_max_idx11 = 0;\n    let mut row_min_idx11\
    \ = 0;\n    let mut col_min_idx11 = 0;\n    let mut row_max_idx12 = 0;\n    let\
    \ mut col_max_idx12 = 0;\n    let mut row_min_idx12 = 0;\n    let mut col_min_idx12\
    \ = 0;\n    let mut row_max_idx13 = 0;\n    let mut col_max_idx13 = 0;\n    let\
    \ mut row_min_idx13 = 0;\n    let mut col_min_idx13 = 0;", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 =\
    \ 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut result = Vec::new();\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_coord\
    \ = vec![(row_idx, col_idx)];\n        let mut col_coord = vec![(row_idx, col_idx)];\n\
    \        for _ in 0..col_len {\n            col_coord.push((row_idx, col_idx));\n\
    \        }\n        for _ in 0..col_len {\n            result.push((row_idx, col_idx));\n\
    \        }\n        row_idx += 1;\n        col_idx += 1;\n    }\n    result",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_max = lst.iter().map(|v| v.len()).max().unwrap();\n  \
    \  let mut col_max_idx = 0;\n    let mut col_max_val = lst.iter().map(|v| v.len()).max().unwrap();\n\
    \    let mut col_max_val_pos = 0;\n    let mut col_max_val_neg = 0;\n    let mut\
    \ col_max_val_neg_idx = 0;\n    let mut col_max_val_neg_val = 0;\n    let mut\
    \ col_max_val_neg_val_pos = 0;\n    let mut col_max_val_neg_val_neg = 0;\n   \
    \ let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_", "   \
    \ let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_end = row_start;\n        while col_idx < col_len {\n\
    \            if row_end == row_start {\n                row_end += 1;\n      \
    \      }\n            if row_end == row_idx {\n                row_end += 1;\n\
    \            }\n            if col_idx < col_len {\n                if row_end\
    \ == row_idx {\n                    row_end += 1;\n                }\n       \
    \         if row_end == row_idx {\n                    row_end += 1;\n       \
    \         }\n                if col_idx < col_len {\n                    if row_end\
    \ == row_idx {\n                        row_end += 1;\n                    }\n\
    \                    if row_end == row_idx {\n                        row_end\
    \ += 1;\n                    }\n                    if col_idx < col_len {\n \
    \                       if row_end == row_idx {\n                            row_end\
    \ += 1;\n                        }\n                        if row_end == row_idx\
    \ {\n                            row_end += 1;\n                        }\n  \
    \                      if col_idx < col_len {\n                            if\
    \ row_end == row_idx {\n                                row_end += 1;\n      \
    \                      }\n                            if row_end == row_idx {\n\
    \                                row_end += 1;\n                            }\n\
    \                            if col_idx < col_len {\n                        \
    \        if row_end == row_idx {\n                                    row_end\
    \ += 1;\n                                }\n                                if\
    \ row_end == row_idx {\n                                    row_end += 1;\n  \
    \                              }\n                                if col_idx <\
    \ col_len {\n                                    if row_end == row_idx {\n   \
    \                                     row_end += 1;\n                        \
    \            }\n                                    if row_end == row_idx {\n\
    \                                        row_end += 1;\n                     \
    \               }\n                                    if col_idx < col_len {\n\
    \                                        if row_end == row_idx {\n           \
    \                                 row_end += 1;\n                            \
    \            }\n                                        if row_end == row_idx\
    \ {\n                                            row_end += 1;\n             \
    \                           }\n                                        if col_idx\
    \ < col_len {\n                                            if row_end == row_idx\
    \ {\n                                                row_end += 1;\n         \
    \                                   }\n                                      \
    \      if row_end == row_idx {\n                                             \
    \   row_end += 1;\n                                            }\n           \
    \                                 if col_idx < col_len {\n                   \
    \                             if row_end == row_idx {\n                      \
    \                              row_end += 1;\n                               \
    \                 }\n                                                if row_end\
    \ == row_idx {\n                                                    row_end +=\
    \ 1;\n                                                }\n                    \
    \                            if col_idx < col_len {\n                        \
    \                            if row_end == row_idx {\n                       \
    \                                 ", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut result = Vec::new();\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_max = rows - 1;\n    let mut\
    \ col_max = cols - 1;\n    while row_idx <= row_max && col_idx <= col_max {\n\
    \        if row_idx < row_max && col_idx < col_max {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx++;\n\
    \                col_idx++;\n            } else if lst[row_idx][col_idx] > x {\n\
    \                row_idx++;\n            } else {\n                col_idx++;\n\
    \            }\n        } else {\n            break;\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx] == x {\n\
    \            result.push((row_idx, col_idx));\n            row_idx += 1;\n   \
    \         col_idx += 1;\n        } else {\n            col_idx += 1;\n       \
    \ }\n    }\n    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mu", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n\
    \    let mut row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n\
    \    let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < rows\
    \ {\n        row_coord.clear();\n        col_coord.clear();\n        row_coord.push(i);\n\
    \        col_coord.push(j);\n        while j < cols {\n            if lst[i][j]\
    \ == x {\n                coords.push((row_coord.clone(), col_coord.clone()));\n\
    \                row_coord.push(j);\n                col_coord.push(j);\n    \
    \            i += 1;\n                j += 1;\n                break;\n      \
    \      }\n            i += 1;\n            j += 1;\n        }\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.sort_by_key(|&(x,\
    \ y)| x.1.cmp(&y.1));\n    coords.sort_by_key(|&(x, y)| y.1.cmp(&x.1));\n    coords",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sor", "    let mut result = Vec::new();\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 1;\n    let mut col_idx = 1;\n    while row_idx < rows {\n       \
    \ while col_idx < cols {\n            if lst[row_idx][col_idx] == x {\n      \
    \          result.push((row_idx, col_idx));\n                break;\n        \
    \    }\n            col_idx += 1;\n        }\n        col_idx = 0;\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  for row in lst {\n        let mut row_sorted = vec![];\n        for elem in\
    \ row.iter().cloned() {\n            if elem == x {\n                row_sorted.push((elem.0,\
    \ elem.1));\n            }\n        }\n        row_sorted.sort_by_key(|&(_, y)|\
    \ y.0);\n        row_sorted.sort_by_key(|&(_, y)| -y.1);\n        row_sorted.reverse();\n\
    \        row_sorted.iter().cloned().collect()\n    }\n    row", "    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let mut\
    \ cols = vec![];\n        for col in row {\n            if col == x {\n      \
    \          cols.push((col, row.len()));\n            }\n        }\n        rows.push(cols);\n\
    \    }\n    rows.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    rows", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 =\
    \ 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut result = vec![];\n    for row in lst {\n \
    \       let mut row_result = vec![];\n        for col in row.iter().rev() {\n\
    \            if col == x {\n                row_result.push((row, col));\n   \
    \         }\n        }\n        result.push(row_result);\n    }\n    result.sort_by(|a,\
    \ b| a.iter().rev().cmp(b.iter().rev()));\n    result.sort_by(|a, b| b.iter().rev().cmp(a.iter().rev()));\n\
    \    result", "    if lst.is_empty() {\n        vec![]\n    } else {\n       \
    \ let mut row = vec![];\n        let mut row_idx = vec![];\n        let mut row_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx = vec![];\n        let mut\
    \ row_idx_idx_idx_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n \
    \       let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n        let\
    \ mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        let mut row_coords = vec![];\n        let mut row_cols\
    \ = vec![];\n        for coord in row.iter() {\n            if coord.0 > x {\n\
    \                break;\n            }\n            row_coords.push(coord.0);\n\
    \            row_cols.push(coord.1);\n        }\n        coords.push(row_coords);\n\
    \        rows.push(row_cols);\n        cols.push(row_cols.iter().cloned().reverse());\n\
    \    }\n    coords.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    cols.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    coords.iter().map(|x| x.iter().cloned()).collect()", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_len += row.last().unwrap();\n    }\n    for row in lst {\n      \
    \  let mut row_idx = 0;\n        let mut row_len = 0;\n        let mut col_len\
    \ = 0;\n        for col in row {\n            row_len += 1;\n            col_len\
    \ += 1;\n            if col == x {\n                row.insert(row_idx, row_len);\n\
    \                row.insert(row_idx, col_len);\n                row_idx += 1;\n\
    \                row_len += 1;\n                col_len += 1;\n            }\n\
    \        }\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(x));\n    row.sort_by_key(|&(_,\
    \ y)| -y.cmp(x));\n    row", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut row_",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut col_pos_len_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx = 0;", "   \
    \ let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let\
    \ mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx < rows &&\
    \ col_idx < cols {\n        if row_idx < rows && col_idx < cols {\n          \
    \  if lst[row_idx][col_idx] == x {\n                result.push((row_idx, col_idx));\n\
    \                row_idx += 1;\n                col_idx += 1;\n            }\n\
    \        }\n        if row_idx < rows {\n            row_idx += 1;\n         \
    \   row_max = rows;\n            col_idx = 1;\n            col_max = cols;\n \
    \       }\n        if col_idx < cols {\n            col_idx += 1;\n          \
    \  row_idx = 1;\n            row_max = rows;\n            col_idx = 1;\n     \
    \       col_max = cols;\n        }\n    }\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        if row_len == x {\n            row.sort();\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut result = Vec::new();\n    let mut row = 0;\n\
    \    let mut col = 0;\n    while row < rows {\n        let mut found = false;\n\
    \        for col in 0..cols {\n            if lst[row][col] == x {\n         \
    \       found = true;\n                break;\n            }\n        }\n    \
    \    if found {\n            result.push((row, col));\n        }\n        row\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst {\n  \
    \      row_idx += 1;\n        col_max = row.iter().max().unwrap();\n    }\n  \
    \  let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n       \
    \ col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n    let\
    \ mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n        col_max\
    \ = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n    for row in\
    \ lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n     \
    \   col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n  \
    \  for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n     \
    \   col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n  \
    \  for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();", "    let mut result = Vec::<(isize,\
    \ isize)>::new();\n    for row in lst {\n        let mut row_result = Vec::<(isize,\
    \ isize)>::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row, col));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by_key(|row| row.0);\n\
    \    result.sort_by_key(|row| row.1, |a, b| b.1.cmp(&a.1));\n    result", "  \
    \  let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    for row_idx in 0..lst.len() {\n        let row_len\
    \ = lst[row_idx].len();\n        if row_len > x {\n            break;\n      \
    \  }\n        let mut row_cols: Vec<(isize, isize)> = Vec::new();\n        for\
    \ col_idx in 0..row_len {\n            if col_idx >= x {\n                break;\n\
    \            }\n            row_cols.push((row_idx, col_idx));\n        }\n  \
    \      row.push(row_cols);\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n    row.sort_by_key(|&(_,\
    \ y)| -y.1);\n    row", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    for row in lst {\n        let mut cols = vec![];\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols.push(col);\n        }\n        rows.push(row);\n\
    \        cols.push(cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.iter().map(|&(_, c)| c.clone()).collect()",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n\
    \    let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_len = 0;\n    let mut row_pos_pos_idx = 0;\n \
    \   let mut row_pos_pos_len = 0;\n    let mut col_pos_pos_pos_idx = 0;\n    let\
    \ mut col_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_idx = 0;\n    let\
    \ mut row_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_idx = 0;\n   \
    \ let mut col_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_idx =\
    \ 0;\n    let mut row_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut\
    \ row_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let\
    \ mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let\
    \ mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = ", "    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut result = Vec::new();\n    let mut row = 0;\n  \
    \  let mut col = 0;\n    while row < rows {\n        let mut found = false;\n\
    \        while !found && col < cols {\n            if lst[row][col] == x {\n \
    \               result.push((row, col));\n                found = true;\n    \
    \        }\n            col += 1\n        }\n        row += 1;\n        col =\
    \ 0;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \        rows.push(row.iter().cloned().collect::<Vec<_>>());\n    }\n    cols.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    let mut result = vec![];\n    for row in rows {\n        let mut cols = vec![];\n\
    \        for col in cols {\n            if col[0] == x {\n                result.push((row,\
    \ col));\n            }\n        }\n    }\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n   \
    \ let mut col_lens = vec![];\n    let mut col_starts = vec![];\n    let mut col_ends\
    \ = vec![];\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n\
    \    let mut col_ends_idx = 0;\n    let mut row_lens = vec![];\n    let mut row_starts\
    \ = vec![];\n    let mut row_ends = vec![];\n    let mut row_lens_idx = 0;\n \
    \   let mut row_starts_idx = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx\
    \ = 0;\n    let mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let\
    \ mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx\
    \ = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let\
    \ mut col_ends_idx = 0;\n    let mut row_lens_idx = 0;\n    let mut row_starts_idx\
    \ = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx = 0;\n    let\
    \ mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let mut row_lens_idx\
    \ = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx = 0;\n    let\
    \ mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let mut col_ends_idx\
    \ = 0;\n    let mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let\
    \ mut row_ends_idx = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx\
    \ = 0;\n    let mut col_ends_idx = 0;\n    let mut row_lens_idx = 0;\n    let\
    \ mut row_starts_idx = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx\
    \ = 0;\n    let mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let\
    \ mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx\
    \ = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let\
    \ mut col_", "    let mut result = vec![];\n    let mut rows = lst.len();\n  \
    \  let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == row_idx {\n          \
    \      row_result.push((row_idx, col_idx));\n            }\n            if col_idx\
    \ < cols {\n                if row_idx == row_idx {\n                    row_result.push((row_idx,\
    \ col_idx));\n                }\n                if col_idx < cols {\n       \
    \             if row_idx == row_idx {\n                        row_result.push((row_idx,\
    \ col_idx));\n                    }\n                    if col_idx < cols {\n\
    \                        if row_idx == row_idx {\n                           \
    \ row_result.push((row_idx, col_idx));\n                        }\n          \
    \              if col_idx < cols {\n                            if row_idx ==\
    \ row_idx {\n                                row_result.push((row_idx, col_idx));\n\
    \                            }\n                            if col_idx < cols\
    \ {\n                                if row_idx == row_idx {\n               \
    \                     row_result.push((row_idx, col_idx));\n                 \
    \               }\n                                if col_idx < cols {\n     \
    \                               if row_idx == row_idx {\n                    \
    \                    row_result.push((row_idx, col_idx));\n                  \
    \                  }\n                                    if col_idx < cols {\n\
    \                                        if row_idx == row_idx {\n           \
    \                                 row_result.push((row_idx, col_idx));\n     \
    \                                   }\n                                      \
    \  if col_idx < cols {\n                                            if row_idx\
    \ == row_idx {\n                                                row_result.push((row_idx,\
    \ col_idx));\n                                            }\n                \
    \                            if col_idx < cols {\n                           \
    \                     if row_idx == row_idx {\n                              \
    \                      row_result.push((row_idx, col_idx));\n                \
    \                                }\n                                         \
    \       if col_idx < cols {\n                                                \
    \    if row_idx == row_idx {\n                                               \
    \         row_result.push((row_idx, col_idx));\n                             \
    \                       }\n                                                  \
    \  if col_idx < cols {\n                                                     \
    \   if row_idx == row_idx {\n                                                \
    \            row_result.push((row_idx, col_idx));\n                          \
    \                              }\n                                           \
    \             if col_idx < cols {\n                                          \
    \                  if row_idx == row_idx {\n                                 \
    \                               row_result.push((row_idx, col_idx));\n       \
    \                                                     }\n                    \
    \                                        if col_idx < cols {\n               \
    \                                                 if row_idx == row_idx {\n  \
    \                                                                  row_result.push((row_idx,\
    \ col_idx));\n                                                               \
    \ }\n                                                                if col_idx\
    \ < cols {\n                                                                 \
    \   if row_idx == row_idx {\n                                                \
    \                        row_result.push((row_idx, col_idx));\n              \
    \                                                      }\n                   \
    \                                                 if col_id", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_len += row.iter().map(|x| x).sum();\n    }\n    let mut col_pos =\
    \ 0;\n    for row in lst {\n        let mut col_pos = 0;\n        for col in row.iter().map(|x|\
    \ x) {\n            if col_pos == col_len {\n                break;\n        \
    \    }\n            if x == x {\n                row.insert(col_pos, x);\n   \
    \             col_pos += 1;\n            }\n        }\n        row_idx += 1;\n\
    \    }\n    row.sort_by_key(|x| x.0);\n    row.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n\
    \    row", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = ",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut col_max = lst[0].len();\n    for row in lst {\n\
    \        row_idx += 1;\n        if row_idx == x {\n            break;\n      \
    \  }\n        let mut col_max = row.len();\n        for col in row {\n       \
    \     col_idx += 1;\n            if col_idx > col_max {\n                break;\n\
    \            }\n            row.push(col);\n        }\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| y.cmp(&-x));\n    row", "   \
    \ let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n \
    \   let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n\
    \    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 =\
    \ 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min =\
    \ 0;\n    let mut col_max2 = 0;\n    let mut col_min2 = 0;\n    let mut col_max3\
    \ = 0;\n    let mut col_min3 = 0;\n    let mut col_max4 = 0;\n    let mut col_min4\
    \ = 0;\n    let mut col_max5 = 0;\n    let mut col_min5 = 0;\n    let mut col_max6\
    \ = 0;\n    let mut col_min6 = 0;\n    let mut col_max7 = 0;\n    let mut col_min7\
    \ = 0;\n    let mut col_max8 = 0;\n    let mut col_min8 = 0;\n    let mut col_max9\
    \ = 0;\n    let mut col_min9 = 0;\n    let mut col_max10 = 0;\n    let mut col_min10\
    \ = 0;\n    let mut col_max11 = 0;\n    let mut col_min11 = 0;\n    let mut col_max12\
    \ = 0;\n    let mut col_min12 = 0;\n    let mut col_max13 = 0;\n    let mut col_min13\
    \ = 0;\n    let mut col_max14 = 0;\n    let mut col_min14 = 0;\n    let mut col_max15\
    \ = 0;\n    let mut col_min15 = 0;\n    let mut col_max16 = 0;\n    let mut col_min16\
    \ = 0;\n    let mut col_max17 = 0;\n    let mut col_min17 = 0;\n    let mut col_max18\
    \ = 0;\n    let mut col_min18 = 0;\n    let mut col_max19 = 0;\n    let mut col_min19\
    \ = 0;\n    let mut col_max20 = 0;\n    let mut col_min20 = 0;\n    let mut col_max21\
    \ = 0;\n    let mut col_min21 = 0;\n    let mut col_max22 = 0;\n    let mut col_min22\
    \ = 0;\n    let mut col_max23 = 0;\n    let mut col_min23 = 0;\n    let mut col_max24\
    \ = 0;\n    let mut col_min24 = 0;\n    let mut col_max25 = 0;\n    let mut col_min25\
    \ = 0;\n    let mut col_max26 = 0;\n    let mut col_min26 = 0;\n    let mut col_max27\
    \ = 0;\n    let mut col_min27 = 0;\n    let mut col_max28 = 0;\n    let mut col_min28\
    \ = 0;\n    let mut col_max29 = 0;\n    let mut col_min29 = 0;\n    let mut col_max30\
    \ = 0;\n    let mut col_min30 = 0;\n    let mu", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut result = vec![];\n    let mut row_idx\
    \ = vec![];\n    let mut col_idx = vec![];\n    let mut row_sort = vec![];\n \
    \   let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_reverse = vec![];\n    let mut\
    \ col_sort_reverse = vec![];\n    let mut row_sort_reverse_idx = vec![];\n   \
    \ let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx = vec![];\n\
    \    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    while rows > 0 || cols > 0 {\n        if rows\
    \ > 0 {\n            let row = lst[rows].iter().cloned().collect::<Vec<_>>();\n\
    \            coords.sort_by_key(|&(_, y)| y.cmp(&x));\n            coords.sort_by_key(|&(_,\
    \ y)| -y.cmp(&x));\n            rows += 1;\n            cols -= 1;\n        }\n\
    \        if cols > 0 {\n            let col = lst[0].iter().cloned().collect::<Vec<_>>();\n\
    \            coords.sort_by_key(|&(_, y)| y.cmp(&x));\n            coords.sort_by_key(|&(_,\
    \ y)| -y.cmp(&x));\n            cols += 1;\n            rows -= 1;\n        }\n\
    \    }\n    coords", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < rows {\n        let mut row_coord = vec![];\n        let mut col_coord =\
    \ vec![];\n        while j < cols {\n            if i == rows {\n            \
    \    row_coord.push((i, j));\n                col_coord.push((i, j));\n      \
    \          i += 1;\n                j = 0;\n            } else {\n           \
    \     row_coord.push((i, j));\n                col_coord.push((i, j));\n     \
    \           i += 1;\n                j += 1;\n            }\n        }\n     \
    \   coords.push(row_coord);\n        coords.push(col_coord);\n    }\n    coords.sort_by_key(|&(_,\
    \ y)| y.0);\n    coords.sort_by_key(|&(_, y)| y.1);\n    coords", "    let mut\
    \ row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n        col_max\
    \ = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_", "    if lst.is_empty()\
    \ {\n        vec![]\n    } else {\n        let mut rows = lst.len();\n       \
    \ let mut cols = lst[0].len();\n        let mut coords = vec![];\n        let\
    \ mut row_coords = vec![];\n        let mut col_coords = vec![];\n        let\
    \ mut row_sort = vec![];\n        let mut col_sort = vec![];\n        let mut\
    \ row_sort_idx = vec![];\n        let mut col_sort_idx = vec![];\n        let\
    \ mut row_sort_idx2 = vec![];\n        let mut col_sort_idx2 = vec![];\n     \
    \   let mut row_sort_idx3 = vec![];\n        let mut col_sort_idx3 = vec![];\n\
    \        let mut row_sort_idx4 = vec![];\n        let mut col_sort_idx4 = vec![];\n\
    \        let mut row_sort_idx5 = vec![];\n        let mut col_sort_idx5 = vec![];\n\
    \        let mut row_sort_idx6 = vec![];\n        let mut col_sort_idx6 = vec![];\n\
    \        let mut row_sort_idx7 = vec![];\n        let mut col_sort_idx7 = vec![];\n\
    \        let mut row_sort_idx8 = vec![];\n        let mut col_sort_idx8 = vec![];\n\
    \        let mut row_sort_idx9 = vec![];\n        let mut col_sort_idx9 = vec![];\n\
    \        let mut row_sort_idx10 = vec![];\n        let mut col_sort_idx10 = vec![];\n\
    \        let mut row_sort_idx11 = vec![];\n        let mut col_sort_idx11 = vec![];\n\
    \        let mut row_sort_idx12 = vec![];\n        let mut col_sort_idx12 = vec![];\n\
    \        let mut row_sort_idx13 = vec![];\n        let mut col_sort_idx13 = vec![];\n\
    \        let mut row_sort_idx14 = vec![];\n        let mut col_sort_idx14 = vec![];\n\
    \        let mut row_sort_idx15 = vec![];\n        let mut col_sort_idx15 = vec![];\n\
    \        let mut row_sort_idx16 = vec![];\n        let mut col_sort_idx16 = vec![];\n\
    \        let mut row_sort_idx17 = vec![];\n        let mut col_sort_idx17 = vec![];\n\
    \        let mut row_sort_idx18 = vec![];\n        let mut col_sort_idx18 = vec![];\n\
    \        let mut row_sort_idx19 = vec![];\n        let mut col_sort_idx19 = vec![];\n\
    \        let ", "    let mut result = Vec::<(isize, isize)>::new();\n    for row\
    \ in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n     \
    \   for (i, val) in row.iter().enumerate() {\n            if i == x {\n      \
    \          row_result.push((i, val));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    for row in lst {\n        row_len += row.len();\n        col_len\
    \ = row.len();\n        if row_idx >= row_len {\n            break;\n        }\n\
    \        if col_idx >= col_len {\n            break;\n        }\n        if row[x]\
    \ < col[col_idx] {\n            break;\n        }\n        row.swap(0, col_idx);\n\
    \        row_idx += 1;\n        col_idx += 1;\n    }\n    row", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_idx = 0;\n        while col_idx < col_len {\n            if row_idx\
    \ == row_idx {\n                if lst[row_idx][col_idx] == x {\n            \
    \        row.push((row_idx, col_idx));\n                }\n            }\n   \
    \         col_idx += 1;\n        }\n        row_idx += 1;\n        col_idx = 0;\n\
    \        row_len = lst.len();\n        col_len = lst[0].len();\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)|\
    \ x.1 > y.1);\n    row.iter().map(|&(x, y)| vec![(x.0, y.0)]).collect()", "  \
    \  let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max2\
    \ = 0;\n    let mut col_min2 = 0;\n    let mut col_max3 = 0;\n    let mut col_min3\
    \ = 0;\n    let mut col_max4 = 0;\n    let mut col_min4 = 0;\n    let mut col_max5\
    \ = 0;\n    let mut col_min5 = 0;\n    let mut col_max6 = 0;\n    let mut col_min6\
    \ = 0;\n    let mut col_max7 = 0;\n    let mut col_min7 = 0;\n    let mut col_max8\
    \ = 0;\n    let mut col_min8 = 0;\n    let mut col_max9 = 0;\n    let mut col_min9\
    \ = 0;\n    let mut col_max10 = 0;\n    let mut col_min10 = 0;\n    let mut col_max11\
    \ = 0;\n    let mut col_min11 = 0;\n    let mut col_max12 = 0;\n    let mut col_min12\
    \ = 0;\n    let mut col_max13 = 0;\n    let mut col_min13 = 0;\n    let mut col_max14\
    \ = 0;\n    let mut col_min14 = 0;\n    let mut col_max15 = 0;\n    let mut col_min15\
    \ = 0;\n    let mut col_max16 = 0;\n    let mut col_min16 = 0;\n    let mut col_max17\
    \ = 0;\n    let mut col_min17 = 0;\n    let mut col_max18 = 0;\n    let mut col_min18\
    \ = 0;\n    let mut col_max19 = 0;\n    let mut col_min19 = 0;\n    let mut col_max20\
    \ = 0;\n    let mut col_min20 = 0;\n    let mut col_max21 = 0;\n    let mut col_min21\
    \ = 0;\n    let mut col_max22 = 0;\n    let mut col_min22 = 0;\n    let mut col_max23\
    \ = 0;\n    let mut col_min23 = 0;\n    let mut col_max24 = 0;\n    let mut col_min24\
    \ = 0;\n    let mut col_max25 = 0;\n    let mut col_min25 = 0;\n    let mut col_max26\
    \ = 0;\n    let mut col_min26 = 0;\n    let mut col_max27 = 0;\n    let mut col_min27\
    \ = 0;\n    let mut col_max28 = 0;\n    let mut col_min28 = 0;\n    let mut col_max29\
    \ = 0;\n    let mut col_min29 = 0;\n    let mut col_max30 = 0;\n", "    let mut\
    \ result = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n    let mut\
    \ col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_mid = row_len;\n \
    \   let mut col_mid = col_len;\n    while row_idx < row_len {\n        let mut\
    \ row_end = row_len;\n        let mut col_end = col_len;\n        let mut row_mid\
    \ = row_len;\n        let mut col_mid = col_len;\n        while row_idx < row_len\
    \ && col_idx < col_len {\n            if row_idx < row_mid {\n               \
    \ row_end = row_mid;\n                row_mid = row_idx;\n            }\n    \
    \        if col_idx < col_mid {\n                col_end = col_mid;\n        \
    \        col_mid = col_idx;\n            }\n            if row_idx == row_mid\
    \ && col_idx == col_mid {\n                break;\n            }\n           \
    \ row_idx += 1;\n            col_idx += 1;\n        }\n        if row_idx < row_mid\
    \ {\n            row_end = row_mid;\n        }\n        if col_idx < col_mid {\n\
    \            col_end = col_mid;\n        }\n        let row = row_start..row_end;\n\
    \        let col = col_start..col_end;\n        result.extend(row.iter().cloned().zip(col.iter().cloned()).collect::<Vec<_>>());\n\
    \        row_start = row_mid;\n        col_start = col_mid;\n        row_mid -=\
    \ 1;\n        col_mid -= 1;\n    }\n    result.sort();\n    result.reverse();\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut result = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n\
    \    let mut col_idx = 1;\n    let mut row_max = rows - 1;\n    let mut col_max\
    \ = cols - 1;\n    let mut row_min = row_max - 1;\n    let mut col_min = col_max\
    \ - 1;\n    while row_idx < rows && col_idx < cols {\n        if row_idx < row_max\
    \ && col_idx < col_max {\n            if lst[row_idx][col_idx] == x {\n      \
    \          result.push((row_idx, col_idx));\n                row_idx++;\n    \
    \            col_idx++;\n            } else if row_idx < row_max {\n         \
    \       row_idx++;\n            } else {\n                col_idx++;\n       \
    \     }\n        } else if row_idx < row_max {\n            row_idx++;\n     \
    \       row_max = row_max - 1;\n            row_min = row_min - 1;\n        }\
    \ else {\n            col_idx++;\n            col_max = col_max - 1;\n       \
    \     col_min = col_min - 1;\n        }\n    }\n    result", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len\
    \ = lst.len();\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let\
    \ mut col_len_idx_max = lst.len();\n    let mut col_len_idx_min = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut row_len_idx_max = lst.len();\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;", " \
    \   let mut coords = Vec::new();\n    for row in lst {\n        let mut coord\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                coord.push((row.len() - 1, col.len() - 1));\n            }\n\
    \        }\n        coords.insert(0, coord);\n    }\n    coords.sort_by_key(|coord|\
    \ coord[0]);\n    coords.sort_by_key(|coord| coord[1]).reverse();\n    coords",
  "    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row = vec![];\n\
    \        for y in lst.iter().rev() {\n            if y.len() == x {\n        \
    \        row.push((y.iter().rev().next().unwrap(), 0));\n            }\n     \
    \   }\n        row.sort_by(|a, b| a.1.cmp(&b.1));\n        row.sort_by(|a, b|\
    \ b.1.cmp(&a.1));\n        row\n    }", "    let mut rows = vec![];\n    let mut\
    \ cols = vec![];\n    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \        rows.push(row.clone());\n    }\n    sort_rows(&mut rows);\n    sort_cols(&mut\
    \ cols);\n    let mut result = vec![];\n    for row in rows {\n        let mut\
    \ col = cols[row.iter().cloned().collect::<Vec<_>>().len()].clone();\n       \
    \ let mut found = false;\n        for row in col {\n            if *row == x {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if found {\n            result.push((row.clone(), col.clone()));\n\
    \        }\n    }\n    result.sort_by(|a, b| b.1.iter().cmp(&a.1.iter()));\n \
    \   result.sort_by(|a, b| b.0.iter().cmp(&a.0.iter()));\n    result", "    let\
    \ mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut col_coords\
    \ = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord =\
    \ Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < rows {\n        while j < cols {\n        \
    \    if lst[i][j] == x {\n                row_coord.push((i, j));\n          \
    \      col_coord.push((i, j));\n                coords.push((i, j));\n       \
    \         i += 1;\n                j += 1;\n            } else {\n           \
    \     j += 1;\n            }\n        }\n        i += 1;\n        j = 0;\n   \
    \ }\n    row_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    col_coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    row_coords.reverse();\n\
    \    col_coords.reverse();\n    coords.reverse();\n    coords.iter().map(|&(x,\
    \ y)| {\n        (row_coords.iter().find(|&(_, y)| y == y).unwrap().0, col_coords.iter().find(|&(_,\
    \ y)| y == y).unwrap().0)\n    }).collect()", "    let mut result = Vec::new();\n\
    \    for row in lst {\n        let mut row_result = Vec::new();\n        for col\
    \ in row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    if lst.is_empty() {\n        vec![]\n    } else {\n       \
    \ let mut row = vec![];\n        for el in lst {\n            let mut col = vec![];\n\
    \            for el2 in el {\n                if el2 == x {\n                \
    \    col.push((el.len(), el2.len()));\n                }\n            }\n    \
    \        row.push(col);\n        }\n        row.sort_by_key(|el| el.iter().cloned().collect::<Vec<_>>());\n\
    \        row.sort_by_key(|el| el.iter().rev().collect::<Vec<_>>());\n        row\n\
    \    }", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let\
    \ mut col_min_idx = 0;\n    let mut row_max = lst.len();\n    let mut row_min\
    \ = lst.len();\n    let mut col_max = lst.len();\n    let mut col_min = lst.len();\n\
    \    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n\
    \    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max\
    \ = lst.len();\n    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n\
    \    let mut col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut row_max = lst.len();\n    let mut row_min = lst.len();\n \
    \   let mut col_max = lst.len();\n    let mut col_min = lst.len();\n    let mut\
    \ row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut\
    \ col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = lst.len();\n\
    \    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n    let mut\
    \ col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n \
    \   let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut row_max = lst.len();\n    let mut row_min = lst.len();\n \
    \   let mut col_max = lst.len();\n    let mut col_min = lst.len();\n    let mut\
    \ row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut\
    \ col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = lst.len();\n\
    \    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n    let mut\
    \ col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n \
    \   let mu", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    for row in lst {\n        let mut cols = row.len();\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols -= 1;\n        }\n        rows -= 1;\n\
    \    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords", "    let mut lst = lst.clone();\n    let\
    \ mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut\
    \ col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2 = 0;\n    while\
    \ row_idx < lst.len() {\n        let mut row_idx2 = 0;\n        while col_idx\
    \ < lst[row_idx].len() {\n            let mut col_idx2 = 0;\n            while\
    \ row_idx2 < lst.len() {\n                if col_idx2 < lst[row_idx2].len() {\n\
    \                    if lst[row_idx2][col_idx2] == x {\n                     \
    \   row.push((row_idx, col_idx));\n                        row_idx2 += 1;\n  \
    \                      col_idx2 += 1;\n                    } else {\n        \
    \                break;\n                    }\n                } else {\n   \
    \                 break;\n                }\n            }\n            col_idx\
    \ += 1;\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x, y)|\
    \ x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n\
    \    row.sort_by_key(|&(x, y)| y.1);\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min =\
    \ 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut col_max_idx3 =\
    \ 0;\n    let mut col_min_idx3 = 0;\n    let mut col_max_idx4 = 0;\n    let mut\
    \ col_min_idx4 = 0;\n    let mut col_max_idx5 = 0;\n    let mut col_min_idx5 =\
    \ 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6 = 0;\n    let mut\
    \ col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n    let mut col_max_idx8 =\
    \ 0;\n    let mut col_min_idx8 = 0;\n    let mut col_max_idx9 = 0;\n    let mut\
    \ col_min_idx9 = 0;\n    let mut col_max_idx10 = 0;\n    let mut col_min_idx10\
    \ = 0;\n    let mut col_max_idx11 = 0;\n    let mut col_min_idx11 = 0;\n    let\
    \ mut col_max_idx12 = 0;\n    let mut col_min_idx12 = 0;\n    let mut col_max_idx13\
    \ = 0;\n    let mut col_min_idx13 = 0;\n    let mut col_max_idx14 = 0;\n    let\
    \ mut col_min_idx14 = 0;\n    let mut col_max_idx15 = 0;\n    let mut col_min_idx15\
    \ = 0;\n    let mut col_max_idx16 = 0;\n    let mut col_min_idx16 = 0;\n    let\
    \ mut col_max_idx17 = 0;\n    let mut col_min_idx17 = 0;\n    let mut col_max_idx18\
    \ = 0;\n    let mut col_min_idx18 = 0;\n    let mut col_max_idx19 = 0;\n    let\
    \ mut col_min_idx19 = 0;\n    let mut col_max_idx20 = 0;\n    let mut col_min_idx20\
    \ = 0;\n    let mut col_max_idx21 = 0;\n    let mut col_min_idx21 = 0;\n    let\
    \ mut col_max_idx22 = 0;\n    let mut col_min_idx22 = 0;\n    let mut col_max_idx23\
    \ = 0;\n    let mut col_min_idx23 = 0;\n    let mut col_max_idx24 = 0;\n    let\
    \ mut col_min_idx24 = 0;\n    let mut col_max_idx25 = 0;\n    let mut col_min_idx25\
    \ = 0;\n    let mut col_max_idx26 = 0;\n    let mut col_min_idx26 = 0;", "   \
    \ let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n \
    \   let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut row_idx_sum\
    \ = 0;\n    let mut row_idx_sum2 = 0;\n    let mut row_idx_sum3 = 0;\n    let\
    \ mut row_idx_sum4 = 0;\n    let mut row_idx_sum5 = 0;\n    let mut row_idx_sum6\
    \ = 0;\n    let mut row_idx_sum7 = 0;\n    let mut row_idx_sum8 = 0;\n    let\
    \ mut row_idx_sum9 = 0;\n    let mut row_idx_sum10 = 0;\n    let mut row_idx_sum11\
    \ = 0;\n    let mut row_idx_sum12 = 0;\n    let mut row_idx_sum13 = 0;\n    let\
    \ mut row_idx_sum14 = 0;\n    let mut row_idx_sum15 = 0;\n    let mut row_idx_sum16\
    \ = 0;\n    let mut row_idx_sum17 = 0;\n    let mut row_idx_sum18 = 0;\n    let\
    \ mut row_idx_sum19 = 0;\n    let mut row_idx_sum20 = 0;\n    let mut row_idx_sum21\
    \ = 0;\n    let mut row_idx_sum22 = 0;\n    let mut row_idx_sum23 = 0;\n    let\
    \ mut row_idx_sum24 = 0;\n    let mut row_idx_sum25 = 0;\n    let mut row_idx_sum26\
    \ = 0;\n    let mut row_idx_sum27 = 0;\n    let mut row_idx_sum28 = 0;\n    let\
    \ mut row_idx_sum29 = 0;\n    let mut row_idx_sum30 = 0;\n    let mut row_idx_sum31\
    \ = 0;\n    let mut row_idx_sum32 = 0;\n    let mut row_idx_sum33 = 0;\n    let\
    \ mut row_idx_sum34 = 0;\n    let mut row_idx_sum35 = 0;\n    let mut row_idx_sum36\
    \ = 0;\n    let mut row_idx_sum37 = 0;\n    let mut row_idx_sum38 = 0;\n    let\
    \ mut row_idx_sum39 = 0;\n    let mut row_idx_sum40 = 0;\n    let mut row_idx_sum41\
    \ = 0;\n    let mut row_idx_sum42 = 0;\n    let mut row_idx_sum43 = 0;\n    let\
    \ mut row_idx_sum44 = 0;\n    let mut row_idx_sum45 = 0;\n    let mut row_idx_sum46\
    \ = 0;\n    let mut row_idx_sum47 = 0;\n    let mut row_idx_sum48 = 0;\n    let\
    \ mut row_idx_sum49 = 0;\n    let mut row_idx_sum50 = 0;\n    let mut row_idx_sum51\
    \ = 0;\n    let mut row_idx_sum52 = 0;\n    let mut row_idx_sum53 = 0;", "   \
    \ let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    while row < rows {\n        while col < cols\
    \ {\n            if lst[row][col] == x {\n                coords.push((row, col));\n\
    \                break;\n            }\n            col += 1;\n        }\n   \
    \     row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(x, y)| x.0);\n\
    \    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n    coords", " \
    \   let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut col_idx2 = 0;\n    while row_idx < lst.len() {\n        let mut row_idx2\
    \ = 0;\n        while col_idx < lst[row_idx].len() {\n            let mut col_idx2\
    \ = 0;\n            while row_idx2 < lst.len() {\n                if row_idx2\
    \ == row_idx {\n                    let mut row_idx2 = 0;\n                  \
    \  while col_idx2 < lst[row_idx2].len() {\n                        if col_idx2\
    \ == col_idx {\n                            row.push((row_idx, col_idx));\n  \
    \                          break;\n                        }\n               \
    \         col_idx2 += 1;\n                    }\n                    break;\n\
    \                }\n                row_idx2 += 1;\n            }\n          \
    \  col_idx += 1;\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)|\
    \ x.1 > y.1);\n    row.sort_by_key(|&(x, y)| x.1 < y.1);\n    row", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor", "    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2 = 0;\n   \
    \ let mut row_idx3 = 0;\n    let mut col_idx3 = 0;\n    let mut row_idx4 = 0;\n\
    \    let mut col_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut col_idx5 =\
    \ 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut col_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut col_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut col_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut col_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut col_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut col_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut col_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut col_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut col_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut col_idx31 = 0;\n    let mut row_idx32 = 0;\n", "    if lst.is_empty()\
    \ {\n        vec![]\n    } else {\n        let mut row: Vec<(isize, isize)> =\
    \ vec![];\n        let mut row_idx = 0;\n        let mut row_idx_max = 0;\n  \
    \      for row in lst {\n            let mut row_idx = 0;\n            let mut\
    \ row_idx_max = 0;\n            for col in row {\n                if col == x\
    \ {\n                    row_idx += 1;\n                }\n                if\
    \ row_idx > row_idx_max {\n                    row_idx_max = row_idx;\n      \
    \          }\n            }\n            row.sort_by_key(|&x| x.0);\n        \
    \    row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n    \
    \        row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x| x.0);\n\
    \            row.sort_by_key(|&x| x.", "    let mut row: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = lst.len();\n  \
    \  let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max = 0;", "    let mut row: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let\
    \ mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n  \
    \  let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n\
    \    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut result = Vec::<(isize, isize)>::new();\n \
    \   for row in lst {\n        let mut row_result = Vec::<(isize, isize)>::new();\n\
    \        for col in row.iter().rev() {\n            if col == x {\n          \
    \      row_result.push((row, col));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_, y)|\
    \ y.1);\n    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let\
    \ mut col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut\
    \ col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted\
    \ = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord =\
    \ Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted =\
    \ Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n\
    \    let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n  \
    \  let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n  \
    \  let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let\
    \ mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_coord =\
    \ Vec::new();\n    let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n \
    \   let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n  \
    \  let mut col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n   \
    \ let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut row = 0;\n\
    \    let mut col = 0;\n    while row < rows {\n        while col < cols {\n  \
    \          if lst[row][col] == x {\n                coords.push((row, col));\n\
    \                break;\n            }\n            col += 1;\n        }\n   \
    \     row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(x, y)| x.0);\n\
    \    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n    coords", " \
    \   let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for cell in row {\n            if cell == x {\n     \
    \           row_result.push((row, cell));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a,\
    \ b| b.1.cmp(&a.1));\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n\
    \    for row in lst {\n        let mut col_max = 0;\n        let mut col_min =\
    \ 0;\n        for col in row {\n            if col > col_max {\n             \
    \   col_max = col;\n            }\n            if col < col_min {\n          \
    \      col_min = col;\n            }\n        }\n        if col_max > col_min\
    \ {\n            row.push((row_idx, col_max));\n            row_idx += 1;\n  \
    \      }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1 > y.1);\n    row.iter().map(|&(x,\
    \ y)| x.1).collect()", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = Vec::new();\n    for row in lst {\n        let mut cols\
    \ = row.len();\n        for col in row {\n            if col == x {\n        \
    \        coords.push((row, col));\n            }\n            cols -= 1;\n   \
    \     }\n        rows -= 1;\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.reverse();\n    coords",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows && col_idx < cols {\n        if row_idx < rows {\n          \
    \  let row_start = row_idx;\n            let row_end = row_idx + 1;\n        \
    \    while row_end < rows && lst[row_end][col_idx] == x {\n                row_end\
    \ += 1;\n            }\n            let row_end = row_end == rows ? rows : row_end;\n\
    \            for row_idx in row_start..row_end {\n                result.push((row_idx,\
    \ col_idx));\n            }\n        }\n        if col_idx < cols {\n        \
    \    let col_start = col_idx;\n            let col_end = col_idx + 1;\n      \
    \      while col_end < cols && lst[row_idx][col_end] == x {\n                col_end\
    \ += 1;\n            }\n            let col_end = col_end == cols ? cols : col_end;\n\
    \            for col_idx in col_start..col_end {\n                result.push((row_idx,\
    \ col_idx));\n            }\n        }\n    }\n    result", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    for row in lst {\n        let mut col_max\
    \ = 0;\n        let mut col_min = 0;\n        for col in row {\n            if\
    \ col > col_max {\n                col_max = col;\n            }\n           \
    \ if col < col_min {\n                col_min = col;\n            }\n        }\n\
    \        if col_min == col_max {\n            row_idx += 1;\n        }\n     \
    \   if row_idx > 0 {\n            let mut row_max = row_idx;\n            let\
    \ mut row_min = row_idx;\n            for col in row {\n                if col\
    \ > row_max {\n                    row_max = col;\n                }\n       \
    \         if col < row_min {\n                    row_min = col;\n           \
    \     }\n            }\n            if row_min == row_max {\n                col_max\
    \ += 1;\n            }\n        }\n        row.push((row_idx, col_max));\n   \
    \ }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n\
    \    row.iter().map(|&(x, y)| x.1).collect()", "    let mut row: Vec<(isize, isize)>\
    \ = vec![];\n    let mut row_idx = 0;\n    let mut col_max = lst[0].len();\n \
    \   let mut col_min = col_max - 1;\n    let mut col_sum = 0;\n    let mut row_sum\
    \ = 0;\n    let mut row_idx = 0;\n    for row in lst {\n        let mut col_sum\
    \ = 0;\n        let mut row_sum = 0;\n        let mut col_max = 0;\n        let\
    \ mut col_min = 0;\n        let mut row_idx = 0;\n        for col in row {\n \
    \           if col == x {\n                row_idx += 1;\n                col_sum\
    \ += 1;\n                if col_sum > col_max {\n                    col_max =\
    \ col_sum;\n                }\n                if col_sum < col_min {\n      \
    \              col_min = col_sum;\n                }\n            }\n        }\n\
    \        row_sum += row_idx;\n        if row_sum > row_max {\n            row_max\
    \ = row_sum;\n        }\n        if row_sum < row_min {\n            row_min =\
    \ row_sum;\n        }\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut row_idx_max_col = 0;\n    let mut row_idx_min_col = 0;\n \
    \   let mut row_idx_max_row = 0;\n    let mut row_idx_min_row = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_row = 0;\n    let\
    \ mut col_min_row = 0;\n    let mut col_max_col = 0;\n    let mut col_min_col\
    \ = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut row_idx2_max = 0;\n    let mut row_idx2_min = 0;\n    let mut row_idx2_max_col\
    \ = 0;\n    let mut row_idx2_min_col = 0;\n    let mut row_idx2_max_row = 0;\n\
    \    let mut row_idx2_min_row = 0;\n    let mut col_max2 = 0;\n    let mut col_min2\
    \ = 0;\n    let mut col_max_row2 = 0;\n    let mut col_min_row2 = 0;\n    let\
    \ mut col_max_col2 = 0;\n    let mut col_min_col2 = 0;\n    let mut col_max_idx2\
    \ = 0;\n    let mut col_min_idx2 = 0;\n    let mut row_idx2_max2 = 0;\n    let\
    \ mut row_idx2_min2 = 0;\n    let mut row_idx2_max_col2 = 0;\n    let mut row_idx2_min_col2\
    \ = 0;\n    let mut row_idx2_max_row2 = 0;\n    let mut row_idx2_min_row2 = 0;\n\
    \    let mut col_max3 = 0;\n    let mut col_min3 = 0;\n    let mut col_max_row3\
    \ = 0;\n    let mut col_min_row3 = 0;\n    let mut col_max_col3 = 0;\n    let\
    \ mut col_min_col3 = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3\
    \ = 0;\n    let mut row_idx2_max3 = 0;\n    let mut row_idx2_min3 = 0;\n    let\
    \ mut row_idx2_max_col3 = 0;\n    let mut row_idx2_min_col3 = 0;\n    let mut\
    \ row_idx2_max_row3 = 0;\n    let mut row_idx2_min_row3 = 0;\n    let mut col_max4\
    \ = 0;\n    let mut col_min4 = 0;\n    let mut col_max_row4 = 0;\n    let mut\
    \ col_min_row4 = 0;\n    let mut col_max_col4 = 0;\n    let mut col_min_col4 =\
    \ 0;\n    let mut col_max_idx", "    let mut result = Vec::new();\n    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 1;\n\
    \    let mut col_idx = 1;\n    let mut row_start = 0;\n    let mut col_start =\
    \ 0;\n    let mut row_end = rows;\n    let mut col_end = cols;\n    while row_idx\
    \ < rows && col_idx < cols {\n        if row_idx < rows && col_idx < cols {\n\
    \            if lst[row_idx][col_idx] == x {\n                result.push((row_start,\
    \ col_idx));\n                row_idx += 1;\n                col_idx += 1;\n \
    \           }\n            row_idx += 1;\n            col_idx += 1;\n        }\n\
    \        if row_idx < rows {\n            row_start = row_idx;\n            row_end\
    \ -= 1;\n        }\n        if col_idx < cols {\n            col_start = col_idx;\n\
    \            col_end -= 1;\n        }\n    }\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx =\
    \ 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mu", "    let\
    \ mut row = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize,\
    \ isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sort_reversed = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec", "    let mut result = Vec::new();\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ while col_idx < cols {\n            if lst[row_idx][col_idx] == x {\n      \
    \          result.push((row_idx, col_idx));\n                break;\n        \
    \    }\n            col_idx += 1;\n        }\n        col_idx = 0;\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  for row in lst {\n        let mut row_sorted = vec![];\n        for col in\
    \ row.iter().rev() {\n            row_sorted.push((col, row.iter().filter(|&x|\
    \ x == x).count()));\n        }\n        row_sorted.sort_by_key(|&(_, count)|\
    \ -count);\n        row_sorted.sort_by_key(|&(_, count)| -count);\n        row_sorted.reverse();\n\
    \    }\n    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n\
    \        row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n   \
    \ }\n    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.reverse();\n    let mut row_sorted = vec![];\n\
    \    for col in row.iter().rev() {\n        row_sorted.push((col, row.iter().filter(|&x|\
    \ x == x).count()));\n    }\n    row_sorted.sort_by_key(|&(_, count)| -count);\n\
    \    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.reverse();\n\
    \    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n       \
    \ row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n    }\n   \
    \ row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.reverse();\n    let mut row_sorted = vec![];\n\
    \    for col in row.iter().rev() {\n        row_sorted.push((col, row.iter().filter(|&x|\
    \ x == x).count()));\n    }\n    row_sorted.sort_by_key(|&(_, count)| -count);\n\
    \    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.reverse();\n\
    \    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n       \
    \ row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n    }\n   \
    \ row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.reverse();\n    let mut row_sorted = vec![];\n\
    \    for col in row.iter().rev() {\n        row_sorted.push((col, row.iter().",
  "    let mut result = Vec::new();\n    for row in lst {\n        let mut row = row.clone();\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    for row in row.iter().rev() {\n            if row.1 == x {\n            \
    \    result.push((row.0, row.1));\n                break;\n            }\n   \
    \     }\n    }\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut col_max = lst[0].len();\n\
    \    for row in lst {\n        let mut col_max = row.len();\n        if col_max\
    \ > col_max {\n            col_max = col_max;\n        }\n        if col_idx >\
    \ col_max {\n            break;\n        }\n        if row[idx] == x {\n     \
    \       row.push((row_idx, col_idx));\n            row_idx += 1;\n           \
    \ col_idx = 0;\n        } else {\n            col_idx += 1;\n        }\n    }\n\
    \    row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| {\n\
    \        y.cmp(&x.reverse())\n    });\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for\
    \ row in lst {\n        let mut col_max = 0;\n        for col in row {\n     \
    \       if col > col_max {\n                col_max = col;\n            }\n  \
    \      }\n        if col_max > x {\n            break;\n        }\n        row.push((row_idx,\
    \ col_max));\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n\
    \    row.sort_by_key(|&(_, y)| -y.1);\n    row", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    for row\
    \ in lst {\n        coords.push(row.iter().cloned().enumerate().map(|(i, j)| (i,\
    \ j)).collect());\n    }\n    coords.sort_by_key(|coord| coord.0);\n    coords.sort_by_key(|coord|\
    \ coord.1, |a, b| b.cmp(a));\n    for coord in coords.iter().take(rows) {\n  \
    \      if coord.0 == x {\n            return coord.1.iter().cloned().enumerate().map(|(i,\
    \ j)| (i, j)).collect();\n        }\n    }\n    vec![]", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut\
    \ row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n    let mut\
    \ row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_coord =\
    \ Vec::new();\n    let mut col_coord = Vec::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    while i < rows {\n        row_sort.push(i);\n\
    \        row_coords.push((i, 0));\n        col_sort.push(j);\n        col_coords.push((j,\
    \ 0));\n        i += 1;\n        j += 1;\n    }\n    while j < cols {\n      \
    \  row_sort.push(j);\n        row_coords.push((j, 0));\n        col_sort.push(i);\n\
    \        col_coords.push((i, 0));\n        j += 1;\n    }\n    while i < rows\
    \ {\n        while j < cols {\n            if row_sort[i] < row_sort[j] {\n  \
    \              row_sorted.push(row_coords[i]);\n                row_sorted.push(row_coords[j]);\n\
    \                row_coords.swap(i, j);\n                i += 1;\n           \
    \     j += 1;\n            } else if row_sort[i] > row_sort[j] {\n           \
    \     row_sorted.push(row_coords[j]);\n                row_sorted.push(row_coords[i]);\n\
    \                row_coords.swap(i, j);\n                i += 1;\n           \
    \     j += 1;\n            } else {\n                row_sorted.push(row_coords[i]);\n\
    \                row_sorted.push(row_coords[j]);\n                row_coords.swap(i,\
    \ j);\n                i += 1;\n                j += 1;\n            }\n     \
    \   }\n        j = 0;\n    }\n    while j < cols {\n        while i < rows {\n\
    \            if col_sort[j] < col_sort[i] {\n                col_sorted.push(col_coords[j]);\n\
    \                col_sorted.push(col_coords[i]);\n                col_coords.swap(i,\
    \ j);\n                i += 1;\n                j += 1;\n            } else if\
    \ col_sort[j] > col_sort[i] {\n                col_sorted.push(col_coords[i]);\n\
    \                col_sorted.push(col_coords[j]);\n                col_coords.swap(i,\
    \ j);\n                i += 1;\n                j += 1;\n            } else {\n\
    \                col_sorted.push(col_coords[i]);\n                col_sorted.push(col_coords[j]);\n\
    \                col_coords.swap(i, j);\n                i += 1;\n           \
    \     j += ", "    if lst.is_empty() {\n        vec![]\n    } else {\n       \
    \ let mut row = vec![];\n        let mut row_idx = 1;\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut row_len\
    \ = lst.len();\n        let mut row_len = lst.len();\n        let mut ", "   \
    \ let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    for row in lst {\n        let mut cols = row.len();\n       \
    \ for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols -= 1;\n        }\n        rows -= 1;\n\
    \    }\n    coords.sort_by_key(|&(_, col)| col);\n    coords.sort_by_key(|&(_,\
    \ col)| -col);\n    coords", "    let mut result = vec![];\n    for row in lst\
    \ {\n        let mut row = row.clone();\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        for (i, &x) in row.iter().enumerate()\
    \ {\n            if x == x {\n                result.push((i, x));\n         \
    \   }\n        }\n    }\n    result.sort_by_key(|&(_, y)| y.1);\n    result",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut ",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n  \
    \  let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n\
    \    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 =\
    \ 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coord", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    for row\
    \ in lst {\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                coords.push((row, col));\n            }\n        }\n    }\n \
    \   coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> =\
    \ vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut rows:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut ", "    let mut result = Vec::new();\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut col_start =\
    \ 0;\n    while row_idx < row_len {\n        let mut row_end = row_idx;\n    \
    \    while row_end < row_len && row_idx == row_end {\n            row_end++;\n\
    \        }\n        let mut col_end = col_idx;\n        while col_end < col_len\
    \ && col_idx == col_end {\n            col_end++;\n        }\n        if row_end\
    \ == row_idx {\n            result.push((row_idx, col_idx));\n            row_idx\
    \ += 1;\n            col_idx = 1;\n        } else {\n            if col_end ==\
    \ col_idx {\n                result.push((row_idx, col_idx));\n              \
    \  row_idx += 1;\n                col_idx = 1;\n            } else {\n       \
    \         let mut row_end = row_idx;\n                while row_end < row_len\
    \ && row_idx == row_end {\n                    row_end++;\n                }\n\
    \                let mut col_end = col_idx;\n                while col_end < col_len\
    \ && col_idx == col_end {\n                    col_end++;\n                }\n\
    \                let mut row_start = row_idx;\n                while row_start\
    \ < row_len && row_idx == row_start {\n                    row_start++;\n    \
    \            }\n                let mut col_start = col_idx;\n               \
    \ while col_start < col_len && col_idx == col_start {\n                    col_start++;\n\
    \                }\n                let mut row_end = row_idx;\n             \
    \   while row_end < row_len && row_idx == row_end {\n                    row_end++;\n\
    \                }\n                let mut col_end = col_idx;\n             \
    \   while col_end < col_len && col_idx == col_end {\n                    col_end++;\n\
    \                }\n                let mut row_start = row_idx;\n           \
    \     while row_start < row_len && row_idx == row_start {\n                  \
    \  row_start++;\n                }\n                let mut col_start = col_idx;\n\
    \                while col_start < col_len && col_idx == col_start {\n       \
    \             col_start++;\n                }\n                let mut row_end\
    \ = row_idx;\n                while row_end < row_len && row_idx == row_end {\n\
    \                    row_end++;\n                }\n                let mut col_end\
    \ = col_idx;\n                while col_end < col_len && col_idx == col_end {\n\
    \                    col_end++;\n                }\n                let mut row_start\
    \ = row_idx;\n                while row_start < row_len && ", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n\
    \    let mut row = 0;\n    let mut col = 0;\n    while row < rows {\n        if\
    \ col < cols {\n            if lst[row][col] == x {\n                coords.push((row,\
    \ col));\n            }\n            col += 1;\n        } else {\n           \
    \ row += 1;\n            col = 0;\n        }\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n \
    \   coords", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    let mut row_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        if row_len > x {\n            break;\n        }\n   \
    \     rows.push(row.iter().cloned().skip(x).collect::<Vec<_>>());\n        row_idx\
    \ += 1;\n    }\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n \
    \   rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    rows", "    let\
    \ mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coord",
  "    let mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n \
    \   while row_idx < row_len {\n        row_sorted.push(row_idx);\n        col_sorted.push(col_idx);\n\
    \        if row_idx < row_len - 1 {\n            for col in 0..col_len - 1 {\n\
    \                if col < col_len - 1 && lst[row_idx][col] > lst[row_idx + 1][col]\
    \ {\n                    col_idx -= 1;\n                    col_sorted.push(col_idx);\n\
    \                }\n            }\n        }\n        row_idx += 1;\n        col_idx\
    \ = 0;\n        row_sorted = vec![];\n        col_sorted = vec![];\n    }\n  \
    \  let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    while row_idx < row_len {\n        row_sorted.push(row_idx);\n\
    \        col_sorted.push(col_idx);\n        if row_idx < row_len - 1 {\n     \
    \       for col in 0..col_len - 1 {\n                if col < col_len - 1 && lst[row_idx][col]\
    \ > lst[row_idx + 1][col] {\n                    col_idx -= 1;\n             \
    \       col_sorted.push(col_idx);\n                }\n            }\n        }\n\
    \        row_idx += 1;\n        col_idx = 0;\n        row_sorted = vec![];\n \
    \       col_sorted = vec![];\n    }\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n \
    \   while row_idx < row_len {\n        row_sorted.push(row_idx);\n        col_sorted.push(col_idx);\n\
    \        if row_idx < row_len - 1 {\n            for col in 0..col_len - 1 {\n\
    \                if col < col_len - 1 && lst[row_idx][col] > lst[row_idx + 1][col]\
    \ {\n                    col_idx -= 1;\n                    col_sorted.push(col_idx);\n\
    \                }\n            }\n        }\n        row_", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    for row in lst {\n        col_num +=\
    \ row.len();\n        if col_num == x {\n            break;\n        }\n     \
    \   row_idx += 1;\n        col_num_idx = 0;\n    }\n    for row in lst {\n   \
    \     row.sort_by_key(|&x| {\n            col_num_idx += 1;\n            col_num_idx\
    \ - x;\n        });\n        row.sort_by_key(|&x| {\n            col_num_idx -\
    \ x;\n        });\n        row.sort_by_key(|&x| {\n            col_num_idx + 1;\n\
    \        });\n    }\n    row", "    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut coords = Vec::new();\n    let mut row_coords =\
    \ Vec::new();\n    let mut col_coords = Vec::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < rows {\n        let mut row_coord = Vec::new();\n\
    \        let mut col_coord = Vec::new();\n        let mut row_i = 0;\n       \
    \ let mut col_i = 0;\n        while row_i < rows && col_i < cols {\n         \
    \   if row_i == i {\n                row_coord.push((i, row_i));\n           \
    \     row_i += 1;\n                col_coord.push((col_i, col_i));\n         \
    \       col_i += 1;\n            } else {\n                row_coord.push((row_i,\
    \ row_i));\n                row_i += 1;\n                col_coord.push((col_i,\
    \ col_i));\n                col_i += 1;\n            }\n        }\n        coords.push(row_coord);\n\
    \        coords.push(col_coord);\n        i += 1;\n        j += 1;\n    }\n  \
    \  coords.sort_by_key(|&(_, y)| y);\n    coords.sort_by_key(|&(_, y)| y, |&(_,\
    \ y)| -y);\n    coords.iter().map(|&(_, y)| y).collect()", "    let mut rows:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst\
    \ {\n        row_len += row.len();\n        if row_len == x {\n            rows.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            row_len -= 1;\n        }\n\
    \        for col in row {\n            col_len += 1;\n            if col_len ==\
    \ x {\n                col_idx -= 1;\n                col_len -= 1;\n        \
    \    }\n        }\n    }\n    rows\n        .iter()\n        .sort_by(|a, b| a.1.cmp(&b.1))\n\
    \        .sort_by(|a, b| b.0.cmp(&a.0));\n    rows\n        .iter()\n        .map(|(_,\
    \ col)| col.iter().cloned().collect::<Vec<_>>())\n        .collect()", "    let\
    \ mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n \
    \   for row_idx in 0..lst.len() {\n        row_len = lst[row_idx].len();\n   \
    \     for col_pos_idx in 0..row_len {\n            col_len = lst[row_idx][col_pos_idx];\n\
    \            if col_len == x {\n                row.push((row_idx, col_pos_idx));\n\
    \            }\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n    row.sort_by_key(|&(x, y)|\
    \ y.1);\n    row", "    let mut result = Vec::new();\n    for row in lst {\n \
    \       let mut row_result = Vec::new();\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                row_result.push((row.len(), col.len()));\n\
    \            }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|x|\
    \ x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    result",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n   \
    \ let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_", "    let mut row: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut\
    \ col_len = 0;\n    for row in lst {\n        row_len += row.len();\n    }\n \
    \   for row in lst {\n        col_len += row.iter().map(|x| x).sum();\n    }\n\
    \    for row in lst {\n        for col in row.iter().map(|x| x) {\n          \
    \  if col == x {\n                row.push(row_idx);\n                row_idx\
    \ += 1;\n            }\n        }\n    }\n    row.sort_by_key(|x| x.0);\n    row.sort_by_key(|x|\
    \ x.1, |a, b| b.1.cmp(&a.1));\n    row.iter().map(|x| x.0).collect()", "    let\
    \ mut result = vec![];\n    for row in lst {\n        let mut row_result = vec![];\n\
    \        for col in row.iter().rev() {\n            if col == x {\n          \
    \      row_result.push((row, col));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|row| row.iter().rev());\n    result.sort_by_key(|row|\
    \ row.iter().rev());\n    result", "    let mut coords = vec![];\n    for row\
    \ in lst {\n        let mut coord = vec![];\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                coord.push((row.len(), col.len()));\n\
    \            }\n        }\n        coords.push_back(coord);\n    }\n    coords.sort_by(|a,\
    \ b| a.iter().cmp(&b.iter()).reverse());\n    coords.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    coords", "    let mut result = Vec::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx\
    \ < rows && col_idx < cols {\n        if lst[row_idx][col_idx] == x {\n      \
    \      result.push((row_idx, col_idx));\n            row_idx++;\n            col_idx++;\n\
    \        } else if row_idx < rows {\n            row_idx++;\n            row_max\
    \ = rows;\n        } else {\n            col_idx++;\n            col_max = cols;\n\
    \        }\n    }\n    if row_idx < rows {\n        result.push((row_idx, col_idx));\n\
    \    }\n    if col_idx < cols {\n        result.push((row_idx, col_idx));\n  \
    \  }\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_start = 0;\n    let mut col_end = 0;\n    let mut col_start2 = 0;\n\
    \    let mut col_end2 = 0;\n    let mut row_start = 0;\n    let mut row_end =\
    \ 0;\n    let mut col_start3 = 0;\n    let mut col_end3 = 0;\n    let mut row_start2\
    \ = 0;\n    let mut row_end2 = 0;\n    let mut col_start4 = 0;\n    let mut col_end4\
    \ = 0;\n    let mut row_start3 = 0;\n    let mut row_end3 = 0;\n    let mut col_start5\
    \ = 0;\n    let mut col_end5 = 0;\n    let mut row_start4 = 0;\n    let mut row_end4\
    \ = 0;\n    let mut col_start6 = 0;\n    let mut col_end6 = 0;\n    let mut row_start5\
    \ = 0;\n    let mut row_end5 = 0;\n    let mut col_start7 = 0;\n    let mut col_end7\
    \ = 0;\n    let mut row_start6 = 0;\n    let mut row_end6 = 0;\n    let mut col_start8\
    \ = 0;\n    let mut col_end8 = 0;\n    let mut row_start7 = 0;\n    let mut row_end7\
    \ = 0;\n    let mut col_start9 = 0;\n    let mut col_end9 = 0;\n    let mut row_start8\
    \ = 0;\n    let mut row_end8 = 0;\n    let mut col_start10 = 0;\n    let mut col_end10\
    \ = 0;\n    let mut row_start9 = 0;\n    let mut row_end9 = 0;\n    let mut col_start11\
    \ = 0;\n    let mut col_end11 = 0;\n    let mut row_start10 = 0;\n    let mut\
    \ row_end10 = 0;\n    let mut col_start12 = 0;\n    let mut col_end12 = 0;\n \
    \   let mut row_start11 = 0;\n    let mut row_end11 = 0;\n    let mut col_start13\
    \ = 0;\n    let mut col_end13 = 0;\n    let mut row_start12 = 0;\n    let mut\
    \ row_end12 = 0;\n    let mut col_start14 = 0;\n    let mut col_end14 = 0;\n \
    \   let mut row_start13 = 0;\n    let mut row_end13 = 0;\n    let mut col_start15\
    \ = 0;\n    let mut col_end15 = 0;\n    let mut row_start14 = 0;\n    let mut\
    \ row_end14 = 0;\n    let mut col_start16 = 0;\n    let mut col_end16 = 0;\n \
    \   let mut row_start15 = 0;\n    let mut row_end", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n    let\
    \ mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_idx = vec![];\n   \
    \ let mut col_sorted_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];", "    let mut rows: Vec<(isize, isize)> = vec![];\n    for row in\
    \ lst {\n        let mut cols: Vec<isize> = vec![];\n        for col in row {\n\
    \            if col == x {\n                cols.push(x);\n            } else\
    \ {\n                cols.push(col);\n            }\n        }\n        rows.push((row,\
    \ cols));\n    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    rows"]
stop_tokens:
- "\n}"
