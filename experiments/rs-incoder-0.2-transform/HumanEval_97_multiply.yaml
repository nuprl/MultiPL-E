name: HumanEval_97_multiply
language: rs
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>> multiply(2020,\
  \ 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a: isize, b: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut product: isize = 0;\n    while a > 0 && b > 0 {\n     \
    \   let mut a = a % 10;\n        let mut b = b % 10;\n        product = product\
    \ * 10 + a as isize + b as isize;\n        a /= 10;\n        b /= 10;\n    }\n\
    \    product", "    let mut product = a;\n    while product > 0 {\n        product\
    \ *= b;\n    }\n    product", "    if a < 0 || b < 0 {\n        panic!(\"Invalid\
    \ input\");\n    }\n    if a < b {\n        let mut c = a;\n        a = b;\n \
    \       b = c;\n    }\n    let mut product = 0;\n    while a > 0 {\n        let\
    \ digit = a % 10;\n        product *= digit;\n        a /= 10;\n    }\n    while\
    \ b > 0 {\n        let digit = b % 10;\n        product *= digit;\n        b /=\
    \ 10;\n    }\n    product", "    debug_assert!(a >= 0);\n    debug_assert!(b >=\
    \ 0);\n    let mut product = 0;\n    while a > 0 {\n        product *= 10;\n \
    \       product += a % 10;\n        a /= 10;\n    }\n    while b > 0 {\n     \
    \   product *= 10;\n        product += b % 10;\n        b /= 10;\n    }\n    product",
  "    let mut product: isize = 1;\n    while a > 0 && b > 0 {\n        if a % 10\
    \ == b % 10 {\n            product *= a / 10;\n            a /= 10;\n        \
    \    b /= 10;\n        } else {\n            product *= a;\n            a /= 10;\n\
    \        }\n    }\n    product", "    debug_assert!(a >= 0);\n    debug_assert!(b\
    \ >= 0);\n    debug_assert!(a <= b);\n    let mut product = a as isize;\n    while\
    \ product > 0 {\n        product /= 10;\n    }\n    product *= b;\n    product",
  "    let mut product: isize = 0;\n    while a > 0 && b > 0 {\n        let mut a\
    \ = a % 10;\n        let mut b = b % 10;\n        product = product * 10 + a as\
    \ isize + b as isize;\n        a /= 10;\n        b /= 10;\n    }\n    product",
  "    if a < 0 || b < 0 {\n        0\n    } else {\n        let mut product = a *\
    \ b as isize;\n        if product > 100 {\n            product -= 100;\n     \
    \   }\n        product\n    }", "    if a < 0 || b < 0 {\n        panic!(\"Invalid\
    \ input\");\n    }\n    let mut result = a;\n    while result < b {\n        result\
    \ *= 10;\n    }\n    result", "    if a < 0 || b < 0 {\n        return 0;\n  \
    \  }\n    let mut result = a;\n    while result > 0 && b > 0 {\n        if result\
    \ % 10 == b % 10 {\n            result /= 10;\n            b /= 10;\n        }\
    \ else {\n            result *= 10;\n            b *= 10;\n        }\n    }\n\
    \    result", "    let mut product = a as isize;\n    while b > 0 {\n        product\
    \ *= 10;\n        product += b as isize;\n        b -= 1;\n    }\n    product",
  "    let mut product = a as isize;\n    while b > 0 {\n        product *= 10;\n\
    \        product += b as isize % 10;\n        b /= 10;\n    }\n    product", " \
    \   let mut product = 0;\n    while a > 0 && b > 0 {\n        let mut a = a %\
    \ 10;\n        let mut b = b % 10;\n        product = product * 10 + a / 10 +\
    \ b / 10;\n        a = a % 10;\n        b = b % 10;\n    }\n    product", "  \
    \  let mut product: isize = 1;\n    while a > 0 && b > 0 {\n        if a % 10\
    \ == b % 10 {\n            product *= a % 10;\n            a /= 10;\n        \
    \    b /= 10;\n        } else {\n            product *= a % 10;\n            a\
    \ /= 10;\n        }\n    }\n    product", "    let mut product = a as isize;\n\
    \    while product > 0 {\n        product *= b;\n    }\n    product", "    let\
    \ mut product = a;\n    while product > 0 {\n        product *= b;\n    }\n  \
    \  product", "    debug_assert!(a >= 0);\n    debug_assert!(b >= 0);\n    debug_assert!(a\
    \ < b);\n    let mut product = a;\n    while product < b {\n        product *=\
    \ 10;\n    }\n    product", "    let mut product: isize = 0;\n    while a > 0\
    \ && b > 0 {\n        product *= a % 10;\n        product *= b % 10;\n       \
    \ a /= 10;\n        b /= 10;\n    }\n    product", "    let mut product = a;\n\
    \    while product > 10 {\n        product /= 10;\n    }\n    while product <\
    \ 10 {\n        product *= 10;\n    }\n    product *= b;\n    product", "    if\
    \ a < 0 || b < 0 {\n        panic!(\"Invalid input\");\n    }\n    let mut product:\
    \ isize = 1;\n    while a > 0 && b > 0 {\n        if a % 10 == b % 10 {\n    \
    \        product *= a / 10;\n            a /= 10;\n            b /= 10;\n    \
    \    } else {\n            product *= a % 10;\n            a %= 10;\n        \
    \    b %= 10;\n        }\n    }\n    product"]
stop_tokens:
- "\n}"
