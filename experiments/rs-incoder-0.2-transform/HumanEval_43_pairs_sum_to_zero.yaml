name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n///\
  \ >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
  \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut i = 0;\n    let mut j = 0;\n    while i < l.len() && j\
    \ < l.len() {\n        if l[i] + l[j] == 0 {\n            i += 1;\n          \
    \  j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    i ==\
    \ l.len()", "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n  \
    \  while i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n           \
    \ i += 1;\n            j += 1;\n            sum += l[i];\n        } else {\n \
    \           if sum == 0 {\n                return false;\n            }\n    \
    \        i += 1;\n        }\n    }\n    sum == 0", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))', "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut pairs = vec![];\n\
    \    let mut sum = 0;\n    for &i in l {\n        if i != 0 {\n            pairs.push(i);\n\
    \            sum += i;\n        }\n    }\n    if sum == 0 {\n        return true;\n\
    \    }\n    let mut i = 0;\n    while i < pairs.len() {\n        if pairs[i] ==\
    \ 0 {\n            pairs.remove(&i);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    pairs.len() == 0", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut pairs = vec![];\n    let mut sum = 0;\n    for x in l {\n        if\
    \ x == 0 {\n            pairs.push((sum, 0));\n        } else {\n            pairs.push((sum,\
    \ x + 1));\n            sum += x;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ y)| y == 0)", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "  \
    \  let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for i in\
    \ l {\n        sum += i;\n    }\n    sum == 0 && l.len() == 2", "    let mut i\
    \ = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while i < l.len() && j <\
    \ l.len() {\n        if l[i] == l[j] {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            sum += l[i];\n            i += 1;\n      \
    \  }\n    }\n    sum == 0 && j == l.len()", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    let mut sum = 0;\n    for &i in l {\n        if i != 0 {\n            pairs.push((i,\
    \ sum));\n            sum += i;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ s)| s == 0)", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n \
    \   }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for &x in l\
    \ {\n        if x == 0 {\n            pairs.push((sum, false));\n            sum\
    \ = 0;\n        } else {\n            sum += x;\n        }\n    }\n    pairs.len()\
    \ == 1 && pairs[0].0 == 0 && pairs[0].1", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0", "    let mut pairs = vec![];\n    let mut\
    \ sum = 0;\n    for x in l {\n        if pairs.iter().any(|&y| y > x) {\n    \
    \        pairs.push(x);\n            sum += x;\n        }\n    }\n    pairs.iter().any(|&x|\
    \ x == 0 || x == sum)", "    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        sum += l[i];\n\
    \        i += 1;\n    }\n    sum == 0 && l.len() == i", "    let mut i = 0;\n\
    \    let mut j = 0;\n    let mut sum = 0;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] + l[j] == 0 {\n            i += 1;\n            j += 1;\n\
    \        } else {\n            sum += l[i] + l[j];\n            i += 1;\n    \
    \        j += 1;\n        }\n    }\n    sum == 0 && i == l.len()", "    let mut\
    \ sum = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut seen: HashSet<isize> = HashSet::new();\n    for\
    \ &i in l {\n        if seen.contains(&i) {\n            return false;\n     \
    \   }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut i = 0;\n    let mut j = 0;\n    let mut sum =\
    \ 0;\n    while i < l.len() && j < l.len() {\n        if l[i] - l[j] == 0 {\n\
    \            sum += l[i];\n            i += 1;\n            j += 1;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    sum == 0 && i == l.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let\
    \ mut sum = 0;\n    let mut pairs = vec![];\n    for &i in l {\n        if i !=\
    \ 0 {\n            sum += i;\n            pairs.push(i);\n        }\n    }\n \
    \   if sum == 0 {\n        false\n    } else {\n        pairs.iter().all(|&i|\
    \ i == 0)\n    }", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut pairs = vec![];\n    for i in l {\n    \
    \    for j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() && pairs.iter().all(|&(_,\
    \ v)| v == 0)", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for &x\
    \ in l {\n        if x >= 0 {\n            pairs.push((x, sum));\n        }\n\
    \        sum += x;\n    }\n    let mut seen = vec![];\n    for &(x, y) in pairs\
    \ {\n        if seen.contains(&y) {\n            return false;\n        }\n  \
    \      seen.push(y);\n    }\n    true", "    let mut sum = 0;\n    let mut pairs\
    \ = vec![];\n    for x in l {\n        if sum == 0 {\n            pairs.push((x,\
    \ 0));\n        } else {\n            pairs.push((x, sum));\n        }\n     \
    \   sum += x;\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_, y)| y ==\
    \ 0)", "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while\
    \ i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n            i += 1;\n\
    \            j += 1;\n        } else {\n            sum += l[i];\n           \
    \ i += 1;\n        }\n    }\n    sum == 0 && j == l.len()", "    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while\
    \ i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n            i += 1;\n\
    \            j += 1;\n            sum += 1;\n        } else {\n            if\
    \ sum == 0 {\n                return false;\n            }\n            i += 1;\n\
    \            sum += 1;\n        }\n    }\n    sum == 0", "    let mut sum = 0;\n\
    \    let mut pairs = vec![];\n    for i in l {\n        if i != 0 {\n        \
    \    sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum == 0\
    \ {\n        pairs.iter().all(|&x| x == 0)\n    } else {\n        false\n    }",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))', "    let\
    \ mut sum = 0;\n    let mut seen = HashSet::new();\n    for &x in l {\n      \
    \  if seen.contains(&x) {\n            return false;\n        }\n        seen.insert(x);\n\
    \        sum += x;\n    }\n    sum == 0", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n    let mut pairs\
    \ = Vec::new();\n    for x in l {\n        if x == 0 {\n            pairs.push(vec![]);\n\
    \        } else {\n            pairs.push(vec![x, sum]);\n        }\n        sum\
    \ += x;\n    }\n    let mut pairs = pairs.into_iter().filter(|x| x.len() == 2).collect::<Vec<_>>();\n\
    \    pairs.iter().any(|x| x.iter().all(|y| y == 0))", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut found = false;\n    for &i in l {\n        if i == 0 {\n        \
    \    found = true;\n        } else {\n            sum += i;\n        }\n    }\n\
    \    found && sum == 0", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for x in l {\n        if x == 0 {\n            pairs.push((x, sum));\n  \
    \      } else {\n            sum += x;\n        }\n    }\n    pairs.len() == 2\
    \ && pairs.iter().all(|&(_, y)| y == 0)", "    let mut sum = 0;\n    let mut pairs\
    \ = vec![];\n    for &i in l {\n        sum += i;\n        pairs.push(i);\n  \
    \  }\n    let mut pair_count = 0;\n    for &i in pairs {\n        if sum == 0\
    \ {\n            return false;\n        }\n        sum += i;\n        pair_count\
    \ += 1;\n    }\n    pair_count == pairs.len()", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    for x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < l.len()\
    \ && j < l.len() {\n        if l[i] == l[j] {\n            sum += l[i];\n    \
    \        i += 1;\n            j += 1;\n        } else {\n            if sum ==\
    \ 0 {\n                return false;\n            }\n            sum -= l[i];\n\
    \            i += 1;\n        }\n    }\n    if i == l.len() {\n        return\
    \ true;\n    }\n    if j == l.len() {\n        return false;\n    }\n    false",
  "    let mut sum = 0;\n    for x in l {\n        sum += x;\n        if sum == 0\
    \ {\n            return true;\n        }\n    }\n    false", "    let mut sum\
    \ = 0;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n         \
    \   return true;\n        }\n    }\n    false", "    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut sum = 0;\n    while i < l.len() && j < l.len() {\n     \
    \   if l[i] == l[j] {\n            i += 1;\n            j += 1;\n        } else\
    \ {\n            sum += l[i];\n            i += 1;\n        }\n    }\n    sum\
    \ == 0 && i != l.len()", "    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == 2", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n  \
    \  }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut sum = 0;\n    let mut found = false;\n    for x in l {\n        if\
    \ sum == 0 {\n            found = true;\n        }\n        sum += x;\n    }\n\
    \    found", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n   \
    \ }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let\
    \ mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == 2", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &x in l\
    \ {\n        if seen.contains(&x) {\n            return false;\n        }\n  \
    \      seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n    for &x in l {\n\
    \        if x == 0 {\n            pairs.push((x, sum));\n        } else {\n  \
    \          sum += x;\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_,\
    \ s)| s == 0)", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n \
    \   }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() ==\
    \ 2", "    let mut seen: HashSet<isize> = HashSet::new();\n    for x in l {\n\
    \        if seen.contains(&x) {\n            return false;\n        }\n      \
    \  seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n  \
    \  for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == 2", "    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n\
    \            sum += l[i];\n            i += 1;\n            j += 1;\n        }\
    \ else {\n            if sum == 0 {\n                return false;\n         \
    \   }\n            sum -= l[i];\n            i += 1;\n        }\n    }\n    sum\
    \ == 0 && i == l.len() && j == l.len()", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count()", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", '    l.iter().fold(false, |acc, x| acc && x.iter().fold(false,
    |acc, y| acc && y == 0))', "    let mut seen = HashSet::new();\n    for &i in\
    \ l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n        sum\
    \ += i;\n    }\n    sum == 0 && true", "    let mut sum = 0;\n    for &i in l\
    \ {\n        sum += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for &x\
    \ in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == 2", "    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while\
    \ i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n            i += 1;\n\
    \            j += 1;\n        } else {\n            sum += l[i];\n           \
    \ i += 1;\n        }\n    }\n    sum == 0", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count()", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut pairs\
    \ = vec![];\n    for x in l {\n        if x == 0 {\n            pairs.push(vec![]);\n\
    \        } else {\n            pairs.push(vec![x, sum]);\n            sum += x;\n\
    \        }\n    }\n    let mut pair = pairs.iter().cloned().collect::<Vec<_>>();\n\
    \    pairs.iter().cloned().for_each(|x| {\n        if x.len() == 2 {\n       \
    \     if x[0] + x[1] == 0 {\n                pair.remove(x);\n            }\n\
    \        }\n    });\n    pairs.len() == 0 && pairs.iter().all(|x| x.len() == 2)",
  "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n\
    \    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut seen: HashSet<isize> = HashSet::new();\n    for\
    \ &x in l {\n        if seen.contains(&x) {\n            return true;\n      \
    \  }\n        seen.insert(x);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize> =\
    \ HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n       \
    \     return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n    let\
    \ mut sum = 0;\n    for x in l {\n        pairs.push((x, sum));\n        sum +=\
    \ x;\n    }\n    let mut seen = vec![];\n    for (x, y) in pairs {\n        if\
    \ seen.is_empty() {\n            seen.push(x);\n        }\n        if seen.is_empty()\
    \ {\n            seen.push(y);\n        }\n        if seen.is_empty() {\n    \
    \        return false;\n        }\n        if seen[0] != x {\n            return\
    \ false;\n        }\n        if seen[1] != y {\n            return false;\n  \
    \      }\n        seen.clear();\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    let mut pair = false;\n    for &i in l {\n        if\
    \ i != 0 {\n            sum += i;\n            if sum == 0 {\n               \
    \ pair = true;\n            }\n        }\n    }\n    pair", "    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &x\
    \ in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut seen = HashSet::new();\n    for &x in l {\n \
    \       if seen.contains(&x) {\n            return false;\n        }\n       \
    \ seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for i in l {\n        if seen.contains(&i) {\n            return false;\n  \
    \      }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n        if sum == 0 {\n            return\
    \ true;\n        }\n    }\n    false", "    let mut seen = HashSet::new();\n \
    \   for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n\
    \    let mut pair = false;\n    for i in l.iter() {\n        sum += i;\n     \
    \   if sum == 0 {\n            pair = true;\n            break;\n        }\n \
    \   }\n    pair", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum ==\
    \ 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum\
    \ = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut\
    \ pairs = vec![];\n    for &x in l {\n        if x == 0 {\n            pairs.push(vec![]);\n\
    \        } else {\n            sum += x;\n            pairs.push(vec![sum, x -\
    \ 1]);\n        }\n    }\n    let mut seen = vec![];\n    for &x in pairs {\n\
    \        if !seen.contains(&x[0]) {\n            seen.push(&x[0]);\n        }\n\
    \    }\n    seen.len() == l.len()", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut pairs = vec![];\n    for &i in l {\n        for &j in l {\n      \
    \      if i + j == 0 {\n                pairs.push((i, j));\n            }\n \
    \       }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(i, j)| i == j)",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return true;\n        }\n        seen.insert(x);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &x in l {\n    \
    \    if x == 0 {\n            pairs.push((x, sum));\n        } else {\n      \
    \      sum += x;\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_,\
    \ y)| y == 0)", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().enumerate().any(|(i, v)| v == 0 && i != 0)', '    l.iter().fold(false,
    |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))', "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut sum = 0;\n  \
    \  for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut pairs = vec![];\n    for i in l {\n\
    \        for j in l {\n            if i == j {\n                continue;\n  \
    \          }\n            if i + j == 0 {\n                pairs.push((i, j));\n\
    \            }\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ v)| v == 0)"]
stop_tokens:
- "\n}"
