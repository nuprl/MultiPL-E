name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n///\
  \ >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
  \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        sum += i;\n        seen.insert(i);\n    }\n    true", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))', "    let mut sum\
    \ = 0;\n    let mut found = false;\n    for &i in l {\n        if i != 0 {\n \
    \           sum += i;\n            if sum == 0 {\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    found", "    let\
    \ mut sum = 0;\n    let mut pairs = vec![];\n    for &x in l {\n        if x ==\
    \ 0 {\n            pairs.push((x, sum));\n            sum += x;\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ y)| y == 0)", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut pairs\
    \ = vec![];\n    for &i in l {\n        if i != 0 {\n            pairs.push(i);\n\
    \            sum += i;\n        }\n    }\n    if sum == 0 {\n        return true;\n\
    \    }\n    for &i in pairs {\n        if i != 0 {\n            if sum == i {\n\
    \                return true;\n            }\n        }\n    }\n    false", " \
    \   let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum ==\
    \ 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for x in l {\n        if x == 0 {\n    \
    \        pairs.push((x, 0));\n        } else {\n            pairs.push((x, sum));\n\
    \            sum += x;\n        }\n    }\n    pairs.iter().all(|&(_, y)| y ==\
    \ 0)", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n        if\
    \ sum == 0 {\n            return true;\n        }\n    }\n    false", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l.iter() {\n        sum += i;\n        if sum == 0 {\n         \
    \   return true;\n        }\n    }\n    false", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n\
    \    for x in l {\n        if x == 0 {\n            pairs.push((x, sum));\n  \
    \      } else {\n            sum += x;\n        }\n    }\n    if pairs.len() ==\
    \ 1 {\n        pairs.iter().any(|&(_, x)| x == 0)\n    } else {\n        pairs.iter().any(|&(_,\
    \ x)| x == 0)\n    }", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n  \
    \  for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut pairs = vec![];\n    for &i in l {\n        if i != 0 {\n       \
    \     sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum == 0\
    \ {\n        return true;\n    }\n    for &i in pairs {\n        if i != 0 {\n\
    \            sum += i;\n        }\n    }\n    sum == 0", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))', "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x.iter().fold(false, |acc,
    y| acc + y == 0))', "    let mut sum = 0;\n    let mut pairs = vec![];\n    for\
    \ &x in l {\n        if x == 0 {\n            pairs.push((x, sum));\n        \
    \    sum += x;\n        } else {\n            sum += x;\n        }\n    }\n  \
    \  pairs.len() == 1 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    let mut sum = 0;\n    for &x in l {\n\
    \        if seen.contains(&x) {\n            return false;\n        }\n      \
    \  seen.insert(x);\n        sum += x;\n    }\n    sum == 0", "    let mut pairs\
    \ = vec![];\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i, sum));\n\
    \        sum += i;\n    }\n    let mut seen = vec![];\n    for &(i, sum) in pairs\
    \ {\n        if seen.is_empty() {\n            seen.push(sum);\n        } else\
    \ {\n            if sum == 0 {\n                return false;\n            }\n\
    \            for &(j, sum) in seen {\n                if sum == 0 {\n        \
    \            return false;\n                }\n                if j == i {\n \
    \                   return false;\n                }\n            }\n        }\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    let mut pairs = vec![];\n    for\
    \ &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        true\n    } else {\n        false\n\
    \    }", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x != 0 && x != -x)', "   \
    \ let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len() / 2", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    let mut i = 0;\n   \
    \ while i < l.len() {\n        if l[i] > 0 {\n            sum += l[i];\n     \
    \       i += 1;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ sum == 0 && l.len() == i", "    let mut sum = 0;\n    let mut seen = vec![];\n\
    \    for &i in l {\n        if *i == 0 {\n            sum += 1;\n        } else\
    \ {\n            if *i == sum {\n                seen.push(i);\n            }\n\
    \        }\n    }\n    seen.len() == l.len() && seen.iter().all(|&i| i == 0)",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut pair = false;\n    for &x in l {\n\
    \        if x == 0 {\n            pair = true;\n        } else {\n           \
    \ sum += x;\n        }\n        if sum == 0 {\n            pair = true;\n    \
    \    }\n        if sum < 0 {\n            pair = false;\n        }\n        if\
    \ sum > 0 {\n            i += 1;\n        }\n        if sum > 0 {\n          \
    \  j += 1;\n        }\n    }\n    pair && i == j"]
stop_tokens:
- "\n}"
