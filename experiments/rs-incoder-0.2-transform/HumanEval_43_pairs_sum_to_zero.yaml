name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n///\
  \ >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
  \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        sum += i;\n        seen.insert(i);\n    }\n    true", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))', "    let mut sum\
    \ = 0;\n    let mut found = false;\n    for &i in l {\n        if i != 0 {\n \
    \           sum += i;\n            if sum == 0 {\n                found = true;\n\
    \                break;\n            }\n        }\n    }\n    found", "    let\
    \ mut sum = 0;\n    let mut pairs = vec![];\n    for &x in l {\n        if x ==\
    \ 0 {\n            pairs.push((x, sum));\n            sum += x;\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ y)| y == 0)", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut pairs\
    \ = vec![];\n    for &i in l {\n        if i != 0 {\n            pairs.push(i);\n\
    \            sum += i;\n        }\n    }\n    if sum == 0 {\n        return true;\n\
    \    }\n    for &i in pairs {\n        if i != 0 {\n            if sum == i {\n\
    \                return true;\n            }\n        }\n    }\n    false", " \
    \   let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum ==\
    \ 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for x in l {\n        if x == 0 {\n    \
    \        pairs.push((x, 0));\n        } else {\n            pairs.push((x, sum));\n\
    \            sum += x;\n        }\n    }\n    pairs.iter().all(|&(_, y)| y ==\
    \ 0)", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n        if\
    \ sum == 0 {\n            return true;\n        }\n    }\n    false", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l.iter() {\n        sum += i;\n        if sum == 0 {\n         \
    \   return true;\n        }\n    }\n    false", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n\
    \    for x in l {\n        if x == 0 {\n            pairs.push((x, sum));\n  \
    \      } else {\n            sum += x;\n        }\n    }\n    if pairs.len() ==\
    \ 1 {\n        pairs.iter().any(|&(_, x)| x == 0)\n    } else {\n        pairs.iter().any(|&(_,\
    \ x)| x == 0)\n    }", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n  \
    \  for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut pairs = vec![];\n    for &i in l {\n        if i != 0 {\n       \
    \     sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum == 0\
    \ {\n        return true;\n    }\n    for &i in pairs {\n        if i != 0 {\n\
    \            sum += i;\n        }\n    }\n    sum == 0", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", '    l.iter().fold(false,
    |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))', "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x.iter().fold(false, |acc,
    y| acc + y == 0))', "    let mut sum = 0;\n    let mut pairs = vec![];\n    for\
    \ &x in l {\n        if x == 0 {\n            pairs.push((x, sum));\n        \
    \    sum += x;\n        } else {\n            sum += x;\n        }\n    }\n  \
    \  pairs.len() == 1 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    let mut sum = 0;\n    for &x in l {\n\
    \        if seen.contains(&x) {\n            return false;\n        }\n      \
    \  seen.insert(x);\n        sum += x;\n    }\n    sum == 0", "    let mut pairs\
    \ = vec![];\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i, sum));\n\
    \        sum += i;\n    }\n    let mut seen = vec![];\n    for &(i, sum) in pairs\
    \ {\n        if seen.is_empty() {\n            seen.push(sum);\n        } else\
    \ {\n            if sum == 0 {\n                return false;\n            }\n\
    \            for &(j, sum) in seen {\n                if sum == 0 {\n        \
    \            return false;\n                }\n                if j == i {\n \
    \                   return false;\n                }\n            }\n        }\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    let mut pairs = vec![];\n    for\
    \ &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        true\n    } else {\n        false\n\
    \    }", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x != 0 && x != -x)', "   \
    \ let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len() / 2", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    let mut i = 0;\n   \
    \ while i < l.len() {\n        if l[i] > 0 {\n            sum += l[i];\n     \
    \       i += 1;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ sum == 0 && l.len() == i", "    let mut sum = 0;\n    let mut seen = vec![];\n\
    \    for &i in l {\n        if *i == 0 {\n            sum += 1;\n        } else\
    \ {\n            if *i == sum {\n                seen.push(i);\n            }\n\
    \        }\n    }\n    seen.len() == l.len() && seen.iter().all(|&i| i == 0)",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut pair = false;\n    for &x in l {\n\
    \        if x == 0 {\n            pair = true;\n        } else {\n           \
    \ sum += x;\n        }\n        if sum == 0 {\n            pair = true;\n    \
    \    }\n        if sum < 0 {\n            pair = false;\n        }\n        if\
    \ sum > 0 {\n            i += 1;\n        }\n        if sum > 0 {\n          \
    \  j += 1;\n        }\n    }\n    pair && i == j", "    let mut pairs = vec![];\n\
    \    let mut sum = 0;\n    for &i in l {\n        pairs.push((i, sum));\n    \
    \    sum += i;\n    }\n    let mut seen = vec![];\n    for &(i, sum) in pairs\
    \ {\n        if sum == 0 {\n            seen.push(i);\n        }\n    }\n    seen.len()\
    \ == l.len() && seen.iter().all(|&i| l[i] == 0)", "    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut sum = 0;\n    while i < l.len() && j < l.len() {\n \
    \       if l[i] == l[j] {\n            i += 1;\n            j += 1;\n        \
    \    sum += 1;\n        } else {\n            if sum == 0 {\n                return\
    \ false;\n            }\n            i += 1;\n            sum += 1;\n        }\n\
    \    }\n    sum == 0", '    l.iter().fold(false, |a, b| a && b && (a + b) == 0)',
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum ==\
    \ 0", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n   \
    \ sum == 0", "    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", '    l.iter().fold(false, |a, b| a && b && (a + b) == 0)',
  '    l.iter().fold(false, |acc, x| acc && x.iter().fold(false, |acc, y| acc + y
    == 0))', "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x != 0 && acc + x == 0)',
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0",
  "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for &x in l\
    \ {\n        pairs.push((x, sum));\n        sum += x;\n    }\n    let mut seen\
    \ = vec![];\n    for &(x, y) in pairs {\n        if seen.is_empty() {\n      \
    \      seen.push(x);\n        }\n        if seen.is_empty() {\n            seen.push(y);\n\
    \        }\n        if seen.is_empty() {\n            return false;\n        }\n\
    \        if seen[0] == seen[1] {\n            seen.pop();\n            seen.pop();\n\
    \        }\n    }\n    true", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &x\
    \ in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return true;\n\
    \        }\n        seen.insert(x);\n    }\n    false", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = vec![];\n    for &i in l {\n        if *i == 0 {\n       \
    \     sum += 1;\n        } else {\n            if *i == sum {\n              \
    \  seen.push(i);\n            }\n        }\n    }\n    seen.len() == l.len() &&\
    \ seen.iter().all(|&i| i == 0)", "    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0 &&\
    \ true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", '    l.iter().fold(false, |acc, x| acc && x.pairs().fold(false, |acc,
    x| acc && x.sum() == 0))', "    let mut seen = HashSet::new();\n    for &i in\
    \ l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    l.iter().fold(false, |acc, x|\
    \ {\n        if acc {\n            acc\n        } else {\n            acc && x.iter().fold(false,\
    \ |acc, y| acc + y == 0)\n        }\n    })", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for i in l {\n     \
    \   sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n    for x in l {\n\
    \        if sum == 0 {\n            pairs.push((x, 0));\n        } else {\n  \
    \          pairs.push((x, sum));\n        }\n        sum += x;\n    }\n    pairs.len()\
    \ == 1 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == l.len()", "    let mut sum = 0;\n    let mut pairs = vec![];\n\
    \    for i in l {\n        if i == 0 {\n            pairs.push(vec![i]);\n   \
    \     } else {\n            sum += i;\n            if sum == 0 {\n           \
    \     pairs.push(vec![i]);\n            }\n        }\n    }\n    pairs.len() ==\
    \ 2 && pairs.iter().all(|&x| x == vec![0])", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    let mut pairs = vec![];\n    for &i in l {\n       \
    \ if i > 0 {\n            sum += i;\n            pairs.push(i);\n        }\n \
    \   }\n    if sum == 0 {\n        return true;\n    }\n    let mut i = pairs.len()\
    \ - 1;\n    while i >= 0 && pairs[i] == 0 {\n        i -= 1;\n    }\n    if i\
    \ == -1 {\n        return false;\n    }\n    let mut j = i;\n    while j >= 0\
    \ && pairs[j] == sum {\n        j -= 1;\n    }\n    if j == -1 {\n        return\
    \ true;\n    }\n    pairs[j] -= sum;\n    pairs_sum_to_zero(pairs)", "    let\
    \ mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return true;\n        }\n        seen.insert(i);\n    }\n    false", " \
    \   let mut pairs = vec![];\n    for &i in l {\n        for &j in l {\n      \
    \      if i != j && i + j == 0 {\n                pairs.push((i, j));\n      \
    \      }\n        }\n    }\n    pairs.len() == l.len() && pairs.iter().all(|&(i,\
    \ j)| i + j == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n    let mut\
    \ sum = 0;\n    for &x in l {\n        if x == 0 {\n            pairs.push((x,\
    \ sum));\n            sum = 0;\n        } else {\n            sum += x;\n    \
    \    }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_, y)| y == 0)", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    l.iter().fold(false, |acc, x| {\n        if acc {\n           \
    \ acc\n        } else {\n            acc && x.to_usize() == 0\n        }\n   \
    \ })", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n        if\
    \ sum == 0 {\n            return true;\n        }\n    }\n    false", "    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < l.len() && j < l.len() {\n   \
    \     if l[i] + l[j] == 0 {\n            i += 1;\n            j += 1;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    i == l.len()", "    let\
    \ mut pairs = vec![];\n    for &i in l {\n        for &j in l {\n            if\
    \ i + j == 0 {\n                pairs.push((i, j));\n            }\n        }\n\
    \    }\n    pairs.len() == 1 && pairs.iter().all(|&(i, j)| i == j)", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for &x in l\
    \ {\n        if x > 0 {\n            pairs.push((x, sum));\n            sum +=\
    \ x;\n        }\n    }\n    for &(x, y) in pairs {\n        if y == 0 {\n    \
    \        return false;\n        }\n    }\n    true", "    let mut sum = 0;\n \
    \   for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n\
    \    for &i in l {\n        sum += i;\n        pairs.push((i, sum));\n    }\n\
    \    pairs.iter().all(|&(_, s)| s == 0)", "    let mut sum = 0;\n    for x in\
    \ l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut sum = 0;\n    for x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n           \
    \ return true;\n        }\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ sum = 0;\n    while i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n\
    \            i += 1;\n            j += 1;\n        } else {\n            sum +=\
    \ l[i];\n            i += 1;\n        }\n    }\n    sum == 0 && i != l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count()", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() && pairs.iter().all(|&(i, j)| i + j == 0)", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut pairs = vec![];\n    for i in l {\n        if i != 0 {\n        \
    \    sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum == 0\
    \ {\n        pairs.len() == 1 && pairs[0] == 0\n    } else {\n        pairs.len()\
    \ > 1 && pairs.iter().all(|&x| x == 0)\n    }", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut i = 0;\n \
    \   let mut j = 0;\n    while i < l.len() && j < l.len() {\n        if l[i] +\
    \ l[j] == 0 {\n            i += 1;\n            j += 1;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    i == l.len()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == 2", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == 2", " \
    \   let mut sum = 0;\n    let mut pair = false;\n    for x in l {\n        if\
    \ pair {\n            if sum == 0 {\n                pair = false;\n         \
    \   } else {\n                sum += x;\n            }\n        } else {\n   \
    \         sum += x;\n            pair = true;\n        }\n    }\n    pair == false",
  "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in\
    \ l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < pairs.len() && j < pairs.len() {\n\
    \        if pairs[i] + pairs[j] == 0 {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    i == pairs.len()",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut i = 0;\n    let mut j = 0;\n    while i < l.len() && j\
    \ < l.len() {\n        if l[i] + l[j] == 0 {\n            i += 1;\n          \
    \  j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    i ==\
    \ l.len()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        sum += i;\n        seen.insert(i);\n    }\n    true", "    let mut seen:\
    \ HashSet<isize> = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == 2", "    let mut sum = 0;\n    for &i in l {\n   \
    \     sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n \
    \   sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()",
  "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while i < l.len()\
    \ && j < l.len() {\n        if l[i] == l[j] {\n            i += 1;\n         \
    \   j += 1;\n            sum += l[i];\n        } else {\n            if sum ==\
    \ 0 {\n                return false;\n            }\n            i += 1;\n   \
    \     }\n    }\n    sum == 0", "    let mut sum = 0;\n    for i in l {\n     \
    \   sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2", "    let mut seen: HashSet<isize> = HashSet::new();\n    let mut pairs\
    \ = Vec::new();\n    for x in l {\n        if seen.contains(&x) {\n          \
    \  return false;\n        }\n        seen.insert(x);\n        pairs.push(x);\n\
    \    }\n    pairs.len() == 2 && pairs.iter().all(|x| x == 0)", '    l.iter().fold(false,
    |b, e| b && e == 0)', "    let mut seen: HashSet<isize> = HashSet::new();\n  \
    \  for x in l {\n        if seen.contains(&x) {\n            return false;\n \
    \       }\n        seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    let mut found = false;\n\
    \    for &x in l {\n        sum += x;\n        if sum == 0 {\n            found\
    \ = true;\n            break;\n        }\n    }\n    found", "    let mut sum\
    \ = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = vec![];\n    for x in l {\n        if seen.is_empty() {\n\
    \            seen = vec![x];\n        } else {\n            if seen[0] != x {\n\
    \                seen = vec![x];\n            } else {\n                sum =\
    \ sum + x;\n                seen = vec![];\n            }\n        }\n    }\n\
    \    sum == 0", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0", '    l.iter().fold(false, |acc, x| acc && x.pairs().fold(false,
    |acc, x| acc && x.sum() == 0))', "    let mut sum = 0;\n    for &i in l {\n  \
    \      sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i ==\
    \ 0).count() == 2", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut pairs = vec![];\n    let mut sum = 0;\n    for x in l {\n        pairs.push((x,\
    \ sum));\n        sum += x;\n    }\n    let mut seen = vec![];\n    for (x, y)\
    \ in pairs {\n        if seen.is_empty() {\n            seen.push(x);\n      \
    \  }\n        if seen.is_empty() {\n            seen.push(y);\n        }\n   \
    \     if seen.is_empty() {\n            return false;\n        }\n        if seen.pop().unwrap()\
    \ == x && seen.pop().unwrap() == y {\n            return true;\n        }\n  \
    \  }\n    false", "    let mut seen = HashSet::new();\n    for &i in l {\n   \
    \     if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n       \
    \ if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", '    l.iter().fold(false, |acc, x| acc && x.pairs().fold(false,
    |acc, y| acc && y.sum() == 0))', "    let mut seen = HashSet::new();\n    for\
    \ &x in l {\n        if seen.contains(&x) {\n            return false;\n     \
    \   }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &x in l {\n    \
    \    sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()",
  "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n       \
    \ if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().map(|x| x as isize).count() == l.len()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut pairs = vec![];\n    let mut sum = 0;\n    for &x in l {\n        pairs.push((x,\
    \ sum));\n        sum += x;\n    }\n    let mut seen = vec![];\n    for &(x, y)\
    \ in pairs {\n        if seen.is_empty() {\n            seen.push(x);\n      \
    \  } else {\n            if seen.pop().unwrap() == y {\n                return\
    \ false;\n            }\n        }\n    }\n    true", "    l.iter().fold(false,\
    \ |acc, x| {\n        acc && l.iter().any(|y| y > 0 && x + y == 0)\n    })", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count()", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i + j == 0 {\n       \
    \         pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(_, v)| v == 0)", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().map(|x| x).sum() == 0", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true"]
stop_tokens:
- "\n}"
