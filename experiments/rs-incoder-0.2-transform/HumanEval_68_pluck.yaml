name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
  /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
  /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value < i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value = i;\n\
    \            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", " \
    \   let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_even_index == -1 || min_even_index > i {\n\
    \                min_even_value = i;\n                min_even_index = i;\n  \
    \              min_even_index_in_arr = i;\n            } else {\n            \
    \    if min_even_index_in_arr == -1 || min_even_index_in_arr > i {\n         \
    \           min_even_index_in_arr = i;\n                }\n            }\n   \
    \     }\n    }\n    if min_even_index == -1 {\n        return Vec::new();\n  \
    \  }\n    let mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n\
    \    even_values.sort_unstable_by_key(|&x| x);\n    let mut even_values_index\
    \ = even_values.iter().rev().take(even_values.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr\
    \ = even_values_index.iter().rev().take(even_values_index.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index_in_arr.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr_index\
    \ = even_values_index_in_arr.iter().rev().take(even_values_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr = even_values_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index = even_values_index_in_arr_index_in_arr.iter().rev().take(even_values_index_in_arr_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index_in_arr = even_values_index_in_arr_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index_in_arr_index.len()\
    \ - 1).", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    vec![min_value, min_idx]", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index_in_arr\
    \ = -1;\n    let mut smallest_even_index_in_arr2 = -1;\n    for &mut i in arr.iter_mut()\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_arr = i;\n                smallest_even_index_in_arr2\
    \ = i;\n            } else {\n                if smallest_even_index_in_arr ==\
    \ -1 || smallest_even_value < i {\n                    smallest_even_index_in_arr\
    \ = i;\n                }\n                if smallest_even_index_in_arr2 == -1\
    \ || smallest_even_value < i {\n                    smallest_even_index_in_arr2\
    \ = i;\n                }\n            }\n        }\n    }\n    if smallest_even_index\
    \ == -1 || smallest_even_value < smallest_even_index_in_arr {\n        smallest_even_index\
    \ = smallest_even_index_in_arr;\n    }\n    if smallest_even_index == -1 || smallest_even_value\
    \ < smallest_even_index_in_arr2 {\n        smallest_even_index = smallest_even_index_in_arr2;\n\
    \    }\n    vec![smallest_even_index, smallest_even_index]", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_value_index\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_value_index = -1;\n    for i in even_values.iter() {\n \
    \       if i < smallest_value {\n            smallest_value = i;\n           \
    \ smallest_value_index = i;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     result.push(smallest_value_index);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    result", "    let mut min_even_value:\
    \ isize = 0;\n    let mut min_even_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut even_values: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    let mut\
    \ even_values_index: Vec<isize> = Vec::new();\n    let mut even_indexes_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index: Vec<isize> =\
    \ Vec::new();\n    let mut even_indexes_index_index: Vec<usize> = Vec::new();\n\
    \    let mut even_values_index_index_index: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes_index_index_index: Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_",
  "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n  \
    \  let mut min_index = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_index = i;\n            }\n   \
    \     }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index =\
    \ isize::MAX;\n    for &i in even_values {\n        if i < smallest_value {\n\
    \            smallest_value = i;\n            smallest_index = i;\n        }\n\
    \    }\n    let mut result = Vec::new();\n    result.push(smallest_value);\n \
    \   result.push(smallest_index);\n    return result;", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_value = min_value;\n\
    \    let mut smallest_idx = min_idx;\n    for &i in even_values {\n        if\
    \ i < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n    even_values.sort();\n\
    \    even_values", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            min_value = i;\n  \
    \          min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "  \
    \  let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_value", "    let mut even_values = Vec::new();\n\
    \    let mut min_value = isize::MAX;\n    let mut min_value_index = 0;\n    let\
    \ mut even_values_index = 0;\n    for &value in arr {\n        if value % 2 ==\
    \ 0 {\n            even_values.push(value + 1);\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        }\n    }\n    if even_values_index == 0 {\n\
    \        return vec![];\n    }\n    if even_values_index == arr.len() {\n    \
    \    return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_pos;\n    let mut even_values_index = even_values_pos;\n    for\
    \ &value in arr {\n        if value % 2 == 0 {\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        } else {\n            if even_values_index\
    \ == arr.len() {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index = 0;\n        }\n    }\n    if even_values_index == arr.len()\
    \ {\n        return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_pos;\n    let mut even_values_index = even_values_pos;\n    for\
    \ &value in arr {\n        if value % 2 == 0 {\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        } else {\n            if even_values_index\
    \ == arr.len() {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index = 0;\n        }\n    }\n    if even_values_index == arr.len()\
    \ {\n        return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_", "    let mut min_value = i32::MAX;\n    let mut min_node = 0;\n\
    \    let mut min_node_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            if min_value == i32::MAX {\n                min_value = i;\n    \
    \            min_node = i;\n                min_node_index = i;\n            }\
    \ else {\n                if i < min_value {\n                    min_value =\
    \ i;\n                    min_node = i;\n                    min_node_index =\
    \ i;\n                }\n            }\n        }\n    }\n    vec![min_node, min_node_index]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values[0];\n    for &i in even_values {\n       \
    \ if i < smallest_value {\n            smallest_even_value = i;\n            smallest_even_index\
    \ = i;\n        }\n    }\n    let mut even_values_copy = even_values.clone();\n\
    \    even_values_copy.swap_remove(smallest_even_index);\n    even_values_copy",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    let mut min_idx2\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_idx\
    \ == -1 || min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        } else {\n            if min_idx2 == -1 || min_value\
    \ < i {\n                min_value = i;\n                min_idx2 = i;\n     \
    \       }\n        }\n    }\n    if min_idx2 == -1 || min_value < min_idx2 {\n\
    \        min_idx2 = min_idx;\n    }\n    vec![min_value, min_idx2]", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n \
    \   let mut smallest_index = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n            if\
    \ smallest_index == -1 || smallest_even_value < smallest_index {\n           \
    \     smallest_index = i;\n            }\n        }\n    }\n    smallest_even_value\
    \ => smallest_even_index,\n    smallest_index => smallest_index,", "    let mut\
    \ min_val = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val = false;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if min_even_val {\n\
    \                min_even_val = false;\n                min_val = x;\n       \
    \         min_idx = x;\n            } else {\n                min_even_val = true;\n\
    \                min_val = x;\n                min_idx = x;\n            }\n \
    \       }\n    }\n    if min_even_val {\n        vec![min_val, min_idx]\n    }\
    \ else {\n        vec![]\n    }", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_indexes = Vec::new();\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if min_even_value < i {\n\
    \                min_even_value = i;\n                min_even_index = i;\n  \
    \          }\n        } else {\n            if min_even_index == -1 {\n      \
    \          min_even_index = i;\n            } else {\n                min_even_indexes.push(min_even_index);\n\
    \                min_even_index = i;\n            }\n        }\n    }\n    if\
    \ min_even_index == -1 {\n        min_even_indexes.push(min_even_index);\n   \
    \ }\n    min_even_indexes", "    let mut even_values = Vec::new();\n    let mut\
    \ min_value = isize::MAX;\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if min_value == isize::MAX {\n                min_value = i;\n  \
    \              min_value_index = i;\n                min_value_index2 = i;\n \
    \           }\n            if i < min_value {\n                min_value = i;\n\
    \                min_value_index = i;\n                min_value_index2 = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if min_value_index == min_value_index2 {\n        return\
    \ vec![min_value];\n    }\n    let mut even_values_sorted = even_values.clone();\n\
    \    even_values_sorted.sort();\n    let mut min_value_index = -1;\n    let mut\
    \ min_value_index2 = -1;\n    for &i in even_values_sorted {\n        if i ==\
    \ min_value {\n            min_value_index = i;\n        }\n        if i < min_value\
    \ {\n            min_value_index = i;\n        }\n        if i == min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n        if i < min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n    }\n    if min_value_index\
    \ == min_value_index2 {\n        return vec![min_value];\n    }\n    let mut even_values_sorted\
    \ = even_values.clone();\n    even_values_sorted.sort();\n    let mut min_value_index\
    \ = -1;\n    let mut min_value_index2 = -1;\n    for &i in even_values_sorted\
    \ {\n        if i == min_value {\n            min_value_index = i;\n        }\n\
    \        if i < min_value {\n            min_value_index = i;\n        }\n   \
    \     if i == min_value_index2 {\n            min_value_index2 = i;\n        }\n\
    \        if i < min_value_index2 {\n            min_value_index2 = i;\n      \
    \  }\n    }\n    if min_value_index == min_value_index2 {\n        return vec![min_value];\n\
    \    }\n    let mut even_values_sorted = even_values.clone();\n    even_values_sorted.sort();\n\
    \    let mut min_value_index = -1;\n    let mut min_value_index2 = -1;\n    for\
    \ &i in even_values_sorted {\n        if i == min_value {\n            min_value_index\
    \ = i;\n        }\n        if i < min_value {\n            min_value_index = i;\n\
    \        }\n        if i == min_value_index2 {\n            min_value_index2 =\
    \ i;\n        }\n        if i < min_value_index2 {\n            min_value_index2\
    \ = i;\n        }\n    }\n    if min_value_index == min_value", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = even_values.len() - 1;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return Vec::new();\n    }\n    even_values[min_idx];\n\
    \    even_values", "    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    let mut smallest_value = -1;\n    for i\
    \ in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_value = arr[i];\n            }\n            if\
    \ smallest_value == -1 || smallest_value > arr[i] {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    smallest_even_index\n        .to_vec()\n        .iter()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n    for i in\
    \ even_values.iter() {\n        if i == smallest_value {\n            smallest_value_and_index.push((i,\
    \ smallest_index));\n        }\n    }\n    smallest_value_and_index.sort_by_key(|&(_,\
    \ index)| index);\n    smallest_value_and_index\n        .iter()\n        .map(|&(_,\
    \ index)| index)\n        .collect()", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\n\
    \        even_values[even_values.iter().min_by_key(|&x| x).unwrap()];\n    let\
    \ mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&x|\
    \ x).unwrap()];\n", "    let mut min_value = isize::MAX;\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n        \
    \    if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_idx == -1 {\n        return Vec::new();\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i {\n   \
    \             min_val = i;\n                min_idx = i;\n            }\n    \
    \    }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n    }\n \
    \   vec![min_val, min_idx]", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    let mut smallest_index2\
    \ = 0;\n    let mut smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n \
    \   let mut smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n    let mut\
    \ smallest_index7 = 0;\n    let mut smallest_index8 = 0;\n    let mut smallest_index9\
    \ = 0;\n    let mut smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n\
    \    let mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n    let\
    \ mut smallest_index14 = 0;\n    let mut smallest_index15 = 0;\n    let mut smallest_index16\
    \ = 0;\n    let mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n\
    \    let mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n    let\
    \ mut smallest_index21 = 0;\n    let mut smallest_index22 = 0;\n    let mut smallest_index23\
    \ = 0;\n    let mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n\
    \    let mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n    let\
    \ mut smallest_index28 = 0;\n    let mut smallest_index29 = 0;\n    let mut smallest_index30\
    \ = 0;\n    let mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n\
    \    let mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n    let\
    \ mut smallest_index35 = 0;\n    let mut smallest_index36 = 0;\n    let mut smallest_index37\
    \ = 0;\n    let mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n\
    \    let mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n    let\
    \ mut smallest_index42 = 0;\n    let mut smallest_index43 = 0;\n    let mut smallest_index44\
    \ = 0;\n    let mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n\
    \    let mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n    let\
    \ mut smallest_index49 = 0;\n    let mut smallest_index50 = 0;\n    let mut smallest_index51\
    \ = 0;\n    let mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n\
    \    let mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;", "    let\
    \ mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n    let\
    \ mut min_value_index = isize::MAX;\n    let mut min_value_index = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n            if i == min_value_index\
    \ {\n                min_value_index = i;\n            }\n        }\n    }\n \
    \   if even_values.is_empty() {\n        return Vec::new();\n    }\n    if min_value_index\
    \ == isize::MAX {\n        return Vec::new();\n    }\n    let mut even_values_copy\
    \ = even_values.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < smallest_value {\n             \
    \   smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort_unstable_by_key(|&x| x);\n    even_values.dedup();\n\
    \    even_values.iter().cloned().collect::<Vec<_>>()", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min_value {\n\
    \            min_value = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n      \
    \      if i < smallest_value {\n                smallest_value = i;\n        \
    \        smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\n\
    \        even_values[even_values.iter().min_by_key(|&i| i).unwrap()];\n    let\
    \ mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_by_key(|&i|\
    \ i).unwrap()];\n    let mut smallest_even_value =\n        even_values[even_values.iter().min_",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    let mut min_even_index_in_arr2 = -1;\n\
    \    let mut min_even_index_in_arr3 = -1;\n    let mut min_even_index_in_arr4\
    \ = -1;\n    let mut min_even_index_in_arr5 = -1;\n    let mut min_even_index_in_arr6\
    \ = -1;\n    let mut min_even_index_in_arr7 = -1;\n    let mut min_even_index_in_arr8\
    \ = -1;\n    let mut min_even_index_in_arr9 = -1;\n    let mut min_even_index_in_arr10\
    \ = -1;\n    let mut min_even_index_in_arr11 = -1;\n    let mut min_even_index_in_arr12\
    \ = -1;\n    let mut min_even_index_in_arr13 = -1;\n    let mut min_even_index_in_arr14\
    \ = -1;\n    let mut min_even_index_in_arr15 = -1;\n    let mut min_even_index_in_arr16\
    \ = -1;\n    let mut min_even_index_in_arr17 = -1;\n    let mut min_even_index_in_arr18\
    \ = -1;\n    let mut min_even_index_in_arr19 = -1;\n    let mut min_even_index_in_arr20\
    \ = -1;\n    let mut min_even_index_in_arr21 = -1;\n    let mut min_even_index_in_arr22\
    \ = -1;\n    let mut min_even_index_in_arr23 = -1;\n    let mut min_even_index_in_arr24\
    \ = -1;\n    let mut min_even_index_in_arr25 = -1;\n    let mut min_even_index_in_arr26\
    \ = -1;\n    let mut min_even_index_in_arr27 = -1;\n    let mut min_even_index_in_arr28\
    \ = -1;\n    let mut min_even_index_in_arr29 = -1;\n    let mut min_even_index_in_arr30\
    \ = -1;\n    let mut min_even_index_in_arr31 = -1;\n    let mut min_even_index_in_arr32\
    \ = -1;\n    let mut min_even_index_in_arr33 = -1;\n    let mut min_even_index_in_arr34\
    \ = -1;\n    let mut min_even_index_in_arr35 = -1;\n    let mut min_even_index_in_arr36\
    \ = -1;\n    let mut min_even_index_in_arr37 = -1;\n    let mut min_even_index_in_arr38\
    \ = -1;\n    let mut min_even_index_in_arr39 = -1;\n    let mut min_even_index_in_arr40\
    \ = -1;\n    let mut min_even_index_in_arr41 = -1;\n    let mut min_even_index_in_arr42\
    \ = -1;\n    let mut min_", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n         \
    \   if i < smallest_value {\n                smallest_value = i;\n           \
    \     smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_value_and_index\
    \ = Vec::new();\n    smallest_value_and_index.push(smallest_value, smallest_index);\n\
    \    let mut smallest_value_and_index_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    while let Some(mut v) = smallest_value_and_index_iter.next() {\n        if\
    \ v % 2 == 0 {\n            smallest_value_and_index.push(v);\n            smallest_value_and_index_iter\
    \ = even_values.iter().cloned().collect::<Vec<_>>();\n            smallest_value_and_index_iter\
    \ = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \        }\n    }\n    smallest_value_and_index_iter", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            if min_value < i {\n                min_value = i;\n\
    \                min_idx = i;\n            }\n        }\n    }\n    if min_value\
    \ == i32::MAX {\n        return Vec::new();\n    }\n    vec![min_value, min_idx]",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = even_values.len() - 1;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return Vec::new();\n    }\n    even_values[min_idx];\n\
    \    even_values", "    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let ", " \
    \   let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    let mut even_values = Vec::new();\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i == min_even_value {\n                min_even_index = even_values.len()\
    \ - 1;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return Vec::new();\n    }\n \
    \   if min_even_index == -1 {\n        min_even_index = even_values.len() - 1;\n\
    \        min_even_index_in_arr = even_values[min_even_index];\n    }\n    let\
    \ mut min_even_index_in_arr_index = -1;\n    let mut min_even_index_in_arr_val\
    \ = -1;\n    for i in even_values.iter() {\n        if i == min_even_index_in_arr\
    \ {\n            min_even_index_in_arr_index = i;\n            min_even_index_in_arr_val\
    \ = min_even_index_in_arr;\n        }\n    }\n    let mut min_even_index_in_arr_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr = -1;\n    for i in even_values.iter()\
    \ {\n        if i == min_even_index_in_arr_index {\n            min_even_index_in_arr_index_in_arr\
    \ = i;\n            min_even_index_in_arr_val_in_arr = min_even_index_in_arr_index;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr = -1;\n\
    \    let mut min_even_index_in_arr_val_in_arr_in_arr = -1;\n    for i in even_values.iter()\
    \ {\n        if i == min_even_index_in_arr_index_in_arr {\n            min_even_index_in_arr_index_in_arr_in_arr\
    \ = i;\n            min_even_index_in_arr_val_in_arr_in_arr = min_even_index_in_arr_index_in_arr;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr_in_arr_in_arr = -1;\n  \
    \  for i in even_values.iter() {\n        if i == min_even_index_in_arr_index_in_arr_in_arr\
    \ {\n            min_even_index_in_arr_index_in_arr_in_arr_in_arr = i;\n     \
    \       min_even_index_in_arr_val_in_arr_in_arr_in_arr = min_even_index_in_arr_index_in_arr_in_arr;\n\
    \        }\n    }\n    let mut min_even_index_in_arr_index_in_arr_in_arr_in_arr_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_val_in_arr_in_arr_in_arr_in_arr = -1;\n\
    \    for i in even_values.iter() {\n        if i == min_even_index_in_arr_index_in_arr_in_arr_in_",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        smallest_value[0]\
    \ = even_values[0];\n        smallest_index[0] = even_values[0];\n        return\
    \ vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut smallest_value\
    \ = even_values[0];\n    let mut smallest_index = even_values[0];\n    for i in\
    \ even_values.iter().rev() {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    smallest_value.push(smallest_index);\n\
    \    smallest_value.push(even_values.len());\n    smallest_value", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_val = arr[0];\n    let mut\
    \ min_idx = 1;\n    let mut min_even_val = false;\n    for &x in arr {\n     \
    \   if x % 2 == 0 {\n            if min_even_val {\n                min_even_val\
    \ = false;\n            } else {\n                min_even_val = true;\n     \
    \           min_val = x;\n                min_idx = 1;\n            }\n      \
    \  } else {\n            if min_even_val {\n                if x < min_val {\n\
    \                    min_even_val = false;\n                    min_val = x;\n\
    \                    min_idx = 1;\n                } else {\n                \
    \    min_even_val = false;\n                    min_val = x;\n               \
    \     min_idx = 2;\n                }\n            } else {\n                if\
    \ x < min_val {\n                    min_even_val = true;\n                  \
    \  min_val = x;\n                    min_idx = 1;\n                } else {\n\
    \                    min_even_val = true;\n                    min_val = x;\n\
    \                    min_idx = 2;\n                }\n            }\n        }\n\
    \    }\n    vec![min_val, min_idx]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.len()\
    \ - i;\n        }\n        if i == smallest_value {\n            smallest_value\
    \ = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        return vec![even_values[0], even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2]];\n    }\n    if even_values.len() == 4 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3]];\n    }\n    if even_values.len()\
    \ == 5 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4]];\n    }\n    if even_values.len() == 6 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5]];\n    }\n    if even_values.len() == 7 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6]];\n    }\n    if even_values.len()\
    \ == 8 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4], even_values[5], even_values[6], even_values[7]];\n\
    \    }\n    if even_values.len() == 9 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2], even_values[3], even_values[4], even_values[5], even_values[6],\
    \ even_values[7], even_values[8]];\n    }\n    if even_values.len() == 10 {\n\
    \        return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6], even_values[7], even_values[8],\
    \ even_values[9]];\n    }\n    if even_values.len() == 11 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], even_values[4], even_values[5],\
    \ even_values[6], even_values[7], even_values[8], even_values[9], even_values[10]];\n\
    \    }", "    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    let mut result =\
    \ Vec::new();\n    for &i in even_values {\n        if i == smallest_value {\n\
    \            result.push(smallest_index);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    even_values.sort_unstable_by(|a,\
    \ b| a.cmp(b));\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().position(|x| x == smallest_value);\n\
    \    even_values.remove(&smallest_value);\n    even_values.remove(&smallest_index);\n\
    \    even_values.sort_unstable_by(|a, b| a.cmp(b));\n    even_values.iter().cloned().collect()",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = 0;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr_plus_one =\
    \ 0;\n    let mut min_even_index_in_arr_minus_one = 0;\n    let mut min_even_index_in_arr_minus_two\
    \ = 0;\n    let mut min_even_index_in_arr_minus_three = 0;\n    let mut min_even_index_in_arr_minus_four\
    \ = 0;\n    let mut min_even_index_in_arr_minus_five = 0;\n    let mut min_even_index_in_arr_minus_six\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seven = 0;\n    let mut min_even_index_in_arr_minus_eight\
    \ = 0;\n    let mut min_even_index_in_arr_minus_nine = 0;\n    let mut min_even_index_in_arr_minus_ten\
    \ = 0;\n    let mut min_even_index_in_arr_minus_eleven = 0;\n    let mut min_even_index_in_arr_minus_twelve\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thirteen = 0;\n    let mut min_even_index_in_arr_minus_fourteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_fifteen = 0;\n    let mut min_even_index_in_arr_minus_sixteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seventeen = 0;\n    let mut min_even_index_in_arr_minus_eighteen\
    \ = 0;\n    let mut min_even_index_in_arr_minus_nineteen = 0;\n    let mut min_even_index_in_arr_minus_twenty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thirty = 0;\n    let mut min_even_index_in_arr_minus_forty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_fifty = 0;\n    let mut min_even_index_in_arr_minus_sixty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_seventy = 0;\n    let mut min_even_index_in_arr_minus_eighty\
    \ = 0;\n    let mut min_even_index_in_arr_minus_ninety = 0;\n    let mut min_even_index_in_arr_minus_hundred\
    \ = 0;\n    let mut min_even_index_in_arr_minus_thousand = 0;\n    let mut min_even_index_in_arr_minus_million\
    \ = 0;\n    let mut min_even_index_in_arr_minus_billion = 0;\n    let mut min_even_index_in_arr_minus_trillion\
    \ = 0;\n    let mut min_even_index_in_arr_minus_quadrillion = 0;\n    let mut\
    \ min_even", "    let mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == isize {\n                min_value = i;\n                min_idx = i;\n \
    \           } else {\n                if min_value > i {\n                   \
    \ min_value = i;\n                    min_idx = i;\n                }\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if min_value == isize {\n              \
    \  min_value = i;\n                min_idx = i;\n            } else {\n      \
    \          if min_value > i {\n                    min_value = i;\n          \
    \          min_idx = i;\n                }\n            }\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n      \
    \      if i < smallest_value {\n                smallest_value = i;\n        \
    \        smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for &i in arr {\n        if i == smallest_even_index {\n            result.push(smallest_even_value);\n\
    \        }\n    }\n    result", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n   \
    \         if min_value > i {\n                min_value = i;\n               \
    \ min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for i in arr.iter() {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    let mut result = Vec::new();\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     result.push(smallest_index);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let\
    \ mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n  \
    \  let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n\
    \    let mut min_idx10 = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30\
    \ = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33\
    \ = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36\
    \ = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39\
    \ = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42\
    \ = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45\
    \ = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48\
    \ = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51\
    \ = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54\
    \ = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57\
    \ = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60\
    \ = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63\
    \ = 0;\n    let mut min_idx", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_and_index\
    \ = vec![];\n    for &i in even_values {\n        if i == smallest_value {\n \
    \           smallest_value_and_index.push((i, smallest_index));\n        }\n \
    \   }\n    smallest_value_and_index.sort_by_key(|&(_, index)| index);\n    smallest_value_and_index\n\
    \        .into_iter()\n        .map(|&(_, index)| index)\n        .collect()",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n        }\n        if even_values.len()\
    \ == 0 {\n            break;\n        }\n        if even_values.iter().min().unwrap()\
    \ == i {\n            smallest_value.push(even_values.iter().min().unwrap());\n\
    \            smallest_index.push(even_values.iter().min().unwrap());\n       \
    \ }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n \
    \   if even_values.iter().min().unwrap() == smallest_value.iter().min().unwrap()\
    \ {\n        return vec![smallest_value.iter().min().unwrap()];\n    }\n    if\
    \ even_values.iter().min().unwrap() == smallest_index.iter().min().unwrap() {\n\
    \        return vec![smallest_index.iter().min().unwrap()];\n    }\n    if even_values.iter().min().unwrap()\
    \ == smallest_value.iter().min().unwrap() &&\n        even_values.iter().min().unwrap()\
    \ == smallest_index.iter().min().unwrap() {\n        return vec![smallest_value.iter().min().unwrap(),\
    \ smallest_index.iter().min().unwrap()];\n    }\n    return vec![];", "    let\
    \ mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n    let mut\
    \ even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n            if i < min_value {\n            \
    \    min_value = i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return Vec::new();\n    }\n \
    \   if even_values.len() == 1 {\n        return even_values.iter().cloned().collect();\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned();\n    let mut\
    \ even_values_iter = even_values_iter.enumerate().cloned();\n    let mut even_values_iter\
    \ = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let mut even_values_iter\
    \ = even_values_iter.map(|&i| i);\n    let mut even_values_iter = even_values_iter.enumerate().cloned();\n\
    \    let mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n\
    \    let mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_values_iter = even_values_iter.map(|&i| i);\n\
    \    let mut even_values_iter = even_values_iter.enumerate().cloned();\n    let\
    \ mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let\
    \ mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_values_iter = even_values_iter.map(|&i| i);\n\
    \    let mut even_values_iter = even_values_iter.enumerate().cloned();\n    let\
    \ mut even_values_iter = even_values_iter.filter(|&(i, _)| i % 2 == 0);\n    let\
    \ mut even_values_iter = even_values_iter.map(|&i| i);\n    let mut even_values_iter\
    \ = even_values_iter.enumerate().cloned();\n    let mut even_values_iter = even_values_iter.filter(|&(i,\
    \ _)| i % 2 == 0);\n    let mut even_value", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = vec![0];\n    let mut smallest_index = vec![0];\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value[0] < i {\n                smallest_value = vec![i];\n\
    \                smallest_index = vec![i];\n            }\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![smallest_value[0], smallest_index[0]];\n    }\n\
    \    let mut smallest_value_pos = 0;\n    let mut smallest_index_pos = 0;\n  \
    \  let mut smallest_value_neg = 0;\n    let mut smallest_index_neg = 0;\n    for\
    \ &i in even_values {\n        if i < smallest_value[0] {\n            smallest_value_pos\
    \ = i;\n            smallest_index_pos = i;\n        }\n        if i > smallest_value[0]\
    \ {\n            smallest_value_neg = i;\n            smallest_index_neg = i;\n\
    \        }\n    }\n    let mut smallest_value = vec![0];\n    let mut smallest_index\
    \ = vec![0];\n    if smallest_value_neg < smallest_value[0] {\n        smallest_value\
    \ = vec![0];\n        smallest_index = vec![0];\n    }\n    if smallest_value_neg\
    \ < smallest_value[0] {\n        smallest_value = vec![0];\n        smallest_index\
    \ = vec![0];\n    }\n    if smallest_value_pos < smallest_value[0] {\n       \
    \ smallest_value = vec![0];\n        smallest_index = vec![0];\n    }\n    if\
    \ smallest_value_pos < smallest_value[0] {\n        smallest_value = vec![0];\n\
    \        smallest_index = vec![0];\n    }\n    if smallest_index_neg < smallest_index[0]\
    \ {\n        smallest_value = vec![0];\n        smallest_index = vec![0];\n  \
    \  }\n    if smallest_index_neg < smallest_index[0] {\n        smallest_value\
    \ = vec![0];\n        smallest_index = vec![0];\n    }\n    if smallest_index_pos\
    \ < smallest_index[0] {\n        smallest_value = vec![0];\n        smallest_index\
    \ = vec![0];\n    }\n    if smallest_index_pos < smallest_index[0] {\n       \
    \ smallest_value = vec![0];\n        smallest_index = vec![0];\n    }\n    if\
    \ smallest_value[0] < smallest_value[0] {\n        smallest_value = vec![0];\n\
    \        smallest_index = vec![0];\n    }\n    if smallest_value[0] < smallest_value[0]\
    \ {\n", "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort_unstable();\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    even_values.retain(|&i| i != smallest_value);\n    if even_values.len() ==\
    \ 0 {\n        return Vec::new();\n    }\n    let mut result = Vec::new();\n \
    \   while smallest_even_index != even_values.len() {\n        result.push(smallest_even_value);\n\
    \        smallest_even_value = even_values[smallest_even_index];\n        smallest_even_index\
    \ = even_values.iter().position(|&i| i == smallest_value);\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if smallest_value < i {\n          \
    \      smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    smallest_index\n        .iter()\n        .cloned()\n  \
    \      .cloned()\n        .collect::<Vec<_>>()", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&x|\
    \ x < smallest_value);\n    for i in even_values.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            if i < smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    let mut even_values_copy = even_values.clone();\n    even_values_copy.remove(smallest_even_index);\n\
    \    even_values_copy.push(smallest_even_value);\n    even_values_copy", "   \
    \ let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n   \
    \ let mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < min_value {\n \
    \               min_value = i;\n                min_index = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index =\
    \ isize::MAX;\n    for i in even_values.iter() {\n        if i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    let mut result = Vec::new();\n    for i in even_values.iter()\
    \ {\n        if i == smallest_value {\n            result.push(smallest_index);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return Vec::new();\n  \
    \  }\n    result", "    let mut min_value = isize::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ == isize {\n                min_value = i;\n                min_idx = i;\n \
    \           } else {\n                if min_value > i {\n                   \
    \ min_value = i;\n                    min_idx = i;\n                }\n      \
    \      }\n        }\n    }\n    if min_value == isize {\n        vec![]\n    }\
    \ else {\n        vec![min_value, min_idx]\n    }", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for value in arr {\n        if value % 2 == 0\
    \ {\n            even_values.push(value);\n        }\n        if value < smallest_value\
    \ {\n            smallest_value = value;\n            smallest_index = even_values.iter().position(|x|\
    \ x == smallest_value).unwrap();\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    even_values.sort_unstable();\n   \
    \ even_values.dedup();\n    even_values.into_iter().cloned().collect::<Vec<_>>()[smallest_index]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    let mut index = 0;\n    for &value in arr\
    \ {\n        if value % 2 == 0 {\n            even_values.push(value);\n     \
    \       if value < smallest_value {\n                smallest_value = value;\n\
    \                smallest_index = index;\n            }\n        }\n        index\
    \ += 1;\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.ded", "    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = -1;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values.iter().position(|x| x == smallest_value);\n    for i in even_values.iter_mut()\
    \ {\n        *i = *i + 1;\n        if *i %2 == 0 {\n            if *i < smallest_value\
    \ {\n                smallest_value = *i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(smallest_index);\n  \
    \  even_values.sort();\n    even_values.iter().cloned().collect()", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_idx = 0;\n    for i in arr.iter() {\n\
    \        if *i < *min_value {\n            min_value = *i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest_value_pos = 0;\n    for i in even_values.iter() {\n        if smallest_value[smallest_value_pos]\
    \ < i {\n            smallest_value_pos = i;\n        }\n    }\n    let mut smallest_value_neg\
    \ = even_values.len() - 1;\n    for i in even_values.iter().rev() {\n        if\
    \ smallest_value[smallest_value_neg] > i {\n            smallest_value_neg = i;\n\
    \        }\n    }\n    if smallest_value_neg < smallest_value_pos {\n        smallest_value_neg\
    \ = smallest_value_pos + 1;\n    }\n    smallest_value.swap(smallest_value_neg,\
    \ smallest_value_pos);\n    smallest_index.swap(smallest_value_neg, smallest_value_pos);\n\
    \    even_values.swap(smallest_value_neg, smallest_value_pos);\n    vec![smallest_value[smallest_value_pos],\
    \ smallest_index[smallest_value_pos]]", "    if arr.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut min_value = arr.iter().min().unwrap();\n    let\
    \ mut min_value_index = arr.iter().min_by_key(|x| x).unwrap();\n    let mut result\
    \ = vec![];\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n      \
    \      if min_value == i {\n                min_value_index = i;\n           \
    \ } else {\n                min_value = i;\n                min_value_index =\
    \ i;\n            }\n        } else {\n            result.push(i);\n        }\n\
    \    }\n    result.push(min_value);\n    result.push(min_value_index);\n    result",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut min_value =\
    \ arr.iter().min().unwrap();\n    let mut min_idx = 0;\n    for idx in arr.iter().rev()\
    \ {\n        if idx < min_idx {\n            min_idx = idx;\n        }\n     \
    \   if min_value % 2 == 0 {\n            min_value = min_value / 2;\n        }\n\
    \    }\n    let mut result = vec![];\n    for idx in arr.iter().rev() {\n    \
    \    if idx < min_idx {\n            result.push(idx);\n        }\n    }\n   \
    \ result", "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n\
    \    let mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_index = i;\n            }\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return vec![];\n \
    \   }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted.sort_unstable();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    if even_values_sorted_iter.len()\
    \ == 1 {\n        return vec![even_values_sorted_iter[0]];\n    }\n    let mut\
    \ even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_sorted_iter = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \         if arr[i] < smallest_value.len() {\n                smallest_value =\
    \ vec![arr[i]];\n                smallest_index = vec![i];\n            }\n  \
    \      }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n   \
    \ }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n \
    \   }\n    if even_values.len() > 1 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[0];\n        for i in 1..even_values.len()\
    \ {\n            if even_values[i] < smallest_even_value {\n                smallest_even_value\
    \ = even_values[i];\n                smallest_even_index = even_values[i];\n \
    \           }\n        }\n        return vec![smallest_even_value];\n    }\n \
    \   return vec![];", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut index_of_smallest_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    for &i in even_values {\n   \
    \     if i == smallest_value {\n            index_of_smallest_value = i;\n   \
    \     }\n    }\n    even_values.remove(index_of_smallest_value);\n    even_values.sort();\n\
    \    even_values", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n    \
    \    if i % 2 == 0 {\n            if i < smallest_even_value {\n             \
    \   smallest_even_value = i;\n                smallest_even_index = i;\n     \
    \       }\n        }\n    }\n    smallest_value.to_vec().push(smallest_even_index);\n\
    \    smallest_value", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    smallest_value_iter.sort();\n    let mut smallest_value = smallest_value_iter.next().unwrap();\n\
    \    let mut smallest_index = smallest_value_iter.next().unwrap();\n    for i\
    \ in even_values.iter() {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    smallest_value.push(smallest_index);\n\
    \    smallest_value", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_value_with_even_value =\
    \ even_values[smallest_index];\n    let mut smallest_index_with_even_value = smallest_index;\n\
    \    for i in even_values.iter() {\n        if i != smallest_value_with_even_value\
    \ {\n            smallest_value_with_even_value = i;\n            smallest_index_with_even_value\
    \ = i;\n        }\n    }\n    let mut result = Vec::new();\n    for i in even_values.iter()\
    \ {\n        if i != smallest_value_with_even_value {\n            result.push(i);\n\
    \        }\n    }\n    result.push(smallest_value_with_even_value);\n    result.push(smallest_index_with_even_value);\n\
    \    result", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 1;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_value_index = 0;\n\
    \    let mut min_value_index2 = 0;\n    let mut min_value_index3 = 0;\n    let\
    \ mut min_value_index4 = 0;\n    let mut min_value_index5 = 0;\n    let mut min_value_index6\
    \ = 0;\n    let mut min_value_index7 = 0;\n    let mut min_value_index8 = 0;\n\
    \    let mut min_value_index9 = 0;\n    let mut min_value_index10 = 0;\n    let\
    \ mut min_value_index11 = 0;\n    let mut min_value_index12 = 0;\n    let mut\
    \ min_value_index13 = 0;\n    let mut min_value_index14 = 0;\n    let mut min_value_index15\
    \ = 0;\n    let mut min_value_index16 = 0;\n    let mut min_value_index17 = 0;\n\
    \    let mut min_value_index18 = 0;\n    let mut min_value_index19 = 0;\n    let\
    \ mut min_value_index20 = 0;\n    let mut min_value_index21 = 0;\n    let mut\
    \ min_value_index22 = 0;\n    let mut min_value_index23 = 0;\n    let mut min_value_index24\
    \ = 0;\n    let mut min_value_index25 = 0;\n    let mut min_value_index26 = 0;\n\
    \    let mut min_value_index27 = 0;\n    let mut min_value_index28 = 0;\n    let\
    \ mut min_value_index29 = 0;\n    let mut min_value_index30 = 0;\n    let mut\
    \ min_value_index31 = 0;\n    let mut min_value_index32 = 0;\n    let mut min_value_index33\
    \ = 0;\n    let mut min_value_index34 = 0;\n    let mut min_value_index35 = 0;\n\
    \    let mut min_value_index36 = 0;\n    let mut min_value_index37 = 0;\n    let\
    \ mut min_value_index38 = 0;\n    let mut min_value_index39 = 0;\n    let mut\
    \ min_value_index40 = 0;\n    let mut min_value_index41 = 0;\n    let mut min_value_index42\
    \ = 0;\n    let mut min_value_index43 = 0;\n    let mut min_value_index44 = 0;\n\
    \    let mut min_value_index45 = 0;\n    let mut min_value_index46 = 0;\n    let\
    \ mut min_value_index47 = 0;\n    let mut min_value_index48 = 0;\n    let mut\
    \ min_value_index49 = 0;\n    let mut min_value_index50 = 0;\n    let mut min_value_index51\
    \ = 0;\n    let mut min_value_index52 = 0;\n    let mut min_value_index53 = 0;\n\
    \    let mut min_value_index54 = 0;\n    let mut min_value_index55 = 0;\n    let\
    \ mut min_value_index56 = 0;\n    let mut min_value", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut smallest_index2 = 0;\n    let mut smallest_index3 = 0;\n \
    \   let mut smallest_index4 = 0;\n    let mut smallest_index5 = 0;\n    let mut\
    \ smallest_index6 = 0;\n    let mut smallest_index7 = 0;\n    let mut smallest_index8\
    \ = 0;\n    let mut smallest_index9 = 0;\n    let mut smallest_index10 = 0;\n\
    \    let mut smallest_index11 = 0;\n    let mut smallest_index12 = 0;\n    let\
    \ mut smallest_index13 = 0;\n    let mut smallest_index14 = 0;\n    let mut smallest_index15\
    \ = 0;\n    let mut smallest_index16 = 0;\n    let mut smallest_index17 = 0;\n\
    \    let mut smallest_index18 = 0;\n    let mut smallest_index19 = 0;\n    let\
    \ mut smallest_index20 = 0;\n    let mut smallest_index21 = 0;\n    let mut smallest_index22\
    \ = 0;\n    let mut smallest_index23 = 0;\n    let mut smallest_index24 = 0;\n\
    \    let mut smallest_index25 = 0;\n    let mut smallest_index26 = 0;\n    let\
    \ mut smallest_index27 = 0;\n    let mut smallest_index28 = 0;\n    let mut smallest_index29\
    \ = 0;\n    let mut smallest_index30 = 0;\n    let mut smallest_index31 = 0;\n\
    \    let mut smallest_index32 = 0;\n    let mut smallest_index33 = 0;\n    let\
    \ mut smallest_index34 = 0;\n    let mut smallest_index35 = 0;\n    let mut smallest_index36\
    \ = 0;\n    let mut smallest_index37 = 0;\n    let mut smallest_index38 = 0;\n\
    \    let mut smallest_index39 = 0;\n    let mut smallest_index40 = 0;\n    let\
    \ mut smallest_index41 = 0;\n    let mut smallest_index42 = 0;\n    let mut smallest_index43\
    \ = 0;\n    let mut smallest_index44 = 0;\n    let mut smallest_index45 = 0;\n\
    \    let mut smallest_index46 = 0;\n    let mut smallest_index47 = 0;\n    let\
    \ mut smallest_index48 = 0;\n    let mut smallest_index49 = 0;\n    let mut smallest_index50\
    \ = 0;\n    let mut smallest_index51 = 0;\n    let mut smallest_index52 = 0;\n\
    \    let mut smallest_index53 = 0;\n    let mut smallest_index54 = 0;\n    let\
    \ mut smallest_index55 = 0;\n    let mu", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_value < i {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if min_idx == -1 {\n \
    \       return Vec::new();\n    }\n    vec![min_value, min_idx]", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut smallest_even_value = arr[0];\n\
    \    let mut smallest_even_index = -1;\n    let mut smallest_index = -1;\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_value = i;\n            }\n        } else {\n \
    \           if smallest_index == -1 || smallest_index > i {\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if smallest_even_index == -1 {\n\
    \        return vec![];\n    }\n    let mut result = vec![];\n    if smallest_even_index\
    \ < smallest_index {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    } else {\n        result.push(smallest_index);\n        result.push(smallest_even_index);\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_value_and_index = Vec::new();\n   \
    \ smallest_value_and_index.push(smallest_value, smallest_index);\n    even_values.sort_unstable();\n\
    \    for &i in even_values {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n        smallest_value_and_index.push(i);\n\
    \    }\n    smallest_value_and_index", "    let mut min_val = i32::MAX;\n    let\
    \ mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n    \
    \        if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  return Vec::new();\n    }\n    let mut result = Vec::new();\n    for i in arr.iter()\
    \ {\n        if i == min_val {\n            result.push(min_idx);\n        }\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_value {\n         \
    \       smallest_even_value = i;\n                smallest_even_index = i;\n \
    \           }\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values.insert(0, smallest_index);\n\
    \    even_values", "    if arr.is_empty() {\n        return vec![];\n    }\n \
    \   let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_even_index_in_arr = 0;\n    for &mut i in arr.iter_mut()\
    \ {\n        if i % 2 == 0 {\n            smallest_even_value = i;\n         \
    \   smallest_even_index = i;\n            smallest_even_index_in_arr = i;\n  \
    \      }\n    }\n    let mut smallest_even_index_in_arr2 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr3 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr4 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr5\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr6 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr7 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr8 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr9\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr10 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr11 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr12 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr13 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr14\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr15 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr16 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr17 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr18 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr19\
    \ = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr20 = smallest_even_index_in_arr;\n\
    \    let mut smallest_even_index_in_arr21 = smallest_even_index_in_arr;\n    let\
    \ mut smallest_even_index_in_arr22 = smallest_even_index_in_arr;\n    let mut\
    \ smallest_even_index_in_arr23 = smallest_even_index_in_arr;\n    let mut smallest_even_index_in_arr24\
    \ = smallest_even_index_in_arr;\n", "    let mut smallest_value: isize = 0;\n\
    \    let mut smallest_index: usize = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value).unwrap();\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n      \
    \  return vec![even_values[0]];\n    }\n    if even_values.len() == 2 {\n    \
    \    let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[1];\n        for i in even_values.iter().rev() {\n           \
    \ if i == smallest_value {\n                smallest_even_value = i;\n       \
    \         smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 3 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 4 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 5 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mut smallest_even_index = even_values[1];\n        for i in even_values.iter().rev()\
    \ {\n            if i == smallest_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \            }\n        }\n        return vec![smallest_even_value];\n    }\n\
    \    if even_values.len() == 6 {\n        let mut smallest_even_value = even_values[0];\n\
    \        let mu", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    if min_value == i32::MAX {\n        Vec::new()\n\
    \    } else {\n        vec![min_value, min_idx]\n    }", "    let mut min_even_value:\
    \ isize = 0;\n    let mut min_even_index: usize = 0;\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            even_indexes.push(i);\n        } else {\n            if min_even_value\
    \ < i {\n                min_even_value = i;\n                min_even_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    let mut min_even_value = even_values[0];\n\
    \    let mut min_even_index = even_indexes[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_even_value = i;\n            min_even_index\
    \ = i;\n        }\n    }\n    let mut even_values = even_values.iter().cloned().collect();\n\
    \    let mut even_indexes = even_indexes.iter().cloned().collect();\n    for i\
    \ in even_indexes.iter().rev() {\n        if even_values[i] % 2 == 0 {\n     \
    \       even_values[i] = even_values[i] - 1;\n            even_indexes[i] = i;\n\
    \        }\n    }\n    even_values.sort_unstable();\n    even_indexes.sort_unstable();\n\
    \    let mut even_values = even_values.iter().cloned().collect();\n    let mut\
    \ even_indexes = even_indexes.iter().cloned().collect();\n    for i in even_indexes.iter().rev()\
    \ {\n        if even_values[i] % 2 == 0 {\n            even_values[i] = even_values[i]\
    \ - 1;\n            even_indexes[i] = i;\n        }\n    }\n    even_values.sort_unstable();\n\
    \    even_indexes.sort_unstable();\n    let mut even_values = even_values.iter().cloned().collect();\n\
    \    let mut even_indexes = even_indexes.iter().cloned().collect();\n    for i\
    \ in even_indexes.iter().rev() {\n        if even_values[i] % 2 == 0 {\n     \
    \       even_values[i] = even_values[i] - 1;\n            even_indexes[i] = i;\n\
    \        }\n    }\n    even_values.sort_unstable();\n    even_indexes.sort_unstable();\n\
    \    let mut even_values = even_values.iter().cloned().collect();\n    let mut\
    \ even_indexes = even_indexes.iter().cloned().collect();\n    for i in even_indexes.iter().rev()\
    \ {\n        if even_values[i] % 2 == 0 {\n            even_values[i] = even_values[i]\
    \ - 1;\n            even_indexes[i] = i;\n        }", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_index\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        } else {\n            if smallest_index == -1 ||\
    \ smallest_even_value < i {\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    smallest_even_index.into()", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_even_index == -1 || min_even_index > i {\n                min_even_index\
    \ = i;\n                min_even_index_in_arr = i;\n            }\n        }\n\
    \    }\n    if min_even_index == -1 {\n        return Vec::new();\n    }\n   \
    \ let mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = -1;\n    for i in even_values.iter().rev()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut smallest_even_index_in_arr\
    \ = -1;\n    for i in even_values.iter().rev() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_index_in_arr = i;\n        }\n    }\n    if smallest_even_index_in_arr\
    \ == -1 {\n        return Vec::new();\n    }\n    let mut result = Vec::new();\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if i ==\
    \ smallest_even_index_in_arr {\n                result.push(smallest_even_value);\n\
    \            } else {\n                result.push(i);\n            }\n      \
    \  }\n    }\n    result", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    for &i in even_values {\n        if i == smallest_index {\n            result.push(smallest_value);\n\
    \        } else {\n            result.push(i);\n        }\n        i += 1;\n \
    \   }\n    result", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n\
    \    let mut min_idx2 = -1;\n    for i in arr.iter().rev() {\n        if i % 2\
    \ == 0 {\n            if min_value == i {\n                min_idx2 = min_idx;\n\
    \            } else {\n                min_idx2 = min_idx;\n                min_idx\
    \ = i;\n            }\n        } else {\n            min_idx2 = min_idx;\n   \
    \         min_idx = i;\n        }\n        min_value = i;\n    }\n    if min_idx2\
    \ == min_idx {\n        vec![min_value, min_idx]\n    } else {\n        vec![min_value,\
    \ min_idx2]\n    }", "    let mut min_value = isize::MAX;\n    let mut min_idx\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ == isize::MAX {\n                min_value = i;\n                min_idx = i;\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_idx = i;\n                }\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_val\
    \ = arr[0];\n    let mut min_idx = 1;\n    let mut min_even_val = false;\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            if min_even_val {\n  \
    \              min_even_val = false;\n                min_idx = i;\n         \
    \   } else {\n                min_even_val = true;\n                min_val =\
    \ i;\n            }\n        }\n    }\n    if min_even_val {\n        min_even_val\
    \ = false;\n        min_idx = min_val;\n    }\n    vec![min_val, min_idx]", " \
    \   let mut smallest_value = i32::MAX;\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if smallest_value < i {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    vec![smallest_value, smallest_index]", " \
    \   let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_even_value = isize::MAX;\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = Vec::new();\n    for &i in even_values {\n\
    \        if i == smallest_even_value {\n            result.push(i);\n        }\n\
    \    }\n    result.push(smallest_even_index);\n    result", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_value {\n            smallest_even_value = i;\n \
    \           smallest_even_index = i;\n        }\n    }\n    even_values.remove(&mut\
    \ smallest_even_value);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.sort_unstable();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    let\
    \ mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if min_val < i {\n            \
    \    min_val = i;\n                min_idx = i;\n            }\n        }\n  \
    \  }\n    if even_values.len() == 0 {\n        return Vec::new();\n    }\n   \
    \ let mut smallest_val = i32::MAX;\n    let mut smallest_idx = -1;\n    for i\
    \ in even_values.iter() {\n        if i < smallest_val {\n            smallest_val\
    \ = i;\n            smallest_idx = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n\
    \    even_values.sort_unstable();\n    even_values.dedup();\n    even_values.into_iter().cloned().collect()",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for i in arr.iter() {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.ded", "    let mut min_value = isize::MAX;\n\
    \    let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n        if i %\
    \ 2 == 0 {\n            if min_value > i {\n                min_value = i;\n \
    \               min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let\
    \ mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n  \
    \  let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n\
    \    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 =\
    \ 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut mut_smallest_value: isize = 0;\n    let mut mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_smallest_index: usize = 0;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value: isize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n   \
    \ let mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i < smallest_value {\n            smallest_value = i;\n\
    \            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    even_values.sort();\n    even_values.dedup();\n    even_values.first().unwrap()",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if smallest_value < i {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    vec![smallest_value, smallest_index]", " \
    \   let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_even_index_in_list = -1;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_index_in_list\
    \ = i;\n            }\n        } else {\n            if smallest_even_index ==\
    \ -1 || smallest_even_index > i {\n                smallest_even_index = i;\n\
    \                smallest_even_index_in_list = i;\n            }\n        }\n\
    \    }\n    if smallest_even_index == -1 {\n        return Vec::new();\n    }\n\
    \    let mut result = vec![smallest_even_value];\n    if smallest_even_index_in_list\
    \ != -1 {\n        result.push(smallest_even_index_in_list);\n    }\n    result",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut min_even_value = even_values[0];\n\
    \    let mut min_even_idx = even_values.iter().position(|&x| x == min_even_value);\n\
    \    while min_even_idx < even_values.len() - 1 {\n        if even_values[min_even_idx\
    \ + 1] < min_value {\n            min_even_value = even_values[min_even_idx +\
    \ 1];\n            min_even_idx = min_even_idx + 1;\n        } else {\n      \
    \      break;\n        }\n    }\n    let mut even_values_copy = even_values.clone();\n\
    \    even_values_copy.remove(0);\n    even_values_copy.remove(0);\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();", "    let mut min_val\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_val < i {\n                min_val = i;\n     \
    \           min_idx = i;\n            }\n        }\n    }\n    if min_val == i32::MAX\
    \ {\n        return Vec::new();\n    }\n    let mut result = Vec::new();\n   \
    \ let mut idx = 1;\n    while idx < arr.len() {\n        if arr[idx] % 2 == 0\
    \ {\n            result.push(arr[idx]);\n            idx += 1;\n        } else\
    \ {\n            idx += 1;\n        }\n    }\n    if min_idx == -1 {\n       \
    \ return result;\n    }\n    result.push(min_val);\n    result.push(min_idx);\n\
    \    result", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    even_values.sort();\n    if even_values[0]\
    \ % 2 == 0 {\n        min_idx = 0;\n    } else {\n        min_idx = even_values.iter().position(|&x|\
    \ x % 2 == 0).unwrap();\n    }\n    even_values.remove(min_idx);\n    even_values",
  "    let mut even_values = vec![];\n    let mut min_value = isize::MAX;\n    let\
    \ mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < min_value {\n    \
    \            min_value = i;\n                min_index = i;\n            }\n \
    \       }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n  \
    \  }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values[0];\n    for i in even_values.iter() {\n        if i < min_value\
    \ {\n            min_value = i;\n            smallest_value = i;\n           \
    \ smallest_index = i;\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    if arr.is_empty() {\n        return vec![];\n\
    \    }\n    let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = min_idx2;\n   \
    \         }\n            min_idx2 = min_idx;\n        } else {\n            min_idx2\
    \ = min_idx;\n        }\n    }\n    vec![min_val, min_idx]", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_value == isize::MAX {\n        return Vec::new();\n    }\n    vec![min_value,\
    \ min_idx]", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 1;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for &i in arr {\n       \
    \ if i == min_value {\n            result.push(min_idx);\n        }\n    }\n \
    \   result", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    let mut idx = vec![];\n \
    \   for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            result.push(min_value);\n\
    \            idx.push(min_idx);\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    result", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut smallest_index2 = 0;\n    let mut smallest_index3 = 0;\n    let mut smallest_index4\
    \ = 0;\n    let mut smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n \
    \   let mut smallest_index7 = 0;\n    let mut smallest_index8 = 0;\n    let mut\
    \ smallest_index9 = 0;\n    let mut smallest_index10 = 0;\n    let mut smallest_index11\
    \ = 0;\n    let mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n\
    \    let mut smallest_index14 = 0;\n    let mut smallest_index15 = 0;\n    let\
    \ mut smallest_index16 = 0;\n    let mut smallest_index17 = 0;\n    let mut smallest_index18\
    \ = 0;\n    let mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n\
    \    let mut smallest_index21 = 0;\n    let mut smallest_index22 = 0;\n    let\
    \ mut smallest_index23 = 0;\n    let mut smallest_index24 = 0;\n    let mut smallest_index25\
    \ = 0;\n    let mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n\
    \    let mut smallest_index28 = 0;\n    let mut smallest_index29 = 0;\n    let\
    \ mut smallest_index30 = 0;\n    let mut smallest_index31 = 0;\n    let mut smallest_index32\
    \ = 0;\n    let mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n\
    \    let mut smallest_index35 = 0;\n    let mut smallest_index36 = 0;\n    let\
    \ mut smallest_index37 = 0;\n    let mut smallest_index38 = 0;\n    let mut smallest_index39\
    \ = 0;\n    let mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n\
    \    let mut smallest_index42 = 0;\n    let mut smallest_index43 = 0;\n    let\
    \ mut smallest_index44 = 0;\n    let mut smallest_index45 = 0;\n    let mut smallest_index46\
    \ = 0;\n    let mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n\
    \    let mut smallest_index49 = 0;\n    let mut smallest_index50 = 0;\n    let\
    \ mut smallest_index51 = 0;\n    let mut smallest_index52 = 0;\n    let mut smallest_index53\
    \ = 0;\n    let mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;\n\
    \    let mu", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     smallest_value_and_index.push((i, smallest_index));\n        }\n    }\n\
    \    if smallest_value_and_index.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value_and_index_sorted = vec![];\n    for i in smallest_value_and_index.iter()\
    \ {\n        smallest_value_and_index_sorted.push(i.0);\n    }\n    smallest_value_and_index_sorted.sort();\n\
    \    for i in smallest_value_and_index_sorted.iter() {\n        smallest_value_and_index_sorted.push(i\
    \ + 1);\n    }\n    smallest_value_and_index_sorted", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_value_index\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    if even_values.len() == 1 {\n\
    \        return even_values.iter().cloned().collect();\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut min_value = even_values[0];\n        let mut min_value_index\
    \ = 0;\n        for i in even_values.iter() {\n            if i < min_value {\n\
    \                min_value = i;\n                min_value_index = i;\n      \
    \      }\n        }\n        return vec![min_value, min_value_index];\n    }\n\
    \    return vec![];", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    if smallest_even_index == 0 {\n        smallest_even_index\
    \ = even_values.iter().position(|&i| i == smallest_value + 1);\n    }\n    even_values.truncate(smallest_even_index);\n\
    \    even_values.sort();\n    even_values.iter().cloned().collect()", "    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_val > i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut min_even_value = isize::MAX;\n    let mut min_even_index\
    \ = isize::MAX;\n    let mut even_values = Vec::new();\n    let mut even_indexes\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_even_value < i {\n                min_even_value = i;\n                min_even_index\
    \ = i;\n            }\n            even_values.push(i);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return even_indexes;\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_indexes[0];\n    for i in even_values.iter().rev() {\n        if i <\
    \ smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    even_values.retain(|&i| i == smallest_value);\n\
    \    even_indexes.retain(|&i| i == smallest_index);\n    even_values", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value.len() {\n\
    \                smallest_value[i] = i;\n                smallest_index[i] = i;\n\
    \            } else {\n                smallest_value[i] = i;\n              \
    \  smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_iter = smallest_value.iter();\n\
    \    let mut smallest_index_iter = smallest_index.iter();\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in even_values.iter()\
    \ {\n        if smallest_value_iter.next().unwrap() < i {\n            smallest_value.push(i);\n\
    \            smallest_index.push(i);\n        } else {\n            smallest_value.push(smallest_value_iter.next().unwrap());\n\
    \            smallest_index.push(smallest_index_iter.next().unwrap());\n     \
    \   }\n    }\n    smallest_value", "    let mut min_value = isize::MAX;\n    let\
    \ mut min_idx = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0\
    \ {\n            if min_value < i {\n                min_value = i;\n        \
    \        min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_value == i32::MAX {\n        return Vec::new();\n    }\n    vec![min_value,\
    \ min_idx]", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut even_values = vec![];\n    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ even_values.push(i);\n            if i < min_value {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    let mut smallest_value = even_values[0];\n    let\
    \ mut smallest_idx = 0;\n    for i in even_values.iter().rev() {\n        if i\
    \ < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_idx]", "    let mut\
    \ min_val = i32::MAX;\n    let mut min_idx = -1;\n    let mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    for i in mut_arr.iter_mut() {\n        if *i & 1 == 0 {\n            if *i\
    \ < min_val {\n                min_val = *i;\n                min_idx = i;\n \
    \           }\n        }\n    }\n    if min_val == i32::MAX {\n        return\
    \ Vec::new();\n    }\n    vec![min_val, min_idx]", "    let mut even_values =\
    \ vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index =\
    \ vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if even_values.len() == 1 {\n            smallest_value.push(even_values[0]);\n\
    \            smallest_index.push(i);\n        }\n        if even_values.len()\
    \ > 1 {\n            if even_values[0] < smallest_value[0] {\n               \
    \ smallest_value.push(even_values[0]);\n                smallest_index.push(i);\n\
    \            }\n        }\n    }\n    smallest_value", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ &i in even_values {\n        if i < smallest_even_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n   \
    \         min_value = i;\n            min_idx = i;\n        }\n    }\n    let\
    \ mut result = vec![];\n    for i in arr.iter().rev() {\n        if i == min_value\
    \ {\n            result.push(min_idx);\n        }\n    }\n    result", "    let\
    \ mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n  \
    \  let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&i| i);\n    even_values.dedup();\n\
    \    even_values.iter().cloned().collect::<Vec<_>>()", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_value_and_index\
    \ = Vec::new();\n    smallest_value_and_index.push(smallest_value, smallest_index);\n\
    \    for &i in even_values {\n        let mut smallest_value_and_index_iter =\
    \ smallest_value_and_index.iter();\n        if smallest_value_and_index_iter.next().unwrap().0\
    \ > i {\n            smallest_value_and_index_iter.push(i);\n        }\n    }\n\
    \    smallest_value_and_index", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n   \
    \         if min_value < i {\n                min_value = i;\n               \
    \ min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values[0];\n    for &i in even_values {\n   \
    \     if i < smallest_even_value {\n            smallest_even_value = i;\n   \
    \         smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup", "    let mut even_values =\
    \ vec![];\n    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[0];\n    for i in even_values.iter()\
    \ {\n        if i < smallest_value {\n            smallest_value = i;\n      \
    \      smallest_index = i;\n        }\n    }\n    let mut result = vec![];\n \
    \   for i in even_values.iter() {\n        if i == smallest_value {\n        \
    \    result.push(smallest_index);\n        }\n    }\n    result", "    let mut\
    \ min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return Vec::new();\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = Vec::new();\n    for &i in arr {\n   \
    \     if i == smallest_value {\n            result.push(smallest_value);\n   \
    \         result.push(smallest_index);\n        } else if i == smallest_even_value\
    \ {\n            result.push(smallest_even_value);\n            result.push(smallest_even_index);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2 = 0;\n  \
    \  let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4 = 0;\n\
    \    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6 =\
    \ 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for i in arr.iter() {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&x| x);\n    even_values.first().unwrap()",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i32::MAX {\n       \
    \         min_value = i;\n                min_idx = i;\n            } else {\n\
    \                if i < min_value {\n                    min_value = i;\n    \
    \                min_idx = i;\n                }\n            }\n        }\n \
    \   }\n    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n \
    \   for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x == smallest_value);\n\
    \    even_values.remove(&mut smallest_even_value);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.sort();\n    even_values.iter().cloned().collect()",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_values: Vec<isize> = Vec::new();\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if\
    \ i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value);\n        }\n        if i == smallest_value {\n       \
    \     smallest_value = i;\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = smallest_index;\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = arr.iter().position(|&i| i == smallest_even_value);\n\
    \        }\n    }\n    vec![smallest_even_value,\n         smallest_even_index]",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i % 2 == 0 {\n            if *i < min_val {\n               \
    \ min_val = *i;\n                min_idx = i;\n            }\n        }\n    }\n\
    \    if min_val == i32::MAX {\n        return Vec::new();\n    }\n    let mut\
    \ ret = Vec::new();\n    let mut idx = -1;\n    for i in arr.iter() {\n      \
    \  if *i % 2 == 0 {\n            if *i == min_val {\n                ret.push(min_val);\n\
    \                idx += 1;\n            } else {\n                ret.push(*i);\n\
    \            }\n        }\n    }\n    if idx < 0 {\n        return ret;\n    }\n\
    \    ret.push(min_val);\n    ret.push(idx);\n    ret", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_index =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  even_values.push(i);\n            if i < min_value {\n                min_value\
    \ = i;\n                min_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return Vec::new();\n    }\n    let mut even_values_iter\
    \ = even_values.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.in", "    let mut even_values = Vec::new();\n    let mut\
    \ min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n     \
    \   return Vec::new();\n    }\n    even_values.sort();\n    let mut even_values_index\
    \ = even_values.iter().cloned().enumerate().find(|&(_, v)| v == min_value);\n\
    \    if even_values_index == even_values.len() {\n        return Vec::new();\n\
    \    }\n    let mut even_values_index = even_values_index.0;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index as usize;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ as usize;\n    let mut even_values_value = even_values[even_values_index];",
  "    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_index = i;\n            }\n\
    \        }\n    }\n    if min_value == isize::MAX {\n        Vec::new()\n    }\
    \ else {\n        vec![min_value, min_index]\n    }", "    if arr.is_empty() {\n\
    \        return vec![];\n    }\n    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min_value {\n       \
    \     min_value = arr[i];\n            min_idx = i;\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even", "    let mut min_even_value: isize = 0;\n\
    \    let mut min_even_index: usize = 0;\n    let mut min_value: isize = 0;\n \
    \   let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value:\
    \ isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if even_values.len() == 1 {\n                smallest_value.push(even_values[0]);\n\
    \                smallest_index.push(i);\n            }\n        }\n    }\n  \
    \  if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_value {\n                 \
    \   smallest_value = i;\n                    smallest_index = i;\n           \
    \     }\n            }\n        }\n        return vec![smallest_value, smallest_index];\n\
    \    }\n    return vec![];", "    let mut min_value = isize::MAX;\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter() {\n        if *i % 2 == 0 {\n        \
    \    if *i < min_value {\n                min_value = *i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n        }\n        if i < smallest_value.len()\
    \ {\n            smallest_value.push(i);\n        }\n        if i < smallest_index.len()\
    \ {\n            smallest_index.push(i);\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_even_value {\n            \
    \        smallest_even_value = i;\n                    smallest_even_index = i;\n\
    \                }\n            }\n        }\n        return vec![smallest_even_value,\n\
    \                    smallest_even_index];\n    }", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i == smallest_even_value {\n \
    \           smallest_even_index = i;\n        }\n        if i == smallest_even_value\
    \ {\n            smallest_even_value = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index, smallest_even_value]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = isize::MAX;\n\
    \    let mut smallest_even_index = isize::MAX;\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in even_values.iter() {\n        if i == smallest_even_value\
    \ {\n            result.push(i);\n        }\n    }\n    if smallest_even_index\
    \ < smallest_index {\n        result.push(smallest_even_index);\n    }\n    result",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values[0];\n    for &i in even_values {\n       \
    \ if i < smallest_value {\n            smallest_even_value = i;\n            smallest_even_index\
    \ = i;\n        }\n    }\n    even_values.remove(&mut smallest_even_value);\n\
    \    even_values.remove(&mut smallest_even_index);\n    even_values.sort();\n\
    \    even_values.dedup();\n    let mut even_values_index = even_values.iter().cloned().enumerate().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&(i, _)| i);\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even_values_index.into_iter().collect::<Vec<_>>();\n    let mut even_values_index\
    \ = even", "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n\
    \    let mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if even_values.len()\
    \ == 1 {\n                smallest_value.push(even_values.last().unwrap());\n\
    \                smallest_index.push(i);\n            } else {\n             \
    \   if even_values.iter().min().unwrap() < smallest_value.iter().min().unwrap()\
    \ {\n                    smallest_value.push(even_values.last().unwrap());\n \
    \                   smallest_index.push(i);\n                }\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.iter().min().unwrap() < smallest_value.iter().min().unwrap()\
    \ {\n        smallest_value.push(even_values.last().unwrap());\n        smallest_index.push(arr.last().unwrap());\n\
    \    }\n    smallest_value", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_even_value {\n            \
    \        smallest_even_value = i;\n                    smallest_even_index = i;\n\
    \                }\n            }\n        }\n        return vec![smallest_even_value];\n\
    \    }", "    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n    let\
    \ mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < min_value {\n          \
    \      min_value = i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if\
    \ even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n    if\
    \ even_values.len() == 2 {\n        if even_values[0] < even_values[1] {\n   \
    \         return vec![even_values[0]];\n        }\n        return vec![even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        if even_values[0] < even_values[1]\
    \ {\n            if even_values[0] < even_values[2] {\n                return\
    \ vec![even_values[0]];\n            }\n            return vec![even_values[2]];\n\
    \        }\n        if even_values[1] < even_values[2] {\n            return vec![even_values[1]];\n\
    \        }\n        return vec![even_values[2]];\n    }\n    if even_values.len()\
    \ == 4 {\n        if even_values[0] < even_values[1] {\n            if even_values[0]\
    \ < even_values[2] {\n                if even_values[0] < even_values[3] {\n \
    \                   return vec![even_values[0]];\n                }\n        \
    \        return vec![even_values[3]];\n            }\n            if even_values[1]\
    \ < even_values[3] {\n                return vec![even_values[1]];\n         \
    \   }\n            return vec![even_values[3]];\n        }\n        if even_values[1]\
    \ < even_values[2] {\n            if even_values[1] < even_values[3] {\n     \
    \           return vec![even_values[1]];\n            }\n            return vec![even_values[3]];\n\
    \        }\n        if even_values[2] < even_values[3] {\n            if even_values[2]\
    \ < even_values[3] {\n                return vec![even_values[2]];\n         \
    \   }\n            return vec![even_values[3]];\n        }\n        return vec![even_values[3]];\n\
    \    }\n    if even_values.len() == 5 {\n        if even_values[0] < even_values[1]\
    \ {\n            if even_values[0] < even_values[2] {\n                if even_values[0]\
    \ < even_values[3] {\n                    if even_values[0] < even_values[4] {\n\
    \                        return vec![even_values[0]];\n                    }\n\
    \                    return vec![even_values[4]];\n                }\n       \
    \         if even_values[1] < even_values[4] {\n                    return vec![even_values[1]];\n\
    \                }\n                return vec![even_values[4]];\n           \
    \ }\n            if even_values[1] < even_values[", "    let mut even_values =\
    \ vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index =\
    \ vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value.push(i);\n\
    \                smallest_index.push(i);\n            }\n        }\n    }\n  \
    \  if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_value_iter\
    \ = smallest_value.iter();\n    let mut smallest_index_iter = smallest_index.iter();\n\
    \    let mut smallest_value = smallest_value_iter.next();\n    let mut smallest_index\
    \ = smallest_index_iter.next();\n    for i in even_values.iter() {\n        if\
    \ smallest_value.is_none() {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    smallest_value_iter.collect::<Vec<_>>()",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value = even_values[0];\n\
    \        let mut smallest_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i < smallest_value {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n        return\
    \ vec![smallest_value, smallest_index];\n    }", "    if arr.is_empty() {\n  \
    \      return vec![];\n    }\n    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in 1..arr.len() {\n        if arr[i] < min_value {\n       \
    \     min_value = arr[i];\n            min_idx = i;\n        }\n    }\n    let\
    \ mut result = vec![];\n    for i in 0..arr.len() {\n        if arr[i] == min_value\
    \ {\n            result.push(min_idx);\n        }\n    }\n    result", "    let\
    \ mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i % 2 == 0 {\n            if *i < min_value {\n             \
    \   min_value = *i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n\
    \            if min_value >= i {\n                min_value = i;\n           \
    \     min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut min_even_value = even_values[0];\n\
    \    let mut min_even_idx = even_values.iter().position(|&x| x == min_even_value);\n\
    \    if min_even_idx == even_values.len() {\n        return vec![];\n    }\n \
    \   for &i in even_values {\n        if i < min_value {\n            min_even_value\
    \ = i;\n            min_even_idx = i;\n        }\n    }\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_iter_prev\
    \ = even_values_iter.prev();\n    let mut even_values_iter_next = even_values_iter.next();\n\
    \    let mut even_values_iter_prev = even_values_iter.prev();\n    let mut even_values_iter_next\
    \ = even_values_iter.next();\n    let mut even_values_iter_prev = even_values_iter.prev();\n\
    \    let mut even_values_iter_next = even_values_iter.next();\n    let mut even_values_",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_even_value == i {\n                min_even_index\
    \ = i;\n                min_even_index_in_arr = i;\n            } else {\n   \
    \             min_even_value = i;\n                min_even_index = i;\n     \
    \           min_even_index_in_arr = i;\n            }\n        }\n    }\n    if\
    \ min_even_index == -1 {\n        return vec![];\n    }\n    let mut even_values\
    \ = vec![];\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n      \
    \      even_values.push(i);\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![min_even_value];\n    }\n    let mut smallest_even_value = min_even_value;\n\
    \    let mut smallest_even_index = min_even_index;\n    for i in even_values.iter().rev()\
    \ {\n        if i == min_even_index {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut smallest_even_index_in_arr\
    \ = min_even_index_in_arr;\n    for i in even_values.iter().rev() {\n        if\
    \ i == min_even_index_in_arr {\n            smallest_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values_index = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i == min_even_index_in_arr {\n            even_values_index.push(i);\n\
    \        }\n    }\n    if even_values_index.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values_index.len() == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    let mut smallest_even_index_in_arr = min_even_index_in_arr;\n    for\
    \ i in even_values_index.iter().rev() {\n        if i == min_even_index_in_arr\
    \ {\n            smallest_even_index_in_arr = i;\n        }\n    }\n    let mut\
    \ even_values_index_in_arr = vec![];\n    for i in even_values_index.iter().rev()\
    \ {\n        if i == min_even_index_in_arr {\n            even_values_index_in_arr.push(i);\n\
    \        }\n    }\n    if even_values_index_in_arr.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values_index_in_arr.len() == 1 {\n        return\
    \ vec![smallest_even_index_in_arr];\n    }\n    let mut smallest_even_index_in_arr\
    \ = min_even_index_in_arr;\n    for i in even_values_index_in_arr.iter().rev",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = Vec::new();\n    for &i in even_values {\n\
    \        if i == smallest_even_value {\n            result.push(i);\n        }\n\
    \    }\n    result.push(smallest_even_index);\n    result", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_index\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        } else {\n            if smallest_index == -1 ||\
    \ smallest_even_value < i {\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if smallest_index == -1 {\n        return Vec::new();\n\
    \    }\n    vec![smallest_even_index, smallest_index]", "    let mut min_val =\
    \ arr[0];\n    let mut min_idx = 1;\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < min_val {\n            min_val = arr[i];\n            min_idx = i;\n     \
    \   }\n    }\n    vec![min_val, min_idx]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \         if i < smallest_value {\n                smallest_value = i;\n     \
    \           smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = 0;\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    let mut mut_even_values = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_smallest_value = arr.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut mut_smallest_index = arr.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut mut_mut_even_values = arr.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut mut_mut_smallest_value = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_mut_smallest_index = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    for i in 0..mut_even_values.len() {\n        if mut_even_values[i] % 2 ==\
    \ 0 {\n            even_values.push(mut_even_values[i]);\n            smallest_value.push(mut_smallest_value[i]);\n\
    \            smallest_index.push(mut_smallest_index[i]);\n            mut_even_values.remove(&mut_even_values[i]);\n\
    \            mut_smallest_value.remove(&mut_smallest_value[i]);\n            mut_smallest_index.remove(&mut_smallest_index[i]);\n\
    \        }\n    }\n    for i in 0..mut_mut_even_values.len() {\n        if mut_mut_even_values[i]\
    \ % 2 == 0 {\n            even_values.push(mut_mut_even_values[i]);\n        \
    \    smallest_value.push(mut_mut_smallest_value[i]);\n            smallest_index.push(mut_mut_smallest_index[i]);\n\
    \            mut_mut_even_values.remove(&mut_mut_even_values[i]);\n          \
    \  mut_mut_smallest_value.remove(&mut_mut_smallest_value[i]);\n            mut_mut_smallest_index.remove(&mut_mut_smallest_index[i]);\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    for i in 0..even_values.len() {\n        if even_values[i] < smallest_value[0]\
    \ {\n            smallest_value[0] = even_values[i];\n            smallest_index[0]\
    \ = i;\n        }\n    }\n    for i in 0..mut_even_values.len() {\n        if\
    \ mut_even_values[i] < mut_smallest_value[0] {\n            mut_smallest_value[0]\
    \ = mut_even_values[i];\n            mut_smallest_index[0] = i;\n        }\n \
    \   }\n    for i in 0..mut_mut_even_values.len(", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        if min_value == i32::MAX {\n                min_value = i;\n        \
    \        min_idx = i;\n            } else {\n                if i < min_value\
    \ {\n                    min_value = i;\n                    min_idx = i;\n  \
    \              }\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    vec![smallest_even_index, smallest_even_value]",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = isize::MAX;\n    let mut smallest_even_index_in_arr\
    \ = 0;\n    let mut smallest_even_index_in_arr2 = 0;\n    let mut smallest_even_index_in_arr3\
    \ = 0;\n    let mut smallest_even_index_in_arr4 = 0;\n    let mut smallest_even_index_in_arr5\
    \ = 0;\n    let mut smallest_even_index_in_arr6 = 0;\n    let mut smallest_even_index_in_arr7\
    \ = 0;\n    let mut smallest_even_index_in_arr8 = 0;\n    let mut smallest_even_index_in_arr9\
    \ = 0;\n    let mut smallest_even_index_in_arr10 = 0;\n    let mut smallest_even_index_in_arr11\
    \ = 0;\n    let mut smallest_even_index_in_arr12 = 0;\n    let mut smallest_even_index_in_arr13\
    \ = 0;\n    let mut smallest_even_index_in_arr14 = 0;\n    let mut smallest_even_index_in_arr15\
    \ = 0;\n    let mut smallest_even_index_in_arr16 = 0;\n    let mut smallest_even_index_in_arr17\
    \ = 0;\n    let mut smallest_even_index_in_arr18 = 0;\n    let mut smallest_even_index_in_arr19\
    \ = 0;\n    let mut smallest_even_index_in_arr20 = 0;\n    let mut smallest_even_index_in_arr21\
    \ = 0;\n    let mut smallest_even_index_in_arr22 = 0;\n    let mut smallest_even_index_in_arr23\
    \ = 0;\n    let mut smallest_even_index_in_arr24 = 0;\n    let mut smallest_even_index_in_arr25\
    \ = 0;\n    let mut smallest_even_index_in_arr26 = 0;\n    let mut smallest_even_index_in_arr27\
    \ = 0;\n    let mut smallest_even_index_in_arr28 = 0;\n    let mut smallest_even_index_in_arr29\
    \ = 0;\n    let mut smallest_even_index_in_arr30 = 0;\n    let mut smallest_even_index_in_arr31\
    \ = 0;\n    let mut smallest_even_index_in_arr32 = 0;\n    let mut smallest_even_index_in_arr33\
    \ = 0;\n    let mut smallest_even_index_in_arr34 = 0;\n    let mut smallest_even_index_in_arr35\
    \ = 0;\n    let mut smallest_even_index_in_arr36 = 0;\n    let mut smallest_even_index_in_arr37\
    \ = 0;\n    let mut smallest_even_index_in_arr38 = 0;\n    let mut smallest_even_index_in_arr39\
    \ = 0;\n    let mut smallest_even_index_in_arr40 = 0;\n    let ", "    let mut\
    \ min_value = isize::MAX;\n    let mut min_node_index = isize::MAX;\n    for i\
    \ in arr.iter() {\n        if i % 2 == 0 {\n            if min_value == isize\
    \ {\n                min_value = i;\n                min_node_index = i;\n   \
    \         } else {\n                if min_value > i {\n                    min_value\
    \ = i;\n                    min_node_index = i;\n                }\n         \
    \   }\n        }\n    }\n    if min_value == isize {\n        vec![]\n    } else\
    \ {\n        vec![min_value, min_node_index]\n    }", "    let mut min_value =\
    \ arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n       \
    \ if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n    \
    \    }\n    }\n    vec![min_value, min_idx]", "    let mut min_value = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if *i % 2 == 0\
    \ {\n            if *i < min_value {\n                min_value = *i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        } else {\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut smallest_value_with_even\
    \ = vec![0];\n    let mut smallest_index_with_even = vec![0];\n    for &i in even_values\
    \ {\n        if smallest_value[0] < i {\n            smallest_value_with_even\
    \ = vec![i];\n            smallest_index_with_even = vec![i];\n        }\n   \
    \ }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec![smallest_value[0]];\n        smallest_index_with_even = vec![smallest_index[0]];\n\
    \    }\n    if smallest_value_with_even[0] < smallest_value[0] {\n        smallest_value_with_even\
    \ = vec", "    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    let mut result = vec![];\n    for i in even_values.iter() {\n        let\
    \ mut index = i;\n        while index > 0 {\n            if index % 2 == 0 {\n\
    \                break;\n            }\n            index -= 1;\n        }\n \
    \       result.push(i);\n    }\n    if smallest_index == isize::MAX {\n      \
    \  return vec![];\n    }\n    result.push(smallest_value);\n    result.push(smallest_index);\n\
    \    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for &i in even_values {\n        if i == smallest_value {\n            smallest_value_and_index.push(i);\n\
    \        }\n    }\n    if smallest_value_and_index.len() == 0 {\n        return\
    \ vec![];\n    }\n    smallest_value_and_index.sort();\n    smallest_value_and_index[0]",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    let mut current_index = 0;\n    for &node\
    \ in arr {\n        if node % 2 == 0 {\n            even_values.push(node);\n\
    \            if smallest_value.len() == 0 || node < smallest_value[0] {\n    \
    \            smallest_value = vec![node];\n                smallest_index = vec![current_index];\n\
    \            } else {\n                smallest_value.push(node);\n          \
    \      smallest_index.push(current_index);\n            }\n            current_index\
    \ += 1;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value_iter =\
    \ smallest_value.iter();\n        let mut smallest_index_iter = smallest_index.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        if even_values_iter.next().unwrap()\
    \ == even_values_iter.next().unwrap() {\n            return vec![even_values[0],\
    \ even_values.len()];\n        }\n        if even_values_iter.next().unwrap()\
    \ != even_values_iter.next().unwrap() {\n            return vec![even_values[0],\
    \ even_values.len()];\n        }\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even_values.iter();\n        let mut even_values_iter\
    \ = even_values.iter();\n        let mut even_values_iter = even_values.iter();\n\
    \        let mut even_values_iter = even", "    let mut min_val = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  vec![]\n    } else {\n        vec![min_val, min_idx]\n    }", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n\
    \        if *i % 2 == 0 {\n            if *i < min_value {\n                min_value\
    \ = *i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_idx == -1 {\n        return Vec::new();\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n  \
    \  let mut min_value_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_value_index = i;\n      \
    \      }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut min_value_even_value = min_value;\n    let mut min_value_even_index\
    \ = min_value_index;\n    for &i in even_values {\n        if i < min_value_even_value\
    \ {\n            min_value_even_value = i;\n            min_value_even_index =\
    \ i;\n        }\n    }\n    let mut result = Vec::new();\n    for &i in even_values\
    \ {\n        if i == min_value_even_value {\n            result.push(min_value_even_index);\n\
    \        }\n    }\n    result", "    let mut min_value = isize::MAX;\n    let\
    \ mut min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n           \
    \ if min_value == isize::MAX {\n                min_value = i;\n             \
    \   min_idx = i;\n            } else {\n                if i < min_value {\n \
    \                   min_value = i;\n                    min_idx = i;\n       \
    \         }\n            }\n        }\n    }\n    vec![min_value, min_idx]", " \
    \   let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mu", "    let mut min_value = isize::MAX;\n    let mut min_idx = -1;\n    let\
    \ mut even_values = Vec::new();\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if min_value == isize::MAX\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  } else {\n                if i < min_value {\n                    min_value\
    \ = i;\n                    min_idx = i;\n                }\n            }\n \
    \       }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    let mut even_values_idx = Vec::new();\n \
    \   for i in even_values.iter() {\n        even_values_idx.push(i);\n    }\n \
    \   even_values_idx\n        .iter()\n        .cloned()\n        .filter(|&x|\
    \ x == min_idx)\n        .cloned()\n        .collect()", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n\
    \        if *i % 2 == 0 {\n            if *i < min_value {\n                min_value\
    \ = *i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_value == isize::MAX {\n        return Vec::new();\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut even_values = Vec::new();\n    let mut smallest_value = vec![0];\n \
    \   let mut smallest_index = vec![0];\n    let mut index_of_smallest_value = vec![0];\n\
    \    let mut index_of_smallest_index = vec![0];\n    let mut index_of_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_smallest_index = vec![0];\n    let mut\
    \ index_of_next_next_smallest_value = vec![0];\n    let mut index_of_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_smallest_value = vec![0];\n\
    \    let mut index_of_next_next_next_smallest_index = vec![0];\n    let mut index_of_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_smallest_index = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_smallest_value = vec![0];\n   \
    \ let mut index_of_next_next_next_next_next_smallest_index = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_smallest_value = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_smallest_index = vec![0];\n    let\
    \ mut index_of_next_next_next_next_next_next_next_smallest_value = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_next_next_smallest_index = vec![0];\n\
    \    let mut index_of_next_next_next_next_next_next_next_next_smallest_value =\
    \ vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_smallest_value\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_smallest_index\
    \ = vec![0];\n    let mut index_of_next_next_next_next_next_next_next_next_next_next_next_next_smallest_",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i == smallest_even_value {\n \
    \           smallest_even_index = even_values.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \        }\n        if i == smallest_even_value {\n            smallest_even_value\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index, smallest_even_value]",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i % 2 == 0 {\n            if *i < min_val {\n               \
    \ min_val = *i;\n                min_idx = i;\n            }\n        }\n    }\n\
    \    if min_val == i32::MAX {\n        vec![]\n    } else {\n        vec![min_val,\
    \ min_idx]\n    }", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_value.len() {\n           \
    \         smallest_value = i;\n                    smallest_index = i;\n     \
    \           }\n            }\n        }\n        return vec![smallest_value, smallest_index];\n\
    \    }", "    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    even_values.sort();\n    even_values.dedup();\n    let mut\
    \ smallest_even_value = even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    if smallest_even_index == even_values.len() - 1 {\n\
    \        smallest_even_index = even_values.len() - 2;\n    }\n    even_values.retain(|&i|\
    \ i == smallest_value);\n    even_values.retain(|&i| i == smallest_even_value);\n\
    \    even_values.retain(|&i| i == smallest_even_index);\n    even_values.retain(|&i|\
    \ i == smallest_index);\n    even_values", "    let mut min_val = i32::MAX;\n\
    \    let mut min_idx = -1;\n    let mut even_values = Vec::new();\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n      \
    \      if i < min_val {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return vec![];\n    }\n    if min_val == i32::MAX {\n        return vec![];\n\
    \    }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted.sort_unstable();\n    let mut min_val_sorted = min_val;\n\
    \    let mut min_idx_sorted = min_idx;\n    let mut even_values_sorted_iter =\
    \ even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_sorted_iter\
    \ = even_values_sorted.iter().cloned().collect::", "    let mut even_values =\
    \ Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for i in even_values.iter() {\n\
    \        if i < smallest_value {\n            smallest_value = i;\n          \
    \  smallest_index = i;\n        }\n    }\n    even_values.remove(&smallest_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.iter().cloned().collect()",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_value == isize {\n          \
    \      min_value = i;\n                min_idx = i;\n            } else {\n  \
    \              if min_value > i {\n                    min_value = i;\n      \
    \              min_idx = i;\n                }\n            }\n        }\n   \
    \ }\n    if min_value == isize {\n        vec![]\n    } else {\n        vec![min_value,\
    \ min_idx]\n    }", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    let mut smallest_even_index_in_arr = 0;\n    for &i in arr {\n        if\
    \ i == smallest_value {\n            smallest_even_index_in_arr += 1;\n      \
    \  }\n    }\n    if smallest_even_index_in_arr == 0 {\n        smallest_even_index_in_arr\
    \ = 1;\n    }\n    let mut even_values_copy = even_values.clone();\n    even_values_copy.swap_remove(smallest_even_index);\n\
    \    even_values_copy.swap_remove(smallest_even_index_in_arr);\n    even_values_copy",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_value == i32::MAX {\n        return Vec::new();\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n\
    \    let mut min_idx = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_idx = i;\n            }\n     \
    \   }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n  \
    \  }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter\
    \ = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_value_iter =\
    \ min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_value_iter\
    \ = min_idx.iter().cloned().collect::<Vec<_>>();\n    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut min_value_iter = min_id", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    let mut\
    \ index = 0;\n    for value in arr {\n        if value % 2 == 0 {\n          \
    \  even_values.push(value);\n            if value < smallest_value {\n       \
    \         smallest_value = value;\n                smallest_index = index;\n \
    \           }\n        }\n        index += 1;\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    if even_values.len() == 1 {\n\
    \        return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n\
    \        let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = smallest_index;\n        for value in even_values {\n            if value\
    \ % 2 == 0 {\n                if value < smallest_even_value {\n             \
    \       smallest_even_value = value;\n                    smallest_even_index\
    \ = index;\n                }\n            }\n            index += 1;\n      \
    \  }\n        return vec![smallest_even_value];\n    }\n    return vec![];", " \
    \   let mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n    let\
    \ mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_"]
stop_tokens:
- "\n}"
