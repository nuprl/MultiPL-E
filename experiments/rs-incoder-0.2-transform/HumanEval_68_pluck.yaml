name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
  /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
  /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4,\
  \ 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
  \ 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]),\
  \ vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n  \
  \  assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7,\
  \ 9, 7, 1]), Vec::<isize>::new());\n}\n"
completions: ["    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value <\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr2 = 0;\n    let mut min_even_index_in_arr3\
    \ = 0;\n    let mut min_even_index_in_arr4 = 0;\n    let mut min_even_index_in_arr5\
    \ = 0;\n    let mut min_even_index_in_arr6 = 0;\n    let mut min_even_index_in_arr7\
    \ = 0;\n    let mut min_even_index_in_arr8 = 0;\n    let mut min_even_index_in_arr9\
    \ = 0;\n    let mut min_even_index_in_arr10 = 0;\n    let mut min_even_index_in_arr11\
    \ = 0;\n    let mut min_even_index_in_arr12 = 0;\n    let mut min_even_index_in_arr13\
    \ = 0;\n    let mut min_even_index_in_arr14 = 0;\n    let mut min_even_index_in_arr15\
    \ = 0;\n    let mut min_even_index_in_arr16 = 0;\n    let mut min_even_index_in_arr17\
    \ = 0;\n    let mut min_even_index_in_arr18 = 0;\n    let mut min_even_index_in_arr19\
    \ = 0;\n    let mut min_even_index_in_arr20 = 0;\n    let mut min_even_index_in_arr21\
    \ = 0;\n    let mut min_even_index_in_arr22 = 0;\n    let mut min_even_index_in_arr23\
    \ = 0;\n    let mut min_even_index_in_arr24 = 0;\n    let mut min_even_index_in_arr25\
    \ = 0;\n    let mut min_even_index_in_arr26 = 0;\n    let mut min_even_index_in_arr27\
    \ = 0;\n    let mut min_even_index_in_arr28 = 0;\n    let mut min_even_index_in_arr29\
    \ = 0;\n    let mut min_even_index_in_arr30 = 0;\n    let mut min_even_index_in_arr31\
    \ = 0;\n    let mut min_even_index_in_arr32 = 0;\n    let mut min_even_index_in_arr33\
    \ = 0;\n    let mut min_even_index_in_arr34 = 0;\n    let mut min_even_index_in_arr35\
    \ = 0;\n    let mut min_even_index_in_arr36 = 0;\n    let mut min_even_index_in_arr37\
    \ = 0;\n    let mut min_even_index_in_arr38 = 0;\n    let mut min_even_index_in_arr39\
    \ = 0;\n    let mut min_even_index_in_arr40 = 0;\n    let mut min_even_index_in_arr41\
    \ = 0;\n    let mut min_even_index_in_arr42 = 0;\n    let mut min_even_index_in_arr43\
    \ = 0;\n    let mut min_even_index_in_arr44 = 0;\n    let mut min_even_index_in_arr45\
    \ = 0;\n    let mut min_even", "    let mut min_value = isize::MAX;\n    let mut\
    \ min_idx = 0;\n    let mut min_node = None;\n    for &i in arr {\n        if\
    \ min_value == isize::MAX {\n            min_value = i;\n            min_idx =\
    \ i;\n            min_node = Some(i);\n        } else {\n            if min_value\
    \ == i {\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_value == isize::MAX {\n        vec![]\n    } else {\n        min_node.unwrap()\n\
    \    }", "    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ isize::MAX;\n    let mut smallest_index = 0;\n    for &value in arr {\n    \
    \    if value % 2 == 0 {\n            even_values.push(value);\n            if\
    \ value < smallest_value {\n                smallest_value = value;\n        \
    \        smallest_index = even_values.len() - 1;\n            }\n        }\n \
    \   }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    even_values[smallest_index]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    let mut smallest_even_value = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \         if smallest_value == i {\n                smallest_even_value = i;\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    if smallest_even_value.is_zero() {\n        return Vec::new();\n\
    \    }\n    let mut smallest_even_value_index = even_values.iter().position(|&i|\
    \ i == smallest_even_value);\n    even_values.remove(&mut smallest_even_value_index);\n\
    \    even_values.sort_unstable();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    ", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut min_even_value = even_values[even_values.len()\
    \ - 1];\n    let mut min_idx = even_values.len() - 1;\n    for &i in even_values\
    \ {\n        if i < min_value {\n            min_even_value = i;\n           \
    \ min_idx = i;\n        }\n    }\n    let mut result = Vec::new();\n    for &i\
    \ in even_values {\n        if i == min_value {\n            result.push(min_idx);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n         \
    \   if i < smallest_value {\n                smallest_value = i;\n           \
    \     smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    if even_values.len() == 1 {\n\
    \        return vec![smallest_value, smallest_index];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![smallest_even_value, smallest_even_index];\n    for &i in even_values {\n\
    \        if i == smallest_even_value {\n            result.push(i);\n        }\n\
    \    }\n    result", "    let mut min_value = i32::MAX;\n    let mut min_idx =\
    \ 0;\n    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i <\
    \ min_value {\n                min_value = *i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n        }\n        if i == smallest_value {\n     \
    \       smallest_index = i;\n        }\n        if i == smallest_value {\n   \
    \         smallest_value = i;\n        }\n    }\n    if even_values.len() == 0\
    \ {\n        return Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    let mut min_even_value\
    \ = isize::MAX;\n    let mut min_even_index = isize::MAX;\n    let mut min_even_indexes\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_even_value < i {\n                min_even_value = i;\n                min_even_index\
    \ = i;\n            }\n        } else {\n            if min_even_index < i {\n\
    \                min_even_index = i;\n                min_even_indexes.push(min_even_index);\n\
    \            }\n        }\n    }\n    if min_even_indexes.len() == 0 {\n     \
    \   return Vec::new();\n    }\n    if min_even_indexes.len() == 1 {\n        return\
    \ min_even_indexes.iter().cloned().collect();\n    }\n    if min_even_indexes.len()\
    \ > 1 {\n        let mut min_even_indexes = min_even_indexes.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_even_index = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_value = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_indexes = min_even_indexes.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_even_index = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_value = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_indexes = min_even_indexes.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_even_index = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_value = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_indexes = min_even_indexes.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_even_index = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_value = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).unwrap();\n        let mut min_even_indexes = min_even_indexes.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut min_even_index = min_even_indexes.iter().cloned().min_by_key(|&i|\
    \ i).", "    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values[0];\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    even_values.remove(&smallest_even_value);\n    even_values.remove(&smallest_even_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.sort();\n\
    \    even_values.dedup();\n    ", "    let mut smallest_even_value = arr[0];\n\
    \    let mut smallest_even_index = -1;\n    let mut smallest_index = -1;\n   \
    \ let mut smallest_value = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_value\
    \ = arr[i];\n            }\n            if smallest_index == -1 || smallest_index\
    \ > i {\n                smallest_index = i;\n                smallest_value =\
    \ arr[i];\n            }\n        }\n    }\n    if smallest_even_index == -1 {\n\
    \        return vec![];\n    }\n    let mut result = vec![];\n    if smallest_index\
    \ == -1 {\n        result.push(smallest_even_value);\n    } else {\n        result.push(smallest_value);\n\
    \        result.push(smallest_even_index);\n    }\n    result", "    let mut min_val\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter().cloned() {\n\
    \        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return Vec::new();\n    }\n    let mut result\
    \ = Vec::new();\n    for i in arr.iter().cloned() {\n        if i == min_val {\n\
    \            result.push(min_idx);\n        }\n    }\n    result", "    let mut\
    \ even_values = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut\
    \ min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut min_value = even_values[0];\n\
    \    let mut min_idx = 0;\n    for &i in even_values {\n        if i < min_value\
    \ {\n            min_value = i;\n            min_idx = i;\n        }\n    }\n\
    \    even_values.remove(min_idx);\n    even_values", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_index\
    \ == -1 || min_even_index > i {\n                min_even_value = i;\n       \
    \         min_even_index = i;\n                min_even_index_in_arr = i;\n  \
    \          }\n        } else {\n            if min_even_index != -1 && min_even_index\
    \ == i {\n                min_even_index_in_arr += 1;\n            }\n       \
    \ }\n    }\n    if min_even_index == -1 {\n        return Vec::new();\n    }\n\
    \    let mut even_values = Vec::new();\n    for i in min_even_index_in_arr..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \     }\n    }\n    return even_values;", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n \
    \   for &value in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \            if value < smallest_value {\n                smallest_value = value;\n\
    \                smallest_index = even_values.len() - 1;\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n \
    \   }\n    let mut smallest_even_value = even_values[smallest_index];\n    let\
    \ mut smallest_even_index = smallest_index;\n    for &value in even_values {\n\
    \        if value == smallest_even_value {\n            smallest_even_index =\
    \ even_values.iter().position(|&x| x == value);\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.insert(smallest_even_index, smallest_value);\n    even_values",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = 0;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut even_values = Vec::new();\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \     }\n        if i == min_even_value {\n            min_even_index = i;\n \
    \           min_even_index_in_arr = i;\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    if min_even_index == min_even_index_in_arr\
    \ {\n        return Vec::new();\n    }\n    let mut min_even_value = min_even_value;\n\
    \    let mut min_even_index = min_even_index;\n    let mut min_even_index_in_arr\
    \ = min_even_index_in_arr;\n    let mut even_values = even_values;\n    for &i\
    \ in even_values {\n        if i == min_even_value {\n            min_even_index\
    \ = i;\n            min_even_index_in_arr = i;\n        }\n    }\n    let mut\
    \ even_values = even_values;\n    for &i in even_values {\n        if i == min_even_value\
    \ {\n            min_even_index = i;\n            min_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values = even_values;\n    for &i in even_values\
    \ {\n        if i == min_even_value {\n            min_even_index = i;\n     \
    \       min_even_index_in_arr = i;\n        }\n    }\n    let mut even_values\
    \ = even_values;\n    for &i in even_values {\n        if i == min_even_value\
    \ {\n            min_even_index = i;\n            min_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values = even_values;\n    for &i in even_values\
    \ {\n        if i == min_even_value {\n            min_even_index = i;\n     \
    \       min_even_index_in_arr = i;\n        }\n    }\n    let mut even_values\
    \ = even_values;\n    for &i in even_values {\n        if i == min_even_value\
    \ {\n            min_even_index = i;\n            min_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values = even_values;\n    for &i in even_values\
    \ {\n        if i == min_even_value {\n            min_even_index = i;\n     \
    \       min_even_index_in_arr = i;\n        }\n    }\n    let mut even_values\
    \ = even_values;\n    for &i in even_values {\n        if i == min_even_value\
    \ {\n            min_even_index = i;\n            min_even_index_in_arr = i;\n\
    \        }\n    }\n    let mut even_values = even_values;\n    for &i in even_values\
    \ {\n        if i == min_even_value {\n            min_even_index = i;\n", " \
    \   let mut min_value = isize::MAX;\n    let mut min_idx = 0;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_value == isize {\n          \
    \      min_value = i;\n                min_idx = i;\n            } else {\n  \
    \              if min_value > i {\n                    min_value = i;\n      \
    \              min_idx = i;\n                }\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_even_value: isize = 0;\n\
    \    let mut min_even_index: usize = 0;\n    let mut min_value: isize = 0;\n \
    \   let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_index =\
    \ isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n          \
    \  even_values.push(i);\n            if i < min_value {\n                min_value\
    \ = i;\n                min_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    let mut smallest_value\
    \ = even_values[0];\n    let mut smallest_index = even_values[0];\n    for i in\
    \ even_values.iter().rev() {\n        if i < min_value {\n            min_value\
    \ = i;\n            smallest_value = i;\n            smallest_index = i;\n   \
    \     }\n    }\n    vec![smallest_value, smallest_index]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < smallest_value {\n             \
    \   smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup", "    let mut min_val = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_val > i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  return Vec::new();\n    }\n    let mut result = Vec::new();\n    for i in arr.iter()\
    \ {\n        if i == min_val {\n            result.push(min_idx);\n        }\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = vec![0];\n    let mut smallest_index = vec![0];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        } else {\n            if smallest_value[0]\
    \ < i {\n                smallest_value = vec![i];\n                smallest_index\
    \ = vec![i];\n            }\n        }\n    }\n    if even_values.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![smallest_value[0], smallest_index[0]];\n    }\n    let mut smallest_value_2\
    \ = vec![0];\n    let mut smallest_index_2 = vec![0];\n    for i in even_values.iter()\
    \ {\n        if i % 2 == 0 {\n            if smallest_value[0] < i {\n       \
    \         smallest_value_2 = vec![i];\n                smallest_index_2 = vec![i];\n\
    \            }\n        } else {\n            if smallest_value[0] < i {\n   \
    \             smallest_value_2 = vec![i];\n                smallest_index_2 =\
    \ vec![i];\n            }\n        }\n    }\n    if smallest_value_2 == smallest_value\
    \ {\n        return vec![smallest_value[0], smallest_index[0]];\n    }\n    if\
    \ smallest_value_2 == smallest_value_2 {\n        return vec![smallest_value_2[0],\
    \ smallest_index_2[0]];\n    }\n    if smallest_value_2 < smallest_value {\n \
    \       return vec![smallest_value[0], smallest_index[0]];\n    }\n    if smallest_value_2\
    \ < smallest_value_2 {\n        return vec![smallest_value_2[0], smallest_index_2[0]];\n\
    \    }\n    if smallest_value < smallest_value_2 {\n        return vec![smallest_value[0],\
    \ smallest_index_2[0]];\n    }\n    if smallest_value < smallest_value {\n   \
    \     return vec![smallest_value_2[0], smallest_index_2[0]];\n    }\n    return\
    \ vec![];", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n    \
    \    }\n    }\n    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&i|\
    \ i);\n    even_values.into_iter().take(1).collect::<Vec<_>>()", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n \
    \   let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n\
    \    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 =\
    \ 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_value > i {\n                min_value = i;\n \
    \               min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n \
    \       if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_iter = smallest_value.iter();\n\
    \    let mut smallest_index_iter = smallest_index.iter();\n    let mut smallest_value\
    \ = smallest_value_iter.next();\n    let mut smallest_index = smallest_index_iter.next();\n\
    \    for i in even_values.iter() {\n        if smallest_value.is_none() {\n  \
    \          smallest_value = i;\n            smallest_index = i;\n        } else\
    \ {\n            if i < smallest_value {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    smallest_value.unwrap()\n\
    \        .iter()\n        .enumerate()\n        .map(|(i, _)| {\n            smallest_index\n\
    \                .iter()\n                .enumerate()\n                .map(|(_,\
    \ j)| {\n                    vec![smallest_value, i]\n                })\n   \
    \     })\n        .collect()", "    let mut min_value = isize::MAX;\n    let mut\
    \ min_idx = isize::MAX;\n    let mut even_values = Vec::new();\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n         \
    \   if i < min_value {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_value = min_value;\n   \
    \ let mut smallest_idx = min_idx;\n    for &i in even_values {\n        if i <\
    \ smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n    even_values.sort();\n\
    \    even_values", "    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n\
    \    for i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_value\
    \ {\n                min_value = *i;\n                min_idx = i;\n         \
    \   }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_val = even_values[0];\n\
    \    let mut smallest_even_val_pos = 0;\n    for &i in even_values {\n       \
    \ if i % 2 == 0 {\n            if i < smallest_even_val {\n                smallest_even_val\
    \ = i;\n                smallest_even_val_pos = i;\n            }\n        }\n\
    \    }\n    let mut smallest_even_val_pos_index = smallest_even_val_pos;\n   \
    \ for &i in even_values {\n        if i == smallest_even_val {\n            smallest_even_val_pos_index\
    \ += i;\n        }\n    }\n    even_values.retain(|&i| i != smallest_even_val);\n\
    \    even_values.retain(|&i| i != smallest_even_val_pos);\n    even_values.retain(|&i|\
    \ i != smallest_even_val_pos_index);\n    even_values.retain(|&i| i != smallest_index);\n\
    \    even_values", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut current_index =\
    \ 0;\n    let mut current_value = isize::MAX;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i as isize);\n            if current_value\
    \ < i {\n                current_value = i;\n                current_index = current_index\
    \ + 1;\n            }\n        }\n        if current_value == i {\n          \
    \  current_index = current_index + 1;\n        }\n        if current_value < i\
    \ {\n            smallest_value = i;\n            smallest_index = current_index;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value =\
    \ even_values[0];\n        let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i % 2 == 0).unwrap();\n        for &i in even_values {\n            if i % 2\
    \ == 0 {\n                if smallest_even_value < i {\n                    smallest_even_value\
    \ = i;\n                    smallest_even_index = current_index;\n           \
    \     }\n            }\n            if i == smallest_even_value {\n          \
    \      smallest_even_index = current_index;\n            }\n            current_index\
    \ = current_index + 1;\n        }\n        return vec![smallest_even_value];\n\
    \    }\n    return vec![];", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n   \
    \ for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ isize::MAX;\n    let mut smallest_even_index = isize::MAX;\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.sort();\n    even_values", "    let mut min_even_value = arr[0];\n\
    \    let mut min_even_index = -1;\n    for i in 1..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            if min_even_value < arr[i] {\n                min_even_value\
    \ = arr[i];\n                min_even_index = i;\n            }\n        }\n \
    \   }\n    vec![min_even_index, min_even_value]", "    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mu", "    let mut min_value = isize::MAX;\n\
    \    let mut min_idx = isize::MAX;\n    let mut min_idx2 = isize::MAX;\n    let\
    \ mut min_idx3 = isize::MAX;\n    let mut min_idx4 = isize::MAX;\n    let mut\
    \ min_idx5 = isize::MAX;\n    let mut min_idx6 = isize::MAX;\n    let mut min_idx7\
    \ = isize::MAX;\n    let mut min_idx8 = isize::MAX;\n    let mut min_idx9 = isize::MAX;\n\
    \    let mut min_idx10 = isize::MAX;\n    let mut min_idx11 = isize::MAX;\n  \
    \  let mut min_idx12 = isize::MAX;\n    let mut min_idx13 = isize::MAX;\n    let\
    \ mut min_idx14 = isize::MAX;\n    let mut min_idx15 = isize::MAX;\n    let mut\
    \ min_idx16 = isize::MAX;\n    let mut min_idx17 = isize::MAX;\n    let mut min_idx18\
    \ = isize::MAX;\n    let mut min_idx19 = isize::MAX;\n    let mut min_idx20 =\
    \ isize::MAX;\n    let mut min_idx21 = isize::MAX;\n    let mut min_idx22 = isize::MAX;\n\
    \    let mut min_idx23 = isize::MAX;\n    let mut min_idx24 = isize::MAX;\n  \
    \  let mut min_idx25 = isize::MAX;\n    let mut min_idx26 = isize::MAX;\n    let\
    \ mut min_idx27 = isize::MAX;\n    let mut min_idx28 = isize::MAX;\n    let mut\
    \ min_idx29 = isize::MAX;\n    let mut min_idx30 = isize::MAX;\n    let mut min_idx31\
    \ = isize::MAX;\n    let mut min_idx32 = isize::MAX;\n    let mut min_idx33 =\
    \ isize::MAX;\n    let mut min_idx34 = isize::MAX;\n    let mut min_idx35 = isize::MAX;\n\
    \    let mut min_idx36 = isize::MAX;\n    let mut min_idx37 = isize::MAX;\n  \
    \  let mut min_idx38 = isize::MAX;\n    let mut min_idx39 = isize::MAX;\n    let\
    \ mut min_idx40 = ", "    let mut even_values = vec![];\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return vec![];\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx = i;\n            }\n            min_value =\
    \ i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if even_values.len() == 1 {\n            smallest_value.push(even_values.iter().min().unwrap());\n\
    \            smallest_index.push(even_values.iter().min_index().unwrap());\n \
    \       }\n    }\n    smallest_value", "    let mut even_values = vec![];\n  \
    \  let mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n  \
    \  for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n\
    \    if even_values.len() > 1 {\n        let mut smallest_value = even_values[0];\n\
    \        let mut smallest_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i < smallest_value {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n        return\
    \ vec![smallest_value, smallest_index];\n    }\n    return vec![];", "    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_val {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut min_even_value = even_values[0];\n\
    \    let mut min_even_idx = -1;\n    for &i in even_values {\n        if i ==\
    \ min_even_value {\n            min_even_idx = i;\n        }\n    }\n    let mut\
    \ result = Vec::new();\n    if min_even_idx != -1 {\n        result.push(min_even_value);\n\
    \        result.push(min_even_idx);\n    }\n    result", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_value == isize::MAX {\n                min_value\
    \ = i;\n                min_idx = i;\n            } else {\n                if\
    \ i < min_value {\n                    min_value = i;\n                    min_idx\
    \ = i;\n                }\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    even_values.sort_unstable_by_key(|&i| i);\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_value", "    let\
    \ mut min_value = isize::MAX;\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mu", "    let mut even_values = Vec::new();\n\
    \    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n  \
    \  for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i == smallest_value {\n            smallest_index = i;\n     \
    \   }\n        if i < smallest_value {\n            smallest_value = i;\n    \
    \        smallest_index = i;\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if smallest_value < i {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    smallest_index", "    let mut even_values\
    \ = vec![];\n    let mut min_value = isize::MAX;\n    let mut min_index = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = min_index;\n    for i in even_values.iter() {\n\
    \        if i < smallest_value {\n            smallest_value = i;\n          \
    \  smallest_index = i;\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    let mut mut_arr\
    \ = arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr\
    \ = mut_arr.iter().cloned().collect::<Vec<_>>();\n    let mut mut_arr = mut_arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mut_arr = mut_arr.iter().cloned", "    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_value = i32::MAX;\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value = i32::MAX;\n    let mu", "    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.len()\
    \ - i;\n        }\n        if i == smallest_value {\n            smallest_value\
    \ = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort_unstable_by_key(|&x| x);\n    even_values.reverse();\n\
    \    even_values.next().unwrap()", "    let mut min_even_value = isize::MAX;\n\
    \    let mut min_even_index = isize::MAX;\n    let mut min_even = isize::MAX;\n\
    \    let mut min_even_index = 0;\n    let mut even_values = Vec::new();\n    let\
    \ mut even_index = Vec::new();\n    let mut even = isize::MAX;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mut even_index = 0;\n    let mut even_value = 0;\n    let mut even_index\
    \ = 0;\n    let mut even_value = 0;\n    let mut even_index = 0;\n    let mut\
    \ even_value = 0;\n    let mut even_index = 0;\n    let mut even_value = 0;\n\
    \    let mu", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_value", "    let\
    \ mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            if min_value < i {\n           \
    \     min_value = i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    vec![min_value, min_idx]", "    let mut min_even_value: isize = 0;\n\
    \    let mut min_even_index: usize = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i == min_even_value {\n                min_even_index = even_values.len()\
    \ - 1;\n            }\n        } else {\n            min_even_value = i;\n   \
    \         min_even_index = even_values.len() - 1;\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[min_even_index];\n\
    \    let mut smallest_even_index = min_even_index;\n    for &i in even_values\
    \ {\n        if i == smallest_even_value {\n            smallest_even_index =\
    \ i;\n        }\n    }\n    let mut result = vec![];\n    for &i in even_values\
    \ {\n        if i == smallest_even_value {\n            result.push(smallest_even_index);\n\
    \        }\n    }\n    result", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx = i;\n            }\n        } else {\n    \
    \        min_value = i;\n            min_idx = i;\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = isize::MAX;\n    let mut min_idx = 0;\n\
    \    let mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if min_value > i {\n \
    \               min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_idx_iter = min_idx.iter().cloned().collect::<Vec<_>>();\n   \
    \ let mut even_values_iter = even_values.iter().cloned().", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_and_index\
    \ = vec![];\n    for i in even_values.iter() {\n        if i == smallest_value\
    \ {\n            smallest_value_and_index.push((smallest_value, i));\n       \
    \ }\n    }\n    if smallest_value_and_index.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_value_and_index_iter = smallest_value_and_index.iter();\n\
    \    let mut smallest_value_and_index_iter2 = smallest_value_and_index_iter.clone();\n\
    \    let mut smallest_value_and_index_iter3 = smallest_value_and_index_iter2.clone();\n\
    \    let mut smallest_value_and_index_iter4 = smallest_value_and_index_iter3.clone();\n\
    \    let mut smallest_value_and_index_iter5 = smallest_value_and_index_iter4.clone();\n\
    \    let mut smallest_value_and_index_iter6 = smallest_value_and_index_iter5.clone();\n\
    \    let mut smallest_value_and_index_iter7 = smallest_value_and_index_iter6.clone();\n\
    \    let mut smallest_value_and_index_iter8 = smallest_value_and_index_iter7.clone();\n\
    \    let mut smallest_value_and_index_iter9 = smallest_value_and_index_iter8.clone();\n\
    \    let mut smallest_value_and_index_iter10 = smallest_value_and_index_iter9.clone();\n\
    \    let mut smallest_value_and_index_iter11 = smallest_value_and_index_iter10.clone();\n\
    \    let mut smallest_value_and_index_iter12 = smallest_value_and_index_iter11.clone();\n\
    \    let mut smallest_value_and_index_iter13 = smallest_value_and_index_iter12.clone();\n\
    \    let mut smallest_value_and_index_iter14 = smallest_value_and_index_iter13.clone();\n\
    \    let mut smallest_value_and_index_iter15 = smallest_value_and_index_iter14.clone();\n\
    \    let mut smallest_value_and_index_iter16 = smallest_value_and_index_iter15.clone();\n\
    \    let mut smallest_value_and_index_iter17 = smallest_value_and_index_iter16.clone();\n\
    \    let mut smallest_value_and_index_iter18 = smallest_value_and_index_iter17.clone();\n\
    \    let mut smallest_value_and_index_iter19 = smallest_value_", "    let mut\
    \ smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n    let\
    \ mut smallest_even_index_in_arr = 0;\n    let mut smallest_even_index_in_arr2\
    \ = 0;\n    let mut smallest_even_index_in_arr3 = 0;\n    let mut smallest_even_index_in_arr4\
    \ = 0;\n    let mut smallest_even_index_in_arr5 = 0;\n    let mut smallest_even_index_in_arr6\
    \ = 0;\n    let mut smallest_even_index_in_arr7 = 0;\n    let mut smallest_even_index_in_arr8\
    \ = 0;\n    let mut smallest_even_index_in_arr9 = 0;\n    let mut smallest_even_index_in_arr10\
    \ = 0;\n    let mut smallest_even_index_in_arr11 = 0;\n    let mut smallest_even_index_in_arr12\
    \ = 0;\n    let mut smallest_even_index_in_arr13 = 0;\n    let mut smallest_even_index_in_arr14\
    \ = 0;\n    let mut smallest_even_index_in_arr15 = 0;\n    let mut smallest_even_index_in_arr16\
    \ = 0;\n    let mut smallest_even_index_in_arr17 = 0;\n    let mut smallest_even_index_in_arr18\
    \ = 0;\n    let mut smallest_even_index_in_arr19 = 0;\n    let mut smallest_even_index_in_arr20\
    \ = 0;\n    let mut smallest_even_index_in_arr21 = 0;\n    let mut smallest_even_index_in_arr22\
    \ = 0;\n    let mut smallest_even_index_in_arr23 = 0;\n    let mut smallest_even_index_in_arr24\
    \ = 0;\n    let mut smallest_even_index_in_arr25 = 0;\n    let mut smallest_even_index_in_arr26\
    \ = 0;\n    let mut smallest_even_index_in_arr27 = 0;\n    let mut smallest_even_index_in_arr28\
    \ = 0;\n    let mut smallest_even_index_in_arr29 = 0;\n    let mut smallest_even_index_in_arr30\
    \ = 0;\n    let mut smallest_even_index_in_arr31 = 0;\n    let mut smallest_even_index_in_arr32\
    \ = 0;\n    let mut smallest_even_index_in_arr33 = 0;\n    let mut smallest_even_index_in_arr34\
    \ = 0;\n    let mut smallest_even_index_in_arr35 = 0;\n    let mut smallest_even_index_in_arr36\
    \ = 0;\n    let mut smallest_even_index_in_arr37 = 0;\n    let mut smallest_even_index_in_arr38\
    \ = 0;\n    let mut smallest_even_index_in_arr39 = 0;\n    let mut smallest_even_index_in_arr40\
    \ = 0;\n    let mut smallest_even_index_in_arr41 = 0;\n    let mut smallest_even",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2 = 0;\n  \
    \  let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4 = 0;\n\
    \    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6 =\
    \ 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n  \
    \  let mut smallest_index = 0;\n    let mut smallest_even_value = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_even_value\n                < i\n                && smallest_even_value\n\
    \                < even_values.iter().min().unwrap()\n            {\n        \
    \        smallest_even_value = i;\n                smallest_value = even_values.iter().min().unwrap();\n\
    \                smallest_index = even_values.iter().min_index().unwrap();\n \
    \           }\n        } else {\n            even_values.clear();\n        }\n\
    \    }\n    even_values\n        .into_iter()\n        .filter(|&x| x % 2 == 0)\n\
    \        .collect::<Vec<_>>()", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = vec![];\n    let mut smallest_index = vec![];\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if i < smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value_with_even_value = vec![];\n    for i in even_values.iter()\
    \ {\n        if i < smallest_value.len() {\n            smallest_value_with_even_value.push(smallest_value[i]);\n\
    \        }\n    }\n    if smallest_value_with_even_value.len() == 0 {\n      \
    \  return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![smallest_value_with_even_value[0]];\n\
    \    }\n    let mut smallest_value_with_even_value_index = vec![];\n    for i\
    \ in even_values.iter() {\n        if i < smallest_value.len() {\n           \
    \ smallest_value_with_even_value_index.push(smallest_index[i]);\n        }\n \
    \   }\n    if smallest_value_with_even_value_index.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 2 {\n        return vec![smallest_value_with_even_value[0],\
    \ smallest_value_with_even_value[1]];\n    }\n    let mut smallest_value_with_even_value_index_and_smallest_index\
    \ = vec![];\n    for i in even_values.iter() {\n        if i < smallest_value.len()\
    \ {\n            smallest_value_with_even_value_index_and_smallest_index.push(smallest_index[i],\
    \ smallest_value_with_even_value_index[i]);\n        }\n    }\n    if smallest_value_with_even_value_index_and_smallest_index.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 3 {\n   \
    \     return vec![smallest_value_with_even_value[0], smallest_value_with_even_value[1],\
    \ smallest_value_with_even_value[2]];\n    }\n    let mut smallest_value_with_even_value_index_and_smallest_index_and_smallest_value\
    \ = vec![];\n    for i in even_values.iter() {\n        if i < smallest_value.len()\
    \ {\n            smallest_value_with_even_value_index_and_smallest_index_and_smallest_value.push(smallest_index[i],\
    \ smallest_value_with_even_value_index[i], smallest_value[i]);\n        }\n  \
    \  }\n    if smallest_value_with_even_value_index_and_smallest_index_and_smallest_value.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 4 {\n   \
    \     return ", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val <\
    \ i {\n                min_val = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_val == i32::MAX {\n        return Vec::new();\n\
    \    }\n    let mut ret = Vec::new();\n    for i in arr.iter() {\n        if i\
    \ == min_val {\n            ret.push(min_idx);\n        }\n    }\n    ret", " \
    \   let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values[0];\n    for i in even_values.iter().rev() {\n        if i % 2\
    \ == 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    vec![smallest_value, smallest_even_index]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value_and_index\
    \ = vec![];\n    for &i in even_values {\n        if i == smallest_value {\n \
    \           smallest_value_and_index.push((i, &smallest_index));\n        }\n\
    \    }\n    smallest_value_and_index.sort_by_key(|&(_, index)| index);\n    smallest_value_and_index.iter().cloned().collect()",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if *i % 2 == 0 {\n            if *i < min_value {\n             \
    \   min_value = *i;\n                min_idx = i;\n            }\n        }\n\
    \    }\n    if min_idx == -1 {\n        vec![]\n    } else {\n        vec![min_value,\
    \ min_idx]\n    }", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n      \
    \  if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&i| i == smallest_value);\n\
    \    if smallest_even_index == even_values.len() - 1 {\n        smallest_even_index\
    \ = even_values.len() - 1;\n    }\n    even_values.swap(0, smallest_even_index);\n\
    \    even_values", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx = arr.iter().enumerate().min_by(|&(i, _)| {\n        if min_value\
    \ % 2 == 0 {\n            min_value = i;\n            min_idx = i;\n         \
    \   true\n        } else {\n            false\n        }\n    });\n    min_idx\n\
    \        .1\n        .iter()\n        .enumerate()\n        .min_by(|&(i, _)|\
    \ {\n            if i % 2 == 0 {\n                min_value = i;\n           \
    \     true\n            } else {\n                false\n            }\n     \
    \   })\n        .1", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            if min_val\
    \ < i {\n                min_val = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n\
    \    }\n    vec![min_val, min_idx]", "    let mut min_value = isize::MAX;\n  \
    \  let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_value == isize {\n                min_value = i;\n\
    \                min_idx = i;\n            } else {\n                if min_value\
    \ > i {\n                    min_value = i;\n                    min_idx = i;\n\
    \                }\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n  \
    \  let mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_index = i;\n            }\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value_iter = min_value.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index_iter = min_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = even_values_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_index = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = min_value_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mu", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n  \
    \  let mut smallest_index = isize::MAX;\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.sort();\n    even_values.insert(0, smallest_even_value);\n  \
    \  even_values", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    ", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i\
    \ in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                min_idx = i;\n            } else {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return Vec::new();\n    }\n    let mut smallest_even_val = even_values[0];\n\
    \    let mut smallest_even_val = smallest_even_val % smallest_index;\n    for\
    \ i in even_values.iter().rev() {\n        if i % 2 == 0 {\n            if i <\
    \ smallest_even_val {\n                smallest_even_val = i;\n            }\n\
    \        }\n    }\n    even_values.remove(smallest_even_val);\n    even_values.sort();\n\
    \    even_values.reverse();\n    even_values.insert(0, smallest_even_val);\n \
    \   even_values", "    let mut even_values = vec![];\n    let mut min_value =\
    \ isize::MAX;\n    let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    even_values.sort_unstable_by(|a, b| a.cmp(b));\n    let\
    \ mut even_values_iter = even_values.iter();\n    let mut even_values_idx = 0;\n\
    \    let mut even_values_value = even_values_iter.next().unwrap();\n    let mut\
    \ even_values_idx = even_values_idx;\n    let mut even_values_value = even_values_value;\n\
    \    let mut even_values_idx = even_values_idx;\n    let mut even_values_value\
    \ = even_values_value;\n    let mut even_values_idx = even_values_idx;\n    let\
    \ mut even_values_value = even_values_value;\n    let mut even_values_idx = even_values_idx;\n\
    \    let mut even_values_value = even_values_value;\n    let mut even_values_idx\
    \ = even_values_idx;\n    let mut even_values_value = even_values_value;\n   \
    \ let mut even_values_idx = even_values_idx;\n    let mut even_values_value =\
    \ even_values_value;\n    let mut even_values_idx = even_values_idx;\n    let\
    \ mut even_values_value = even_values_value;\n    let mut even_values_idx = even_values_idx;\n\
    \    let mut even_values_value = even_values_value;\n    let mut even_values_idx\
    \ = even_values_idx;\n    let mut even_values_value = even_values_value;\n   \
    \ let mut even_values_idx = even_values_idx;\n    let mut even_values_value =\
    \ even_values_value;\n    let mut even_values_idx = even_values_idx;\n    let\
    \ mut even_values_value = even_values_value;\n    let mut even_values_idx = even_values_idx;\n\
    \    let mut even_values_value = even_values_value;\n    let mut even_values_idx\
    \ = even_values_idx;\n    let mut even_values_value = even_values_value;\n   \
    \ let mut even_values_idx = even_values_idx;\n    let mut even_values_value =\
    \ even_values_value;\n    let mut even_values_idx = even_values_idx;\n    let\
    \ mut even_values_value = even_values_value;", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index_in_arr\
    \ = 0;\n    let mut smallest_even_index_in_arr2 = 0;\n    let mut smallest_even_index_in_arr3\
    \ = 0;\n    let mut smallest_even_index_in_arr4 = 0;\n    let mut smallest_even_index_in_arr5\
    \ = 0;\n    let mut smallest_even_index_in_arr6 = 0;\n    let mut smallest_even_index_in_arr7\
    \ = 0;\n    let mut smallest_even_index_in_arr8 = 0;\n    let mut smallest_even_index_in_arr9\
    \ = 0;\n    let mut smallest_even_index_in_arr10 = 0;\n    let mut smallest_even_index_in_arr11\
    \ = 0;\n    let mut smallest_even_index_in_arr12 = 0;\n    let mut smallest_even_index_in_arr13\
    \ = 0;\n    let mut smallest_even_index_in_arr14 = 0;\n    let mut smallest_even_index_in_arr15\
    \ = 0;\n    let mut smallest_even_index_in_arr16 = 0;\n    let mut smallest_even_index_in_arr17\
    \ = 0;\n    let mut smallest_even_index_in_arr18 = 0;\n    let mut smallest_even_index_in_arr19\
    \ = 0;\n    let mut smallest_even_index_in_arr20 = 0;\n    let mut smallest_even_index_in_arr21\
    \ = 0;\n    let mut smallest_even_index_in_arr22 = 0;\n    let mut smallest_even_index_in_arr23\
    \ = 0;\n    let mut smallest_even_index_in_arr24 = 0;\n    let mut smallest_even_index_in_arr25\
    \ = 0;\n    let mut smallest_even_index_in_arr26 = 0;\n    let mut smallest_even_index_in_arr27\
    \ = 0;\n    let mut smallest_even_index_in_arr28 = 0;\n    let mut smallest_even_index_in_arr29\
    \ = 0;\n    let mut smallest_even_index_in_arr30 = 0;\n    let mut smallest_even_index_in_arr31\
    \ = 0;\n    let mut smallest_even_index_in_arr32 = 0;\n    let mut smallest_even_index_in_arr33\
    \ = 0;\n    let mut smallest_even_index_in_arr34 = 0;\n    let mut smallest_even_index_in_arr35\
    \ = 0;\n    let mut smallest_even_index_in_arr36 = 0;\n    let mut smallest_even_index_in_arr37\
    \ = 0;\n    let mut smallest_even_index_in_arr38 = 0;\n    let mut smallest_even_index_in_arr39\
    \ = 0;\n    let mut smallest_even_index_in_arr40 = 0;\n    let mut smallest_even_index_in_arr41\
    \ = 0;\n    let mut smallest_even", "    let mut even_values = vec![];\n    let\
    \ mut min_value = i32::MAX;\n    let mut min_value_index = -1;\n    let mut max_value\
    \ = i32::MIN;\n    let mut max_value_index = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_value_index\
    \ = i;\n            }\n            if i > max_value {\n                max_value\
    \ = i;\n                max_value_index = i;\n            }\n        }\n    }\n\
    \    if even_values.is_empty() {\n        return vec![];\n    }\n    if min_value\
    \ == i32::MAX {\n        return vec![];\n    }\n    if min_value == i32::MIN {\n\
    \        return vec![];\n    }\n    if min_value_index == -1 {\n        return\
    \ vec![];\n    }\n    if max_value == i32::MIN {\n        return vec![];\n   \
    \ }\n    if max_value_index == -1 {\n        return vec![];\n    }\n    if max_value_index\
    \ < min_value_index {\n        return vec![];\n    }\n    if max_value_index >\
    \ min_value_index {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    for i in even_values.iter() {\n        if i == min_value_index {\n      \
    \      result.push(min_value);\n        }\n        if i == max_value_index {\n\
    \            result.push(max_value);\n        }\n    }\n    result", "    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val > i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        vec![]\n    } else {\n        vec![min_val, min_idx]\n\
    \    }", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter() {\n        if *i % 2 == 0 {\n            if *i < min_val {\n\
    \                min_val = *i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    vec![min_val, min_idx]", "    let mut smallest_value: isize\
    \ = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_values: Vec<isize>\
    \ = Vec::new();\n    let mut even_values_index: Vec<usize> = Vec::new();\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            even_values_index.push(i);\n        } else {\n            if smallest_value\
    \ == 0 {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            } else {\n                if i < smallest_value {\n      \
    \              smallest_value = i;\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values_index[0];\n    for &i in even_values\
    \ {\n        if i == smallest_even_value {\n            smallest_even_index =\
    \ even_values_index[i];\n        }\n    }\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    even_values_index.sort_unstable();\n    let mut even_values_index = even_values_index.clone();\n\
    \    ", "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for i in arr.iter() {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_value_and_index = Vec::new();\n   \
    \ for i in even_values.iter() {\n        if i == smallest_value {\n          \
    \  smallest_value_and_index.push(i);\n        }\n    }\n    if smallest_value_and_index.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    smallest_value_and_index.sort_unstable_by_key(|&x|\
    \ x);\n    smallest_value_and_index", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n \
    \   for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    even_values.remove(&mut smallest_value);\n    even_values.remove(&mut\
    \ smallest_index);\n    even_values.remove(&mut smallest_even_index);\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.iter().cloned().collect()", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = arr[0];\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    vec![smallest_even_index, smallest_even_value]",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = even_values.iter().position(|&x| x == i).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    vec![smallest_value, smallest_index]", "    let mut even_values = Vec::new();\n\
    \    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n  \
    \  for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = even_values[0];\n    for i in even_values.iter()\
    \ {\n        if i < min_value {\n            min_value = i;\n            smallest_value\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    even_values.remove(&smallest_value);\n\
    \    even_values.sort();\n    even_values.insert(0, smallest_value);\n    even_values.insert(0,\
    \ smallest_index);\n    even_values", "    if arr.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    even_values.sort_unstable_by_key(|&x|\
    \ x);\n    even_values.reverse();\n    even_values.dedup();\n    even_values.iter().cloned().collect::<Vec<_>>()",
  "    let mut min_even_value: isize = 0;\n    let mut min_even_index: usize = 0;\n\
    \    let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_", "    let mut min_value = isize::MAX;\n    let mut min_idx\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_value > i {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    if min_value == isize::MAX {\n        return\
    \ Vec::new();\n    }\n    let mut result = Vec::new();\n    let mut idx = 0;\n\
    \    while idx < arr.len() {\n        if arr[idx] % 2 == 0 {\n            result.push(arr[idx]);\n\
    \            idx += 1;\n        } else {\n            idx += 1;\n        }\n \
    \   }\n    if result.len() == 1 {\n        return result;\n    }\n    if min_idx\
    \ < result.len() {\n        result.swap(0, min_idx);\n    }\n    result", "  \
    \  let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values[0];\n    for i in even_values.iter().rev() {\n        if i % 2\
    \ == 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    even_values.remove(&smallest_even_value);\n    even_values.remove(&smallest_even_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    ", "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values.iter().position(|&i| i % 2 == 0).unwrap();\n\
    \    for &i in even_values {\n        if i < smallest_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.into_iter().cloned().collect()",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value.push(smallest_value[i]);\n               \
    \ smallest_index.push(smallest_index[i]);\n            }\n        }\n    }\n \
    \   if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_value = even_values[0];\n        let mut smallest_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i < smallest_value {\n                smallest_value = i;\n             \
    \   smallest_index = i;\n            }\n        }\n        return vec![smallest_value,\
    \ smallest_index];\n    }", "    let mut min_even_value = arr[0];\n    let mut\
    \ min_even_index = 0;\n    let mut min_even_index_in_arr = 0;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            min_even_value = i;\n            min_even_index\
    \ = i;\n            min_even_index_in_arr = i;\n        }\n    }\n    let mut\
    \ min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2 = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            min_even_index_in_arr += i;\n\
    \        }\n        if i % 2 == 1 {\n            min_even_index_in_arr2 += i;\n\
    \        }\n    }\n    if min_even_index_in_arr == min_even_index_in_arr2 {\n\
    \        return vec![min_even_value];\n    }\n    if min_even_index_in_arr < min_even_index_in_arr2\
    \ {\n        return vec![min_even_value];\n    }\n    if min_even_index_in_arr\
    \ > min_even_index_in_arr2 {\n        return vec![min_even_index_in_arr];\n  \
    \  }\n    return vec![];", "    let mut min_value = i32::MAX;\n    let mut min_idx\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec![];\n    let mut smallest_index_value = vec![];\n    let mut smallest_index_value\
    \ = vec!", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return Vec::new();\n    }\n    even_values.sort_unstable_by(|a, b| a.cmp(b));\n\
    \    even_values.into_iter().take(1).collect()", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value == i {\n                min_idx = i;\n       \
    \     }\n        } else {\n            min_value = i;\n            min_idx = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if min_idx != arr.len() {\n\
    \        result.push(min_value);\n        result.push(min_idx);\n    }\n    result",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values = vec![];\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n   \
    \         smallest_even_value = i;\n            smallest_even_index = i;\n   \
    \     }\n    }\n    vec![smallest_value, smallest_index]", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value = -1;\n    let\
    \ mut min_even_index_in_arr_with_min_even_value_in_index = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_min_even_value_in_index_in_arr_with_",
  "    let mut min_value = arr[0];\n    let mut min_value_index = 0;\n    let mut\
    \ min_value_index2 = 0;\n    let mut min_value_index3 = 0;\n    let mut min_value_index4\
    \ = 0;\n    let mut min_value_index5 = 0;\n    let mut min_value_index6 = 0;\n\
    \    let mut min_value_index7 = 0;\n    let mut min_value_index8 = 0;\n    let\
    \ mut min_value_index9 = 0;\n    let mut min_value_index10 = 0;\n    let mut min_value_index11\
    \ = 0;\n    let mut min_value_index12 = 0;\n    let mut min_value_index13 = 0;\n\
    \    let mut min_value_index14 = 0;\n    let mut min_value_index15 = 0;\n    let\
    \ mut min_value_index16 = 0;\n    let mut min_value_index17 = 0;\n    let mut\
    \ min_value_index18 = 0;\n    let mut min_value_index19 = 0;\n    let mut min_value_index20\
    \ = 0;\n    let mut min_value_index21 = 0;\n    let mut min_value_index22 = 0;\n\
    \    let mut min_value_index23 = 0;\n    let mut min_value_index24 = 0;\n    let\
    \ mut min_value_index25 = 0;\n    let mut min_value_index26 = 0;\n    let mut\
    \ min_value_index27 = 0;\n    let mut min_value_index28 = 0;\n    let mut min_value_index29\
    \ = 0;\n    let mut min_value_index30 = 0;\n    let mut min_value_index31 = 0;\n\
    \    let mut min_value_index32 = 0;\n    let mut min_value_index33 = 0;\n    let\
    \ mut min_value_index34 = 0;\n    let mut min_value_index35 = 0;\n    let mut\
    \ min_value_index36 = 0;\n    let mut min_value_index37 = 0;\n    let mut min_value_index38\
    \ = 0;\n    let mut min_value_index39 = 0;\n    let mut min_value_index40 = 0;\n\
    \    let mut min_value_index41 = 0;\n    let mut min_value_index42 = 0;\n    let\
    \ mut min_value_index43 = 0;\n    let mut min_value_index44 = 0;\n    let mut\
    \ min_value_index45 = 0;\n    let mut min_value_index46 = 0;\n    let mut min_value_index47\
    \ = 0;\n    let mut min_value_index48 = 0;\n    let mut min_value_index49 = 0;\n\
    \    let mut min_value_index50 = 0;\n    let mut min_value_index51 = 0;\n    let\
    \ mut min_value_index52 = 0;\n    let mut min_value_index53 = 0;\n    let mut\
    \ min_value_index54 = 0;\n    let mut min_value_index55 = 0;\n    let mut min_value_index56\
    \ = 0;\n    let mut min_value", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n      \
    \      if i < smallest_value {\n                smallest_value = i;\n        \
    \        smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ &i in even_values {\n        if i < smallest_even_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev() {\n    \
    \    if i % 2 == 0 {\n            if min_value == i {\n                min_idx\
    \ = i;\n            }\n            min_value = i;\n        }\n    }\n    if min_idx\
    \ == -1 {\n        vec![]\n    } else {\n        vec![min_value, min_idx]\n  \
    \  }", "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for &x in arr {\n        if x % 2 ==\
    \ 0 {\n            min_value = x;\n            min_idx = x;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n    let\
    \ mut min_value = isize::MAX;\n    let mut min_value_index = isize::MAX;\n   \
    \ for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut min_value_even_value\
    \ = min_value;\n    let mut min_value_even_index = min_value_index;\n    for i\
    \ in even_values.iter() {\n        if i % 2 == 0 {\n            if i < min_value_even_value\
    \ {\n                min_value_even_value = i;\n                min_value_even_index\
    \ = i;\n            }\n        }\n    }\n    even_values.remove(min_value_even_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.iter().cloned().collect()",
  "    let mut min_value = arr[0];\n    let mut min_index = 0;\n    let mut min_even_value\
    \ = false;\n    for &x in arr {\n        if x % 2 == 0 {\n            min_even_value\
    \ = true;\n        }\n        if min_even_value\n            && (min_value < x\
    \ || (min_value == x && min_index == 0))\n        {\n            min_value = x;\n\
    \            min_even_value = false;\n            min_index = x;\n        }\n\
    \    }\n    min_even_value\n        .iter()\n        .map(|x| if x == min_value\
    \ { min_index } else { x })\n        .collect()", "    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if smallest_value < i {\n              \
    \  smallest_value = i;\n                smallest_index = i;\n            }\n \
    \       }\n    }\n    vec![smallest_value, smallest_index]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            if min_value == i {\n                min_idx\
    \ = i;\n            }\n            min_value = i;\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n \
    \       if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n\
    \    if even_values.len() == 2 {\n        if even_values[0] < even_values[1] {\n\
    \            return vec![even_values[0], even_values[1]];\n        }\n       \
    \ return vec![even_values[1], even_values[0]];\n    }\n    if even_values.len()\
    \ == 3 {\n        if even_values[0] < even_values[1] && even_values[0] < even_values[2]\
    \ {\n            return vec![even_values[0], even_values[1], even_values[2]];\n\
    \        }\n        if even_values[1] < even_values[2] && even_values[1] < even_values[0]\
    \ {\n            return vec![even_values[1], even_values[2], even_values[0]];\n\
    \        }\n        if even_values[2] < even_values[0] && even_values[2] < even_values[1]\
    \ {\n            return vec![even_values[2], even_values[0], even_values[1]];\n\
    \        }\n    }\n    if even_values.len() == 4 {\n        if even_values[0]\
    \ < even_values[1] && even_values[0] < even_values[2] && even_values[0] < even_values[3]\
    \ {\n            return vec![even_values[0], even_values[1], even_values[2], even_values[3]];\n\
    \        }\n        if even_values[1] < even_values[2] && even_values[1] < even_values[3]\
    \ && even_values[1] < even_values[0] {\n            return vec![even_values[1],\
    \ even_values[2], even_values[3], even_values[0]];\n        }\n        if even_values[2]\
    \ < even_values[3] && even_values[2] < even_values[0] && even_values[2] < even_values[1]\
    \ {\n            return vec![even_values[2], even_values[3], even_values[0], even_values[1]];\n\
    \        }\n        if even_values[3] < even_values[0] && even_values[3] < even_values[1]\
    \ && even_values[3] < even_values[2] {\n            return vec![even_values[3],\
    \ even_values[0], even_values[1], even_values[2]];\n        }\n    }\n    if even_values.len()\
    \ == 5 {\n        if even_values[0] < even_values[1] && even_values[0] < even_values[2]\
    \ && even_values[0] < even_values[3] && even_values[0] < even", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    for &x in\
    \ arr {\n        if x % 2 == 0 {\n            if min_value % 2 == 0 {\n      \
    \          if x < min_value {\n                    min_value = x;\n          \
    \          min_idx = x;\n                }\n            } else {\n           \
    \     if x < min_value {\n                    min_value = x;\n               \
    \     min_idx2 = x;\n                }\n            }\n        }\n    }\n    if\
    \ min_idx2 == min_idx {\n        min_idx2 = min_idx;\n    }\n    vec![min_value,\
    \ min_idx2]", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n\
    \    let mut even_values = Vec::new();\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if min_value < i\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if min_idx == -1 {\n        min_idx = 0;\n    }\n    even_values[min_idx..]\n\
    \        .iter()\n        .cloned()\n        .filter(|&x| x % 2 == 0)\n      \
    \  .cloned()\n        .min_by_key(|&x| x)\n        .unwrap()", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx = arr.iter().enumerate().min_by_key(|(_,\
    \ v)| {\n        if v < min_value {\n            min_value = v;\n            min_idx\
    \ = *v;\n        }\n    });\n    min_idx", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    let mut even_values_index = even_values.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort_by(|&(_, v)|\
    \ v);\n    even_values_index.dedup();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_", "    let mut min_value = isize::MAX;\n   \
    \ let mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_value < i {\n                min_value = i;\n   \
    \             min_index = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_index]", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n  \
    \  let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n\
    \    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 =\
    \ 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut even_values = vec![];\n    let mut min_value = isize::MAX;\n    let\
    \ mut min_index = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < min_value {\n    \
    \            min_value = i;\n                min_index = i;\n            }\n \
    \       }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n  \
    \  }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value = even_values[0];\n\
    \        let mut smallest_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i % 2 == 0 {\n                if i < smallest_value {\n  \
    \                  smallest_value = i;\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        return vec![smallest_value,\
    \ smallest_index];\n    }\n    return vec![];", "    let mut min_value = isize::MAX;\n\
    \    let mut min_idx = isize::MAX;\n    let mut even_values = Vec::new();\n  \
    \  for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return Vec::new();\n    }\n    if even_values.len() == 1 {\n  \
    \      return even_values;\n    }\n    let mut min_value = even_values[0];\n \
    \   let mut min_idx = even_values.iter().position(|&i| i == min_value).unwrap();\n\
    \    for i in even_values.iter().rev() {\n        if i == min_value {\n      \
    \      min_value = i;\n            min_idx = even_values.iter().position(|&i|\
    \ i == min_value).unwrap();\n        }\n    }\n    even_values.remove(min_value);\n\
    \    even_values.retain(|&i| i != min_value);\n    even_values.insert(0, min_value);\n\
    \    even_values.insert(0, min_idx);\n    even_values", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < smallest_value {\n             \
    \   smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    even_values.dedup();\n    let mut even_values_index\
    \ = even_values.iter().cloned().enumerate().cloned().collect::<Vec<_>>();\n  \
    \  even_values_index.sort_by(|&(_, index)| index);\n    let mut even_values_index\
    \ = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n    even_values_index.dedup();\n\
    \    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.in",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = even_values.iter().position(|&x| x == i).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values[smallest_index]", "    if arr.is_empty() {\n        return\
    \ Vec::new();\n    }\n    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 =\
    \ 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;", "    let mut min_value = i32::MAX;\n    let\
    \ mut min_idx = 0;\n    for i in arr.iter() {\n        if *i % 2 == 0 {\n    \
    \        if *i < min_value {\n                min_value = *i;\n              \
    \  min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut min_value =\
    \ arr[0];\n    let mut min_index = 0;\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            min_value = i;\n            min_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for i in arr.iter().rev()\
    \ {\n        if i == min_value {\n            result.push(min_index);\n      \
    \  }\n    }\n    result", "    let mut even_values = Vec::new();\n    let mut\
    \ min_value = isize::MAX;\n    let mut min_index = -1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ min_value {\n                min_value = i;\n                min_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    if min_value == isize::MAX {\n        return even_values;\n\
    \    }\n    let mut min_value_pos = 0;\n    for &i in even_values {\n        if\
    \ i == min_value {\n            min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n        }\n    }\n    let mut min_value_neg = even_values.iter().position(|&i|\
    \ i == min_value);\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_value_pos == min_value_neg {\n        min_value_pos\
    \ = even_values.iter().position(|&i| i == min_value);\n    }\n    if min_value_pos\
    \ == min_value_neg {\n        min_value_pos = even_values.iter().position(|&i|\
    \ i == min_value);\n    }\n    if min_", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ i in even_values.iter().rev() {\n        if i % 2 == 0 {\n            if i <\
    \ smallest_even_value {\n                smallest_even_value = i;\n          \
    \      smallest_even_index = i;\n            }\n        }\n    }\n    let mut\
    \ result = vec![smallest_value, smallest_index];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i == smallest_even_index {\n    \
    \            result.push(i);\n            }\n        }\n    }\n    result", " \
    \   let mut min_value = isize::MAX;\n    let mut min_idx = -1;\n    let mut min_even_val\
    \ = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ min_even_val < i {\n                min_even_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n        if min_even_val == i {\n           \
    \ if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_even_val == isize::MAX {\n\
    \        return vec![];\n    }\n    return vec![min_even_val, min_idx];", "  \
    \  let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return Vec::new();\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    even_values.remove(&mut smallest_even_index);\n    even_values.sort();\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_value_index = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i32::MAX {\n       \
    \         min_value = i;\n                min_value_index = i;\n            }\
    \ else {\n                if i < min_value {\n                    min_value =\
    \ i;\n                    min_value_index = i;\n                }\n          \
    \  }\n        }\n    }\n    if min_value == i32::MAX {\n        vec![]\n    }\
    \ else {\n        vec![min_value, min_value_index]\n    }", "    let mut smallest_even_value\
    \ = isize::MAX;\n    let mut smallest_even_index = isize::MAX;\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    let mut even_values\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = Vec::new();\n    let mut even_values_index = Vec::new();\n    let mut even_values_index\
    \ = ", "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value_and_index = Vec::new();\n    smallest_value_and_index.push(smallest_value,\
    \ smallest_index);\n    let mut smallest_value_and_index_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_value_and_index_iter = smallest_value_and_index_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    while smallest_value_and_index_iter.any(|&(_, index)| index == smallest_index)\
    \ {\n        smallest_value_and_index.push(smallest_value_and_index_iter.next());\n\
    \    }\n    smallest_value_and_index_iter", "    let mut even_values = Vec::new();\n\
    \    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n  \
    \  for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_value = even_values_iter[0];\n    let mut min_index = even_values_iter[0];\n\
    \    for i in even_values_iter.iter().skip(1) {\n        if i < min_value {\n\
    \            min_value = i;\n            min_index = i;\n        }\n    }\n  \
    \  even_values_iter\n        .iter()\n        .enumerate()\n        .filter(|(_,\
    \ i)| i == min_index)\n        .map(|(_, i)| i)\n        .collect()", "    if\
    \ arr.is_empty() {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index2\
    \ = -1;\n    let mut smallest_even_index3 = -1;\n    let mut smallest_even_index4\
    \ = -1;\n    let mut smallest_even_index5 = -1;\n    let mut smallest_even_index6\
    \ = -1;\n    let mut smallest_even_index7 = -1;\n    let mut smallest_even_index8\
    \ = -1;\n    let mut smallest_even_index9 = -1;\n    let mut smallest_even_index10\
    \ = -1;\n    let mut smallest_even_index11 = -1;\n    let mut smallest_even_index12\
    \ = -1;\n    let mut smallest_even_index13 = -1;\n    let mut smallest_even_index14\
    \ = -1;\n    let mut smallest_even_index15 = -1;\n    let mut smallest_even_index16\
    \ = -1;\n    let mut smallest_even_index17 = -1;\n    let mut smallest_even_index18\
    \ = -1;\n    let mut smallest_even_index19 = -1;\n    let mut smallest_even_index20\
    \ = -1;\n    let mut smallest_even_index21 = -1;\n    let mut smallest_even_index22\
    \ = -1;\n    let mut smallest_even_index23 = -1;\n    let mut smallest_even_index24\
    \ = -1;\n    let mut smallest_even_index25 = -1;\n    let mut smallest_even_index26\
    \ = -1;\n    let mut smallest_even_index27 = -1;\n    let mut smallest_even_index28\
    \ = -1;\n    let mut smallest_even_index29 = -1;\n    let mut smallest_even_index30\
    \ = -1;\n    let mut smallest_even_index31 = -1;\n    let mut smallest_even_index32\
    \ = -1;\n    let mut smallest_even_index33 = -1;\n    let mut smallest_even_index34\
    \ = -1;\n    let mut smallest_even_index35 = -1;\n    let mut smallest_even_index36\
    \ = -1;\n    let mut smallest_even_index37 = -1;\n    let mut smallest_even_index38\
    \ = -1;\n    let mut smallest_even_index39 = -1;\n    let mut smallest_even_index40\
    \ = -1;\n    let mut smallest_even_index41 = -1;\n    let mut smallest_even_index42\
    \ = -1;\n    let mut smallest_even_index43 = -1;\n    let mut smallest_even_index44\
    \ = -1;\n    let mut smallest_even_index45 = -1;\n    let mut smallest_even_index",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            }\n            min_value = i;\n        }\n    }\n\
    \    min_idx\n        .iter()\n        .cloned()\n        .filter(|&x| x % 2 ==\
    \ 0)\n        .cloned()\n        .collect::<Vec<_>>()", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            } else {\n       \
    \         smallest_value[i] = i;\n                smallest_index[i] = i;\n   \
    \         }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value = even_values[0];\n\
    \        let mut smallest_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i < smallest_value {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n        return\
    \ vec![smallest_value, smallest_index];\n    }\n    return vec![];", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    let mut min_idx2 = 0;\n    for i in arr.iter().rev() {\n \
    \       if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        } else {\n      \
    \      if min_value > i {\n                min_value = i;\n                min_idx2\
    \ = i;\n            }\n        }\n    }\n    if min_idx2 == min_idx {\n      \
    \  return vec![min_value, min_idx];\n    }\n    if min_idx2 < min_idx {\n    \
    \    return vec![min_value, min_idx2];\n    }\n    return vec![min_value, min_idx];",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = isize::MAX;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if min_value < i {\n     \
    \           min_value = i;\n                min_idx = i;\n            }\n    \
    \    }\n    }\n    if min_value == isize::MAX {\n        return Vec::new();\n\
    \    }\n    vec![min_value, min_idx]", "    let mut min_val = i32::MAX;\n    let\
    \ mut min_idx = -1;\n    let mut mut_arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    for i in mut_arr.iter_mut() {\n        if *i < *min_val {\n            min_val\
    \ = *i;\n            min_idx = i;\n        }\n    }\n    mut_arr[min_idx].cloned()",
  "    let mut min_value = i32::MAX;\n    let mut min_idx = 0;\n    for i in arr.iter()\
    \ {\n        if *i < *min_value {\n            min_value = *i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_value_index\
    \ = isize::MAX;\n    for &value in arr {\n        if value % 2 == 0 {\n      \
    \      even_values.push(value);\n            if value < min_value {\n        \
    \        min_value = value;\n                min_value_index = arr.iter().position(|&x|\
    \ x == value).unwrap();\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    even_values.sort_unstable();\n   \
    \ even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n \
    \   even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_val = even_values[0];\n\
    \    let mut smallest_even_val = smallest_index;\n    for &i in even_values {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_val {\n           \
    \     smallest_even_val = i;\n                smallest_index = i;\n          \
    \  }\n        }\n    }\n    vec![smallest_even_val, smallest_index]", "    let\
    \ mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr {\n  \
    \      if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    for i in arr {\n        if i == min_val {\n            result.push(min_idx);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ i in even_values.iter().rev() {\n        if i % 2 == 0 {\n            if i <\
    \ smallest_even_value {\n                smallest_even_value = i;\n          \
    \      smallest_even_index = i;\n            }\n        }\n    }\n    even_values.remove(smallest_even_index);\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values", "    let mut\
    \ smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n    let\
    \ mut smallest_even_index_in_arr = -1;\n    let mut smallest_even_index_in_arr_with_no_even_values\
    \ = -1;\n    let mut smallest_even_index_in_arr_with_no_even_values_index = -1;\n\
    \    let mut smallest_even_index_in_arr_with_no_even_values_index_in_arr = -1;\n\
    \    let mut smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values\
    \ = -1;\n    let mut smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values_index\
    \ = -1;\n    for &mut node in arr.iter_mut() {\n        if node.value % 2 == 0\
    \ {\n            if smallest_even_index == -1 || smallest_even_index > node.value\
    \ {\n                smallest_even_index = node.value;\n                smallest_even_index_in_arr\
    \ = node.index;\n            }\n            if smallest_even_index_in_arr == -1\
    \ || smallest_even_index_in_arr > node.value {\n                smallest_even_index_in_arr\
    \ = node.index;\n            }\n            if smallest_even_index_in_arr_with_no_even_values\
    \ == -1 || smallest_even_index_in_arr_with_no_even_values > node.value {\n   \
    \             smallest_even_index_in_arr_with_no_even_values = node.index;\n \
    \           }\n            if smallest_even_index_in_arr_with_no_even_values_index\
    \ == -1 || smallest_even_index_in_arr_with_no_even_values_index > node.value {\n\
    \                smallest_even_index_in_arr_with_no_even_values_index = node.index;\n\
    \            }\n            if smallest_even_index_in_arr_with_no_even_values_index_in_arr\
    \ == -1 || smallest_even_index_in_arr_with_no_even_values_index_in_arr > node.value\
    \ {\n                smallest_even_index_in_arr_with_no_even_values_index_in_arr\
    \ = node.index;\n            }\n            if smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values\
    \ == -1 || smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values\
    \ > node.value {\n                smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values\
    \ = node.index;\n            }\n            if smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values_index\
    \ == -1 || smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values_index\
    \ > node.value {\n                smallest_even_index_in_arr_with_no_even_values_index_in_arr_with_no_even_values_",
  "    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n    let\
    \ mut result = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         if min_value == isize::MAX {\n                min_value = i;\n     \
    \           min_index = i;\n            } else {\n                if i < min_value\
    \ {\n                    min_value = i;\n                    min_index = i;\n\
    \                }\n            }\n        }\n    }\n    if min_value == isize::MAX\
    \ {\n        return result;\n    }\n    result.push(min_value);\n    result.push(min_index);\n\
    \    result", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n   \
    \ let mut min_idx2 = 1;\n    for &x in arr.iter().rev() {\n        if x % 2 ==\
    \ 0 {\n            min_value = x;\n            min_idx = min_idx2;\n         \
    \   min_idx2 = x;\n        }\n        if x == min_value {\n            min_idx2\
    \ = x;\n        }\n    }\n    let mut res = Vec::new();\n    res.push(min_value);\n\
    \    res.push(min_idx);\n    res.push(min_idx2);\n    res", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if min_value == i32::MAX {\n                min_value = i;\n    \
    \            min_idx = i;\n            }\n        } else {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut even_values_iter = even_values.iter();\n    let mut smallest_value\
    \ = even_values_iter.next().unwrap();\n    let mut smallest_idx = -1;\n    for\
    \ i in even_values_iter {\n        if i == smallest_value {\n            smallest_idx\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_idx]", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n \
    \   let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n\
    \    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 =\
    \ 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut min_value\
    \ = arr[0];\n    let mut min_index = 0;\n    for i in arr.iter().rev() {\n   \
    \     if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_index = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_index]", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    let mut current_index = 0;\n    let mut current_value\
    \ = vec![];\n    for value in arr {\n        if value % 2 == 0 {\n           \
    \ even_values.push(value);\n        }\n        if value < smallest_value.len()\
    \ {\n            smallest_value.push(value);\n        }\n        if value < even_values.len()\
    \ {\n            smallest_index.push(current_index);\n        }\n        current_index\
    \ += 1;\n        current_value.push(value);\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n      \
    \  return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n     \
    \   let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = smallest_index[0];\n        for value in even_values {\n            if value\
    \ < smallest_even_value {\n                smallest_even_value = value;\n    \
    \            smallest_even_index = current_index;\n            }\n           \
    \ current_index += 1;\n            current_value.push(value);\n        }\n   \
    \     smallest_value.push(smallest_even_value);\n        smallest_index.push(smallest_even_index);\n\
    \    }\n    vec![smallest_value, smallest_index]", "    let mut min_value = isize::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_value == isize {\n                min_value = i;\n       \
    \         min_idx = i;\n            } else {\n                if min_value > i\
    \ {\n                    min_value = i;\n                    min_idx = i;\n  \
    \              }\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = vec![0];\n\
    \    let mut smallest_index = vec![0];\n    for i in arr.iter() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = 0;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_index_iter = smallest_index.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut smallest_value = vec![0];\n    let mut smallest_index = vec![0];\n\
    \    for i in even_values.iter() {\n        if i < smallest_value.len() {\n  \
    \          smallest_value[i] = i;\n            smallest_index[i] = 0;\n      \
    \  }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value[0]\
    \ {\n            smallest_value[0] += 1;\n            smallest_index[0] += 1;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if ", "    let mut\
    \ min_value = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values =\
    \ Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = even_values.len() - 1;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_value\
    \ = even_values[min_idx];\n    let mut smallest_idx = min_idx;\n    for &i in\
    \ even_values {\n        if i < smallest_value {\n            smallest_value =\
    \ i;\n            smallest_idx = even_values.len() - 1;\n        }\n    }\n  \
    \  even_values.remove(&mut smallest_idx);\n    even_values.sort();\n    even_values",
  "    let mut min_value = isize::MAX;\n    let mut min_index = isize::MAX;\n    let\
    \ mut min_node_index = 0;\n    let mut min_node_val = isize::MAX;\n    let mut\
    \ min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n    let\
    \ mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n   \
    \ let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mut min_node_val = isize::MAX;\n\
    \    let mut min_node_val = isize::MAX;\n    let mu", "    let mut min_value =\
    \ isize::MAX;\n    let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = even_values.iter().position(|&x| x == i).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.into_iter().nth(smallest_index).unwrap()",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_val > i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return Vec::new();\n    }\n    let mut result\
    \ = Vec::new();\n    for &i in arr {\n        if i == min_idx {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut smallest_value_and_index =\
    \ Vec::new();\n    smallest_value_and_index.push(smallest_value, smallest_index);\n\
    \    for &i in even_values {\n        if i < smallest_value {\n            smallest_value_and_index.push(i);\n\
    \        }\n    }\n    smallest_value_and_index", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = 0;\n \
    \   for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    even_values.remove(&mut smallest_even_value);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.sort();\n \
    \   even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.ded", " \
    \   let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n \
    \   let mut min_idx = isize::MAX;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < min_value {\n \
    \               min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut even_values_sorted = even_values.clone();\n    even_values_sorted.sort();\n\
    \    let mut smallest_value = even_values_sorted[0];\n    let mut smallest_idx\
    \ = even_values.iter().position(|&x| x == smallest_value);\n    if even_values.len()\
    \ == 1 {\n        return vec![smallest_value, smallest_idx];\n    }\n    while\
    \ even_values_sorted.len() > 1 {\n        if even_values_sorted[0] != even_values_sorted[1]\
    \ {\n            smallest_value = even_values_sorted[0];\n            smallest_idx\
    \ = even_values.iter().position(|&x| x == smallest_value);\n        }\n      \
    \  even_values_sorted.swap(0, 1);\n    }\n    vec![smallest_value, smallest_idx]",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_even_value < i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n                min_even_index_in_arr\
    \ = i;\n            }\n        }\n    }\n    if min_even_index == -1 {\n     \
    \   return vec![];\n    }\n    let mut even_values = vec![];\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n  \
    \  }\n    if even_values.len() == 1 {\n        return vec![even_values[0], min_even_index_in_arr];\n\
    \    }\n    let mut smallest_even_value = min_even_value;\n    let mut smallest_even_index\
    \ = min_even_index;\n    for i in even_values.iter().rev() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut smallest_even_index_in_arr = min_even_index_in_arr;\n\
    \    for i in even_values.iter().rev() {\n        if i == smallest_even_value\
    \ {\n            smallest_even_index_in_arr = i;\n        }\n    }\n    vec![smallest_even_value,\
    \ smallest_even_index, smallest_even_index_in_arr]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    if smallest_even_index == even_values.len() - 1 {\n\
    \        smallest_even_index = even_values.len() - 1;\n    }\n    let mut result\
    \ = Vec::new();\n    for &i in even_values {\n        if i == smallest_value {\n\
    \            result.push(smallest_value);\n            result.push(smallest_index);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            }\n            min_value = i;\n        }\n    }\n\
    \    if min_idx == -1 {\n        vec![]\n    } else {\n        vec![min_value,\
    \ min_idx]\n    }", "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_val < i {\n\
    \                min_val = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    if min_val == arr[0] {\n        vec![]\n    } else {\n \
    \       vec![min_val, min_idx]\n    }", "    let mut min_value = arr[0];\n   \
    \ let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n       \
    \     if min_value % 2 == 0 {\n                min_value = i;\n              \
    \  min_idx = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_even_value = isize::MAX;\n\
    \    let mut min_even_index = isize::MAX;\n    let mut even_values = Vec::new();\n\
    \    let mut even_indexes = Vec::new();\n    for &i in arr {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            even_indexes.push(i);\n\
    \            if min_even_value < i {\n                min_even_value = i;\n  \
    \              min_even_index = i;\n            }\n        } else {\n        \
    \    even_values.clear();\n            even_indexes.clear();\n        }\n    }\n\
    \    if even_values.is_empty() {\n        return even_indexes;\n    }\n    let\
    \ mut smallest_even_value = even_values.iter().min().unwrap();\n    let mut smallest_even_index\
    \ = even_indexes.iter().min().unwrap();\n    for i in even_indexes {\n       \
    \ if i == smallest_even_index {\n            smallest_even_index = i;\n      \
    \  }\n    }\n    even_indexes.push(smallest_even_index);\n    even_values.push(smallest_even_value);\n\
    \    even_indexes", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n\
    \    if even_values.len() == 2 {\n        if even_values[0] < even_values[1] {\n\
    \            return vec![even_values[0]];\n        }\n        return vec![even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        if even_values[0] < even_values[1]\
    \ && even_values[0] < even_values[2] {\n            return vec![even_values[0]];\n\
    \        }\n        if even_values[1] < even_values[2] {\n            return vec![even_values[1]];\n\
    \        }\n        return vec![even_values[2]];\n    }\n    if even_values.len()\
    \ == 4 {\n        if even_values[0] < even_values[1] && even_values[0] < even_values[2]\
    \ && even_values[0] < even_values[3] {\n            return vec![even_values[0]];\n\
    \        }\n        if even_values[1] < even_values[2] && even_values[1] < even_values[3]\
    \ {\n            return vec![even_values[1]];\n        }\n        if even_values[2]\
    \ < even_values[3] {\n            return vec![even_values[2]];\n        }\n  \
    \      return vec![even_values[3]];\n    }\n    if even_values.len() == 5 {\n\
    \        if even_values[0] < even_values[1] && even_values[0] < even_values[2]\
    \ && even_values[0] < even_values[3] && even_values[0] < even_values[4] {\n  \
    \          return vec![even_values[0]];\n        }\n        if even_values[1]\
    \ < even_values[2] && even_values[1] < even_values[3] && even_values[1] < even_values[4]\
    \ {\n            return vec![even_values[1]];\n        }\n        if even_values[2]\
    \ < even_values[3] && even_values[2] < even_values[4] {\n            return vec![even_values[2]];\n\
    \        }\n        if even_values[3] < even_values[4] {\n            return vec![even_values[3]];\n\
    \        }\n        return vec![even_values[4]];\n    }\n    if even_values.len()\
    \ == 6 {\n        if even_values[0] < even_values[1] && even_values[0] < even_values[2]\
    \ && even_values[0] < even", "    let mut min_even_value: isize = 0;\n    let\
    \ mut min_even_index: usize = 0;\n    let mut min_value: isize = 0;\n    let mut\
    \ min_index: usize = 0;\n    let mut min_value_and_index: Vec<isize> = Vec::new();\n\
    \    let mut even_values: Vec<isize> = Vec::new();\n    let mut even_indexes:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index: Vec<isize> = Vec::new();\n\
    \    let mut even_indexes_index: Vec<usize> = Vec::new();\n    let mut even_values_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index: Vec<usize>\
    \ = Vec::new();\n    let mut even_values_index_and_index_and_index: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes_index_and_index_and_index: Vec<usize>\
    \ = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index_and_index_and_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index_and_index_and_index_and_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_and_index_and_index_and_index_and_index_and_index_and_index_and_index_and_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_and_index_and_index_and_index_and_index_and_index_",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n        }\n        if even_values.len()\
    \ == 1 {\n            smallest_value.push(even_values.clone());\n            smallest_index.push(0);\n\
    \        }\n        if even_values.len() > 1 {\n            if even_values[0]\
    \ < even_values[1] {\n                smallest_value.push(even_values.clone());\n\
    \                smallest_index.push(0);\n            } else {\n             \
    \   smallest_value.push(even_values.clone());\n                smallest_index.push(1);\n\
    \            }\n        }\n    }\n    smallest_value", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_index =\
    \ isize::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut min_value_pos = even_values.iter().position(|&i|\
    \ i < min_value);\n    if min_value_pos == even_values.len() {\n        return\
    \ Vec::new();\n    }\n    let mut min_value_pos_index = even_values[min_value_pos];\n\
    \    let mut min_value_pos_index = min_value_pos_index as usize;\n    let mut\
    \ even_values_copy = even_values.clone();\n    even_values_copy[min_value_pos]\
    \ = isize::MAX;\n    let mut even_values_copy = even_values_copy.clone();\n  \
    \  even_values_copy[min_value_pos_index] = isize::MAX;\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy[min_value_pos_index] = isize::MAX;\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy[min_value_pos_index]\
    \ = isize::MAX;\n    let mut even_values_copy = even_values_copy.clone();\n  \
    \  even_values_copy[min_value_pos_index] = isize::MAX;\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy[min_value_pos_index] = isize::MAX;\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy[min_value_pos_index]\
    \ = isize::MAX;\n    let mut even_values_copy = even_values_copy.clone();\n  \
    \  even_values_copy[min_value_pos_index] = isize::MAX;\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy[min_value_pos_index] = isize::MAX;\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy[min_value_pos_index]\
    \ = isize::MAX;\n    let mut even_values_copy = even_values_copy.clone();\n  \
    \  even_values_copy[min_value_pos_index] = isize::MAX;\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy[min_value_pos_index] = isize::",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    let mut min_even_index_in_arr2 = -1;\n\
    \    let mut min_even_index_in_arr3 = -1;\n    let mut min_even_index_in_arr4\
    \ = -1;\n    let mut min_even_index_in_arr5 = -1;\n    let mut min_even_index_in_arr6\
    \ = -1;\n    let mut min_even_index_in_arr7 = -1;\n    let mut min_even_index_in_arr8\
    \ = -1;\n    let mut min_even_index_in_arr9 = -1;\n    let mut min_even_index_in_arr10\
    \ = -1;\n    let mut min_even_index_in_arr11 = -1;\n    let mut min_even_index_in_arr12\
    \ = -1;\n    let mut min_even_index_in_arr13 = -1;\n    let mut min_even_index_in_arr14\
    \ = -1;\n    let mut min_even_index_in_arr15 = -1;\n    let mut min_even_index_in_arr16\
    \ = -1;\n    let mut min_even_index_in_arr17 = -1;\n    let mut min_even_index_in_arr18\
    \ = -1;\n    let mut min_even_index_in_arr19 = -1;\n    let mut min_even_index_in_arr20\
    \ = -1;\n    let mut min_even_index_in_arr21 = -1;\n    let mut min_even_index_in_arr22\
    \ = -1;\n    let mut min_even_index_in_arr23 = -1;\n    let mut min_even_index_in_arr24\
    \ = -1;\n    let mut min_even_index_in_arr25 = -1;\n    let mut min_even_index_in_arr26\
    \ = -1;\n    let mut min_even_index_in_arr27 = -1;\n    let mut min_even_index_in_arr28\
    \ = -1;\n    let mut min_even_index_in_arr29 = -1;\n    let mut min_even_index_in_arr30\
    \ = -1;\n    let mut min_even_index_in_arr31 = -1;\n    let mut min_even_index_in_arr32\
    \ = -1;\n    let mut min_even_index_in_arr33 = -1;\n    let mut min_even_index_in_arr34\
    \ = -1;\n    let mut min_even_index_in_arr35 = -1;\n    let mut min_even_index_in_arr36\
    \ = -1;\n    let mut min_even_index_in_arr37 = -1;\n    let mut min_even_index_in_arr38\
    \ = -1;\n    let mut min_even_index_in_arr39 = -1;\n    let mut min_even_index_in_arr40\
    \ = -1;\n    let mut min_even_index_in_arr41 = -1;\n    let mut min_even_index_in_arr42\
    \ = -1;\n    let mut min_", "    let mut min_val = i32::MAX;\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter() {\n        if *i < *min_val {\n            min_val\
    \ = *i;\n            min_idx = i;\n        }\n    }\n    min_idx\n        .clone()\n\
    \        .iter()\n        .cloned()\n        .filter(|&x| x % 2 == 0)\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n      \
    \  .cloned()\n        .cloned()\n        .cloned()", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ &i in even_values {\n        if i < smallest_even_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = i;\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    let\
    \ mut even_values_index = even_values.iter().cloned().collect::<Vec<_>>();\n \
    \   even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_index.sort_by_key(|&i| i);\n    let mut even_values_index = even_values_index.into_iter().cloned().collect::<",
  "    let mut min_value = isize::MAX;\n    let mut min_idx = -1;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            if min_value == isize::MAX {\n     \
    \           min_value = i;\n                min_idx = i;\n            } else {\n\
    \                if i < min_value {\n                    min_value = i;\n    \
    \                min_idx = i;\n                }\n            }\n        }\n \
    \   }\n    vec![min_value, min_idx]", "    if arr.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut min_value = arr[0];\n    let mut min_index = 0;\n\
    \    let mut min_even_value = false;\n    for &v in arr.iter().rev() {\n     \
    \   if v % 2 == 0 {\n            min_even_value = true;\n            min_value\
    \ = v;\n            min_index = arr.len() - 1;\n            break;\n        }\n\
    \    }\n    if min_even_value\n        && min_value == arr[0]\n        && min_index\
    \ == 0\n    {\n        return vec![];\n    }\n    if min_even_value\n        &&\
    \ min_value == arr[0]\n        && min_index != 0\n    {\n        return vec![min_value,\
    \ min_index];\n    }\n    if min_even_value\n        && min_value == arr[0]\n\
    \        && min_index == 0\n    {\n        return vec![];\n    }\n    if min_even_value\n\
    \        && min_value == arr[0]\n        && min_index != 0\n    {\n        return\
    \ vec![min_value, min_index];\n    }\n    if min_even_value\n        && min_value\
    \ == arr[0]\n        && min_index == 0\n    {\n        return vec![];\n    }\n\
    \    if min_even_value\n        && min_value == arr[0]\n        && min_index !=\
    \ 0\n    {\n        return vec![min_value, min_index];\n    }\n    if min_even_value\n\
    \        && min_value == arr[0]\n        && min_index == 0\n    {\n        return\
    \ vec![];\n    }\n    if min_even_value\n        && min_value == arr[0]\n    \
    \    && min_index != 0\n    {\n        return vec![min_value, min_index];\n  \
    \  }\n    if min_even_value\n        && min_value == arr[0]\n        && min_index\
    \ == 0\n    {\n        return vec![];\n    }\n    if min_even_value\n        &&\
    \ min_value == arr[0]\n        && min_index != 0\n    {\n        return vec![min_value,\
    \ min_index];\n    }\n    if min_even_value\n        && min_value == arr[0]\n\
    \        && min_index == 0\n    {\n        return vec![];\n    }\n    if min_even_value\n\
    \        && min_value == arr[0]\n        && min_index != 0\n    {\n        return\
    \ vec![min_value, min_index];\n    }\n    if min_even_value\n        && min_value\
    \ == arr[0]\n        && min_index == 0\n    {\n        return vec![];\n    }\n\
    \    if min_even_value\n        && min_value == arr[0]\n        && min_index !=\
    \ 0\n    {\n        return vec![min_value, min_index];\n    }\n    if min_even_value\n\
    \        && min_value == arr[0]\n        && min_index == 0\n    {\n        return\
    \ vec![];\n    }", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = isize::MAX;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    vec![smallest_value, smallest_even_index]",
  "    if arr.is_empty() {\n        return vec![];\n    }\n    let mut min_value =\
    \ arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3\
    \ = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6\
    \ = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9\
    \ = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30\
    \ = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33\
    \ = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36\
    \ = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39\
    \ = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42\
    \ = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45\
    \ = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48\
    \ = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51\
    \ = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54\
    \ = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57\
    \ = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60\
    \ = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62 = 0;\n", "    let mut\
    \ min_val = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == arr[0] {\n        vec![]\n    } else {\n        vec![min_val, min_idx]\n\
    \    }", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_arr = 0;\n    for &i in arr {\n  \
    \      if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_arr = i;\n            } else {\n\
    \                if smallest_even_index == i {\n                    smallest_even_index_in_arr\
    \ += 1;\n                }\n            }\n        }\n    }\n    if smallest_even_index\
    \ == -1 {\n        return Vec::new();\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..smallest_even_index_in_arr {\n        result.push(smallest_even_value);\n\
    \    }\n    result", "    let mut smallest_value = isize::MAX;\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values[0];\n    for i in even_values.iter().rev() {\n        if i % 2\
    \ == 0 {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    vec![smallest_even_value, smallest_even_index]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_even_value = even_values[0];\n        let mut\
    \ smallest_even_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i % 2 == 0 {\n                if i < smallest_even_value {\n\
    \                    smallest_even_value = i;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        smallest_value.push(smallest_even_value);\n\
    \        smallest_index.push(smallest_even_index);\n    }\n    smallest_value",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    let mut min_even_val\
    \ = i32::MAX;\n    let mut min_even_idx = -1;\n    for i in arr.iter() {\n   \
    \     if i % 2 == 0 {\n            if min_even_val < i {\n                min_even_val\
    \ = i;\n                min_even_idx = i;\n            }\n        } else {\n \
    \           if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_even_val == i32::MAX {\n \
    \       return vec![];\n    }\n    return vec![min_even_val, min_even_idx];",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value.push(i);\n                smallest_index.push(i);\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value = even_values[0];\n\
    \        let mut smallest_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i < smallest_value {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n        return\
    \ vec![smallest_value, smallest_index];\n    }", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    let mut min_idx = arr.iter().enumerate().min_by(|a,\
    \ b| a.1.cmp(&b.1));\n    if min_idx == None {\n        return Vec::new();\n \
    \   }\n    for i in min_idx.0..arr.len() {\n        if arr[i] < min_value {\n\
    \            min_value = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    even_values.sort_unstable_by_key(|x|\
    \ x);\n    even_values.dedup();\n    even_values.into_iter().map(|x| x).collect()",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    for &i in even_values {\n\
    \        if i == smallest_index {\n            result.push(smallest_value);\n\
    \            break;\n        }\n        i += 1;\n    }\n    result", "    let\
    \ mut min_value = i32::MAX;\n    let mut min_idx = 0;\n    let mut min_node =\
    \ None;\n    for i in arr.iter() {\n        if *i < *min_value {\n           \
    \ min_value = *i;\n            min_idx = i;\n            min_node = Some(i);\n\
    \        }\n    }\n    if min_node.is_none() {\n        vec![]\n    } else {\n\
    \        vec![min_value, min_idx]\n    }", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = isize::MAX;\n    let mut smallest_index = isize::MAX;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_value);\n    even_values.retain(|&i| i != smallest_value);\n \
    \   even_values.retain(|&i| i != smallest_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_value);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != smallest_even_index);\n\
    \    even_values.retain(|&i| i != smallest_even_index);\n    even_values.retain(|&i|\
    \ i != smallest_even_index);\n    even_values.retain(|&i| i != ", "    let mut\
    \ min_value = isize::MAX;\n    let mut min_idx = -1;\n    let mut min_idx2 = -1;\n\
    \    for i in arr.iter() {\n        if i.is_even() {\n            if min_value\
    \ == isize {\n                min_value = i;\n                min_idx = i;\n \
    \               min_idx2 = i;\n            } else {\n                if min_value\
    \ > i {\n                    min_value = i;\n                    min_idx = i;\n\
    \                    min_idx2 = i;\n                }\n            }\n       \
    \ }\n    }\n    if min_idx2 == min_idx {\n        min_idx2 = min_idx;\n    }\n\
    \    vec![min_value, min_idx2]", "    let mut min_val = arr[0];\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if min_val < i {\n                min_val = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    vec![min_val, min_idx]", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let\
    \ mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n  \
    \  let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n\
    \    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mu", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        smallest_value[0] = even_values[0];\n        smallest_index[0]\
    \ = even_values[0];\n        return vec![smallest_value[0], smallest_index[0]];\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = even_values[0];\n    for i in even_values.iter().rev() {\n        if i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    smallest_value\n        .iter()\n        .enumerate()\n     \
    \   .filter(|&(_, v)| v == smallest_value)\n        .map(|(_, v)| v)\n       \
    \ .collect()", "    if arr.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n\
    \    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 =\
    \ 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value == i {\n                smallest_even_value = i;\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return Vec::new();\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![smallest_even_value];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_even_values = even_values.clone();\n       \
    \ smallest_even_values.sort();\n        if smallest_even_values[0] % 2 == 0 {\n\
    \            smallest_even_values[0] = smallest_even_values[0] / 2;\n        }\n\
    \        return vec![smallest_even_values[0], smallest_index];\n    }\n    return\
    \ vec![];", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = isize::MAX;\n    let mut smallest_index = 0;\n    let mut index_of_smallest_value\
    \ = isize::MAX;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < smallest_value {\n             \
    \   smallest_value = i;\n                index_of_smallest_value = i;\n      \
    \      }\n        }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        if even_values[0] < even_values[1]\
    \ {\n            return vec![even_values[0], even_values[1]];\n        }\n   \
    \     return vec![even_values[1]];\n    }\n    for i in even_values.iter() {\n\
    \        if i < smallest_value {\n            smallest_value = i;\n          \
    \  index_of_smallest_value = i;\n        }\n    }\n    let mut index_of_smallest_value_in_even_values\
    \ = even_values.iter().position(|&x| x == smallest_value);\n    if index_of_smallest_value_in_even_values\
    \ == even_values.len() - 1 {\n        return vec![even_values[index_of_smallest_value_in_even_values]];\n\
    \    }\n    if index_of_smallest_value_in_even_values == even_values.len() - 2\
    \ {\n        if even_values[index_of_smallest_value_in_even_values] < even_values[index_of_smallest_value_in_even_values\
    \ + 1] {\n            return vec![even_values[index_of_smallest_value_in_even_values],\
    \ even_values[index_of_smallest_value_in_even_values + 1]];\n        }\n     \
    \   return vec![even_values[index_of_smallest_value_in_even_values + 1]];\n  \
    \  }\n    for i in even_values.iter().skip(index_of_smallest_value_in_even_values\
    \ + 1).rev() {\n        if i < smallest_value {\n            smallest_value =\
    \ i;\n            index_of_smallest_value = i;\n        }\n    }\n    if index_of_smallest_value\
    \ == even_values.len() - 1 {\n        return vec![even_values[even_values.len()\
    \ - 1]];\n    }\n    for i in even_values.iter().skip(index_of_smallest_value).rev()\
    \ {\n        if i < smallest_value {\n            smallest_value = i;\n      \
    \      index_of_smallest_value = i;\n        }\n    }\n    if index_of_smallest_value\
    \ == even_values.len() - 2 {\n        if even_values[index_of_smallest_value]\
    \ < even_values[index_of_smallest_value + 1] {\n            return vec![even",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = i;\n        }\n        if i == smallest_value\
    \ && smallest_index == i {\n            smallest_value = i;\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return Vec::new();\n    }\n    even_values.sort();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.dedup();\n    even_values.reverse();\n    even_values.dedup();\n\
    \    even_values.reverse();\n    even_values.dedup();\n    even_values.reverse();",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        smallest_value[even_values[0]\
    \ as usize] =\n            smallest_value[even_values[0] as usize] as isize;\n\
    \        smallest_index[even_values[0] as usize] =\n            smallest_index[even_values[0]\
    \ as usize] as isize;\n        return vec![smallest_value[even_values[0] as usize],\
    \ even_values[0]];\n    }\n    let mut smallest_even_value = vec![];\n    let\
    \ mut smallest_even_index = vec![];\n    for i in even_values.iter() {\n     \
    \   if i < smallest_even_value.len() {\n            smallest_even_value[i] = i;\n\
    \            smallest_even_index[i] = i;\n        }\n    }\n    if smallest_even_value.len()\
    \ == 0 {\n        return vec![];\n    }\n    if smallest_even_value.len() == 1\
    \ {\n        smallest_even_value[smallest_even_value[0] as usize] =\n        \
    \    smallest_even_value[smallest_even_value[0] as usize] as isize;\n        smallest_even_index[smallest_even_value[0]\
    \ as usize] =\n            smallest_even_index[smallest_even_value[0] as usize]\
    \ as isize;\n        return vec![smallest_even_value[smallest_even_value[0] as\
    \ usize],\n                     smallest_even_index[smallest_even_value[0] as\
    \ usize]];\n    }\n    let mut smallest_even_value = vec![];\n    let mut smallest_even_index\
    \ = vec![];\n    for i in even_values.iter() {\n        if i < smallest_even_value.len()\
    \ {\n            smallest_even_value[i] = i;\n            smallest_even_index[i]\
    \ = i;\n        }\n    }\n    if smallest_even_value.len() == 0 {\n        return\
    \ vec![];\n    }\n    if smallest_even_value.len() == 1 {\n        smallest_even_value[smallest_even_value[0]\
    \ as usize] =\n            smallest_even_value[smallest_even_value[0] as usize]\
    \ as isize;\n        smallest_even_index[smallest_even_value[0] as usize] =\n"]
stop_tokens:
- "\n}"
