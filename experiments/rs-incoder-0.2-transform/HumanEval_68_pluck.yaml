name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
  /// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n\
  /// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ isize::MAX;\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ Vec::new();\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value < i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value = i;\n\
    \            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", " \
    \   let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_even_index == -1 || min_even_index > i {\n\
    \                min_even_value = i;\n                min_even_index = i;\n  \
    \              min_even_index_in_arr = i;\n            } else {\n            \
    \    if min_even_index_in_arr == -1 || min_even_index_in_arr > i {\n         \
    \           min_even_index_in_arr = i;\n                }\n            }\n   \
    \     }\n    }\n    if min_even_index == -1 {\n        return Vec::new();\n  \
    \  }\n    let mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n\
    \    even_values.sort_unstable_by_key(|&x| x);\n    let mut even_values_index\
    \ = even_values.iter().rev().take(even_values.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr\
    \ = even_values_index.iter().rev().take(even_values_index.len() - 1).collect::<Vec<_>>();\n\
    \    even_values_index_in_arr.sort_unstable_by_key(|&x| x);\n    let mut even_values_index_in_arr_index\
    \ = even_values_index_in_arr.iter().rev().take(even_values_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr = even_values_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index = even_values_index_in_arr_index_in_arr.iter().rev().take(even_values_index_in_arr_index_in_arr.len()\
    \ - 1).collect::<Vec<_>>();\n    even_values_index_in_arr_index_in_arr_index.sort_unstable_by_key(|&x|\
    \ x);\n    let mut even_values_index_in_arr_index_in_arr_index_in_arr = even_values_index_in_arr_index_in_arr_index.iter().rev().take(even_values_index_in_arr_index_in_arr_index.len()\
    \ - 1).", "    let mut min_value = i32::MAX;\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    vec![min_value, min_idx]", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index_in_arr\
    \ = -1;\n    let mut smallest_even_index_in_arr2 = -1;\n    for &mut i in arr.iter_mut()\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_arr = i;\n                smallest_even_index_in_arr2\
    \ = i;\n            } else {\n                if smallest_even_index_in_arr ==\
    \ -1 || smallest_even_value < i {\n                    smallest_even_index_in_arr\
    \ = i;\n                }\n                if smallest_even_index_in_arr2 == -1\
    \ || smallest_even_value < i {\n                    smallest_even_index_in_arr2\
    \ = i;\n                }\n            }\n        }\n    }\n    if smallest_even_index\
    \ == -1 || smallest_even_value < smallest_even_index_in_arr {\n        smallest_even_index\
    \ = smallest_even_index_in_arr;\n    }\n    if smallest_even_index == -1 || smallest_even_value\
    \ < smallest_even_index_in_arr2 {\n        smallest_even_index = smallest_even_index_in_arr2;\n\
    \    }\n    vec![smallest_even_index, smallest_even_index]", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = isize::MAX;\n    let mut min_value_index\
    \ = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_value_index = -1;\n    for i in even_values.iter() {\n \
    \       if i < smallest_value {\n            smallest_value = i;\n           \
    \ smallest_value_index = i;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in even_values.iter() {\n        if i == smallest_value {\n       \
    \     result.push(smallest_value_index);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    result", "    let mut min_even_value:\
    \ isize = 0;\n    let mut min_even_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut even_values: Vec<isize>\
    \ = Vec::new();\n    let mut even_indexes: Vec<usize> = Vec::new();\n    let mut\
    \ even_values_index: Vec<isize> = Vec::new();\n    let mut even_indexes_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index: Vec<isize> =\
    \ Vec::new();\n    let mut even_indexes_index_index: Vec<usize> = Vec::new();\n\
    \    let mut even_values_index_index_index: Vec<isize> = Vec::new();\n    let\
    \ mut even_indexes_index_index_index: Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<usize> = Vec::new();\n    let mut even_values_index_index_index_index_index_index_index_index_index_index_index:\
    \ Vec<isize> = Vec::new();\n    let mut even_indexes_index_index_index_index_index_index_",
  "    let mut even_values = Vec::new();\n    let mut min_value = isize::MAX;\n  \
    \  let mut min_index = isize::MAX;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_index = i;\n            }\n   \
    \     }\n    }\n    if even_values.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut smallest_value = isize::MAX;\n    let mut smallest_index =\
    \ isize::MAX;\n    for &i in even_values {\n        if i < smallest_value {\n\
    \            smallest_value = i;\n            smallest_index = i;\n        }\n\
    \    }\n    let mut result = Vec::new();\n    result.push(smallest_value);\n \
    \   result.push(smallest_index);\n    return result;", "    let mut min_value\
    \ = isize::MAX;\n    let mut min_idx = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_idx = i;\n            }\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_value = min_value;\n\
    \    let mut smallest_idx = min_idx;\n    for &i in even_values {\n        if\
    \ i < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    even_values.remove(&smallest_idx);\n    even_values.sort();\n\
    \    even_values", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            min_value = i;\n  \
    \          min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "  \
    \  let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ Vec::new();\n    }\n    let mut smallest_even_value = even_values[0];\n    let\
    \ mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    even_values.remove(&smallest_even_value);\n\
    \    even_values.remove(&smallest_even_index);\n    even_values.sort();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_value", "    let mut even_values = Vec::new();\n\
    \    let mut min_value = isize::MAX;\n    let mut min_value_index = 0;\n    let\
    \ mut even_values_index = 0;\n    for &value in arr {\n        if value % 2 ==\
    \ 0 {\n            even_values.push(value + 1);\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        }\n    }\n    if even_values_index == 0 {\n\
    \        return vec![];\n    }\n    if even_values_index == arr.len() {\n    \
    \    return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_pos;\n    let mut even_values_index = even_values_pos;\n    for\
    \ &value in arr {\n        if value % 2 == 0 {\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        } else {\n            if even_values_index\
    \ == arr.len() {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index = 0;\n        }\n    }\n    if even_values_index == arr.len()\
    \ {\n        return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_pos;\n    let mut even_values_index = even_values_pos;\n    for\
    \ &value in arr {\n        if value % 2 == 0 {\n            if even_values_index\
    \ == 0 {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index += 1;\n        } else {\n            if even_values_index\
    \ == arr.len() {\n                min_value = value;\n                min_value_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n            }\n          \
    \  even_values_index = 0;\n        }\n    }\n    if even_values_index == arr.len()\
    \ {\n        return vec![min_value, min_value_index];\n    }\n    let mut min_value_pos\
    \ = even_values.iter().position(|&x| x == min_value).unwrap();\n    let mut min_value_index\
    \ = min_value_", "    let mut min_value = i32::MAX;\n    let mut min_node = 0;\n\
    \    let mut min_node_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            if min_value == i32::MAX {\n                min_value = i;\n    \
    \            min_node = i;\n                min_node_index = i;\n            }\
    \ else {\n                if i < min_value {\n                    min_value =\
    \ i;\n                    min_node = i;\n                    min_node_index =\
    \ i;\n                }\n            }\n        }\n    }\n    vec![min_node, min_node_index]",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = isize::MAX;\n\
    \    let mut smallest_index = isize::MAX;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values[0];\n    for &i in even_values {\n       \
    \ if i < smallest_value {\n            smallest_even_value = i;\n            smallest_even_index\
    \ = i;\n        }\n    }\n    let mut even_values_copy = even_values.clone();\n\
    \    even_values_copy.swap_remove(smallest_even_index);\n    even_values_copy",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    let mut min_idx2\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_idx\
    \ == -1 || min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        } else {\n            if min_idx2 == -1 || min_value\
    \ < i {\n                min_value = i;\n                min_idx2 = i;\n     \
    \       }\n        }\n    }\n    if min_idx2 == -1 || min_value < min_idx2 {\n\
    \        min_idx2 = min_idx;\n    }\n    vec![min_value, min_idx2]", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n \
    \   let mut smallest_index = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n            if\
    \ smallest_index == -1 || smallest_even_value < smallest_index {\n           \
    \     smallest_index = i;\n            }\n        }\n    }\n    smallest_even_value\
    \ => smallest_even_index,\n    smallest_index => smallest_index,", "    let mut\
    \ min_val = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val = false;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if min_even_val {\n\
    \                min_even_val = false;\n                min_val = x;\n       \
    \         min_idx = x;\n            } else {\n                min_even_val = true;\n\
    \                min_val = x;\n                min_idx = x;\n            }\n \
    \       }\n    }\n    if min_even_val {\n        vec![min_val, min_idx]\n    }\
    \ else {\n        vec![]\n    }", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_indexes = Vec::new();\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            if min_even_value < i {\n\
    \                min_even_value = i;\n                min_even_index = i;\n  \
    \          }\n        } else {\n            if min_even_index == -1 {\n      \
    \          min_even_index = i;\n            } else {\n                min_even_indexes.push(min_even_index);\n\
    \                min_even_index = i;\n            }\n        }\n    }\n    if\
    \ min_even_index == -1 {\n        min_even_indexes.push(min_even_index);\n   \
    \ }\n    min_even_indexes", "    let mut even_values = Vec::new();\n    let mut\
    \ min_value = isize::MAX;\n    let mut min_value_index = -1;\n    let mut min_value_index2\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if min_value == isize::MAX {\n                min_value = i;\n  \
    \              min_value_index = i;\n                min_value_index2 = i;\n \
    \           }\n            if i < min_value {\n                min_value = i;\n\
    \                min_value_index = i;\n                min_value_index2 = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if min_value_index == min_value_index2 {\n        return\
    \ vec![min_value];\n    }\n    let mut even_values_sorted = even_values.clone();\n\
    \    even_values_sorted.sort();\n    let mut min_value_index = -1;\n    let mut\
    \ min_value_index2 = -1;\n    for &i in even_values_sorted {\n        if i ==\
    \ min_value {\n            min_value_index = i;\n        }\n        if i < min_value\
    \ {\n            min_value_index = i;\n        }\n        if i == min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n        if i < min_value_index2\
    \ {\n            min_value_index2 = i;\n        }\n    }\n    if min_value_index\
    \ == min_value_index2 {\n        return vec![min_value];\n    }\n    let mut even_values_sorted\
    \ = even_values.clone();\n    even_values_sorted.sort();\n    let mut min_value_index\
    \ = -1;\n    let mut min_value_index2 = -1;\n    for &i in even_values_sorted\
    \ {\n        if i == min_value {\n            min_value_index = i;\n        }\n\
    \        if i < min_value {\n            min_value_index = i;\n        }\n   \
    \     if i == min_value_index2 {\n            min_value_index2 = i;\n        }\n\
    \        if i < min_value_index2 {\n            min_value_index2 = i;\n      \
    \  }\n    }\n    if min_value_index == min_value_index2 {\n        return vec![min_value];\n\
    \    }\n    let mut even_values_sorted = even_values.clone();\n    even_values_sorted.sort();\n\
    \    let mut min_value_index = -1;\n    let mut min_value_index2 = -1;\n    for\
    \ &i in even_values_sorted {\n        if i == min_value {\n            min_value_index\
    \ = i;\n        }\n        if i < min_value {\n            min_value_index = i;\n\
    \        }\n        if i == min_value_index2 {\n            min_value_index2 =\
    \ i;\n        }\n        if i < min_value_index2 {\n            min_value_index2\
    \ = i;\n        }\n    }\n    if min_value_index == min_value"]
stop_tokens:
- "\n}"
