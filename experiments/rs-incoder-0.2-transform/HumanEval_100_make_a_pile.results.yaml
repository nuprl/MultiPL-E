language: rs
name: HumanEval_100_make_a_pile
results:
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpdwkuto9z.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        pile.push(n / 2 + 1);\n    }\n    for i in 0..n\
    \ {\n        pile.push((pile[pile.len() - 1] as isize) + 1);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5]`,\n right: `[3, 5, 7]`', /tmp/tmp0be19epl.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n / 2);\n    } else {\n        pile.push((n / 2) + 1);\n    }\n\
    \    for i in 1..n {\n        pile.push((i + 1) * pile[i - 1]);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpja89scwi.rs:19:29\n\
    \   |\n19 |         pile.push((i + 1) * pile[i - 1]);\n   |                  \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().unwrap() + 1);\n        }\n \
    \   } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmp47_yj6rx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut level = vec![0;\
    \ n + 1];\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even_count += 1;\n        } else\
    \ {\n            odd_count += 1;\n        }\n        stones.push(even_count);\n\
    \        stones.push(odd_count);\n        n -= 1;\n    }\n    stones\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvs6r7wy5.rs:13:29\n   |\n\
    13 |     let mut level = vec![0; n + 1];\n   |                             ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n13 |     let mut\
    \ level = vec![0; (n + 1).try_into().unwrap()];\n   |                        \
    \     +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7uxlykt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        let mut odd = 1;\n        let mut even = n;\n \
    \       while even > 0 {\n            if even % 2 == 0 {\n                even\
    \ /= 2;\n                pile.push(even);\n            } else {\n            \
    \    odd *= 2;\n                pile.push(odd);\n            }\n        }\n  \
    \  }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpn9_h1lur.rs:23:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().unwrap() + 1);\n        }\n \
    \   } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmp47_yj6rx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpv94q9bf_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut next_odd = 1;\n\
    \    let mut next_even = 1;\n    for _ in 0..n {\n        pile[n - 1] += next_odd;\n\
    \        if n % 2 == 0 {\n            pile[n - 1] += next_even;\n        }\n \
    \       next_odd += 2;\n        next_even += 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpivrrr_jt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpivrrr_jt.rs:16:9\n\
    \   |\n16 |         pile[n - 1] += next_odd;\n   |         ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpivrrr_jt.rs:18:13\n   |\n18 |  \
    \           pile[n - 1] += next_even;\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7bagi6x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile[0]\
    \ += 1;\n    }\n    for i in 1..n / 2 {\n        pile[i] += pile[i - 1];\n   \
    \ }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp56grve2u.rs:17:9\n\
    \   |\n17 |         pile[i] += pile[i - 1];\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp56grve2u.rs:17:20\n   |\n17 |         pile[i]\
    \ += pile[i - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    if n % 2 == 0 {\n\
    \        stones[0] = n;\n    } else {\n        stones[0] = n / 2;\n        stones[1]\
    \ = (n - stones[0]) / 2;\n    }\n    for i in 2..stones.len() {\n        stones[i]\
    \ = stones[i - 1] + stones[i - 2];\n    }\n    stones\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfni1gpd.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n    }\n\n    let\
    \ mut pile = vec![n];\n    let mut i = 0;\n    while i < n {\n        pile[i]\
    \ = pile[i / 2] + if n % 2 == 0 {\n            pile[i / 2 + 1]\n        } else\
    \ {\n            pile[i / 2 - 1]\n        };\n        i += 1;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2z2fqpep.rs:19:9\n\
    \   |\n19 |         pile[i] = pile[i / 2] + if n % 2 == 0 {\n   |         ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2z2fqpep.rs:19:19\n\
    \   |\n19 |         pile[i] = pile[i / 2] + if n % 2 == 0 {\n   |            \
    \       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2z2fqpep.rs:20:13\n\
    \   |\n20 |             pile[i / 2 + 1]\n   |             ^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2z2fqpep.rs:22:13\n   |\n22 |  \
    \           pile[i / 2 - 1]\n   |             ^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvk2yuz7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ pile[1..].iter().enumerate().filter(|(_, x)| x % 2 == 1).for_each(|(_, x)| {\n\
    \        pile[2] += x;\n    });\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoyd1c7is.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0369]: cannot mod `&&{integer}` by `{integer}`\n\
    \  --> /tmp/tmpoyd1c7is.rs:14:52\n   |\n14 |     pile[1..].iter().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).for_each(|(_, x)| {\n   |                                  \
    \                - ^ - {integer}\n   |                                       \
    \           |\n   |                                                  &&{integer}\n\
    \   |\nhelp: `%` can be used on `{integer}`, you can dereference `x`\n   |\n14\
    \ |     pile[1..].iter().enumerate().filter(|(_, x)| *x % 2 == 1).for_each(|(_,\
    \ x)| {\n   |                                                  +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdzy63rg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut levels = Vec::new();\n\
    \    let mut next_odd = 1;\n    let mut next_even = n;\n    while next_odd <=\
    \ n {\n        stones.push(next_odd);\n        next_odd += 2;\n    }\n    while\
    \ next_even > n {\n        stones.push(next_even);\n        next_even -= 2;\n\
    \    }\n    stones.push(n - 1);\n    stones.reverse();\n    levels.insert(stones.len(),\
    \ stones);\n    levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n \
    \   assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyw9c7e94.rs:27:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n27 |     levels\n\
    \   |     ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for &mut i in &mut pile\
    \ {\n        *i += *i / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstljry5x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpstljry5x.rs:18:9\n   |\n18 |         *i += *i / 2;\n   |      \
    \   ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpstljry5x.rs:18:15\n\
    \   |\n18 |         *i += *i / 2;\n   |               ^^\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        if n % 2 == 0 {\n            pile[i] = pile[i] + 1;\n\
    \        } else {\n            pile[i] = pile[i] + 2;\n        }\n        i +=\
    \ 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy1vlovee.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpy1vlovee.rs:16:13\n   |\n16 |         \
    \    pile[i] = pile[i] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpy1vlovee.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i] + 1;\n   |                       ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpy1vlovee.rs:18:13\n   |\n18 |  \
    \           pile[i] = pile[i] + 2;\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpy1vlovee.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i] + 2;\n   |                       ^^^^^^^ slice indices\
    \ are of type `usize` or range"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd = if n % 2\
    \ == 0 {\n        n / 2\n    } else {\n        n / 2 + 1\n    };\n    let mut\
    \ next_even = if n % 2 == 0 {\n        n / 2\n    } else {\n        n / 2\n  \
    \  };\n    for i in 0..n {\n        if i % 2 == 0 {\n            pile.push(next_even);\n\
    \            next_even += 2;\n        } else {\n            pile.push(next_odd);\n\
    \            next_odd += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpluiibpmv.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdzy63rg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1]\n    } else {\n\
    \        vec![n, n - 2]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpwuc1x8wo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpq9qo0s5t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n            n -= n / 2;\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push(n / 2);\n \
    \           n -= n / 2;\n        }\n        pile.push(n / 2);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpi356gmul.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpi356gmul.rs:21:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        pile.push(level);\n        level += 1;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpfa2dgs84.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpv94q9bf_.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    for i in 1..n {\n\
    \        pile.push(i + pile[i - 1]);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp54krc7zj.rs:19:23\n\
    \   |\n19 |         pile.push(i + pile[i - 1]);\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i -\
    \ 1] + 2\n        } else {\n            pile[i - 1]\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvmw_adx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbvmw_adx.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:23:13\n\
    \   |\n23 |             pile[i - 1]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     for _ in 0..n {\n            stones.push(stones.len());\n        }\n   \
    \ } else {\n        for _ in 0..n {\n            stones.push(stones.len() + 1);\n\
    \        }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjr1q2t_b.rs:22:5\n   |\n\
    11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n22 |     stones\n\
    \   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2];\n\
    \        } else {\n            pile[i] = pile[i / 2] + 1;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4yxqsefr.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4yxqsefr.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i / 2];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4yxqsefr.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i / 2];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4yxqsefr.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4yxqsefr.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7bagi6x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 1 {\n            pile.push(num_stones);\n\
    \            num_stones -= 1;\n        } else {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp7ep3mfhx.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    let mut next_level_stones = n;\n    while next_level_stones > 0 {\n     \
    \   if next_level_stones % 2 == 0 {\n            next_level_stones /= 2;\n   \
    \     } else {\n            next_level_stones /= 2;\n            pile.push(next_level_stones);\n\
    \        }\n        current_level += 1;\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpjsec3vzm.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7uxlykt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ pile.len() < n {\n        if n % 2 == 0 {\n            pile.push(level);\n \
    \       }\n        level += 1;\n        n /= 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp42micj7a.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssxd8sy3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile.push(pile.len());\n \
    \   pile.push(pile.len());\n    pile.push(pile.len());\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmx9ywqk.rs:13:15\n   |\n\
    13 |     pile.push(pile.len());\n   |               ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     pile.push(pile.len().try_into().unwrap());\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxmx9ywqk.rs:14:15\n   |\n14 |     pile.push(pile.len());\n\
    \   |               ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     pile.push(pile.len().try_into().unwrap());\n   |       \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxmx9ywqk.rs:15:15\n   |\n15 |     pile.push(pile.len());\n   |     \
    \          ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     pile.push(pile.len().try_into().unwrap());\n   |                    \
    \     ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n\
    \ - 8, n - 9]\n    }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n   \
    \ assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 1, 0, -1, -2, -3, -4, -5, -6]`,\n right: `[3, 5, 7]`', /tmp/tmp2z683g73.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    let mut next_odd_level = 0;\n    let mut next_even_level = 0;\n    while\
    \ current_level < n {\n        if n % 2 == 1 {\n            next_even_level +=\
    \ 1;\n        } else {\n            next_odd_level += 1;\n        }\n        pile.push(next_odd_level);\n\
    \        pile.push(next_even_level);\n        current_level += 1;\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 0, 2, 0, 3]`,\n right: `[3, 5, 7]`', /tmp/tmph2cqnfx5.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     stones.push(n / 2);\n    }\n    for _ in 0..n / 2 {\n        stones.push(stones.last().unwrap()\
    \ + 1);\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpvyl4eegg.rs:17:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push((level + 1) + (n / 2));\n\
    \            n -= (n / 2);\n        }\n        level += 1;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpzkqybbsj.rs:20:18\n\
    \   |\n20 |             n -= (n / 2);\n   |                  ^     ^\n   |\n \
    \  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n20 -             n -= (n / 2);\n20 +             n -= n / 2;\n   | \n\n\
    error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzkqybbsj.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpzkqybbsj.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n -= (n\
    \ / 2);\n   |             ^^^^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdzy63rg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 1;\n  \
    \  while level < n {\n        pile.push(level);\n        if n % 2 == 0 {\n   \
    \         level += 1;\n        } else {\n            level += 2;\n        }\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmp2uidvype.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] = stones[1]\
    \ = stones[2] = n;\n    for i in 1..stones.len() {\n        if i % 2 == 0 {\n\
    \            stones[i] = stones[i + 1];\n        } else {\n            stones[i]\
    \ = stones[i + 1] + stones[i - 1];\n        }\n    }\n    stones\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmq7isadj.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmq7isadj.rs:13:29\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = n;\n   |                 ---------\
    \   ^^^^^^^^^^^^^ expected `isize`, found `()`\n   |                 |\n   | \
    \                expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmq7isadj.rs:13:17\n   |\n13 |     stones[0] = stones[1]\
    \ = stones[2] = n;\n   |     ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut i = 0;\n    while i\
    \ < n {\n        if n % 2 == 0 {\n            pile.push(n - i);\n            i\
    \ += 1;\n        } else {\n            pile.push(i);\n            i += 2;\n  \
    \      }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpe1w73j2i.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 - 1);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for\
    \ i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n / 2 {\n       \
    \ pile.push((i + 1) * 2 - 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n \
    \   }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 - 1);\n    }\n \
    \   for i in 0..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for i in\
    \ 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n / 2 {\n \
    \       pile.push((i + 1) * 2 - 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n \
    \   }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 - 1);\n    }\n \
    \   for i in 0..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for i in\
    \ 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n / 2 {\n \
    \       pile.push((i + 1) * 2 - 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 1);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n \
    \   }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 - 1);\n    }\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwi7bzbx0.rs:91:5\n   |\n\
    11 |   fn make_a_pile(n: isize) -> Vec<isize> {\n   |                        \
    \       ---------- expected `Vec<isize>` because of return type\n...\n91 | / \
    \    for i in 0..n / 2 {\n92 | |         pile.push((i + 1) * 2 - 1);\n93 | | \
    \    }\n   | |_____^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut n = n;\n  \
    \  while n > 0 {\n        pile[n - 1] += n % 2 == 0 ? 1 : 0;\n        n /= 2;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpoxd4fg1l.rs:15:37\n   |\n15 |         pile[n - 1] += n % 2 == 0\
    \ ? 1 : 0;\n   |                                     ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxd4fg1l.rs:12:28\n\
    \   |\n12 |     let mut pile = vec![0; n + 1];\n   |                         \
    \   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut pile = vec![0; (n + 1).try_into().unwrap()];\n   |                     \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpq9qo0s5t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        pile.push(n / 2 + 1);\n    }\n    for i in 0..n\
    \ {\n        pile.push(i + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpx5yp1mwp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push((n - 1) + (n - 2) / 2);\n    }\n    for\
    \ i in 0..n {\n        pile.push((i + 1) * pile[n - i - 1]);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1f111e2x.rs:19:29\n\
    \   |\n19 |         pile.push((i + 1) * pile[n - i - 1]);\n   |              \
    \               ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    for i in 1..n {\n\
    \        pile.push(i + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpi3g6sugh.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssxd8sy3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    while n != 0 {\n        if n % 2 == 0 {\n            pile.push(current_level);\n\
    \            current_level += 1;\n        } else {\n            pile.push(current_level);\n\
    \            current_level += 2;\n        }\n        n /= 2;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmps0gcnfxc.rs:22:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n22 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvk2yuz7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] = stones[1]\
    \ = stones[2] = stones[3];\n    if n % 2 == 0 {\n        for &mut i in stones.iter_mut()\
    \ {\n            *i += 2;\n        }\n    } else {\n        for &mut i in stones.iter_mut()\
    \ {\n            *i += 1;\n        }\n    }\n    stones\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoiqc1ky0.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoiqc1ky0.rs:13:29\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = stones[3];\n   |         \
    \        ---------   ^^^^^^^^^^^^^^^^^^^^^ expected integer, found `()`\n   |\
    \                 |\n   |                 expected due to the type of this binding\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpoiqc1ky0.rs:13:17\n   |\n13 |\
    \     stones[0] = stones[1] = stones[2] = stones[3];\n   |     ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n   |     |\n   |     expected due to the type\
    \ of this binding\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n \
    \ --> /tmp/tmpoiqc1ky0.rs:16:13\n   |\n16 |             *i += 2;\n   |       \
    \      ^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpoiqc1ky0.rs:20:13\n\
    \   |\n20 |             *i += 1;\n   |             ^^\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n >= level {\n        pile.push(level);\n        n -= level;\n        level\
    \ += 1;\n    }\n    pile.push(n);\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpyzmlcitg.rs:16:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |         n -= level;\n\
    \   |         ^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for _ in 0..n / 2 {\n        pile.push((n / 2).ceil());\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_u6iamsn.rs:17:27\n   |\n17 |         pile.push((n / 2).ceil());\n\
    \   |                           ^^^^ help: there is an associated function with\
    \ a similar name: `div_ceil`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut n = n as isize;\n \
    \   while n > 0 {\n        if n % 2 == 0 {\n            pile.push(n / 2);\n  \
    \          n /= 2;\n        } else {\n            pile.push((n / 2) + 1);\n  \
    \          n /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp10vqgp3k.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7uxlykt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().checked_add(1).unwrap());\n \
    \       }\n    } else {\n        for _ in 0..n {\n            pile.push(pile.last().checked_add(2).unwrap());\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmpk4dpmrhw.rs:15:35\n   |\n15 |             pile.push(pile.last().checked_add(1).unwrap());\n\
    \   |                                   ^^^^^^^^^^^ method not found in `Option<&isize>`\n\
    \nerror[E0599]: no method named `checked_add` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpk4dpmrhw.rs:19:35\n   |\n19 |             pile.push(pile.last().checked_add(2).unwrap());\n\
    \   |                                   ^^^^^^^^^^^ method not found in `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut n = n;\n    while n\
    \ > 0 {\n        if n % 2 == 0 {\n            pile.push(n / 2);\n            n\
    \ /= 2;\n        } else {\n            pile.push((n / 2) + 1);\n            n\
    \ /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpn60rs488.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n {\n        if i % 2 == 0 {\n            pile.push(i);\n\
    \        } else {\n            pile.push(n - i);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpoi6g3rrb.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().unwrap() + 1);\n        }\n \
    \   } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap());\n\
    \        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa_v6zs56.rs:19:23\n   |\n\
    19 |             pile.push(pile.last().unwrap());\n   |                      \
    \ ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |             pile.push(*pile.last().unwrap());\n\
    \   |                       +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(i\
    \ + 3);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpydmhge8x.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssxd8sy3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    let mut next_odd_num =\
    \ n;\n    let mut next_even_num = n;\n    for i in 0..n {\n        if i % 2 ==\
    \ 0 {\n            pile[i] = next_even_num;\n            next_even_num += 2;\n\
    \        } else {\n            pile[i] = next_odd_num;\n            next_odd_num\
    \ += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgp4ii87s.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgp4ii87s.rs:17:13\n\
    \   |\n17 |             pile[i] = next_even_num;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgp4ii87s.rs:20:13\n\
    \   |\n20 |             pile[i] = next_odd_num;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut stones = n;\n    while\
    \ stones > 0 {\n        if stones % 2 == 0 {\n            pile.push(stones);\n\
    \            stones /= 2;\n        } else {\n            pile.push(stones + 1);\n\
    \            stones /= 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpa_tw8xzg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().unwrap() + 1);\n        }\n \
    \   } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmp47_yj6rx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut current_level =\
    \ 0;\n    let mut current_level_size = n;\n    while current_level_size != 0 {\n\
    \        if current_level_size % 2 == 0 {\n            pile.push(current_level_size);\n\
    \            current_level_size /= 2;\n        } else {\n            current_level_size\
    \ /= 2;\n            current_level_size += current_level_size % 2;\n        }\n\
    \        current_level += 1;\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpe_63_1y0.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    let mut odd_stones =\
    \ 0;\n    let mut even_stones = 0;\n\n    for _ in 0..n {\n        if n % 2 ==\
    \ 0 {\n            even_stones += 1;\n        } else {\n            odd_stones\
    \ += 1;\n        }\n        stones.push(odd_stones);\n        stones.push(even_stones);\n\
    \    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgt_fimf5.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ i in 0..n {\n            pile.push(i + 1);\n        }\n    } else {\n      \
    \  for i in 0..n {\n            pile.push(i + 2);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp6fmgr1vo.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push((n - 1) / 2);\n    }\n    for i in 1..n\
    \ {\n        pile.push((n - i) / 2);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpuh6inkv6.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i -\
    \ 1] + 2\n        } else {\n            pile[i - 1]\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvmw_adx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbvmw_adx.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:23:13\n\
    \   |\n23 |             pile[i - 1]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push(level + 1);\n           \
    \ n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        pile.push(level);\n        if n % 2 == 0 {\n          \
    \  level += 1;\n        } else {\n            level += 2;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpw_c1mv0k.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp8vgy13e7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    if n % 2 == 0 {\n     \
    \   pile[..(n / 2)].push(n / 2);\n        pile.push(n / 2);\n    } else {\n  \
    \      pile[..(n / 2)].push(n / 2);\n        pile.push(n / 2);\n        pile.push(n\
    \ / 2);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprabsktop.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmprabsktop.rs:14:9\n   |\n14 |         pile[..(n / 2)].push(n / 2);\n\
    \   |         ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmprabsktop.rs:17:9\n   |\n\
    17 |         pile[..(n / 2)].push(n / 2);\n   |         ^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `RangeTo<isize>`\n   = help: the\
    \ following other types implement trait `SliceIndex<T>`:\n             <RangeTo<usize>\
    \ as SliceIndex<[T]>>\n             <RangeTo<usize> as SliceIndex<str>>\n   =\
    \ note: required because of the requirements on the impl of `Index<RangeTo<isize>>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssxd8sy3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n - 1);\n        }\n    } else {\n      \
    \  for _ in 0..n {\n            pile.push(n - 1);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpv5isunn5.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 1 {\n            pile.push(num_stones);\n\
    \            num_stones /= 2;\n        } else {\n            pile.push(num_stones\
    \ - 1);\n            num_stones = num_stones / 2;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp955yrkrc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 1);\n        pile.push((n - 1) /\
    \ 2);\n    }\n    for i in 0..n {\n        pile.push((i + 1) * pile[n - 1]);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2yud73_k.rs:20:29\n\
    \   |\n20 |         pile.push((i + 1) * pile[n - 1]);\n   |                  \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[2] +=\
    \ n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdzequ3e5.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ pile.len() < n {\n        pile.push(level);\n        if n % 2 == 0 {\n     \
    \       level += 1;\n        } else {\n            level -= 1;\n        }\n  \
    \      n /= 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2gzzcfp.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n / 2);\n   \
    \ if n % 2 == 0 {\n        pile.push(n / 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmppfef3s52.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ i in 0..n {\n            pile.push(i + 1);\n        }\n    } else {\n      \
    \  for i in 0..n {\n            pile.push(i + 2);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp6fmgr1vo.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push(level + 1);\n           \
    \ n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[2] += x;\n        } else {\n            pile[2] += x;\n            pile[3]\
    \ += x;\n        }\n    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmelxkgyz.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpmelxkgyz.rs:15:14\n   |\n\
    15 |         if x.is_odd() {\n   |              ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|&x| {\n        if x.is_odd() {\n       \
    \     pile[0] += 2;\n        } else {\n            pile[0] += 1;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztht4h6x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztht4h6x.rs:14:41\n\
    \   |\n14 |     pile[1..].iter().cloned().for_each(|&x| {\n   |              \
    \                           ^--\n   |                                        \
    \ ||\n   |                                         |expected due to this\n   |\
    \                                         expected `isize`, found reference\n\
    \   |                                         help: did you mean `x`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile[0] = n;\n    if n % 2\
    \ == 0 {\n        pile[1] = n / 2;\n    } else {\n        pile[1] = n / 2 + 1;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmparxik6uo.rs:17:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    stones[0] = stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = 0;\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            stones[i] += stones[i\
    \ - 1];\n        } else {\n            stones[i] += stones[i - 1] + 1;\n     \
    \   }\n    }\n    stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbq2lscfg.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbq2lscfg.rs:13:89\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = stones[3] = stones[4] = stones[5]\
    \ = stones[6] = stones[7] = 0;\n   |                                         \
    \                                    ---------   ^^^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |                                                           \
    \                  |\n   |                                                   \
    \                          expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbq2lscfg.rs:13:77\n   |\n13 |     stones[0]\
    \ = stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7]\
    \ = 0;\n   |                                                                 ---------\
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `()`\n   |             \
    \                                                    |\n   |                 \
    \                                                expected due to the type of this\
    \ binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbq2lscfg.rs:13:65\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = stones[3] = stones[4] = stones[5]\
    \ = stones[6] = stones[7] = 0;\n   |                                         \
    \            ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |                                                     |\n   |\
    \                                                     expected due to the type\
    \ of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbq2lscfg.rs:13:53\n\
    \   |\n13 |     stones[0] = stones[1] = stones[2] = stones[3] = stones[4] = stones[5]\
    \ = stones["
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp8vgy13e7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpkszf0bax.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 1 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpkszf0bax.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile.push(i + 1);\n          \
    \  i += 2;\n        } else {\n            i += 1;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmposnru_z1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd = if n % 2\
    \ == 1 {\n        n + 1\n    } else {\n        n\n    };\n    let mut next_even\
    \ = if n % 2 == 0 {\n        n + 1\n    } else {\n        n\n    };\n    for i\
    \ in 0..n {\n        pile.push(i);\n        if i % 2 == 0 {\n            next_even\
    \ = next_even * 2;\n        } else {\n            next_odd = next_odd * 2;\n \
    \       }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpl9jzxn16.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        pile[i] = i + 1;\n        if n % 2 == 0 {\n        \
    \    i += 2;\n        } else {\n            i += 1;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmu5mvo4l.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpmu5mvo4l.rs:15:9\n   |\n15 |         pile[i]\
    \ = i + 1;\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for _ in 0..n / 2 {\n        pile.push(n / 2);\n    }\n  \
    \  pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpyn67pryt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut n = n;\n  \
    \  while n > 0 {\n        pile[n - 1] += n % 2 == 0 ? 1 : 0;\n        n /= 2;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpoxd4fg1l.rs:15:37\n   |\n15 |         pile[n - 1] += n % 2 == 0\
    \ ? 1 : 0;\n   |                                     ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxd4fg1l.rs:12:28\n\
    \   |\n12 |     let mut pile = vec![0; n + 1];\n   |                         \
    \   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut pile = vec![0; (n + 1).try_into().unwrap()];\n   |                     \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ i in 0..n {\n            pile.push(i + 1);\n        }\n    } else {\n      \
    \  for i in 0..n {\n            pile.push(i + 2);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp6fmgr1vo.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for i in 2..=n {\n  \
    \      pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplj545d88.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplj545d88.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmplj545d88.rs:18:20\n   |\n18 |         pile[i] += pile[i - 1];\n\
    \   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut last_level = 0;\n \
    \   while n != 0 {\n        if n % 2 == 0 {\n            pile.push(n - last_level);\n\
    \            last_level = n;\n        } else {\n            pile.push(n - last_level\
    \ - 1);\n            last_level = n;\n        }\n        n /= 2;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp7tn4lpbg.rs:22:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n22 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n + 1];\n    let mut next_odd\
    \ = stones.len() as isize;\n    let mut next_even = stones.len() as isize;\n \
    \   if n % 2 == 0 {\n        next_odd += stones.len() as isize;\n    }\n    if\
    \ n % 2 == 1 {\n        next_even += stones.len() as isize;\n    }\n    for i\
    \ in 0..stones.len() {\n        stones[i] = stones[i + 1];\n    }\n    stones[stones.len()\
    \ - 1] = next_odd;\n    stones[stones.len() - 2] = next_even;\n    stones\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7_tu_c5.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n + 1];\n   |                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ stones = vec![0; (n + 1).try_into().unwrap()];\n   |                       \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ pile.len() < n {\n        pile.push(level);\n        if n % 2 == 0 {\n     \
    \       level += 1;\n        } else {\n            level += 2;\n        }\n  \
    \      n /= 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc0_91kps.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ pile.len() < n {\n        if n % 2 == 0 {\n            pile.push(level);\n \
    \           level += 1;\n        } else {\n            pile.push(level - 1);\n\
    \            level += 2;\n        }\n        n /= 2;\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprqxwmk0f.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(pile.last().unwrap() + 1);\n        }\n \
    \   } else {\n        for _ in 0..n {\n            pile.push(pile.last().unwrap()\
    \ + 2);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 7, 9]`,\n right: `[3, 5, 7]`', /tmp/tmp47_yj6rx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpq9qo0s5t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ pile.len() < n {\n        if n % 2 == 0 {\n            pile.push(level);\n \
    \           level += 1;\n        } else {\n            pile.push(level - 1);\n\
    \            level += 2;\n        }\n        n /= 2;\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprqxwmk0f.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        let mut odd_count = n / 2;\n        let mut even_count\
    \ = n - odd_count;\n        while even_count > 0 {\n            pile.push(even_count\
    \ as isize);\n            even_count -= 1;\n        }\n        while odd_count\
    \ > 0 {\n            pile.push(odd_count as isize);\n            odd_count -=\
    \ 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpeqgmbm0e.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    for i\
    \ in 1..n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpck28mu6t.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `Slic"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n        pile[2] += n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7uxlykt.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n    }\n    if n %\
    \ 2 == 0 {\n        return vec![n - 1, n - 2];\n    }\n    return vec![n - 1,\
    \ n - 1, n - 1];\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmprylkbuyu.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2);\n   \
    \ }\n    for i in 2..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n   \
    \ for i in 3..n / 2 {\n        pile.push((i + 1) * 2 + 2);\n    }\n    for i in\
    \ 4..n / 2 {\n        pile.push((i + 1) * 2 + 3);\n    }\n    for i in 5..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 4);\n    }\n    for i in 6..n / 2 {\n \
    \       pile.push((i + 1) * 2 + 5);\n    }\n    for i in 7..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 6);\n    }\n    for i in 8..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 7);\n    }\n    for i in 9..n / 2 {\n        pile.push((i + 1) * 2 + 8);\n\
    \    }\n    for i in 10..n / 2 {\n        pile.push((i + 1) * 2 + 9);\n    }\n\
    \    for i in 11..n / 2 {\n        pile.push((i + 1) * 2 + 10);\n    }\n    for\
    \ i in 12..n / 2 {\n        pile.push((i + 1) * 2 + 11);\n    }\n    for i in\
    \ 13..n / 2 {\n        pile.push((i + 1) * 2 + 12);\n    }\n    for i in 14..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 13);\n    }\n    for i in 15..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 14);\n    }\n    for i in 16..n / 2 {\n     \
    \   pile.push((i + 1) * 2 + 15);\n    }\n    for i in 17..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 16);\n    }\n    for i in 18..n / 2 {\n        pile.push((i + 1)\
    \ * 2 + 17);\n    }\n    for i in 19..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 18);\n    }\n    for i in 20..n / 2 {\n        pile.push((i + 1) * 2 + 19);\n\
    \    }\n    for i in 21..n / 2 {\n        pile.push((i + 1) * 2 + 20);\n    }\n\
    \    for i in 22..n / 2 {\n        pile.push((i + 1) * 2 + 21);\n    }\n    for\
    \ i in 23..n / 2 {\n        pile.push((i + 1) * 2 + 22);\n    }\n    for i in\
    \ 24..n / 2 {\n        pile.push((i + 1) * 2 + 23);\n    }\n    for i in 25..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 24);\n    }\n    for i in 26..n / 2 {\n\
    \n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmplsyscx54.rs:102:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n91  |     for i in 26..n /\
    \ 2 {\n    |                        - this delimiter might not be properly closed...\n\
    92  | \n93  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n102 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplsyscx54.rs:11:29\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------    \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2 - 1);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for\
    \ i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 2);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 3);\n    }\n    for i in 0..n / 2 {\n       \
    \ pile.push((i + 1) * 2 + 4);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 5);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 6);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 7);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 8);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 9);\n    }\n    for\
    \ i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 10);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 11);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 12);\n    }\n    for i in 0..n / 2 {\n      \
    \  pile.push((i + 1) * 2 + 13);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 14);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 15);\n    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 16);\n\
    \    }\n    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 17);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 18);\n    }\n    for\
    \ i in 0..n / 2 {\n        pile.push((i + 1) * 2 + 19);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 20);\n    }\n    for i in 0..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 21);\n    }\n    for i in 0..n / 2 {\n      \
    \  pile.push((i + 1) * 2 + 22);\n    }\n    for i in 0..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 23);\n    }\n    for i in 0..n / 2 {\n        \n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp038mel2t.rs:102:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n91  |     for i in 0..n /\
    \ 2 {\n    |                       - this delimiter might not be properly closed...\n\
    92  |         \n93  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n102 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp038mel2t.rs:11:29\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------    \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ i in 0..n {\n            pile.push(i + 1);\n        }\n    } else {\n      \
    \  for i in 0..n {\n            pile.push(i + 2);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp6fmgr1vo.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    } else {\n        pile[1] +=\
    \ n / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmtw4kz2.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        pile[i] += if n % 2 == 0 {\n            pile[i - 1]\n\
    \        } else {\n            pile[i - 1] + 1\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qmr3tkp.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9qmr3tkp.rs:15:9\n   |\n15 |         pile[i]\
    \ += if n % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp9qmr3tkp.rs:16:13\n   |\n16 |             pile[i - 1]\n   |   \
    \          ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9qmr3tkp.rs:18:13\n\
    \   |\n18 |             pile[i - 1] + 1\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i + 1);\n        } else {\n            pile.push(i\
    \ + 1 + (i / 2));\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpbujh_j7l.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    if\
    \ n % 2 == 0 {\n        pile[1] = pile[0] + 1;\n    } else {\n        pile[1]\
    \ = pile[0];\n    }\n    for i in 2..=n {\n        pile[i] = pile[i - 1] + if\
    \ i % 2 == 0 {\n            pile[i / 2]\n        } else {\n            pile[i\
    \ / 2] + 1\n        };\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5stkgmio.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5stkgmio.rs:20:9\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5stkgmio.rs:20:19\n   |\n20 |         pile[i]\
    \ = pile[i - 1] + if i % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5stkgmio.rs:21:13\n   |\n21 |            \
    \ pile[i / 2]\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5stkgmio.rs:23:13\n   |\n23 |            \
    \ pile[i / 2] + 1\n   |             ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait "
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|i| {\n        if i % 2 == 0 {\n        \
    \    pile[2] += i;\n        } else {\n            pile[2] += i + 1;\n        }\n\
    \    });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9n_wrkeo.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2);\n    }\n  \
    \  for i in 2..n / 2 {\n        pile.push(i * 2 + 1);\n    }\n    for i in 3..n\
    \ / 2 {\n        pile.push(i * 2 + 2);\n    }\n    for i in 4..n / 2 {\n     \
    \   pile.push(i * 2 + 3);\n    }\n    for i in 5..n / 2 {\n        pile.push(i\
    \ * 2 + 4);\n    }\n    for i in 6..n / 2 {\n        pile.push(i * 2 + 5);\n \
    \   }\n    for i in 7..n / 2 {\n        pile.push(i * 2 + 6);\n    }\n    for\
    \ i in 8..n / 2 {\n        pile.push(i * 2 + 7);\n    }\n    for i in 9..n / 2\
    \ {\n        pile.push(i * 2 + 8);\n    }\n    for i in 10..n / 2 {\n        pile.push(i\
    \ * 2 + 9);\n    }\n    for i in 11..n / 2 {\n        pile.push(i * 2 + 10);\n\
    \    }\n    for i in 12..n / 2 {\n        pile.push(i * 2 + 11);\n    }\n    for\
    \ i in 13..n / 2 {\n        pile.push(i * 2 + 12);\n    }\n    for i in 14..n\
    \ / 2 {\n        pile.push(i * 2 + 13);\n    }\n    for i in 15..n / 2 {\n   \
    \     pile.push(i * 2 + 14);\n    }\n    for i in 16..n / 2 {\n        pile.push(i\
    \ * 2 + 15);\n    }\n    for i in 17..n / 2 {\n        pile.push(i * 2 + 16);\n\
    \    }\n    for i in 18..n / 2 {\n        pile.push(i * 2 + 17);\n    }\n    for\
    \ i in 19..n / 2 {\n        pile.push(i * 2 + 18);\n    }\n    for i in 20..n\
    \ / 2 {\n        pile.push(i * 2 + 19);\n    }\n    for i in 21..n / 2 {\n   \
    \     pile.push(i * 2 + 20);\n    }\n    for i in 22..n / 2 {\n        pile.push(i\
    \ * 2 + 21);\n    }\n    for i in 23..n / 2 {\n        pile.push(i * 2 + 22);\n\
    \    }\n    for i in 24..n / 2 {\n        pile.push(i * 2 + 23);\n    }\n    for\
    \ i in 25..n / 2 {\n        pile.push(i * 2 + 24);\n    }\n    for i in 26..n\
    \ / 2 {\n        pile.push(i * 2 + 25);\n    }\n    for i in 27..n / 2 {\n   \
    \     pile.push(i * \n}\n\nfn main() {\n    let candidate = make_a_pile;\n   \
    \ assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2qp_bhes.rs:105:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n94  |     for i in 27..n /\
    \ 2 {\n    |                        - this delimiter might not be properly closed...\n\
    95  |         pile.push(i * \n96  | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n105 | }\n    |   ^\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmp2qp_bhes.rs:96:1\n   |\n96 | }\n   | ^ expected expression\n\
    \nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp2qp_bhes.rs:95:18\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - closing delimiter possibly meant for this\n...\n95 | \
    \        pile.push(i * \n   |                  ^ unclosed delimiter\n96 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2qp_bhes.rs:11:29\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |    -----------              ^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        pile[i] += if i % 2 == 0 {\n            pile[i / 2]\n\
    \        } else {\n            pile[(i - 1) / 2] + 1\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptdyjur05.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptdyjur05.rs:15:9\n   |\n15 |         pile[i]\
    \ += if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmptdyjur05.rs:16:13\n   |\n16 |             pile[i / 2]\n   |   \
    \          ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptdyjur05.rs:18:13\n\
    \   |\n18 |             pile[(i - 1) / 2] + 1\n   |             ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i as isize);\n        } else {\n       \
    \     pile.push((i + 1) + (i as isize));\n        }\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp6221psh2.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpdwkuto9z.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    while n != 0 {\n        if n % 2 == 0 {\n            pile.push(current_level);\n\
    \            current_level += 1;\n        }\n        n /= 2;\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp60_6x09d.rs:19:9\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n19 |         n /= 2;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n    pile.push(1);\n\
    \    pile.push(1);\n    pile.\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpdnn5y9oh.rs:97:1\n   |\n97\
    \ | }\n   | ^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp8vgy13e7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = vec![0; n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            stones[i] = stones[i + 1];\n \
    \           i += 1;\n        } else {\n            stones[i + 1] = stones[i +\
    \ 2];\n            i += 2;\n        }\n    }\n    stones\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzt1o73e.rs:12:30\n   |\n\
    12 |     let mut stones = vec![0; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut stones\
    \ = vec![0; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuzt1o73e.rs:16:13\n\
    \   |\n16 |             stones[i] = stones[i + 1];\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuzt1o73e.rs:16:25\n\
    \   |\n16 |             stones[i] = stones[i + 1];\n   |                     \
    \    ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuzt1o73e.rs:19:13\n\
    \   |\n19 |             stones[i + 1] = stones[i + 2];\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuzt1o73e.rs:19:29\n\
    \   |\n19 |             stones[i + 1] = stones[i + 2];\n   |                 \
    \            ^^^^^^^^^^^^^ sl"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ i in 0..n {\n            pile.push(i + 1);\n        }\n    } else {\n      \
    \  for i in 0..n {\n            pile.push(i + 2);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[3, 5, 7]`', /tmp/tmp6fmgr1vo.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2);\n    }\n  \
    \  for i in 1..n / 2 {\n        pile.push(i * 2 + 1);\n    }\n    for i in 1..n\
    \ / 2 {\n        pile.push(i * 2 + 2);\n    }\n    for i in 1..n / 2 {\n     \
    \   pile.push(i * 2 + 3);\n    }\n    for i in 1..n / 2 {\n        pile.push(i\
    \ * 2 + 4);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 5);\n \
    \   }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 6);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push(i * 2 + 7);\n    }\n    for i in 1..n / 2\
    \ {\n        pile.push(i * 2 + 8);\n    }\n    for i in 1..n / 2 {\n        pile.push(i\
    \ * 2 + 9);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 10);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 11);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push(i * 2 + 12);\n    }\n    for i in 1..n /\
    \ 2 {\n        pile.push(i * 2 + 13);\n    }\n    for i in 1..n / 2 {\n      \
    \  pile.push(i * 2 + 14);\n    }\n    for i in 1..n / 2 {\n        pile.push(i\
    \ * 2 + 15);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 16);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 17);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push(i * 2 + 18);\n    }\n    for i in 1..n /\
    \ 2 {\n        pile.push(i * 2 + 19);\n    }\n    for i in 1..n / 2 {\n      \
    \  pile.push(i * 2 + 20);\n    }\n    for i in 1..n / 2 {\n        pile.push(i\
    \ * 2 + 21);\n    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 22);\n\
    \    }\n    for i in 1..n / 2 {\n        pile.push(i * 2 + 23);\n    }\n    for\
    \ i in 1..n / 2 {\n        pile.push(i * 2 + 24);\n    }\n    for i in 1..n /\
    \ 2 {\n        pile.push(i * 2 + 25);\n    }\n    for i in 1..n / 2 {\n      \
    \  pile.push(i * \n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpp0qxd7il.rs:105:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n94  |     for i in 1..n /\
    \ 2 {\n    |                       - this delimiter might not be properly closed...\n\
    95  |         pile.push(i * \n96  | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n105 | }\n    |   ^\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpp0qxd7il.rs:96:1\n   |\n96 | }\n   | ^ expected expression\n\
    \nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpp0qxd7il.rs:95:18\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                   \
    \                     - closing delimiter possibly meant for this\n...\n95 | \
    \        pile.push(i * \n   |                  ^ unclosed delimiter\n96 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpp0qxd7il.rs:11:29\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize>\
    \ {\n   |    -----------              ^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \    found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut levels = vec![];\n\
    \    let mut level = 0;\n    while n != 0 {\n        if n % 2 == 0 {\n       \
    \     pile.push(level);\n            level += 1;\n        } else {\n         \
    \   pile.push(level);\n            level += 2;\n        }\n        n /= 2;\n \
    \   }\n    levels.extend_from_slice(pile);\n    levels\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpafh86vr4.rs:25:30\n   |\n\
    25 |     levels.extend_from_slice(pile);\n   |                              ^^^^\n\
    \   |                              |\n   |                              expected\
    \ `&[_]`, found struct `Vec`\n   |                              help: consider\
    \ borrowing here: `&pile`\n   |\n   = note: expected reference `&[_]`\n      \
    \           found struct `Vec<{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    let mut level = 1;\n\
    \    while stones.len() < n {\n        if n % 2 == 0 {\n            stones.push(level);\n\
    \            level += 1;\n        } else {\n            stones.push(level - 1);\n\
    \            level += 2;\n        }\n    }\n    stones\n}\n\nfn main() {\n   \
    \ let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpae6ma_bt.rs:14:26\n   |\n\
    14 |     while stones.len() < n {\n   |                          ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while stones.len() < n.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 1 {\n        pile.push(n\
    \ - 1);\n    } else {\n        let mut odd_count = 0;\n        let mut even_count\
    \ = 0;\n        for i in 0..n {\n            if i % 2 == 0 {\n               \
    \ even_count += 1;\n            } else {\n                odd_count += 1;\n  \
    \          }\n            pile.push(i + 1);\n        }\n        pile.push(even_count);\n\
    \        pile.push(odd_count);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[3, 5, 7]`', /tmp/tmpvr8qcwb1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ pile.len() < n {\n        if n % 2 == 0 {\n            pile.push(level + 1);\n\
    \            level += 1;\n        } else {\n            pile.push(level);\n  \
    \          level += 2;\n        }\n        n /= 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2481140g.rs:14:24\n   |\n\
    14 |     while pile.len() < n {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while pile.len() < n.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for _ in 1..n+1 {\n \
    \       pile[..].push(pile[..].iter().cloned().sum());\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21k6col0.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `push` found\
    \ for slice `[isize]` in the current scope\n  --> /tmp/tmp21k6col0.rs:18:18\n\
    \   |\n18 |         pile[..].push(pile[..].iter().cloned().sum());\n   |     \
    \             ^^^^ method not found in `[isize]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpgs8blj67.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        pile.push(n - 2);\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpshgs_bbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    let mut level = 1;\n  \
    \  let mut stones = n;\n    while stones > 0 {\n        if stones % 2 == 0 {\n\
    \            pile.push(stones);\n            stones /= 2;\n        } else {\n\
    \            pile.push(stones);\n            stones /= 2;\n            pile.push(stones);\n\
    \            stones /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\
    \nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp0l2hd9a7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i as isize);\n        } else {\n       \
    \     pile.push((i + 1) + (i as isize) % 2);\n        }\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp9y0p12ol.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n / 2 {\n            pile.push(pile.last().unwrap() + 1);\n        }\n\
    \    } else {\n        for _ in 0..n / 2 {\n            pile.push(pile.last().unwrap()\
    \ - 1);\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpbwn6u2ix.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for &i in &mut pile {\n\
    \        *i += *i / 2;\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5x7_f9xn.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5x7_f9xn.rs:17:9\n\
    \   |\n17 |     for &i in &mut pile {\n   |         ^^    --------- this expression\
    \ has type `Option<&mut isize>`\n   |         |\n   |         types differ in\
    \ mutability\n   |         help: you can probably remove the explicit borrow:\
    \ `i`\n   |\n   = note: expected mutable reference `&mut isize`\n            \
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut n = n;\n  \
    \  while n > 0 {\n        pile[n - 1] += n % 2 == 0 ? 1 : 0;\n        n /= 2;\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpoxd4fg1l.rs:15:37\n   |\n15 |         pile[n - 1] += n % 2 == 0\
    \ ? 1 : 0;\n   |                                     ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxd4fg1l.rs:12:28\n\
    \   |\n12 |     let mut pile = vec![0; n + 1];\n   |                         \
    \   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut pile = vec![0; (n + 1).try_into().unwrap()];\n   |                     \
    \       +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        let mut odd_n = n - 1;\n        while odd_n % 2\
    \ == 0 {\n            odd_n /= 2;\n        }\n        let mut even_n = odd_n;\n\
    \        while even_n % 2 == 0 {\n            even_n /= 2;\n        }\n      \
    \  pile.push(even_n);\n    }\n    pile\n}\n\nfn main() {\n    let candidate =\
    \ make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[3, 5, 7]`', /tmp/tmpcp4x_893.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += pile[i - 1];\n\
    \        } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n   \
    \ pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpssxd8sy3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:13\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:16:24\n   |\n16 |            \
    \ pile[i] += pile[i - 1];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:13\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpssxd8sy3.rs:18:24\n   |\n18 |            \
    \ pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = hel"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i);\n    }\n    for\
    \ i in 2..n / 2 {\n        pile.push((i + 1) * 2);\n    }\n    for i in 3..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n    for i in 4..n / 2 {\n \
    \       pile.push((i + 1) * 2 + 2);\n    }\n    for i in 5..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 3);\n    }\n    for i in 6..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 4);\n    }\n    for i in 7..n / 2 {\n        pile.push((i + 1) * 2 + 5);\n\
    \    }\n    for i in 8..n / 2 {\n        pile.push((i + 1) * 2 + 6);\n    }\n\
    \    for i in 9..n / 2 {\n        pile.push((i + 1) * 2 + 7);\n    }\n    for\
    \ i in 10..n / 2 {\n        pile.push((i + 1) * 2 + 8);\n    }\n    for i in 11..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 9);\n    }\n    for i in 12..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 10);\n    }\n    for i in 13..n / 2 {\n     \
    \   pile.push((i + 1) * 2 + 11);\n    }\n    for i in 14..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 12);\n    }\n    for i in 15..n / 2 {\n        pile.push((i + 1)\
    \ * 2 + 13);\n    }\n    for i in 16..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 14);\n    }\n    for i in 17..n / 2 {\n        pile.push((i + 1) * 2 + 15);\n\
    \    }\n    for i in 18..n / 2 {\n        pile.push((i + 1) * 2 + 16);\n    }\n\
    \    for i in 19..n / 2 {\n        pile.push((i + 1) * 2 + 17);\n    }\n    for\
    \ i in 20..n / 2 {\n        pile.push((i + 1) * 2 + 18);\n    }\n    for i in\
    \ 21..n / 2 {\n        pile.push((i + 1) * 2 + 19);\n    }\n    for i in 22..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 20);\n    }\n    for i in 23..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 21);\n    }\n    for i in 24..n / 2 {\n     \
    \   pile.push((i + 1) * 2 + 22);\n    }\n    for i in 25..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 23);\n    }\n    for i in 26..n / 2 {\n        pile.push((\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7b3gunsb.rs:102:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n91  |     for i in 26..n /\
    \ 2 {\n    |                        - this delimiter might not be properly closed...\n\
    92  |         pile.push((\n93  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n102 | }\n    |   ^\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmp7b3gunsb.rs:92:19\n   |\n11 | fn make_a_pile(n: isize) ->\
    \ Vec<isize> {\n   |                                        - closing delimiter\
    \ possibly meant for this\n...\n92 |         pile.push((\n   |               \
    \    ^ unclosed delimiter\n93 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7b3gunsb.rs:92:19\n   |\n92 |           pile.push((\n\
    \   |  ___________________^\n93 | | }\n   | |_^ expected `isize`, found `()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7b3gunsb.rs:11:29\n   |\n11 |\
    \ fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    if n % 2 == 0 {\n     \
    \   pile.push(n / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i +\
    \ 1) * i);\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmpqvl67i9w.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push(i);\n    }\n    for\
    \ i in 2..n / 2 {\n        pile.push(i * 2);\n    }\n    for i in 3..n / 2 {\n\
    \        pile.push(i * 3);\n    }\n    for i in 4..n / 2 {\n        pile.push(i\
    \ * 4);\n    }\n    for i in 5..n / 2 {\n        pile.push(i * 5);\n    }\n  \
    \  for i in 6..n / 2 {\n        pile.push(i * 6);\n    }\n    for i in 7..n /\
    \ 2 {\n        pile.push(i * 7);\n    }\n    for i in 8..n / 2 {\n        pile.push(i\
    \ * 8);\n    }\n    for i in 9..n / 2 {\n        pile.push(i * 9);\n    }\n  \
    \  for i in 10..n / 2 {\n        pile.push(i * 10);\n    }\n    for i in 11..n\
    \ / 2 {\n        pile.push(i * 11);\n    }\n    for i in 12..n / 2 {\n       \
    \ pile.push(i * 12);\n    }\n    for i in 13..n / 2 {\n        pile.push(i * 13);\n\
    \    }\n    for i in 14..n / 2 {\n        pile.push(i * 14);\n    }\n    for i\
    \ in 15..n / 2 {\n        pile.push(i * 15);\n    }\n    for i in 16..n / 2 {\n\
    \        pile.push(i * 16);\n    }\n    for i in 17..n / 2 {\n        pile.push(i\
    \ * 17);\n    }\n    for i in 18..n / 2 {\n        pile.push(i * 18);\n    }\n\
    \    for i in 19..n / 2 {\n        pile.push(i * 19);\n    }\n    for i in 20..n\
    \ / 2 {\n        pile.push(i * 20);\n    }\n    for i in 21..n / 2 {\n       \
    \ pile.push(i * 21);\n    }\n    for i in 22..n / 2 {\n        pile.push(i * 22);\n\
    \    }\n    for i in 23..n / 2 {\n        pile.push(i * 23);\n    }\n    for i\
    \ in 24..n / 2 {\n        pile.push(i * 24);\n    }\n    for i in 25..n / 2 {\n\
    \        pile.push(i * 25);\n    }\n    for i in 26..n / 2 {\n        pile.push(i\
    \ * 26);\n    }\n    for i in 27..n / 2 {\n        pile.push(i * 27);\n    }\n\
    \    for i in 28..n / 2 {\n        pile.push(i * 28);\n    }\n    for i in 29..\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpitgps03_.rs:101:1\n    |\n\
    101 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7bagi6x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n            n -= n / 2;\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push(n / 2);\n \
    \           n -= n / 2;\n        }\n        pile.push(n / 2);\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpi356gmul.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpi356gmul.rs:21:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 1);\n    }\n  \
    \  for i in 0..n / 2 {\n        pile.push(i + 2);\n    }\n    for i in 0..n /\
    \ 2 {\n        pile.push(i + 3);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 4);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 5);\n    }\n  \
    \  for i in 0..n / 2 {\n        pile.push(i + 6);\n    }\n    for i in 0..n /\
    \ 2 {\n        pile.push(i + 7);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 8);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 9);\n    }\n  \
    \  for i in 0..n / 2 {\n        pile.push(i + 10);\n    }\n    for i in 0..n /\
    \ 2 {\n        pile.push(i + 11);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 12);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 13);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push(i + 14);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(i + 15);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 16);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 17);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push(i + 18);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(i + 19);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 20);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 21);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push(i + 22);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(i + 23);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 24);\n    }\n    for i in 0..n / 2 {\n        pile.push(i + 25);\n    }\n\
    \    for i in 0..n / 2 {\n        pile.push(i + 26);\n    }\n    for i in 0..n\
    \ / 2 {\n        pile.push(i + 27);\n    }\n    for i in 0..n / 2 {\n        pile.push(i\
    \ + 28);\n    }\n    for i in 0.\n}\n\nfn main() {\n    let candidate = make_a_pile;\n\
    \    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp2bqonzb7.rs:101:1\n    |\n\
    101 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    for i\
    \ in 1..n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpck28mu6t.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `Slic"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ pile[1..].iter().cloned().for_each(|x| {\n        if x.is_odd() {\n        \
    \    pile[0] += 1;\n        } else {\n            pile[0] += 2;\n        }\n \
    \   });\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2fkv28_7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0599]: no method named `is_odd` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp2fkv28_7.rs:15:14\n   |\n\
    15 |         if x.is_odd() {\n   |              ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    }\n    for i in 0..n {\n        if i % 2 == 0 {\n            pile.push(i);\n\
    \        } else {\n            pile.push(i + 1);\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 0, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpktc0l3t7.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdzy63rg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    for i in 0..n {\n        if\
    \ i % 2 == 0 {\n            pile.push(i as isize);\n        } else {\n       \
    \     pile.push((i + 1) + (i as isize));\n        }\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 3, 2]`,\n right: `[3, 5, 7]`', /tmp/tmp6221psh2.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i -\
    \ 1] + 2\n        } else {\n            pile[i - 1]\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvmw_adx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbvmw_adx.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:23:13\n\
    \   |\n23 |             pile[i - 1]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n);\n    if n % 2\
    \ == 0 {\n        pile.push(n - 1);\n    } else {\n        pile.push(n - 2);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmplitkxbxv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    let mut i = 0;\n  \
    \  while i < n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2] as\
    \ isize + 1;\n        } else {\n            pile[i] = pile[i / 2] as isize + 1;\n\
    \            i += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2j7pkst3.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp2j7pkst3.rs:16:13\n   |\n16 |         \
    \    pile[i] = pile[i / 2] as isize + 1;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2j7pkst3.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i / 2] as isize + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2j7pkst3.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize + 1;\n   |            \
    \ ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2j7pkst3.rs:18:23\n\
    \   |\n18 |             pile[i] = pile[i / 2] as isize + 1;\n   |            \
    \     "
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut num_stones = n;\n \
    \   while num_stones > 0 {\n        if num_stones % 2 == 0 {\n            pile.push(num_stones\
    \ / 2);\n            num_stones = num_stones / 2;\n        } else {\n        \
    \    pile.push(num_stones);\n            num_stones = num_stones - 1;\n      \
    \  }\n    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n  \
    \  assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4,\
    \ 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6),\
    \ vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14,\
    \ 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpd2o8w66t.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7bagi6x.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n];\n    pile[0] = n;\n    for i\
    \ in 1..n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpck28mu6t.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut pile =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:13\n\
    \   |\n18 |             pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpck28mu6t.rs:18:23\n   |\n18 |  \
    \           pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `Slic"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    }\n    for i in 1..n / 2 {\n        pile.push((i + 1) * 2);\n   \
    \ }\n    for i in 2..n / 2 {\n        pile.push((i + 1) * 2 + 1);\n    }\n   \
    \ for i in 3..n / 2 {\n        pile.push((i + 1) * 2 + 2);\n    }\n    for i in\
    \ 4..n / 2 {\n        pile.push((i + 1) * 2 + 3);\n    }\n    for i in 5..n /\
    \ 2 {\n        pile.push((i + 1) * 2 + 4);\n    }\n    for i in 6..n / 2 {\n \
    \       pile.push((i + 1) * 2 + 5);\n    }\n    for i in 7..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 6);\n    }\n    for i in 8..n / 2 {\n        pile.push((i + 1) *\
    \ 2 + 7);\n    }\n    for i in 9..n / 2 {\n        pile.push((i + 1) * 2 + 8);\n\
    \    }\n    for i in 10..n / 2 {\n        pile.push((i + 1) * 2 + 9);\n    }\n\
    \    for i in 11..n / 2 {\n        pile.push((i + 1) * 2 + 10);\n    }\n    for\
    \ i in 12..n / 2 {\n        pile.push((i + 1) * 2 + 11);\n    }\n    for i in\
    \ 13..n / 2 {\n        pile.push((i + 1) * 2 + 12);\n    }\n    for i in 14..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 13);\n    }\n    for i in 15..n / 2 {\n\
    \        pile.push((i + 1) * 2 + 14);\n    }\n    for i in 16..n / 2 {\n     \
    \   pile.push((i + 1) * 2 + 15);\n    }\n    for i in 17..n / 2 {\n        pile.push((i\
    \ + 1) * 2 + 16);\n    }\n    for i in 18..n / 2 {\n        pile.push((i + 1)\
    \ * 2 + 17);\n    }\n    for i in 19..n / 2 {\n        pile.push((i + 1) * 2 +\
    \ 18);\n    }\n    for i in 20..n / 2 {\n        pile.push((i + 1) * 2 + 19);\n\
    \    }\n    for i in 21..n / 2 {\n        pile.push((i + 1) * 2 + 20);\n    }\n\
    \    for i in 22..n / 2 {\n        pile.push((i + 1) * 2 + 21);\n    }\n    for\
    \ i in 23..n / 2 {\n        pile.push((i + 1) * 2 + 22);\n    }\n    for i in\
    \ 24..n / 2 {\n        pile.push((i + 1) * 2 + 23);\n    }\n    for i in 25..n\
    \ / 2 {\n        pile.push((i + 1) * 2 + 24);\n    }\n    for i in 26..n / 2 {\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4gu6wxv3.rs:101:3\n\
    \    |\n11  | fn make_a_pile(n: isize) -> Vec<isize> {\n    |                \
    \                        - unclosed delimiter\n...\n91  |     for i in 26..n /\
    \ 2 {\n    |                        - this delimiter might not be properly closed...\n\
    92  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    101 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4gu6wxv3.rs:11:29\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------    \
    \          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        pile[i] = pile[i - 1] + if n % 2 == 0 {\n            1\n\
    \        } else {\n            -1\n        };\n    }\n    pile\n}\n\nfn main()\
    \ {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5,\
    \ 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvu3bawqm.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvu3bawqm.rs:15:9\n   |\n15 |         pile[i]\
    \ = pile[i - 1] + if n % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpvu3bawqm.rs:15:19\n   |\n15 |         pile[i]\
    \ = pile[i - 1] + if n % 2 == 0 {\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut current_level = 0;\n\
    \    while current_level < n {\n        if n % 2 == 0 {\n            pile.push(current_level);\n\
    \            current_level += 1;\n        } else {\n            pile.push(current_level\
    \ + 1);\n            current_level += 2;\n        }\n    }\n    pile\n}\n\nfn\
    \ main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpuitnv423.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = Vec::new();\n    pile.push(n);\n    if n\
    \ % 2 == 0 {\n        pile.push(n - 1);\n    }\n    pile\n}\n\nfn main() {\n \
    \   let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpq9qo0s5t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut stones = Vec::new();\n    if n % 2 == 0 {\n   \
    \     for _ in 0..n {\n            stones.push(1);\n        }\n    } else {\n\
    \        for _ in 0..n {\n            stones.push(0);\n        }\n    }\n    stones\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpu2tamax2.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i - 1] + 1;\n\
    \        } else {\n            pile[i] = pile[i - 1];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdzy63rg.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i - 1] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgdzy63rg.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i - 1];\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = h"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += 1;\n   \
    \ for i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] += 1;\n     \
    \   } else {\n            pile[i] += pile[i - 2];\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvk2yuz7.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:16:13\n   |\n16 |         \
    \    pile[i] += 1;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:13\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |             ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzvk2yuz7.rs:18:24\n   |\n18 |  \
    \           pile[i] += pile[i - 2];\n   |                        ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n            n -= n / 2;\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push((n + 1) / 2);\n\
    \            n -= (n + 1) / 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9oda0ike.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp9oda0ike.rs:21:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |             n -= (n\
    \ + 1) / 2;\n   |             ^^^^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    pile[1]\
    \ = if n % 2 == 0 {\n        pile[0] + 2\n    } else {\n        pile[0]\n    };\n\
    \    for i in 2..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i -\
    \ 1] + 2\n        } else {\n            pile[i - 1]\n        };\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvmw_adx.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:20:9\n   |\n20 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbvmw_adx.rs:21:13\n   |\n21 |             pile[i - 1] + 2\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbvmw_adx.rs:23:13\n\
    \   |\n23 |             pile[i - 1]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010124
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut i = 0;\n    while i\
    \ < n {\n        if n % 2 == 0 {\n            pile.push(i as isize);\n       \
    \     i += 1;\n        } else {\n            i += 2;\n        }\n    }\n    pile\n\
    }\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[3, 5, 7]`', /tmp/tmp1zr2ss1z.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpdwkuto9z.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n            n -= n / 2;\n      \
    \  }\n    } else {\n        for _ in 0..n {\n            pile.push(n);\n     \
    \       n -= n;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8d2apj73.rs:16:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n -= n\
    \ / 2;\n   |             ^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp8d2apj73.rs:21:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n21 |             n -= n;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        let mut odd = n / 2;\n        let mut even = n\
    \ / 2;\n        while even > 0 {\n            pile.push(even);\n            even\
    \ -= even;\n        }\n        while odd > 0 {\n            pile.push(odd);\n\
    \            odd -= odd;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1]`,\n right: `[3, 5, 7]`', /tmp/tmpnku0mrs9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut next_odd_level = 0;\n\
    \    let mut next_even_level = 0;\n    for _ in 0..n {\n        if n % 2 == 0\
    \ {\n            next_even_level += 1;\n        } else {\n            next_odd_level\
    \ += 1;\n        }\n        pile.push(next_odd_level);\n        pile.push(next_even_level);\n\
    \    }\n    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 0, 3, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpq10dslfr.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 0;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            pile.push(level);\n         \
    \   n /= 2;\n        } else {\n            pile.push(level + 1);\n           \
    \ n /= 2;\n        }\n        level += 1;\n    }\n    pile\n}\n\nfn main() {\n\
    \    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:17:13\n\
    \   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n17 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmp99jajpb2.rs:20:13\n \
    \  |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                - help:\
    \ consider making this binding mutable: `mut n`\n...\n20 |             n /= 2;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    pile.push(n as isize);\n  \
    \  if n % 2 == 0 {\n        pile.push(n / 2 as isize);\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 5, 7]`', /tmp/tmpead_x4kf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010126
- exit_code: -1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ - 1);\n    } else {\n        let mut odd = 1;\n        let mut even = n - 1;\n\
    \        while even > 0 {\n            pile.push(even);\n            even += odd;\n\
    \            odd += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let\
    \ candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n   \
    \ assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5,\
    \ 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n\
    \    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010131
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut i = 0;\n    while i\
    \ < n {\n        if n % 2 == 0 {\n            pile.push(i as isize);\n       \
    \     i += 1;\n        } else {\n            pile.push((i + 1) + (i as isize));\n\
    \            i += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5]`,\n right: `[3, 5, 7]`', /tmp/tmpyblg6a0d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010126
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n  \
    \  let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n\
    \    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpg2bqpfz6.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010126
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        pile.push(n\
    \ / 2);\n    } else {\n        pile.push(n / 2 + 1);\n    }\n    for i in 0..n\
    \ {\n        pile.push(i + 1);\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 2, 3]`,\n right: `[3, 5, 7]`', /tmp/tmpx5yp1mwp.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] += n;\n   \
    \ if n % 2 == 0 {\n        pile[1] += n / 2;\n    }\n    for i in 2..=n {\n  \
    \      pile[i] += pile[i - 1];\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplj545d88.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplj545d88.rs:18:9\n   |\n18 |         pile[i]\
    \ += pile[i - 1];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmplj545d88.rs:18:20\n   |\n18 |         pile[i] += pile[i - 1];\n\
    \   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    if n % 2 == 0 {\n        for\
    \ _ in 0..n {\n            pile.push(n / 2);\n        }\n    } else {\n      \
    \  for _ in 0..n {\n            pile.push((n + 1) / 2);\n        }\n    }\n  \
    \  pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[3, 5, 7]`', /tmp/tmpb3_2wk8h.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010126
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        if i % 2 == 0 {\n            pile[i] = pile[i / 2] + 1;\n\
    \        } else {\n            pile[i] = pile[i / 2] + 2;\n        }\n    }\n\
    \    pile\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3),\
    \ vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmavuwh2q.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpmavuwh2q.rs:16:13\n   |\n16 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpmavuwh2q.rs:16:23\n   |\n16 |            \
    \ pile[i] = pile[i / 2] + 1;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpmavuwh2q.rs:18:13\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 2;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpmavuwh2q.rs:18:23\n   |\n18 |            \
    \ pile[i] = pile[i / 2] + 2;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   "
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![];\n    let mut level = 1;\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.push(level);\n      \
    \      level += 1;\n        } else {\n            pile.push(level - 1);\n    \
    \        level += 2;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[3, 5, 7]`', /tmp/tmp8vgy13e7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![n];\n    let mut i = 0;\n    while\
    \ i < n {\n        if n % 2 == 0 {\n            pile[i] = pile[i] + 1;\n     \
    \       i += 1;\n        } else {\n            pile[i] = pile[i] + 2;\n      \
    \      i += 1;\n        }\n    }\n    pile\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyone59_x.rs:16:13\n\
    \   |\n16 |             pile[i] = pile[i] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpyone59_x.rs:16:23\n   |\n16 |  \
    \           pile[i] = pile[i] + 1;\n   |                       ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyone59_x.rs:19:13\n   |\n19 |            \
    \ pile[i] = pile[i] + 2;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpyone59_x.rs:19:23\n   |\n19 |            \
    \ pile[i] = pile[i] + 2;\n   |                       ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    let mut pile = vec![0; n + 1];\n    pile[0] = n;\n    for\
    \ i in 1..=n {\n        pile[i] = if i % 2 == 0 {\n            pile[i / 2] + 1\n\
    \        } else {\n            pile[i / 2]\n        };\n    }\n    pile\n}\n\n\
    fn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3,\
    \ 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5),\
    \ vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14,\
    \ 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpewcw9maf.rs:12:28\n   |\n\
    12 |     let mut pile = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ pile = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpewcw9maf.rs:15:9\n   |\n15 |         pile[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpewcw9maf.rs:16:13\n   |\n16 |             pile[i / 2] + 1\n   |\
    \             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpewcw9maf.rs:18:13\n\
    \   |\n18 |             pile[i / 2]\n   |             ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 101
  program: "/// Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize)\
    \ -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, n - 1, n - 2]\n    } else\
    \ {\n        vec![n, n - 1, n - 2, n - 3]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4),\
    \ vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n\
    \    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8),\
    \ vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 0]`,\n right: `[3, 5, 7]`', /tmp/tmpdwkuto9z.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010125
