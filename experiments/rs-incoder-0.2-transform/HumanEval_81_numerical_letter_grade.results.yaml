language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n    let mut letter_grades = vec![];\n    let mut current_grade\
    \ = grades_sorted[0];\n    let mut current_letter_grade = String::from(\"E\");\n\
    \    for grade in grades_sorted {\n        if grade < current_grade {\n      \
    \      letter_grades.push(current_letter_grade);\n            current_grade =\
    \ grade;\n            current_letter_grade = String::from(\"E\");\n        }\n\
    \        if grade == current_grade {\n            current_letter_grade += String::from(\"\
    +\");\n        }\n        if grade > current_grade {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp7jbuku01.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jbuku01.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp7jbuku01.rs:39:37\n   |\n39 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades.iter().skip(1) {\n        if grade > current_grade\
    \ {\n            current_letter_grade = String::from(\"E\");\n            current_grade\
    \ = grade;\n        }\n        if grade < current_grade {\n            current_letter_grade\
    \ = String::from(\"D-\");\n            current_grade = grade;\n        }\n   \
    \     if grade == current_grade {\n            current_letter_grade = String::from(\"\
    D+\");\n            current_grade = grade;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ep5pl8a.rs:28:20\n   |\n\
    28 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_ep5pl8a.rs:30:29\n   |\n25 |     let mut current_grade = grades.first();\n\
    \   |                             -------------- expected due to this value\n\
    ...\n30 |             current_grade = grade;\n   |                           \
    \  ^^^^^ expected enum `Option`, found `&f64`\n   |\n   = note:   expected enum\
    \ `Option<&f64>`\n           found reference `&f64`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n30 |             current_grade = Some(grade);\n   |       \
    \                      +++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ep5pl8a.rs:32:20\n\
    \   |\n32 |         if grade < current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_ep5pl8a.rs:34:29\n   |\n25 |     let mut current_grade = grades.first();\n\
    \   |                             -------------- expected due to this value\n\
    ...\n34 |             current_grade = grade;\n   |                           \
    \  ^^^^^ expected enum `Option`, found `&f64`\n   |\n   = note:   expected enum\
    \ `Option<&f64>`\n           found reference `&f64`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n34 |             current_grade = Some(grade);\n   |       \
    \                      +++++     +\n\nerror[E0277]: can't compare `&f64` with\
    \ `Option<&f64>`\n  --> /tmp/tmp_ep5pl8a.rs:36:18\n   |\n36 |         if grade\
    \ == current_grade {\n   |                  ^^ no implementation for `&f64 ==\
    \ Option<&f64>`\n   |\n   = help: the trait `PartialEq<Option<&f64>>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          "
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = Vec::new();\n    let mut current_grade = grades_iter.next();\n\
    \    let mut current_letter = String::from(\"E\");\n    while let Some(grade)\
    \ = current_grade {\n        if grade > 3.0 {\n            current_letter = String::from(\"\
    D+\");\n        } else if grade > 2.0 {\n            current_letter = String::from(\"\
    D\");\n        } else if grade > 1.0 {\n            current_letter = String::from(\"\
    C+\");\n        } else if grade > 0.7 {\n            current_letter = String::from(\"\
    C\");\n        } else if grade > 0.3 {\n            current_letter = String::from(\"\
    B-\");\n        } else if grade > 0.1 {\n            current_letter = String::from(\"\
    B\");\n        } else if grade > 0.0 {\n            current_letter = String::from(\"\
    A-\");\n        } else if grade > -0.1 {\n            current_letter = String::from(\"\
    A\");\n        } else if grade > -0.3 {\n            current_letter = String::from(\"\
    A-\");\n        } else if grade > -0.7 {\n            current_letter = String::from(\"\
    A\");\n        } else if grade > -1.0 {\n            current_letter = String::from(\"\
    A+\");\n        } else {\n            current_letter = String::from(\"A\");\n\
    \        }\n        letter_grades.push(current_letter);\n        current_grade\
    \ = grades_iter.next();\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:29:20\n   |\n\
    29 |         if grade > 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbnp651xj.rs:31:27\n   |\n31 |         } else\
    \ if grade > 2.0 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:33:27\n   |\n33 |\
    \         } else if grade > 1.0 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:35:27\n\
    \   |\n35 |         } else if grade > 0.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:37:27\n\
    \   |\n37 |         } else if grade > 0.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:39:27\n\
    \   |\n39 |         } else if grade > 0.1 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnp651xj.rs:41:27\n\
    \   |\n41 |         } else if grade > 0.0 {\n   |                           ^^^\n\
    \   |                         "
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n    let mut grades_reversed = grades_sorted.clone();\n\
    \    grades_reversed.reverse();\n    let mut grades_sum: f64 = grades_sorted.iter().sum();\n\
    \    let mut grades_average: f64 = grades_sum / grades_sorted.len();\n    let\
    \ mut grades_letter_grade: Vec<String> = vec![];\n    for grade in grades_sorted\
    \ {\n        let mut letter_grade: String = \"\";\n        if grade >= grades_average\
    \ {\n            letter_grade = String::from(\"A+\");\n        } else if grade\
    \ >= grades_average - 0.3 {\n            letter_grade = String::from(\"A-\");\n\
    \        } else if grade >= grades_average - 0.2 {\n            letter_grade =\
    \ String::from(\"B+\");\n        } else if grade >= grades_average - 0.1 {\n \
    \           letter_grade = String::from(\"B\");\n        } else if grade >= grades_average\
    \ - 0.05 {\n            letter_grade = String::from(\"B-\");\n        } else if\
    \ grade >= grades_average - 0.01 {\n            letter_grade = String::from(\"\
    C+\");\n        } else if grade >= grades_average - 0.005 {\n            letter_grade\
    \ = String::from(\"C\");\n        } else if grade >= grades_average - 0.001 {\n\
    \            letter_grade = String::from(\"C-\");\n        } else if grade >=\
    \ grades_average - 0.0005 {\n            letter_grade = String::from(\"D+\");\n\
    \        } else if grade >= grades_average - 0.0001 {\n            letter_grade\
    \ = String::from(\"D\");\n        } else if grade >= grades_average - 0.00005\
    \ {\n            letter_grade = String::from(\"D-\");\n        } else {\n    \
    \        letter_grade = String::from(\"E\");\n        }\n        grades_letter_grade.push(letter_grade);\n\
    \        grades_sum += grade;\n        grades_average += grade;\n    }\n    grades_letter_grade.reverse();\n\
    \    grades_letter_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpfk6t9d2o.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmpfk6t9d2o.rs:29:46\n   |\n29 |     let mut grades_average: f64 =\
    \ grades_sum / grades_sorted.len();\n   |                                    \
    \          ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfk6t9d2o.rs:32:40\n\
    \   |\n32 |         let mut letter_grade: String = \"\";\n   |               \
    \                ------   ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                               |        |\n   |                         \
    \      |        expected struct `String`, found `&str`\n   |                 \
    \              expected due to this\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_sorted = grades_copy.clone();\n    grades_sorted.reverse();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_sorted[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_sorted\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpvsjpmacj.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvsjpmacj.rs:37:37\n   |\n37 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvsjpmacj.rs:39:37\n   |\n39 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut current_grade = max_grade;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        if grade > current_grade {\n       \
    \     current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ = String::from(current_letter_grade + \"+\");\n        } else if grade < current_grade\
    \ {\n            current_letter_grade = String::from(current_letter_grade + \"\
    -\");\n        } else {\n            current_letter_grade = String::from(current_letter_grade\
    \ + \"=\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwphjogwc.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpwphjogwc.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwphjogwc.rs:30:20\n   |\n30 |\
    \         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n30\
    \ |         if grade > *current_grade {\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwphjogwc.rs:31:29\n   |\n27 |     let mut current_grade\
    \ = max_grade;\n   |                             --------- expected due to this\
    \ value\n...\n31 |             current_grade = grade;\n   |                  \
    \           ^^^^^\n   |                             |\n   |                  \
    \           expected `&f64`, found `f64`\n   |                             help:\
    \ consider borrowing here: `&grade`\n\nerror[E0308]: mismatched types\n  "
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter = String::from(\"E\");\n    let mut current_gp = 0;\n\
    \    let mut current_gpa = 0;\n    for grade in grades_copy {\n        if grade\
    \ > current_gpa {\n            current_gpa = grade;\n            current_letter\
    \ = String::from(\"E\");\n        }\n        if grade < current_gp {\n       \
    \     current_gp = grade;\n            current_letter = String::from(\"E\");\n\
    \        }\n        if grade == current_gp {\n            current_letter = String::from(\n\
    \                match current_grade {\n                    4.0 => \"A+\",\n \
    \                   3.7 => \"A\",\n                    3.3 => \"A-\",\n      \
    \              3.0 => \"B+\",\n                    2.7 => \"B\",\n           \
    \         2.3 => \"B-\",\n                    2.0 => \"C+\",\n               \
    \     1.7 => \"C\",\n                    1.3 => \"C-\",\n                    1.0\
    \ => \"D+\",\n                    0.7 => \"D\",\n                    0.0 => \"\
    D-\",\n                    _ => \"E\",\n                },\n            );\n \
    \       }\n        letter_grades.push(current_letter);\n        current_grade\
    \ = grade;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpjicffovm.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjicffovm.rs:32:20\n\
    \   |\n32 |         if grade > current_gpa {\n   |                    ^^^^^^^^^^^\
    \ expected `f64`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjicffovm.rs:33:27\n\
    \   |\n30 |     let mut current_gpa = 0;\n   |                           - expected\
    \ due to this value\n...\n33 |             current_gpa = grade;\n   |        \
    \                   ^^^^^ expected integer, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjicffovm.rs:36:20\n   |\n36 |         if grade < current_gp\
    \ {\n   |                    ^^^^^^^^^^ expected `f64`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjicffovm.rs:37:26\n   |\n29 |     let mut current_gp\
    \ = 0;\n   |                          - expected due to this value\n...\n37 |\
    \             current_gp = grade;\n   |                          ^^^^^ expected\
    \ integer, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjicffovm.rs:40:21\n\
    \   |\n40 |         if grade == current_gp {\n   |                     ^^^^^^^^^^\
    \ expected `f64`, found integer\n\nerror: aborting due to 6 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ >= 4.0 {\n            letter_grade += String::from(\"A+\");\n        } else\
    \ if grade > 3.7 {\n            letter_grade += String::from(\"A\");\n       \
    \ } else if grade > 3.3 {\n            letter_grade += String::from(\"A-\");\n\
    \        } else if grade > 3.0 {\n            letter_grade += String::from(\"\
    B+\");\n        } else if grade > 2.7 {\n            letter_grade += String::from(\"\
    B\");\n        } else if grade > 2.3 {\n            letter_grade += String::from(\"\
    B-\");\n        } else if grade > 2.0 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade > 1.7 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade > 1.3 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade > 1.0 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade > 0.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > 0.0 {\n            letter_grade += String::from(\"\
    D-\");\n        } else {\n            letter_grade += String::from(\"E\");\n \
    \       }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc283s3dc.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A+\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"A+\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc283s3dc.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"A\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"A\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc283s3dc.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"A-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"A-\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc283s3dc.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    B+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc283s3dc.rs:36:29\n  \
    \ |\n36 |             letter_grade += String::from(\"B\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"B\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc283s3dc.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"B-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \   "
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade < 3.0 {\n            letter_grade += \"A+\";\n        } else if grade\
    \ < 3.3 {\n            letter_grade += \"A-\";\n        } else if grade < 3.7\
    \ {\n            letter_grade += \"B+\";\n        } else if grade < 4.0 {\n  \
    \          letter_grade += \"B\";\n        } else if grade < 4.3 {\n         \
    \   letter_grade += \"B-\";\n        } else if grade < 4.7 {\n            letter_grade\
    \ += \"C+\";\n        } else if grade < 5.0 {\n            letter_grade += \"\
    C\";\n        } else if grade < 5.3 {\n            letter_grade += \"C-\";\n \
    \       } else if grade < 5.7 {\n            letter_grade += \"D+\";\n       \
    \ } else if grade < 6.0 {\n            letter_grade += \"D\";\n        } else\
    \ if grade < 6.3 {\n            letter_grade += \"D-\";\n        } else if grade\
    \ < 6.7 {\n            letter_grade += \"E\";\n        } else {\n            letter_grade\
    \ += \"F\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A+\", \"A+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvarmknv4.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter_grade = String::from(current_letter_grade + \"\
    +\");\n        } else {\n            current_letter_grade = String::from(current_letter_grade\
    \ + \"-\");\n            current_grade = grade;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmphe6w9ir2.rs:24:9\n\
    \   |\n24 |     let mut grades_copy = grades.clone();\n   |         ----^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `current_letter_grade`\n\
    \  --> /tmp/tmphe6w9ir2.rs:33:49\n   |\n27 |     let mut current_letter_grade\
    \ = String::from(\"E\");\n   |         ------------------------ move occurs because\
    \ `current_letter_grade` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n33 |             current_letter_grade = String::from(current_letter_grade\
    \ + \"+\");\n   |                                                 ^^^^^^^^^^^^^^^^^^^^\
    \ value used here after move\n...\n38 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let mut grades_count: usize = 0;\n    let mut grades_average: f64 = grades_sum\
    \ / grades_count;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_value:\
    \ f64 = grades_copy[0];\n    for grade in grades_copy {\n        if grade > grades_max_value\
    \ {\n            grades_max_value = grade;\n            grades_max_index = grades_count;\n\
    \        }\n        grades_count += 1;\n        grades_sum += grade;\n    }\n\
    \    for grade in grades_copy {\n        if grade == grades_max_value {\n    \
    \        letter_grades.push(String::from(\n                format!(\"{}+\", grade\
    \ / grades_average)\n            ));\n        } else {\n            letter_grades.push(String::from(\n\
    \                format!(\"{}\", grade / grades_average)\n            ));\n  \
    \      }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpgx_0i30h.rs:28:46\n\
    \   |\n28 |     let mut grades_average: f64 = grades_sum / grades_count;\n   |\
    \                                              ^ no implementation for `f64 /\
    \ usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"A\";\n        } else if grade > 2.7 {\n\
    \            letter_grade += \"B\";\n        } else if grade > 2.3 {\n       \
    \     letter_grade += \"B-\";\n        } else if grade > 1.3 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.0 {\n            letter_grade += \"C+\"\
    ;\n        } else if grade > 0.7 {\n            letter_grade += \"D\";\n     \
    \   } else if grade > 0.3 {\n            letter_grade += \"D-\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D\";\n        } else {\n   \
    \         letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C\", \"C\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp8zp2uulh.rs:53:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut min_gpa = grades.iter().min().unwrap();\n\
    \    let mut max_gpa = grades.iter().max().unwrap();\n    let mut gpa_diff = max_gpa\
    \ - min_gpa;\n    let mut gpa_diff_percent = max_gpa - min_gpa;\n    let mut gpa_percent\
    \ = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let\
    \ mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n\
    \    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa\
    \ - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent\
    \ = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let\
    \ mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n\
    \    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa\
    \ - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent\
    \ = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let\
    \ mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n\
    \    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa\
    \ - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent\
    \ = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let\
    \ mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n\
    \    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent = max_gpa\
    \ - min_gpa;\n    let mut gpa_percent = max_gpa - min_gpa;\n    let mut gpa_percent\
    \ = \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp9fvj_6sc.rs:59:1\n\
    \   |\n59 | }\n   | ^ expected expression\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n    --> /tmp/tmp9fvj_6sc.rs:26:37\n     |\n26   |   \
    \  let mut min_gpa = grades.iter().min().unwrap();\n     |                   \
    \                  ^^^ the trait `Ord` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Ord`:\n             \
    \  i128\n               i16\n               i32\n               i64\n        \
    \       i8\n               isize\n               u128\n               u16\n  \
    \           and 4 others\n     = note: required because of the requirements on\
    \ the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9fvj_6sc.rs:27:37\n\
    \     |\n27   |     let mut max_gpa = grades.iter().max().unwrap();\n     |  \
    \                                   ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_length = grades_copy.len();\n    let mut letter_grades = vec![];\n\
    \    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    let mut current_index = grades_length - 1;\n   \
    \ while current_index < grades_length {\n        if current_grade > grades_copy[current_index]\
    \ {\n            grades_copy[current_index] -= current_grade;\n            current_letter_grade\
    \ = String::from(\"D\");\n            current_index -= 1;\n        } else if current_grade\
    \ == grades_copy[current_index] {\n            current_letter_grade = String::from(\"\
    D\");\n            current_index -= 1;\n        } else {\n            grades_copy[current_index]\
    \ -= current_grade;\n            current_letter_grade = String::from(\"C\");\n\
    \            current_index -= 1;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade = grades_copy[current_index];\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpawqvkq04.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"A\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjwhckx7f.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades.len();\n    let mut grades_sum: f64 = 0.0;\n    let\
    \ mut grades_average: f64 = 0.0;\n    let mut grades_min_average: f64 = 0.0;\n\
    \    let mut grades_max_average: f64 = 0.0;\n    let mut grades_min_grade: f64\
    \ = 0.0;\n    let mut grades_max_grade: f64 = 0.0;\n    let mut grades_min_grade_index:\
    \ usize = 0;\n    let mut grades_max_grade_index: usize = 0;\n    let mut grades_min_grade_index2:\
    \ usize = 0;\n    let mut grades_max_grade_index2: usize = 0;\n    let mut grades_min_grade_index3:\
    \ usize = 0;\n    let mut grades_max_grade_index3: usize = 0;\n    let mut grades_min_grade_index4:\
    \ usize = 0;\n    let mut grades_max_grade_index4: usize = 0;\n    let mut grades_min_grade_index5:\
    \ usize = 0;\n    let mut grades_max_grade_index5: usize = 0;\n    let mut grades_min_grade_index6:\
    \ usize = 0;\n    let mut grades_max_grade_index6: usize = 0;\n    let mut grades_min_grade_index7:\
    \ usize = 0;\n    let mut grades_max_grade_index7: usize = 0;\n    let mut grades_min_grade_index8:\
    \ usize = 0;\n    let mut grades_max_grade_index8: usize = 0;\n    let mut grades_min_grade_index9:\
    \ usize = 0;\n    let mut grades_max_grade_index9: usize = 0;\n    let mut grades_min_grade_index10:\
    \ usize = 0;\n    let mut grades_max_grade_index10: usize = 0;\n    let mut grades_min_grade_index11:\
    \ usize = 0;\n    let mut grades_max_grade_index11: usize = 0;\n    let mut grades_min_grade_index12:\
    \ usize = 0;\n    let mut grades_max_grade_index12: usize = 0;\n    let mut grades_min_grade_index13:\
    \ usize = 0;\n    let mut grades_max_grade_index13: usize = 0;\n    let mut grades_min_grade_index14:\
    \ usize = 0;\n    let mut grades_max_grade_index14: usize = 0;\n    let mut grades_min_grade_index15:\
    \ usize = 0;\n    let mut grades_max_grade_index15: usize = 0;\n    let mut grades_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4hg1f_ub.rs:62:20\n   |\n\
    62 |     let mut grades_\n   |                    ^ help: add `;` here\n63 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4hg1f_ub.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            grades_string.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 {\n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade > -0.3 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade > -0.7 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt1f1lnbr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    for grade in grades {\n        if grade > max_grade {\n            max_grade\
    \ = grade;\n        }\n        if grade < min_grade {\n            min_grade =\
    \ grade;\n        }\n    }\n    for grade in grades {\n        let grade = grade\
    \ - min_grade;\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n        if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n        if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n        if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n        if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n        if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n        if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpw1l2v5zt.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpw1l2v5zt.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw1l2v5zt.rs:28:20\n   |\n28 |\
    \         if grade > max_grade {\n   |                    ^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |    \
    \     if grade > *max_grade {\n   |                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw1l2v5zt.rs:29:25\n   |\n25 |     let mut max_grade = grades.iter().max().unwrap();\n\
    \   |                         ---------------------------- expected due to this\
    \ value\n...\n29 |             max_grade = grade;\n   |                      \
    \   ^^^^^\n   |                         |\n   |                         expected\
    \ `&f64`, found `f64`\n   |                         help: consider borrowing here:\
    \ `&grade`\n\nerror[E0308]: mismatched types\n  --"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ < 3.0 {\n            letter_grade += String::from(\"A+\");\n        } else if\
    \ grade < 3.3 {\n            letter_grade += String::from(\"A\");\n        } else\
    \ if grade < 3.7 {\n            letter_grade += String::from(\"A-\");\n      \
    \  } else if grade < 4.0 {\n            letter_grade += String::from(\"B+\");\n\
    \        } else if grade < 4.3 {\n            letter_grade += String::from(\"\
    B\");\n        } else if grade < 4.7 {\n            letter_grade += String::from(\"\
    B-\");\n        } else if grade < 5.0 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade < 5.3 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 5.7 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade < 6.0 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade < 6.3 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 6.7 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade < 7.0 {\n            letter_grade += String::from(\"\
    E\");\n        } else {\n            letter_grade += String::from(\"F\");\n  \
    \      }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9nuyqci_.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A+\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"A+\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9nuyqci_.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"A\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"A\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9nuyqci_.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"A-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"A-\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9nuyqci_.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    B+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9nuyqci_.rs:36:29\n  \
    \ |\n36 |             letter_grade += String::from(\"B\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"B\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9nuyqci_.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"B-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \   "
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_gp\
    \ = 0;\n    while let Some(grade) = grades_iter.next() {\n        current_gp +=\
    \ grade;\n        if current_gp >= 3.0 {\n            current_letter_grade = current_letter_grade.chars().next().unwrap();\n\
    \            current_gp = 0;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpsmjdhqon.rs:30:20\n\
    \   |\n30 |         current_gp += grade;\n   |                    ^^ no implementation\
    \ for `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: can't compare `{integer}` with `{float}`\n\
    \  --> /tmp/tmpsmjdhqon.rs:31:23\n   |\n31 |         if current_gp >= 3.0 {\n\
    \   |                       ^^ no implementation for `{integer} < {float}` and\
    \ `{integer} > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsmjdhqon.rs:31:26\n   |\n31 |         if current_gp >= 3.0 {\n   | \
    \                         ^^^ expected integer, found floating-point number\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpsmjdhqon.rs:32:36\n   |\n27 |  \
    \   let mut current_letter_grade = String::from(\"E\");\n   |                \
    \                    ----------------- expected due to this value\n...\n32 | \
    \            current_letter_grade = current_letter_grade.chars().next().unwrap();\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \                  |\n   |                                    expected struct\
    \ `String`, found `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor mo"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push(\"B+\"\
    );\n        } else if grade > 2.7 {\n            grades_string.push(\"B\");\n\
    \        } else if grade > 2.3 {\n            grades_string.push(\"B-\");\n  \
    \      } else if grade > 2.0 {\n            grades_string.push(\"C+\");\n    \
    \    } else if grade > 1.7 {\n            grades_string.push(\"C\");\n       \
    \ } else if grade > 1.3 {\n            grades_string.push(\"C-\");\n        }\
    \ else if grade > 1.0 {\n            grades_string.push(\"D+\");\n        } else\
    \ if grade > 0.7 {\n            grades_string.push(\"D\");\n        } else if\
    \ grade > 0.0 {\n            grades_string.push(\"D-\");\n        } else {\n \
    \           grades_string.push(\"E\");\n        }\n    }\n    grades_string\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpewgbciy6.rs:48:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n48 |     grades_string\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pgn2mkv.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pgn2mkv.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_pgn2mkv.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<_>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut grades_sorted_iter = grades_sorted.iter();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_sorted_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_sorted_iter\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else {\n            current_letter_grade = current_letter_grade.chars().next().unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpvwx9179o.rs:25:19\n\
    \     |\n25   |     grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pgn2mkv.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pgn2mkv.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_pgn2mkv.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut grades_reversed = grades_sorted.rev();\n\
    \    let mut grades_reversed_iter = grades_reversed.iter().cloned().collect::<Vec<f64>>();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().rev();\n\
    \    let mut grades_reversed_iter = grades_reversed_iter.into_iter().\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpxzbww78b.rs:50:1\n   |\n50\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpxzbww78b.rs:49:69\n\
    \   |\n49 |     let mut grades_reversed_iter = grades_reversed_iter.into_iter().\n\
    \   |                                                                     ^ help:\
    \ add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n    --> /tmp/tmpxzbww78b.rs:25:19\n     |\n25 \
    \  |     grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0599]: `Vec<f64>`\
    \ is not an iterator\n   --> /tmp/tmpxzbww78b.rs:26:45\n    |\n26  |       let\
    \ mut grades_reversed = grades_sorted.rev();\n    |                          \
    \                     ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n\
    \            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]:\
    \ Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxzbww78b.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_sorted[0];\n\
    \    let mut current_grade_index = 0;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    let mut current_letter_grade_index = 0;\n    while current_grade >\
    \ 0.0 {\n        if current_grade > grades_sorted[current_grade_index + 1] {\n\
    \            current_grade = grades_sorted[current_grade_index];\n           \
    \ current_grade_index += 1;\n        } else {\n            current_grade = grades_sorted[current_grade_index];\n\
    \            current_grade_index += 1;\n        }\n        if current_grade_index\
    \ == grades_sorted.len() {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_letter_grade_index\
    \ = 0;\n        } else {\n            current_letter_grade = String::from(\n \
    \               &grades_sorted[current_grade_index]\n                    .to_string()[current_letter_grade_index..]\n\
    \                    .to_string()\n            );\n            current_letter_grade_index\
    \ += 1;\n        }\n    }\n    letter_grades.push(current_letter_grade);\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp883v1ske.rs:26:19\n\
    \    |\n26  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum: f64 = grades_copy[0];\n\
    \    let mut grades_min_value: f64 = grades_copy[0];\n    let mut grades_max_value:\
    \ f64 = grades_copy[0];\n    let mut grades_min_idx = 0;\n    let mut grades_max_idx\
    \ = 0;\n    let mut grades_min_idx2 = 0;\n    let mut grades_max_idx2 = 0;\n \
    \   let mut grades_min_idx3 = 0;\n    let mut grades_max_idx3 = 0;\n    let mut\
    \ grades_min_idx4 = 0;\n    let mut grades_max_idx4 = 0;\n    let mut grades_min_idx5\
    \ = 0;\n    let mut grades_max_idx5 = 0;\n    let mut grades_min_idx6 = 0;\n \
    \   let mut grades_max_idx6 = 0;\n    let mut grades_min_idx7 = 0;\n    let mut\
    \ grades_max_idx7 = 0;\n    let mut grades_min_idx8 = 0;\n    let mut grades_max_idx8\
    \ = 0;\n    let mut grades_min_idx9 = 0;\n    let mut grades_max_idx9 = 0;\n \
    \   let mut grades_min_idx10 = 0;\n    let mut grades_max_idx10 = 0;\n    let\
    \ mut grades_min_idx11 = 0;\n    let mut grades_max_idx11 = 0;\n    let mut grades_min_idx12\
    \ = 0;\n    let mut grades_max_idx12 = 0;\n    let mut grades_min_idx13 = 0;\n\
    \    let mut grades_max_idx13 = 0;\n    let mut grades_min_idx14 = 0;\n    let\
    \ mut grades_max_idx14 = 0;\n    let mut grades_min_idx15 = 0;\n    let mut grades_max_idx15\
    \ = 0;\n    let mut grades_min_idx16 = 0;\n    let mut grades_max_idx16 = 0;\n\
    \    let mut grades_min_idx17 = 0;\n    let mut grades_max_idx17 = 0;\n    let\
    \ mut grades_min_idx18 = 0;\n    let mut grades_max_idx18 = 0;\n    let mut grades_min_idx19\
    \ = 0;\n    let mut grades_max_idx19 = 0;\n    let mut grades_min_idx20 = 0;\n\
    \    let mut grades_max_idx20 = 0;\n    let mut grades_min_idx21 = 0;\n    let\
    \ mut grades_max_idx21 = 0;\n    let mut grades_min_idx22 = 0;\n    let mut grades_max_idx22\
    \ = 0;\n    let mut grades_min_idx23 = 0;\n    let mut grades_\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnxsmybig.rs:74:20\n   |\n\
    74 |     let mut grades_\n   |                    ^ help: add `;` here\n75 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnxsmybig.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv8rzni9b.rs:34:37\n   |\n\
    34 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv8rzni9b.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades.len();\n    let mut letter_grades = vec![];\n    while\
    \ grades_len > 0 {\n        let mut grade = grades_copy.pop().unwrap();\n    \
    \    let mut letter_grade = String::from(\"E\");\n        if grade > 3.0 {\n \
    \           letter_grade = String::from(\"D-\");\n        } else if grade > 2.0\
    \ {\n            letter_grade = String::from(\"B-\");\n        } else if grade\
    \ > 1.0 {\n            letter_grade = String::from(\"B-\");\n        } else if\
    \ grade > 0.7 && grade < 1.0 {\n            letter_grade = String::from(\"B-\"\
    );\n        } else if grade > 0.3 && grade < 0.7 {\n            letter_grade =\
    \ String::from(\"B-\");\n        } else if grade > 0.0 && grade < 0.3 {\n    \
    \        letter_grade = String::from(\"B-\");\n        } else if grade > 0.0 &&\
    \ grade < 0.0 {\n            letter_grade = String::from(\"B-\");\n        } else\
    \ if grade > -1.0 && grade < 0.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > -1.0 && grade < 0.0 {\n            letter_grade\
    \ = String::from(\"B-\");\n        } else if grade > -2.0 && grade < 0.3 {\n \
    \           letter_grade = String::from(\"B-\");\n        } else if grade > -2.0\
    \ && grade < 0.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > -3.0 && grade < 0.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > -3.0 && grade < 0.0 {\n            letter_grade\
    \ = String::from(\"B-\");\n        } else if grade > -4.0 && grade < 0.3 {\n \
    \           letter_grade = String::from(\"B-\");\n        } else if grade > -4.0\
    \ && grade < 0.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > -5.0 && grade < 0.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > -5.0 && grade < 0.0 {\n            letter_grade\
    \ = String::from(\"B-\");\n        } else if grade > -6.0 && grade < 0.3 {\n \
    \           letter_grade = String::from(\"B-\");\n        } else if grade > -6.0\
    \ && grade < 0.0 \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpktn92eca.rs:77:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     while grades_len > 0 {\n   |                          - this delimiter\
    \ might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n77 | }\n   |   ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmpktn92eca.rs:67:1\n   |\n66 |         } else if grade\
    \ > -6.0 && grade < 0.0 \n   |                -- this `if` expression has a condition,\
    \ but no block\n67 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpktn92eca.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut grade = grades_iter.next();\n    while\
    \ grade != Some(0.0) {\n        let mut letter_grade = String::from(\"E\");\n\
    \        if grade < 3.0 {\n            letter_grade = String::from(\"D-\");\n\
    \        } else if grade < 3.3 {\n            letter_grade = String::from(\"C-\"\
    );\n        } else if grade < 3.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 4.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 4.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 4.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 5.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 5.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 5.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 6.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 6.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 6.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 7.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 7.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 7.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 8.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 8.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 8.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 9.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 9.3 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 9.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 10.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 10.3 {\n            letter_grade = \n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpu3w5gqlv.rs:85:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     while grade != Some(0.0) {\n   |                              -\
    \ unclosed delimiter\n...\n73 |         } else if grade < 10.3 {\n   |       \
    \                         - this delimiter might not be properly closed...\n74\
    \ |             letter_grade = \n75 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n85 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpu3w5gqlv.rs:75:1\n   |\n75 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu3w5gqlv.rs:27:25\n   |\n27 |\
    \     while grade != Some(0.0) {\n   |                         ^^^\n   |     \
    \                    |\n   |                         expected `&f64`, found floating-point\
    \ number\n   |                         help: consider borrowing here: `&0.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu3w5gqlv.rs:29:20\n   |\n29 |\
    \         if grade < 3.0 {\n   |                    ^^^ expected enum `Option`,\
    \ found floating-point number\n   |\n   = note: expected enum `Option<&f64>`\n\
    \              found type `{float}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu3w5gqlv.rs:31:27\n\
    \   |\n31 |         } else if grade < 3.3 {\n   |                           ^^^\
    \ expected enum `Option`, found floating-point number\n   |\n   = note: expected\
    \ enum `Option<&f64>`\n              found type `{float}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu3w5gqlv.rs:33:27\n   |\n33 |         } else if grade <\
    \ 3.7 {\n   |                           ^^^ expected enum `Option`, found floating-point\
    \ number\n   |\n   = note: expected enum `Option<&f64>`\n              found type\
    \ `{float}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu3w5gqlv.rs:35:27\n\
    \   |\n35 |         } else if grade < 4.0 {\n   |                           ^^^\
    \ expected enum `Option`, found floating-point number\n   |\n   = note: expected\
    \ enum `Option<&f64>`\n       "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect();\n    grades_string.sort();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.iter().cloned().collect();\n    let mut grades_string = grades_string.iter().cloned().collect();\n\
    \    let mut grades_string = grades_string.iter().cloned().collect();\n    let\
    \ mut grades_string = grades_string.iter().cloned().collect();\n    let mut grades_string\
    \ = grades_string.\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpxrmrjm2d.rs:55:1\n   |\n55\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpxrmrjm2d.rs:54:43\n\
    \   |\n54 |     let mut grades_string = grades_string.\n   |                 \
    \                          ^ help: add `;` here\n55 | }\n   | - unexpected token\n\
    \nerror[E0282]: type annotations needed\n  --> /tmp/tmpxrmrjm2d.rs:25:5\n   |\n\
    24 |     let mut grades_string = grades.iter().map(|x| x.to_string()).collect();\n\
    \   |         ----------------- consider giving `grades_string` a type\n25 | \
    \    grades_string.sort();\n   |     ^^^^^^^^^^^^^ cannot infer type\n   |\n \
    \  = note: type must be known at this point\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxrmrjm2d.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0282, E0308.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while current_grade > 0.0 {\n        if current_grade > grades_copy[current_letter_grade_index]\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_letter_grade_index\
    \ += 1;\n            current_grade = grades_copy[current_letter_grade_index];\n\
    \            current_letter_grade = String::from(\"E\");\n        } else {\n \
    \           current_letter_grade = String::from(\n                match current_letter_grade_index\
    \ {\n                    0 => \"A+\",\n                    1 => \"A\",\n     \
    \               2 => \"A-\",\n                    3 => \"B+\",\n             \
    \       4 => \"B\",\n                    5 => \"B-\",\n                    6 =>\
    \ \"C+\",\n                    7 => \"C\",\n                    8 => \"C-\",\n\
    \                    9 => \"D+\",\n                    10 => \"D\",\n        \
    \            11 => \"D-\",\n                    12 => \"E\",\n               \
    \     13 => \"F\",\n                    14 => \"F\",\n                    15 =>\
    \ \"F\",\n                    16 => \"F\",\n                    17 => \"F\",\n\
    \                    18 => \"F\",\n                    19 => \"F\",\n        \
    \            20 => \"F\",\n                    21 => \"F\",\n                \
    \    22 => \"F\",\n                    23 => \"F\",\n                    24 =>\
    \ \"F\",\n                    25 => \"F\",\n                    26 => \"F\",\n\
    \                    27 => \"F\",\n                    28 => \"F\",\n        \
    \            29 => \"F\",\n                    30 => \"F\",\n                \
    \    31 => \"F\",\n                    32 => \"F\",\n                    33 =>\
    \ \"F\",\n                    34 => \"F\",\n                    35 => \"F\",\n\
    \                    36 => \"F\",\n                    37 => \"F\",\n        \
    \            38 => \"F\",\n                    39 => \"F\",\n                \
    \    40 => \"F\",\n                    41 => \"F\",\n                    42 =>\
    \ \"F\",\n                    43 => \"F\",\n                    44 => \"F\",\n\
    \                    45 => \"F\",\n                    46 => \"F\",\n        \
    \            47 => \"F\",\n                    48 => \"F\",\n                \
    \    49 => \"F\",\n                    50 => \"F\",\n                    51 =>\
    \ \"F\",\n                    52 => \"F\",\n                    53 => \"F\",\n\
    \                    54 => \"F\",\n                    55 => \"F\",\n        \
    \            56 => \"F\",\n                    57 => \"F\",\n                \
    \    58 => \"F\",\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpgcr0csrp.rs:108:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n30  |     while current_grade > 0.0 {\n    |                            \
    \   - unclosed delimiter\n...\n36  |         } else {\n    |                -\
    \ unclosed delimiter\n37  |             current_letter_grade = String::from(\n\
    \    |                                                - unclosed delimiter\n...\n\
    108 | }\n    |   ^\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator,\
    \ found keyword `fn`\n   --> /tmp/tmpgcr0csrp.rs:100:1\n    |\n98  | }\n    |\
    \  - expected one of `)`, `,`, `.`, `?`, or an operator\n99  | \n100 | fn main()\
    \ {\n    | ^^ unexpected token\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    for grade in grades_copy {\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n        }\n        if grade\
    \ < min_grade {\n            min_grade = grade;\n        }\n    }\n    for grade\
    \ in grades_copy {\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            continue;\n        }\n        let mut grade = grade - min_grade;\n\
    \        let mut letter_grade = String::from(\"D-\");\n        if grade < 0.0\
    \ {\n            grade = grade + 5.0;\n            letter_grade = String::from(\"\
    D+\");\n        }\n        if grade < 3.0 {\n            grade = grade + 2.0;\n\
    \            letter_grade = String::from(\"B+\");\n        }\n        if grade\
    \ < 3.3 {\n            grade = grade + 1.7;\n            letter_grade = String::from(\"\
    B\");\n        }\n        if grade < 3.7 {\n            grade = grade + 1.3;\n\
    \            letter_grade = String::from(\"B-\");\n        }\n        if grade\
    \ < 4.0 {\n            grade = grade + 0.7;\n            letter_grade = String::from(\"\
    C+\");\n        }\n        if grade < 4.3 {\n            grade = grade + 1.0;\n\
    \            letter_grade = String::from(\"C\");\n        }\n        if grade\
    \ < 4.7 {\n            grade = grade + 1.3;\n            letter_grade = String::from(\"\
    C-\");\n        }\n        if grade < 5.0 {\n            grade = grade + 0.7;\n\
    \            letter_grade = String::from(\"A+\");\n        }\n        if grade\
    \ < 5.3 {\n            grade = grade + 1.0;\n            letter_grade = String::from(\"\
    A\");\n        }\n        if grade < 5.7 {\n            grade = grade + 1.3;\n\
    \            letter_grade = String::from(\"A-\");\n        }\n        if grade\
    \ < 6.0 {\n            grade = grade + 0.7;\n            letter_grade = String::from(\"\
    A\");\n        }\n        if grade < 6.3 {\n            grade = grade + 1.0;\n\
    \            letter_grade = String::from(\"A\");\n        }\n        if grade\
    \ < 6.7 {\n            grade = gra\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfdqinw4r.rs:103:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n36  |     for grade in grades_copy {\n    |                             \
    \ - unclosed delimiter\n...\n91  |         if grade < 6.7 {\n    |           \
    \             - this delimiter might not be properly closed...\n92  |        \
    \     grade = gra\n93  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n103 | }\n    |   ^\n\nerror[E0425]: cannot find value `gra`\
    \ in this scope\n  --> /tmp/tmpfdqinw4r.rs:92:21\n   |\n92 |             grade\
    \ = gra\n   |                     ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmpfdqinw4r.rs:36:5\n    |\n23  |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    |                                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n36  |\
    \ /     for grade in grades_copy {\n37  | |         if grade == 0.0 {\n38  | |\
    \             letter_grades.push(String::from(\"E\"));\n39  | |             continue;\n\
    ...   |\n102 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n103 | | }\n    | |__^ expected struct `Vec`, found\
    \ `()`\n    |\n    = note: expected struct `Vec<String>`\n            found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grade = grades_iter.next().unwrap();\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    while grade > 0.0 {\n    \
    \    let mut grades_vec: Vec<String> = vec![];\n        if grade < 3.0 {\n   \
    \         grades_vec.push(String::from(\"A+\"));\n        }\n        if grade\
    \ < 3.3 {\n            grades_vec.push(String::from(\"A\"));\n        }\n    \
    \    if grade < 3.7 {\n            grades_vec.push(String::from(\"A-\"));\n  \
    \      }\n        if grade < 4.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        }\n        if grade < 4.3 {\n            grades_vec.push(String::from(\"\
    B\"));\n        }\n        if grade < 4.7 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        }\n        if grade < 5.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        }\n        if grade < 5.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        }\n        if grade < 5.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        }\n        if grade < 6.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        }\n        if grade < 6.3 {\n            grades_vec.push(String::from(\"\
    D\"));\n        }\n        if grade < 6.7 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        }\n        if grade < 7.0 {\n            grades_vec.push(String::from(\"\
    E\"));\n        }\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from(\"F\"));\n        grades_vec.push(String::from(\"\
    F\"));\n        grades_vec.push(String::from\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp12vz9cfd.rs:92:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     while grade > 0.0 {\n   |                       - this delimiter\
    \ might not be properly closed...\n...\n82 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n92 | }\n   |   ^\n\nerror: mismatched closing\
    \ delimiter: `}`\n  --> /tmp/tmp12vz9cfd.rs:81:24\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n81 |     \
    \    grades_vec.push(String::from\n   |                        ^ unclosed delimiter\n\
    82 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp12vz9cfd.rs:28:19\n   |\n28 |     while grade > 0.0 {\n   |   \
    \                ^^^\n   |                   |\n   |                   expected\
    \ `&f64`, found floating-point number\n   |                   help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp12vz9cfd.rs:30:20\n\
    \   |\n30 |         if grade < 3.0 {\n   |                    ^^^\n   |      \
    \              |\n   |                    expected `&f64`, found floating-point\
    \ number\n   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp12vz9cfd.rs:33:20\n   |\n33 |         if grade\
    \ < 3.3 {\n   |                    ^^^\n   |                    |\n   |      \
    \              expected `&f64`, found floating-point number\n   |            \
    \        help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp12vz9cfd.rs:36:20\n   |\n36 |         if grade < 3.7 {\n   |  \
    \                  ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp12vz9cfd.rs:39:20\n\
    \   |\n39 |         if grad"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|&x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|&x| x == max_grade).unwrap();\n    let mut current_grade\
    \ = grades_copy[min_grade_index];\n    \n    while current_grade < max_grade {\n\
    \        letter_grades.push(String::from(current_grade + \"+\"));\n        current_grade\
    \ = current_grade + 1;\n    }\n    \n    while current_grade > min_grade {\n \
    \       letter_grades.push(String::from(current_grade + \"-\"));\n        current_grade\
    \ = current_grade - 1;\n    }\n    \n    letter_grades.push(String::from(\"E\"\
    ));\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp6um5w9ly.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp6um5w9ly.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6um5w9ly.rs:28:69\n   |\n28 |\
    \     let mut min_grade_index = grades_copy.iter().position(|&x| x == min_grade).unwrap();\n\
    \   |                                                                     ^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|&x| x ==\
    \ *min_grade).unwrap();\n   |                                                \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6um5w9ly.rs:29:69\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|&x| x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                    ^^^^^^^^^ ex"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    for grade in grades {\n        let letter_grade = if grade > total_grade\
    \ {\n            String::from(\"D-\")\n        } else if grade < total_grade {\n\
    \            String::from(\"D+\")\n        } else {\n            String::from(\"\
    D\")\n        };\n        total_grade -= grade;\n        total_letter_grade +=\
    \ letter_grade;\n        letter_grades.push(letter_grade);\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5fkrzj7l.rs:36:31\n   |\n\
    36 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: -1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = grades_copy.len() - 1;\n    while current_grade != 0.0 {\n        if current_grade\
    \ > grades_copy[current_letter_grade_index] {\n            current_letter_grade\
    \ = String::from(\"E\");\n            current_letter_grade_index = grades_copy.len()\
    \ - 1;\n        } else if current_grade < grades_copy[current_letter_grade_index]\
    \ {\n            current_letter_grade = String::from(\"D\");\n            current_letter_grade_index\
    \ = grades_copy.len() - 1;\n        } else {\n            current_letter_grade\
    \ = String::from(\"C\");\n            current_letter_grade_index = grades_copy.len()\
    \ - 1;\n        }\n        letter_grades.push(current_letter_grade);\n       \
    \ current_grade = grades_copy[current_letter_grade_index];\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010861
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| *x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| *x == max_grade).unwrap();\n    let mut grades_copy\
    \ = grades_copy.clone();\n    grades_copy[min_grade_index] = grades_copy[min_grade_index]\
    \ - min_grade;\n    grades_copy[max_grade_index] = grades_copy[max_grade_index]\
    \ - max_grade;\n    while grades_copy.len() > 0 {\n        let mut grade = grades_copy.iter().next().unwrap();\n\
    \        let mut index = grades_copy.iter().position(|x| *x == grade).unwrap();\n\
    \        if index == 0 {\n            letter_grades.push(String::from(\"E\"));\n\
    \        } else {\n            letter_grades.push(String::from(grades_copy[index\
    \ - 1].to_string()));\n        }\n        grades_copy.remove(&grade);\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmptqag_tq8.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmptqag_tq8.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptqag_tq8.rs:28:69\n   |\n28 |\
    \     let mut min_grade_index = grades_copy.iter().position(|x| *x == min_grade).unwrap();\n\
    \   |                                                                     ^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|x| *x ==\
    \ *min_grade).unwrap();\n   |                                                \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptqag_tq8.rs:29:69\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|x| *x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                    ^^^^^^^^^ ex"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = -1;\n    let mut current_letter_grade_indexes: Vec<usize> = vec![];\n    \n\
    \    while current_grade > 0.0 {\n        let mut current_letter_grade = String::from(\"\
    E\");\n        let mut current_letter_grade_index = -1;\n        let mut current_letter_grade_indexes:\
    \ Vec<usize> = vec![];\n        \n        for current_grade in grades_iter {\n\
    \            if current_grade > current_grade {\n                let mut current_letter_grade\
    \ = String::from(\"E\");\n                let mut current_letter_grade_index =\
    \ -1;\n                let mut current_letter_grade_indexes: Vec<usize> = vec![];\n\
    \                \n                for current_grade in grades_iter {\n      \
    \              if current_grade > current_grade {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade == current_grade {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade < current_grade {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade == 0.0 {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade < 0.0 {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade > 0.0 {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = vec![];\n      \
    \                  break;\n                    }\n                    \n     \
    \               if current_grade < current_grade {\n                        current_letter_grade\
    \ = String::from(\"E\");\n                        current_letter_grade_index =\
    \ -1;\n                        current_letter_grade_indexes = \n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqp90cqc6.rs:99:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n31 |     while current_grade > 0.0 {\n   |                              \
    \ - unclosed delimiter\n...\n36 |         for current_grade in grades_iter {\n\
    \   |                                          - unclosed delimiter\n37 |    \
    \         if current_grade > current_grade {\n   |                           \
    \                   - unclosed delimiter\n...\n42 |                 for current_grade\
    \ in grades_iter {\n   |                                                  - unclosed\
    \ delimiter\n...\n85 |                     if current_grade < current_grade {\n\
    \   |                                                      - this delimiter might\
    \ not be properly closed...\n...\n89 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n99 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpqp90cqc6.rs:89:1\n   |\n89 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqp90cqc6.rs:31:27\n   |\n31 |\
    \     while current_grade > 0.0 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpqp90cqc6.rs:64:38\n\
    \   |\n64 |                     if current_grade == 0.0 {\n   |              \
    \                        ^^ no implementation for `&f64 == {float}`\n   |\n  \
    \ = help: the trait `PartialEq<{float}>` is not implemented for `&f64`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqp90cqc6.rs:71:40\n   |\n71 |\
    \                     if current_grade < "
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpwmxmyf13.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.iter().max().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while current_grade\
    \ > 0.0 {\n        let mut current_letter_grade = String::from(\"\");\n      \
    \  for grade in grades_copy {\n            if grade > current_grade {\n      \
    \          let letter_grade = grade - current_grade;\n                current_letter_grade\
    \ += &letter_grade + \"+\";\n                current_grade = grade;\n        \
    \    } else {\n                current_letter_grade += &grade + \"-\";\n     \
    \       }\n        }\n        letter_grades.push(current_letter_grade);\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp33iri35v.rs:26:48\n\
    \     |\n26   |     let mut current_grade = grades_copy.iter().max().unwrap();\n\
    \     |                                                ^^^ the trait `Ord` is\
    \ not implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33iri35v.rs:28:27\n\
    \   |\n28 |     while current_grade > 0.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33iri35v.rs:31:24\n\
    \   |\n31 |             if grade > current_grade {\n   |                     \
    \   ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n31 |             if grade > *current_grade {\n   |       \
    \                 +\n\nerror[E0277]: cannot add `&str` to `&f64`\n  --> /tmp/tmp33iri35v.rs:33:55\n\
    \   |\n33 |                 current_letter_grade += &letter_grade + \"+\";\n \
    \  |                                                       ^ no implementation\
    \ for `&f64 + &str`\n   |\n   = help: the trait `Add<&str>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33iri35v.rs:34:33\n\
    \   |\n26 |  "
  stdout: ''
  timestamp: 1660010855
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_iter.next().unwrap();\n\
    \    let mut prev_letter_grade = String::from(\"E\");\n    let mut current_grade\
    \ = grades_iter.next().unwrap();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    while current_grade != 0.0 {\n        if current_grade < prev_grade\
    \ {\n            letter_grades.push(String::from(\"A-\"));\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        if current_grade > prev_grade {\n\
    \            letter_grades.push(String::from(\"B-\"));\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        if current_grade == prev_grade {\n\
    \            letter_grades.push(String::from(\"B-\"));\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        prev_grade = current_grade;\n   \
    \     prev_letter_grade = current_letter_grade;\n        current_grade = grades_iter.next().unwrap();\n\
    \        current_letter_grade = String::from(\"E\");\n    }\n    letter_grades.push(String::from(\"\
    D-\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpglh05bzz.rs:30:25\n\
    \   |\n30 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.pop().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while grades_copy.len()\
    \ > 0 {\n        let mut current_grade = grades_copy.pop().unwrap();\n       \
    \ if current_grade < current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n        }\n        if current_grade < current_grade {\n            current_letter_grade\
    \ = String::from(\"D-\");\n        }\n        if current_grade < current_grade\
    \ {\n            current_letter_grade = String::from(\"C-\");\n        }\n   \
    \     if current_grade < current_grade {\n            current_letter_grade = String::from(\"\
    B-\");\n        }\n        if current_grade < current_grade {\n            current_letter_grade\
    \ = String::from(\"B-\");\n        }\n        if current_grade < current_grade\
    \ {\n            current_letter_grade = String::from(\"A-\");\n        }\n   \
    \     if current_grade < current_grade {\n            current_letter_grade = String::from(\"\
    A+\");\n        }\n        if current_grade < current_grade {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade < current_grade\
    \ {\n            current_letter_grade = String::from(\"B\");\n        }\n    \
    \    if current_grade < current_grade {\n            current_letter_grade = String::from(\"\
    C\");\n        }\n        if current_grade < current_grade {\n            current_letter_grade\
    \ = String::from(\"D\");\n        }\n        if current_grade < current_grade\
    \ {\n            current_letter_grade = String::from(\"E\");\n        }\n    \
    \    letter_grades.push(current_letter_grade);\n    }\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `current_grade`\n  --> /tmp/tmprjce_r1d.rs:26:13\n\
    \   |\n26 |     let mut current_grade = grades_copy.pop().unwrap();\n   |    \
    \         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_current_grade`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\
    \nwarning: variable does not need to be mutable\n  --> /tmp/tmprjce_r1d.rs:26:9\n\
    \   |\n26 |     let mut current_grade = grades_copy.pop().unwrap();\n   |    \
    \     ----^^^^^^^^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \   |\n   = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does\
    \ not need to be mutable\n  --> /tmp/tmprjce_r1d.rs:29:13\n   |\n29 |        \
    \ let mut current_grade = grades_copy.pop().unwrap();\n   |             ----^^^^^^^^^^^^^\n\
    \   |             |\n   |             help: remove this `mut`\n\nerror[E0382]:\
    \ use of moved value: `current_letter_grade`\n  --> /tmp/tmprjce_r1d.rs:66:28\n\
    \   |\n27 |     let mut current_letter_grade = String::from(\"E\");\n   |    \
    \     ------------------------ move occurs because `current_letter_grade` has\
    \ type `String`, which does not implement the `Copy` trait\n...\n66 |        \
    \ letter_grades.push(current_letter_grade);\n   |                            ^^^^^^^^^^^^^^^^^^^^\
    \ value moved here, in previous iteration of loop\n   |\nnote: these 3 reinitializations\
    \ and 9 others might get skipped\n  --> /tmp/tmprjce_r1d.rs:31:13\n   |\n31 |\
    \             current_letter_grade = String::from(\"E\");\n   |             ^^^^^^^^^^^^^^^^^^^^\n\
    ...\n34 |             current_letter_grade = String::from(\"D-\");\n   |     \
    \        ^^^^^^^^^^^^^^^^^^^^\n...\n37 |             current_letter_grade = String::from(\"\
    C-\");\n   |             ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error; 3 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ grades_sum = grades.iter().sum();\n    let mut grades_count = grades.iter().count();\n\
    \    let mut grades_average = grades_sum / grades_count;\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n    let mut grades_max_value\
    \ = grades.iter().max();\n    let mut grades_min_value = grades.iter().min();\n\
    \    let mut grades_max_value = grades.iter().max();\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n    let mut grades_max_value\
    \ = grades.iter().max();\n    let mut grades_min_value = grades.iter().min();\n\
    \    let mut grades_max_value = grades.iter().max();\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n    let mut grades_max_value\
    \ = grades.iter().max();\n    let mut grades_min_value = grades.iter().min();\n\
    \    let mut grades_max_value = grades.iter().max();\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n    let mut grades_max_value\
    \ = grades.iter().max();\n    let mut grades_min_value = grades.iter().min();\n\
    \    let mut grades_max_value = grades.iter().max();\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n    let mut grades_max_value\
    \ = grades.iter().max();\n    let mut grades_min_value = grades.iter().min();\n\
    \    let mut grades_max_value = grades.iter().max();\n    let mut grades_min_value\
    \ = grades.iter().min();\n    let mut grades_max_value = grades.iter().max();\n\
    \    let mut grades_min_value = grades.iter().min();\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9f9jihho.rs:28:46\n\
    \     |\n28   |     let mut grades_min_value = grades.iter().min();\n     |  \
    \                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9f9jihho.rs:29:46\n\
    \     |\n29   |     let mut grades_max_value = grades.iter().max();\n     |  \
    \                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9f9jihho.rs:30:46\n\
    \     |\n30   |     let mut grades_min_value = grades.iter().min();\n     |  \
    \                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp9f9jihho.rs:31:46\n\
    \     |\n31   "
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    grades_string.sort_unstable();\n\
    \    let mut letter_grades = grades_string.iter().map(|x| {\n        if x <= 3.0\
    \ {\n            String::from(\"A+\")\n        } else if x <= 3.3 {\n        \
    \    String::from(\"A\")\n        } else if x <= 3.7 {\n            String::from(\"\
    A-\")\n        } else if x <= 4.0 {\n            String::from(\"B+\")\n      \
    \  } else if x <= 4.3 {\n            String::from(\"B\")\n        } else if x\
    \ <= 4.7 {\n            String::from(\"B-\")\n        } else if x <= 5.0 {\n \
    \           String::from(\"C+\")\n        } else if x <= 5.3 {\n            String::from(\"\
    C\")\n        } else if x <= 5.7 {\n            String::from(\"C-\")\n       \
    \ } else if x <= 6.0 {\n            String::from(\"D+\")\n        } else if x\
    \ <= 6.3 {\n            String::from(\"D\")\n        } else if x <= 6.7 {\n  \
    \          String::from(\"D-\")\n        } else if x <= 7.0 {\n            String::from(\"\
    E\")\n        } else {\n            String::from(\"D-\")\n        }\n    }).collect::<Vec<String>>();\n\
    \    letter_grades.sort_unstable();\n    letter_grades\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:27:17\n   |\n\
    27 |         if x <= 3.0 {\n   |                 ^^^ expected `&String`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:29:24\n\
    \   |\n29 |         } else if x <= 3.3 {\n   |                        ^^^ expected\
    \ `&String`, found floating-point number\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpzhc9v78z.rs:31:24\n   |\n31 |         } else if x <= 3.7 {\n   |\
    \                        ^^^ expected `&String`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:33:24\n   |\n33 |\
    \         } else if x <= 4.0 {\n   |                        ^^^ expected `&String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:35:24\n\
    \   |\n35 |         } else if x <= 4.3 {\n   |                        ^^^ expected\
    \ `&String`, found floating-point number\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpzhc9v78z.rs:37:24\n   |\n37 |         } else if x <= 4.7 {\n   |\
    \                        ^^^ expected `&String`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:39:24\n   |\n39 |\
    \         } else if x <= 5.0 {\n   |                        ^^^ expected `&String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:41:24\n\
    \   |\n41 |         } else if x <= 5.3 {\n   |                        ^^^ expected\
    \ `&String`, found floating-point number\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpzhc9v78z.rs:43:24\n   |\n43 |         } else if x <= 5.7 {\n   |\
    \                        ^^^ expected `&String`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:45:24\n   |\n45 |\
    \         } else if x <= 6.0 {\n   |                        ^^^ expected `&String`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzhc9v78z.rs:47:24\n\
    \   |\n47 |         } else if x <= 6.3 {\n   |                        ^^^ expected\
    \ `&String`, found floating-point number\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpzhc9"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pgn2mkv.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pgn2mkv.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_pgn2mkv.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n        if total_grade >= 4.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n            total_grade -= 4.0;\n        } else if total_grade >= 3.7\
    \ {\n            grades_vec.push(String::from(\"A\"));\n            total_grade\
    \ -= 3.7;\n        } else if total_grade >= 3.3 {\n            grades_vec.push(String::from(\"\
    A-\"));\n            total_grade -= 3.3;\n        } else if total_grade >= 3.0\
    \ {\n            grades_vec.push(String::from(\"B+\"));\n            total_grade\
    \ -= 3.0;\n        } else if total_grade >= 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n            total_grade -= 2.7;\n        } else if total_grade >= 2.3\
    \ {\n            grades_vec.push(String::from(\"B-\"));\n            total_grade\
    \ -= 2.3;\n        } else if total_grade >= 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n            total_grade -= 2.0;\n        } else if total_grade >= 1.7\
    \ {\n            grades_vec.push(String::from(\"C\"));\n            total_grade\
    \ -= 1.7;\n        } else if total_grade >= 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n            total_grade -= 1.3;\n        } else if total_grade >= 1.0\
    \ {\n            grades_vec.push(String::from(\"D+\"));\n            total_grade\
    \ -= 1.0;\n        } else if total_grade >= 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n            total_grade -= 0.7;\n        } else if total_grade >= 0.0\
    \ {\n            grades_vec.push(String::from(\"D-\"));\n            total_grade\
    \ -= 0.0;\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpr24x1uig.rs:73:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpcoiqgi9e.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgrsk_id.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpjgrsk_id.rs:31:29\n   |\n26 |     let mut current_grade = grades_copy.first();\n\
    \   |                             ------------------- expected due to this value\n\
    ...\n31 |             current_grade = grade;\n   |                           \
    \  ^^^^^ expected enum `Option`, found `f64`\n   |\n   = note: expected enum `Option<&f64>`\n\
    \              found type `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjgrsk_id.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note:\
    \ expected type `f64`\n              found enum `Option<&f64>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjgrsk_id.rs:34:37\n   |\n34 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjgrsk_id.rs:35:27\n   |\n35 |         } else\
    \ if grade < current_grade {\n   |                           ^^^^^^^^^^^^^ expected\
    \ `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjgrsk_id.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 6 previous\
    \ e"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut gpa_sum = 0;\n    let mut gpa_sum2 =\
    \ 0;\n    let mut gpa_sum3 = 0;\n    let mut gpa_sum4 = 0;\n    let mut gpa_sum5\
    \ = 0;\n    let mut gpa_sum6 = 0;\n    let mut gpa_sum7 = 0;\n    let mut gpa_sum8\
    \ = 0;\n    let mut gpa_sum9 = 0;\n    let mut gpa_sum10 = 0;\n    let mut gpa_sum11\
    \ = 0;\n    let mut gpa_sum12 = 0;\n    let mut gpa_sum13 = 0;\n    let mut gpa_sum14\
    \ = 0;\n    let mut gpa_sum15 = 0;\n    let mut gpa_sum16 = 0;\n    let mut gpa_sum17\
    \ = 0;\n    let mut gpa_sum18 = 0;\n    let mut gpa_sum19 = 0;\n    let mut gpa_sum20\
    \ = 0;\n    let mut gpa_sum21 = 0;\n    let mut gpa_sum22 = 0;\n    let mut gpa_sum23\
    \ = 0;\n    let mut gpa_sum24 = 0;\n    let mut gpa_sum25 = 0;\n    let mut gpa_sum26\
    \ = 0;\n    let mut gpa_sum27 = 0;\n    let mut gpa_sum28 = 0;\n    let mut gpa_sum29\
    \ = 0;\n    let mut gpa_sum30 = 0;\n    let mut gpa_sum31 = 0;\n    let mut gpa_sum32\
    \ = 0;\n    let mut gpa_sum33 = 0;\n    let mut gpa_sum34 = 0;\n    let mut gpa_sum35\
    \ = 0;\n    let mut gpa_sum36 = 0;\n    let mut gpa_sum37 = 0;\n    let mut gpa_sum38\
    \ = 0;\n    let mut gpa_sum39 = 0;\n    let mut gpa_sum40 = 0;\n    let mut gpa_sum41\
    \ = 0;\n    let mut gpa_sum42 = 0;\n    let mut gpa_sum43 = 0;\n    let mut gpa_sum44\
    \ = 0;\n    let mut gpa_sum45 = 0;\n    let mut gpa_sum46 = 0;\n    let mut gpa_sum47\
    \ = 0;\n    let mut gpa_sum48 = 0;\n    let mut gpa_sum49 = 0;\n    let mut gpa_sum50\
    \ = 0;\n    let mut gpa_sum51 = 0;\n    let mut gpa_sum52 = 0;\n    let mut gpa_sum53\
    \ = 0;\n    let mut gpa_sum54 = 0;\n    let mut gpa_sum55 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx07lwm14.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grade\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `grade` in this scope\n  --> /tmp/tmpco6wwk_x.rs:75:5\n\
    \   |\n75 |     grade\n   |     ^^^^^ help: a local variable with a similar name\
    \ exists: `grades`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpco6wwk_x.rs:25:17\n     |\n25   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpco6wwk_x.rs:27:17\n     |\n27   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpco6wwk_x.rs:29:17\n     |\n29   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpco6wwk_x.rs:31:17\n     |\n31   |     grades_copy.sort_unstable();\n\
    \     |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min();\n\
    \    let mut max_grade = grades_copy.iter().max();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    \n    while\
    \ min_grade < max_grade {\n        if min_grade < grades_copy[min_grade_index]\
    \ {\n            min_grade_index += 1;\n        }\n        if max_grade < grades_copy[max_grade_index]\
    \ {\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ == grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    A+\"));\n            min_grade_index += 1;\n        }\n        if max_grade ==\
    \ grades_copy[max_grade_index] {\n            letter_grades.push(String::from(\"\
    A-\"));\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ > grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    B+\"));\n            min_grade_index += 1;\n        }\n        if max_grade >\
    \ grades_copy[max_grade_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ == grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    C+\"));\n            min_grade_index += 1;\n        }\n        if max_grade ==\
    \ grades_copy[max_grade_index] {\n            letter_grades.push(String::from(\"\
    C-\"));\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ > grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    D+\"));\n            min_grade_index += 1;\n        }\n        if max_grade >\
    \ grades_copy[max_grade_index] {\n            letter_grades.push(String::from(\"\
    D-\"));\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ == grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    D\"));\n            min_grade_index += 1;\n        }\n        if max_grade ==\
    \ grades_copy[max_grade_index] {\n            letter_grades.push(String::from(\"\
    E\"));\n            max_grade_index -= 1;\n        }\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpag6341fn.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min();\n     |    \
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpag6341fn.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max();\n     |    \
    \                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpag6341fn.rs:28:65\n\
    \   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|x| x ==\
    \ min_grade).unwrap();\n   |                                                 \
    \                ^^ no implementation for `&f64 == Option<&f64>`\n   |\n   = help:\
    \ the trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpag6341fn.rs:29:65\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.ite"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut letter_grade = String::from(\"E\");\n    while grade > 0.0 {\n        if\
    \ grade < gpa {\n            letter_grade += String::from(\"D-\");\n         \
    \   grade -= gpa;\n        } else {\n            letter_grade += String::from(\"\
    D\");\n            grade -= gpa;\n        }\n        gpa -= grade;\n        grade\
    \ = grades.iter().sum();\n    }\n    letter_grades.push(letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0f0sj56s.rs:30:29\n   |\n\
    30 |             letter_grade += String::from(\"D-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"D-\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0f0sj56s.rs:33:29\n   |\n33 |\
    \             letter_grade += String::from(\"D\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"D\")`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|&x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|&x| x == max_grade).unwrap();\n    \n    while\
    \ min_grade < max_grade {\n        if min_grade < grades_copy[min_grade_index]\
    \ {\n            min_grade_index += 1;\n        }\n        if max_grade > grades_copy[max_grade_index]\
    \ {\n            max_grade_index -= 1;\n        }\n        \n        if min_grade\
    \ == grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if min_grade == grades_copy[max_grade_index] {\n \
    \           letter_grades.push(String::from(\"A-\"));\n        }\n        if max_grade\
    \ == grades_copy[min_grade_index] {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        if max_grade == grades_copy[max_grade_index] {\n \
    \           letter_grades.push(String::from(\"B-\"));\n        }\n        if min_grade\
    \ == grades_copy[min_grade_index] && max_grade == grades_copy[max_grade_index]\
    \ {\n            letter_grades.push(String::from(\"C+\"));\n        }\n      \
    \  if min_grade == grades_copy[min_grade_index] && max_grade != grades_copy[max_grade_index]\
    \ {\n            letter_grades.push(String::from(\"C\"));\n        }\n       \
    \ if min_grade != grades_copy[min_grade_index] && max_grade == grades_copy[max_grade_index]\
    \ {\n            letter_grades.push(String::from(\"D+\"));\n        }\n      \
    \  if min_grade != grades_copy[min_grade_index] && max_grade != grades_copy[max_grade_index]\
    \ {\n            letter_grades.push(String::from(\"D\"));\n        }\n       \
    \ if min_grade != grades_copy[min_grade_index] && max_grade != grades_copy[max_grade_index]\
    \ {\n            letter_grades.push(String::from(\"E\"));\n        }\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp4c4roegs.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp4c4roegs.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4c4roegs.rs:28:69\n   |\n28 |\
    \     let mut min_grade_index = grades_copy.iter().position(|&x| x == min_grade).unwrap();\n\
    \   |                                                                     ^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|&x| x ==\
    \ *min_grade).unwrap();\n   |                                                \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4c4roegs.rs:29:69\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|&x| x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                    ^^^^^^^^^ ex"
  stdout: ''
  timestamp: 1660010856
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec_len: usize = grades.len();\n    let mut total_grade: f64\
    \ = 0.0;\n    let mut total_grade_index: usize = 0;\n    let mut total_grade_index2:\
    \ usize = 0;\n    let mut total_grade_index3: usize = 0;\n    let mut total_grade_index4:\
    \ usize = 0;\n    let mut total_grade_index5: usize = 0;\n    let mut total_grade_index6:\
    \ usize = 0;\n    let mut total_grade_index7: usize = 0;\n    let mut total_grade_index8:\
    \ usize = 0;\n    let mut total_grade_index9: usize = 0;\n    let mut total_grade_index10:\
    \ usize = 0;\n    let mut total_grade_index11: usize = 0;\n    let mut total_grade_index12:\
    \ usize = 0;\n    let mut total_grade_index13: usize = 0;\n    let mut total_grade_index14:\
    \ usize = 0;\n    let mut total_grade_index15: usize = 0;\n    let mut total_grade_index16:\
    \ usize = 0;\n    let mut total_grade_index17: usize = 0;\n    let mut total_grade_index18:\
    \ usize = 0;\n    let mut total_grade_index19: usize = 0;\n    let mut total_grade_index20:\
    \ usize = 0;\n    let mut total_grade_index21: usize = 0;\n    let mut total_grade_index22:\
    \ usize = 0;\n    let mut total_grade_index23: usize = 0;\n    let mut total_grade_index24:\
    \ usize = 0;\n    let mut total_grade_index25: usize = 0;\n    let mut total_grade_index26:\
    \ usize = 0;\n    let mut total_grade_index27: usize = 0;\n    let mut total_grade_index28:\
    \ usize = 0;\n    let mut total_grade_index29: usize = 0;\n    let mut total_grade_index30:\
    \ usize = 0;\n    let mut total_grade_index31: usize = 0;\n    let mut total_grade_index32:\
    \ usize = 0;\n    let mut total_grade_index33: usize = 0;\n    let mut total_grade_index34:\
    \ usize = 0;\n    let mut total_grade_index35: usize = 0;\n    let mut total_grade_index36:\
    \ usize = 0;\n    let mut total_grade_index37: usize = 0;\n    let mut total_grade_index38:\
    \ usize = 0;\n    let mut total_grade_index39: usize = 0;\n    let mut total_grade_index40\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz4vo1gv8.rs:66:32\n   |\n\
    66 |     let mut total_grade_index40\n   |                                ^ help:\
    \ add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz4vo1gv8.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter = String::from(\"E\");\n    while current_grade >\
    \ 0.0 {\n        if current_grade >= 3.0 {\n            current_letter = String::from(\"\
    C\");\n        } else if current_grade >= 2.0 {\n            current_letter =\
    \ String::from(\"B\");\n        } else if current_grade >= 1.0 {\n           \
    \ current_letter = String::from(\"A\");\n        } else if current_grade >= 0.7\
    \ {\n            current_letter = String::from(\"D\");\n        } else if current_grade\
    \ >= 0.3 {\n            current_letter = String::from(\"C\");\n        } else\
    \ if current_grade >= 0.1 {\n            current_letter = String::from(\"B\");\n\
    \        } else if current_grade >= 0.0 {\n            current_letter = String::from(\"\
    A\");\n        } else {\n            current_letter = String::from(\"E\");\n \
    \       }\n        letter_grades.push(current_letter);\n        current_grade\
    \ = grades_iter.next().unwrap();\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4dl1c7mh.rs:28:27\n   |\n\
    28 |     while current_grade > 0.0 {\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4dl1c7mh.rs:29:29\n\
    \   |\n29 |         if current_grade >= 3.0 {\n   |                          \
    \   ^^^\n   |                             |\n   |                            \
    \ expected `&f64`, found floating-point number\n   |                         \
    \    help: consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4dl1c7mh.rs:31:36\n   |\n31 |         } else if current_grade >=\
    \ 2.0 {\n   |                                    ^^^\n   |                   \
    \                 |\n   |                                    expected `&f64`,\
    \ found floating-point number\n   |                                    help: consider\
    \ borrowing here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4dl1c7mh.rs:33:36\n\
    \   |\n33 |         } else if current_grade >= 1.0 {\n   |                   \
    \                 ^^^\n   |                                    |\n   |       \
    \                             expected `&f64`, found floating-point number\n \
    \  |                                    help: consider borrowing here: `&1.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4dl1c7mh.rs:35:36\n   |\n35 |\
    \         } else if current_grade >= 0.7 {\n   |                             \
    \       ^^^\n   |                                    |\n   |                 \
    \                   expected `&f64`, found floating-point number\n   |       \
    \                             help: consider borrowing here: `&0.7`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4dl1c7mh.rs:37:36\n   |\n37 |         } else\
    \ if current_grade >= 0.3 {\n   |                                    ^^^\n   |\
    \                                    |\n   |                                 \
    \   expected `&f64`, found floating-point number\n   |                   "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    grades_string.sort_unstable();\n\
    \    grades_string.dedup();\n    let mut letter_grades = grades_string.iter().cloned().map(|x|\
    \ {\n        match x {\n            x if x > 0.0 => String::from(\"D+\"),\n  \
    \          x if x < 0.0 => String::from(\"D-\"),\n            x if x == 0.0 =>\
    \ String::from(\"D\"),\n            x if x < 3.0 => String::from(\"C\"),\n   \
    \         x if x < 3.3 => String::from(\"C+\"),\n            x if x < 3.7 => String::from(\"\
    B\"),\n            x if x < 4.0 => String::from(\"B+\"),\n            x if x <\
    \ 4.3 => String::from(\"A-\"),\n            x if x < 4.7 => String::from(\"A+\"\
    ),\n            x if x < 5.0 => String::from(\"A\"),\n            x if x < 5.3\
    \ => String::from(\"A-\"),\n            x if x < 5.7 => String::from(\"A+\"),\n\
    \            x if x < 6.0 => String::from(\"A\"),\n            x if x < 6.3 =>\
    \ String::from(\"A-\"),\n            x if x < 6.7 => String::from(\"A+\"),\n \
    \           x if x < 7.0 => String::from(\"A\"),\n            x if x < 7.3 =>\
    \ String::from(\"A-\"),\n            x if x < 7.7 => String::from(\"A+\"),\n \
    \           x if x < 8.0 => String::from(\"A\"),\n            x if x < 8.3 =>\
    \ String::from(\"A-\"),\n            x if x < 8.7 => String::from(\"A+\"),\n \
    \           x if x < 9.0 => String::from(\"A\"),\n            x if x < 9.3 =>\
    \ String::from(\"A-\"),\n            x if x < 9.7 => String::from(\"A+\"),\n \
    \           x if x < 10.0 => String::from(\"A\"),\n            x if x < 10.3 =>\
    \ String::from(\"A-\"),\n            x if x < 10.7 => String::from(\"A+\"),\n\
    \            x if x < 11.0 => String::from(\"A\"),\n            x if x < 11.3\
    \ => String::from(\"A-\"),\n            x if x < 11.7 => String::from(\"A+\"),\n\
    \            x if x < 12.0 => String::from(\"A\"),\n            \n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpccae0usc.rs:71:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     let mut letter_grades = grades_string.iter().cloned().map(|x| {\n\
    \   |                                                              -    - unclosed\
    \ delimiter\n   |                                                            \
    \  |\n   |                                                              unclosed\
    \ delimiter\n28 |         match x {\n   |                 - this delimiter might\
    \ not be properly closed...\n...\n61 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n71 | }\n   |   ^\n\nerror: expected one of `.`,\
    \ `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpccae0usc.rs:71:3\n\
    \   |\n71 | }\n   |   ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade > *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:31:29\n   |\n26 |  \
    \   let mut current_grade = grades_copy.first().unwrap();\n   |              \
    \               ---------------------------- expected due to this value\n...\n\
    31 |             current_grade = grade;\n   |                             ^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:34:37\n\
    \   |\n34 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp42qewi8b.rs:35:27\n   |\n35 |         } else if grade < current_grade\
    \ {\n   |                           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n35 |         } else if grade\
    \ < *current_grade {\n   |                           +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp42qewi8b.rs:36:37\n   |\n36 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter_grade = String::from(current_letter_grade + \"\
    +\");\n        } else {\n            current_letter_grade = String::from(current_letter_grade\
    \ + \"-\");\n            current_grade = grade;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmphe6w9ir2.rs:24:9\n\
    \   |\n24 |     let mut grades_copy = grades.clone();\n   |         ----^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `current_letter_grade`\n\
    \  --> /tmp/tmphe6w9ir2.rs:33:49\n   |\n27 |     let mut current_letter_grade\
    \ = String::from(\"E\");\n   |         ------------------------ move occurs because\
    \ `current_letter_grade` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n33 |             current_letter_grade = String::from(current_letter_grade\
    \ + \"+\");\n   |                                                 ^^^^^^^^^^^^^^^^^^^^\
    \ value used here after move\n...\n38 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while current_grade.len() > 0 {\n        let mut current_grade\
    \ = grades_copy.clone();\n        let mut current_letter_grade = String::new();\n\
    \        let mut current_letter_grade_index = 0;\n        \n        while current_grade.len()\
    \ > 0 {\n            let mut current_grade = grades_copy.clone();\n          \
    \  let mut current_letter_grade = String::new();\n            let mut current_letter_grade_index\
    \ = 0;\n            \n            while current_grade.len() > 0 {\n          \
    \      let mut current_grade = grades_copy.clone();\n                let mut current_letter_grade\
    \ = String::new();\n                let mut current_letter_grade_index = 0;\n\
    \                \n                while current_grade.len() > 0 {\n         \
    \           let mut current_grade = grades_copy.clone();\n                   \
    \ let mut current_letter_grade = String::new();\n                    let mut current_letter_grade_index\
    \ = 0;\n                    \n                    while current_grade.len() >\
    \ 0 {\n                        let mut current_grade = grades_copy.clone();\n\
    \                        let mut current_letter_grade = String::new();\n     \
    \                   let mut current_letter_grade_index = 0;\n                \
    \        \n                        while current_grade.len() > 0 {\n         \
    \                   let mut current_grade = grades_copy.clone();\n           \
    \                 let mut current_letter_grade = String::new();\n            \
    \                let mut current_letter_grade_index = 0;\n                   \
    \         \n                            while current_grade.len() > 0 {\n    \
    \                            let mut current_grade = grades_copy.clone();\n  \
    \                              let mut current_letter_grade = String::new();\n\
    \                                let mut current_letter_grade_index = 0;\n   \
    \                             \n                                while current_grade.len()\
    \ > 0 {\n                                    let mut current_grade = grades_copy.clone();\n\
    \                                    let mut current_letter_grade = String::new();\n\
    \                                    let mut current_letter_grade_index = 0;\n\
    \                                    \n                                    while\
    \ current_grade.len() > 0 {\n                                        let mut current_grade\
    \ = grades_copy.clone();\n                                        let mut current_letter_grade\
    \ = String::new();\n                                        let mut current_letter_grade_index\
    \ = 0;\n                                        \n                           \
    \             while current_grade.len() > 0 {\n                              \
    \              let mut current_grade = grades_copy.clone();\n                \
    \                            let mut current_letter_grade = String::new();\n \
    \                                           let mut current_letter_grade_index\
    \ = 0;\n                                            \n                       \
    \                     while current_grade.len() > 0 {\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7mdpe9a2.rs:91:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n30 |     while current_grade.len() > 0 {\n   |                          \
    \         - unclosed delimiter\n...\n35 |         while current_grade.len() >\
    \ 0 {\n   |                                       - unclosed delimiter\n...\n\
    40 |             while current_grade.len() > 0 {\n   |                       \
    \                    - unclosed delimiter\n...\n45 |                 while current_grade.len()\
    \ > 0 {\n   |                                               - unclosed delimiter\n\
    ...\n50 |                     while current_grade.len() > 0 {\n   |          \
    \                                         - unclosed delimiter\n...\n55 |    \
    \                     while current_grade.len() > 0 {\n   |                  \
    \                                     - unclosed delimiter\n...\n60 |        \
    \                     while current_grade.len() > 0 {\n   |                  \
    \                                         - unclosed delimiter\n...\n65 |    \
    \                             while current_grade.len() > 0 {\n   |          \
    \                                                     - unclosed delimiter\n...\n\
    70 |                                     while current_grade.len() > 0 {\n   |\
    \                                                                   - unclosed\
    \ delimiter\n...\n75 |                                         while current_grade.len()\
    \ > 0 {\n   |                                                                \
    \       - unclosed delimiter\n...\n80 |                                      \
    \       while current_grade.len() > 0 {\n   |                                \
    \                                           - this delimiter might not be properly\
    \ closed...\n81 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n91 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7mdpe9a2.rs:30:5\n\
    \   |\n23 |   fn numerical_letter_grade("
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_s2h9poi.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        let mut grade_string = String::new();\n        if grade\
    \ < 3.0 {\n            grade_string.push_str(\"A+\");\n        } else if grade\
    \ < 3.3 {\n            grade_string.push_str(\"A-\");\n        } else if grade\
    \ < 3.7 {\n            grade_string.push_str(\"B+\");\n        } else if grade\
    \ < 4.0 {\n            grade_string.push_str(\"B\");\n        } else if grade\
    \ < 4.3 {\n            grade_string.push_str(\"B-\");\n        } else if grade\
    \ < 4.7 {\n            grade_string.push_str(\"C+\");\n        } else if grade\
    \ < 5.0 {\n            grade_string.push_str(\"C\");\n        } else if grade\
    \ < 5.3 {\n            grade_string.push_str(\"C-\");\n        } else if grade\
    \ < 5.7 {\n            grade_string.push_str(\"D+\");\n        } else if grade\
    \ < 6.0 {\n            grade_string.push_str(\"D\");\n        } else if grade\
    \ < 6.3 {\n            grade_string.push_str(\"D-\");\n        } else if grade\
    \ < 6.7 {\n            grade_string.push_str(\"E\");\n        } else {\n     \
    \       grade_string.push_str(\"F\");\n        }\n        grades_string.push(grade_string);\n\
    \    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A+\", \"A+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp14brurpd.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8q_q13fr.rs:34:37\n   |\n\
    34 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8q_q13fr.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        }\n        if grade < current_grade\
    \ {\n            current_letter_grade = String::from(\"E\");\n            current_grade\
    \ = grade;\n        }\n        if grade == current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_grade\
    \ = grade;\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\", \"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmnwfk72j.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpi8tevvk4.rs:48:1\n   |\n47 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    48 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n47 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: -1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_index\
    \ = grades_copy.len() - 1;\n    while current_index >= 0 {\n        if current_grade\
    \ > grades_copy[current_index] {\n            current_grade -= grades_copy[current_index];\n\
    \            current_letter_grade = String::from(\"D-\");\n        } else if current_grade\
    \ == grades_copy[current_index] {\n            current_letter_grade = String::from(\"\
    D\");\n            current_index -= 1;\n        } else {\n            current_grade\
    \ -= grades_copy[current_index];\n            current_letter_grade = String::from(\"\
    D+\");\n        }\n        letter_grades.push(current_letter_grade);\n    }\n\
    \    letter_grades.push(String::from(\"E\"));\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010861
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else {\n            current_letter_grade = current_letter_grade.chars().nth(grade\
    \ - current_grade).unwrap().to_string();\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoga8rily.rs:34:69\n   |\n\
    34 |             current_letter_grade = current_letter_grade.chars().nth(grade\
    \ - current_grade).unwrap().to_string();\n   |                               \
    \                                      ^^^^^^^^^^^^^^^^^^^^^ expected `usize`,\
    \ found `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    for grade in grades {\n        let letter_grade\
    \ = if grade > total_grade {\n            \"D-\"\n        } else if grade < total_grade\
    \ {\n            \"D+\"\n        } else if grade == total_grade {\n          \
    \  \"D\"\n        } else {\n            \"E\"\n        };\n        letter_grades.push(letter_grade);\n\
    \        total_grade -= grade;\n    }\n    letter_grades\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpql7cnnqd.rs:39:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n39 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = -1;\n    let mut current_gp = 0;\n    let mut current_gpa = grades_copy.first().unwrap();\n\
    \    for grade in grades_copy {\n        if grade > current_gpa {\n          \
    \  current_gpa = grade;\n            current_letter_grade = String::from(\"E\"\
    );\n            current_letter_grade_index = -1;\n        }\n        if grade\
    \ < current_gp {\n            current_gp = grade;\n            current_letter_grade\
    \ = String::from(\"E\");\n            current_letter_grade_index = -1;\n     \
    \   }\n        if grade == current_gp {\n            current_letter_grade_index\
    \ += 1;\n            current_letter_grade = String::from(\n                &grades_copy[grade_index\
    \ as usize].to_string()[current_letter_grade_index as usize..].to_uppercase()\n\
    \            );\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `grade_index` in this scope\n  --> /tmp/tmpy0ie249b.rs:45:30\n\
    \   |\n45 |                 &grades_copy[grade_index as usize].to_string()[current_letter_grade_index\
    \ as usize..].to_uppercase()\n   |                              ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy0ie249b.rs:32:20\n\
    \   |\n32 |         if grade > current_gpa {\n   |                    ^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n32 |         if grade > *current_gpa {\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy0ie249b.rs:33:27\n   |\n30 |     let mut current_gpa\
    \ = grades_copy.first().unwrap();\n   |                           ----------------------------\
    \ expected due to this value\n...\n33 |             current_gpa = grade;\n   |\
    \                           ^^^^^\n   |                           |\n   |    \
    \                       expected `&f64`, found `f64`\n   |                   \
    \        help: consider borrowing here: `&grade`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy0ie249b.rs:37:20\n   |\n37 |         if grade < current_gp {\n\
    \   |                    ^^^^^^^^^^ expected `f64`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy0ie249b.rs:38:26\n   |\n29 |     let mut current_gp\
    \ = 0;\n   |                          - expected due to this value\n...\n38 |\
    \             current_gp = grade;\n   |                          ^^^^^ expected\
    \ integer, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy0ie249b.rs:42:21\n\
    \   |\n42 |         if grade == current_gp {\n   |                     ^^^^^^^^^^\
    \ expected `f64`, found integer\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpy0ie249b.rs:28:42\n   |\n28 |     let mut current_letter_grade_index\
    \ = -1;\n   |                                          ^^ the trait `Neg` is not\
    \ implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_gpa = grades.iter().sum();\n\
    \    let mut total_gpa_sum = 0;\n    let mut total_gpa_sum2 = 0;\n    let mut\
    \ total_gpa_sum3 = 0;\n    let mut total_gpa_sum4 = 0;\n    let mut total_gpa_sum5\
    \ = 0;\n    let mut total_gpa_sum6 = 0;\n    let mut total_gpa_sum7 = 0;\n   \
    \ let mut total_gpa_sum8 = 0;\n    let mut total_gpa_sum9 = 0;\n    let mut total_gpa_sum10\
    \ = 0;\n    let mut total_gpa_sum11 = 0;\n    let mut total_gpa_sum12 = 0;\n \
    \   let mut total_gpa_sum13 = 0;\n    let mut total_gpa_sum14 = 0;\n    let mut\
    \ total_gpa_sum15 = 0;\n    let mut total_gpa_sum16 = 0;\n    let mut total_gpa_sum17\
    \ = 0;\n    let mut total_gpa_sum18 = 0;\n    let mut total_gpa_sum19 = 0;\n \
    \   let mut total_gpa_sum20 = 0;\n    let mut total_gpa_sum21 = 0;\n    let mut\
    \ total_gpa_sum22 = 0;\n    let mut total_gpa_sum23 = 0;\n    let mut total_gpa_sum24\
    \ = 0;\n    let mut total_gpa_sum25 = 0;\n    let mut total_gpa_sum26 = 0;\n \
    \   let mut total_gpa_sum27 = 0;\n    let mut total_gpa_sum28 = 0;\n    let mut\
    \ total_gpa_sum29 = 0;\n    let mut total_gpa_sum30 = 0;\n    let mut total_gpa_sum31\
    \ = 0;\n    let mut total_gpa_sum32 = 0;\n    let mut total_gpa_sum33 = 0;\n \
    \   let mut total_gpa_sum34 = 0;\n    let mut total_gpa_sum35 = 0;\n    let mut\
    \ total_gpa_sum36 = 0;\n    let mut total_gpa_sum37 = 0;\n    let mut total_gpa_sum38\
    \ = 0;\n    let mut total_gpa_sum39 = 0;\n    let mut total_gpa_sum40 = 0;\n \
    \   let mut total_gpa_sum41 = 0;\n    let mut total_gpa_sum42 = 0;\n    let mut\
    \ total_gpa_sum43 = 0;\n    let mut total_gpa_sum44 = 0;\n    let mut total_gpa_sum45\
    \ = 0;\n    let mut total_gpa_sum46 = 0;\n    let mut total_gpa_sum47 = 0;\n \
    \   let mut total_gpa_sum48 = 0;\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_2qsven7.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpi8tevvk4.rs:48:1\n   |\n47 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    48 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n47 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n    let mut grades_copy = grades_copy.clone();\n\
    \    let mut grades_copy = grades_copy.clone();\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp8le_lhbx.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8le_lhbx.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    grades_copy.sort_unstable();\n    let mut previous_grade\
    \ = grades_copy[0];\n    let mut current_grade = grades_copy[0];\n    for grade\
    \ in grades_copy {\n        if grade > previous_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > current_grade {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < previous_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < current_grade {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade == previous_grade {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade == current_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else {\n            letter_grades.push(String::from(\"C+\"\
    ));\n        }\n        previous_grade = grade;\n        current_grade = grade;\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpljt3btqx.rs:26:17\n\
    \     |\n26   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index47\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpejfziy_1.rs:75:11\n   |\n\
    75 |     let mu\n   |           ^ help: add `;` here\n76 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpejfziy_1.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = -1;\n    let mut current_letter_grade_index2 = -1;\n    let mut current_letter_grade_index3\
    \ = -1;\n    let mut current_letter_grade_index4 = -1;\n    let mut current_letter_grade_index5\
    \ = -1;\n    let mut current_letter_grade_index6 = -1;\n    let mut current_letter_grade_index7\
    \ = -1;\n    let mut current_letter_grade_index8 = -1;\n    let mut current_letter_grade_index9\
    \ = -1;\n    let mut current_letter_grade_index10 = -1;\n    let mut current_letter_grade_index11\
    \ = -1;\n    let mut current_letter_grade_index12 = -1;\n    let mut current_letter_grade_index13\
    \ = -1;\n    let mut current_letter_grade_index14 = -1;\n    let mut current_letter_grade_index15\
    \ = -1;\n    let mut current_letter_grade_index16 = -1;\n    let mut current_letter_grade_index17\
    \ = -1;\n    let mut current_letter_grade_index18 = -1;\n    let mut current_letter_grade_index19\
    \ = -1;\n    let mut current_letter_grade_index20 = -1;\n    let mut current_letter_grade_index21\
    \ = -1;\n    let mut current_letter_grade_index22 = -1;\n    let mut current_letter_grade_index23\
    \ = -1;\n    let mut current_letter_grade_index24 = -1;\n    let mut current_letter_grade_index25\
    \ = -1;\n    let mut current_letter_grade_index26 = -1;\n    let mut current_letter_grade_index27\
    \ = -1;\n    let mut current_letter_grade_index28 = -1;\n    let mut current_letter_grade_index29\
    \ = -1;\n    let mut current_letter_grade_index30 = -1;\n    let mut current_letter_grade_index31\
    \ = -1;\n    let mut current_letter_grade_index32 = -1;\n    let mut current_letter_grade_index33\
    \ = -1;\n    let mut current_letter_grade_index34 = -1;\n    let mut current_letter_grade_index35\
    \ = -1;\n    let mut current_letter_grade_index36 = -1;\n    let mut current_letter_grade_index37\
    \ = -1;\n    let mut current_letter_grade_index38 = -1;\n    let mut current_letter_grade_index39\
    \ = -1;\n    let mut current_letter_grade_index40 = -1;\n    let mut current_letter_grade_index41\
    \ = -1;\n    let mut current_letter_grade_index\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp19rhsi7y.rs:71:39\n   |\n\
    71 |     let mut current_letter_grade_index\n   |                            \
    \           ^ help: add `;` here\n72 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp19rhsi7y.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade < current_grade {\n            current_letter_grade\
    \ = String::from(current_letter_grade.chars().nth(1).unwrap());\n        }\n \
    \       current_grade -= grade;\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhtggb4z.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpdhtggb4z.rs:31:29\n   |\n26 |     let mut current_grade = grades_copy.first();\n\
    \   |                             ------------------- expected due to this value\n\
    ...\n31 |             current_grade = grade;\n   |                           \
    \  ^^^^^ expected enum `Option`, found `f64`\n   |\n   = note: expected enum `Option<&f64>`\n\
    \              found type `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdhtggb4z.rs:33:27\n\
    \   |\n33 |         } else if grade < current_grade {\n   |                  \
    \         ^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note:\
    \ expected type `f64`\n              found enum `Option<&f64>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&f64>`\n\
    \  --> /tmp/tmpdhtggb4z.rs:36:9\n   |\n36 |         current_grade -= grade;\n\
    \   |         -------------^^^^^^^^^\n   |         |\n   |         cannot use\
    \ `-=` on type `Option<&f64>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade > 0.0 && grade < 3.0 {\n            grades_string.push(String::from(\"\
    C+\"));\n        } else if grade > 0.0 && grade < 2.0 {\n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 && grade < 1.0 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6_th2hol.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter);\n\
    \            current_letter = String::from(\"E\");\n            current_grade\
    \ = grade;\n        } else if grade == current_grade {\n            current_letter\
    \ += String::from(\"+\");\n        } else {\n            current_letter += String::from(\"\
    -\");\n        }\n    }\n    letter_grades.push(current_letter);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpderepna_.rs:34:31\n   |\n\
    34 |             current_letter += String::from(\"+\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    +\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpderepna_.rs:36:31\n   |\n\
    36 |             current_letter += String::from(\"-\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    -\")`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades.len();\n    let mut grades_grades = vec![];\n    let\
    \ mut grades_grades_len = grades_len.clone();\n    let mut grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_len = grades_len.clone();\n    let\
    \ mut grades_grades_grades_grades = vec![];\n    let mut grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades = vec![];\n\
    \    let mut grades_grades_grades_grades_grades_len = grades_len.clone();\n  \
    \  let mut grades_grades_grades_grades_grades_grades = vec![];\n    let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_len.clone();\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppihf_ouc.rs:43:487\n   |\n\
    43 |     let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppihf_ouc.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade < 3.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpj0vdfec2.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n    let mut letter_grades = vec![];\n    let mut current_grade\
    \ = grades_sorted[0];\n    let mut current_grade_index = 0;\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades_sorted {\n        if grade >\
    \ current_grade {\n            current_grade = grade;\n            current_grade_index\
    \ = 0;\n            current_letter_grade = String::from(\"E\");\n        }\n \
    \       if grade == current_grade {\n            current_grade_index += 1;\n \
    \           current_letter_grade = String::from(\n                format!(\"{}+\"\
    , current_grade_index),\n            );\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpp7m36q86.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first();\n    for grade in grades.iter().skip(1) {\n\
    \        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n            current_grade = grade;\n        } else if grade < current_grade\
    \ {\n            letter_grades.push(String::from(\"A-\"));\n            current_grade\
    \ = grade;\n        } else {\n            letter_grades.push(String::from(\"A\"\
    ));\n            current_grade = grade;\n        }\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmbqo5eh1.rs:27:20\n   |\n\
    27 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmbqo5eh1.rs:29:29\n   |\n25 |     let mut current_grade = grades.first();\n\
    \   |                             -------------- expected due to this value\n\
    ...\n29 |             current_grade = grade;\n   |                           \
    \  ^^^^^ expected enum `Option`, found `&f64`\n   |\n   = note:   expected enum\
    \ `Option<&f64>`\n           found reference `&f64`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n29 |             current_grade = Some(grade);\n   |       \
    \                      +++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmbqo5eh1.rs:30:27\n\
    \   |\n30 |         } else if grade < current_grade {\n   |                  \
    \         ^^^^^^^^^^^^^ expected `&f64`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&f64`\n                   found enum `Option<&f64>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmbqo5eh1.rs:32:29\n   |\n25 |  \
    \   let mut current_grade = grades.first();\n   |                            \
    \ -------------- expected due to this value\n...\n32 |             current_grade\
    \ = grade;\n   |                             ^^^^^ expected enum `Option`, found\
    \ `&f64`\n   |\n   = note:   expected enum `Option<&f64>`\n           found reference\
    \ `&f64`\nhelp: try wrapping the expression in `Some`\n   |\n32 |            \
    \ current_grade = Some(grade);\n   |                             +++++     +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmbqo5eh1.rs:35:29\n   |\n25 |\
    \     let mut current_grade = grades.first();\n   |                          \
    \   -------------- expected due to this value\n...\n35 |             current_grade\
    \ = grade;\n   |                             ^^^^^ expected enum `Option`, found\
    \ `&f64`\n   |\n   = note:   expected enum `Option<&f64>`\n           found reference\
    \ `&f64`\nhelp: try wrapping the expressi"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpye7kcqww.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut total_grade = grades.iter().sum();\n\
    \    let mut total_letter_grade = grades_copy.iter().sum();\n    let mut current_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n    let mut current_letter_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = grades_copy.iter().sum();\n    let mut current_letter_grade\
    \ = grades_copy.iter().sum();\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jvyjyxs.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter_grade = String::from(\n                match grade\
    \ {\n                    4.0 => \"A+\",\n                    3.7 => \"A\",\n \
    \                   3.3 => \"A-\",\n                    3.0 => \"B+\",\n     \
    \               2.7 => \"B\",\n                    2.3 => \"B-\",\n          \
    \          2.0 => \"C+\",\n                    1.7 => \"C\",\n               \
    \     1.3 => \"C-\",\n                    1.0 => \"D+\",\n                   \
    \ 0.7 => \"D\",\n                    0.0 => \"D-\",\n                    0.0 =>\
    \ \"E\",\n                }\n            );\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: floating-point types cannot be used in patterns\n  --> /tmp/tmp1nzfy9j6.rs:35:21\n\
    \   |\n35 |                     4.0 => \"A+\",\n   |                     ^^^\n\
    \   |\n   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n\
    \   = warning: this was previously accepted by the compiler but is being phased\
    \ out; it will become a hard error in a future release!\n   = note: for more information,\
    \ see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n\nwarning:\
    \ floating-point types cannot be used in patterns\n  --> /tmp/tmp1nzfy9j6.rs:36:21\n\
    \   |\n36 |                     3.7 => \"A\",\n   |                     ^^^\n\
    \   |\n   = warning: this was previously accepted by the compiler but is being\
    \ phased out; it will become a hard error in a future release!\n   = note: for\
    \ more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n\
    \nwarning: floating-point types cannot be used in patterns\n  --> /tmp/tmp1nzfy9j6.rs:37:21\n\
    \   |\n37 |                     3.3 => \"A-\",\n   |                     ^^^\n\
    \   |\n   = warning: this was previously accepted by the compiler but is being\
    \ phased out; it will become a hard error in a future release!\n   = note: for\
    \ more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n\
    \nwarning: floating-point types cannot be used in patterns\n  --> /tmp/tmp1nzfy9j6.rs:38:21\n\
    \   |\n38 |                     3.0 => \"B+\",\n   |                     ^^^\n\
    \   |\n   = warning: this was previously accepted by the compiler but is being\
    \ phased out; it will become a hard error in a future release!\n   = note: for\
    \ more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n\
    \nwarning: floating-point types cannot be used in patterns\n  --> /tmp/tmp1nzfy9j6.rs:39:21\n\
    \   |\n39 |                     2.7 => \"B\",\n   |                     ^^^\n\
    \   |\n   = warning: this was previously accepted by the compiler but is being\
    \ phased out; it will become a hard error in a future release!\n   = note: for\
    \ more information, see issue #41620 <https://github.com/rust-lang/"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3weecb0.rs:34:37\n   |\n\
    34 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg3weecb0.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut letter_grades = vec![];\n   \
    \ let mut current_grade = grades_sorted[0];\n    for grade in grades_sorted {\n\
    \        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n            current_grade = grade;\n        } else if grade < current_grade\
    \ {\n            letter_grades.push(String::from(\"A-\"));\n            current_grade\
    \ = grade;\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n            current_grade = grade;\n        }\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpjp0dhsmr.rs:25:19\n\
    \     |\n25   |     grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum = 0.0;\n    let\
    \ mut grades_average = 0.0;\n    let mut grades_letter_grades = Vec::new();\n\
    \    let mut grades_letter_grades_len = grades_letter_grades.len();\n    let mut\
    \ grades_letter_grades_sum = 0.0;\n    let mut grades_letter_grades_average =\
    \ 0.0;\n    let mut grades_letter_grades_letter_grades = Vec::new();\n    let\
    \ mut grades_letter_grades_letter_grades_len = grades_letter_grades_letter_grades.len();\n\
    \    let mut grades_letter_grades_letter_grades_sum = 0.0;\n    let mut grades_letter_grades_letter_grades_average\
    \ = 0.0;\n    let mut grades_letter_grades_letter_grades_letter_grades = Vec::new();\n\
    \    let mut grades_letter_grades_letter_grades_letter_grades_len = grades_letter_grades_letter_grades_letter_grades.len();\n\
    \    let mut grades_letter_grades_letter_grades_letter_grades_sum = 0.0;\n   \
    \ let mut grades_letter_grades_letter_grades_letter_grades_average = 0.0;\n  \
    \  let mut grades_letter_grades_letter_grades_letter_grades_letter_grades = Vec::new();\n\
    \    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_len\
    \ = grades_letter_grades_letter_grades_letter_grades_letter_grades.len();\n  \
    \  let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_sum\
    \ = 0.0;\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_average\
    \ = 0.0;\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades\
    \ = Vec::new();\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_len\
    \ = grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades.len();\n\
    \    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_sum\
    \ = 0.0;\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_average\
    \ = 0.0;\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades\
    \ = Vec::new();\n    let mut grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_len\
    \ = \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpruell9e0.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut grades_grades = grades_sorted.iter().cloned().map(|x| {\n        if x <\
    \ 3.0 {\n            String::from(\"A+\")\n        } else if x < 3.3 {\n     \
    \       String::from(\"A\")\n        } else if x < 3.7 {\n            String::from(\"\
    A-\")\n        } else if x < 4.0 {\n            String::from(\"B+\")\n       \
    \ } else if x < 4.3 {\n            String::from(\"B\")\n        } else if x <\
    \ 4.7 {\n            String::from(\"B-\")\n        } else if x < 5.0 {\n     \
    \       String::from(\"C+\")\n        } else if x < 5.3 {\n            String::from(\"\
    C\")\n        } else if x < 5.7 {\n            String::from(\"C-\")\n        }\
    \ else if x < 6.0 {\n            String::from(\"D+\")\n        } else if x < 6.3\
    \ {\n            String::from(\"D\")\n        } else if x < 6.7 {\n          \
    \  String::from(\"D-\")\n        } else if x < 7.0 {\n            String::from(\"\
    E\")\n        } else {\n            String::from(\"E\")\n        }\n    }).collect::<Vec<String>>();\n\
    \    grades_grades.push(String::from(\"E\"));\n    grades_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp39z594xa.rs:26:19\n\
    \    |\n26  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grade = grades_copy.iter().sum();\n\
    \    let mut i = 0;\n    while grade > 0.0 {\n        if grade < 3.0 {\n     \
    \       letter_grades.push(String::from(\"D-\"));\n            i += 1;\n     \
    \       grade -= 3.0;\n        } else {\n            letter_grades.push(String::from(\"\
    D+\"));\n            i += 1;\n            grade -= 2.0;\n        }\n    }\n  \
    \  while grade < 0.0 {\n        if grade < 2.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            i += 1;\n            grade += 2.0;\n        } else {\n  \
    \          letter_grades.push(String::from(\"C\"));\n            i += 1;\n   \
    \         grade += 1.0;\n        }\n    }\n    while grade < 2.0 {\n        if\
    \ grade < 1.0 {\n            letter_grades.push(String::from(\"B-\"));\n     \
    \       i += 1;\n            grade += 1.0;\n        } else {\n            letter_grades.push(String::from(\"\
    B\"));\n            i += 1;\n            grade += 0.7;\n        }\n    }\n   \
    \ while grade < 3.0 {\n        if grade < 0.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            i += 1;\n            grade += 0.7;\n        } else {\n  \
    \          letter_grades.push(String::from(\"B\"));\n            i += 1;\n   \
    \         grade += 0.3;\n        }\n    }\n    while grade < 4.0 {\n        if\
    \ grade < 0.3 {\n            letter_grades.push(String::from(\"A-\"));\n     \
    \       i += 1;\n            grade += 0.3;\n        } else {\n            letter_grades.push(String::from(\"\
    A\"));\n            i += 1;\n            grade += 0.0;\n        }\n    }\n   \
    \ while grade < 5.0 {\n        letter_grades.push(String::from(\"A+\"));\n   \
    \     i += 1;\n        grade += 0.0;\n    }\n    while grade < 6.0 {\n       \
    \ letter_grades.push(String::from(\"A\"));\n        i += 1;\n        grade +=\
    \ 0.0;\n    }\n    while grade < 7.0 {\n        letter_grades.push(String::from(\"\
    A+\"));\n        i += 1;\n        grade += 0.0;\n    }\n    while grade < 8.0\
    \ {\n        letter_grades.push(String::from(\"A\"));\n        i += 1;\n     \
    \   grade += 0.0;\n    }\n    while grade < 9.0 {\n        letter_grades.push(String::from(\"\
    A+\"));\n        i += 1;\n        grade \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpeok9gr__.rs:117:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n103 |     while grade < 9.0 {\n    |                       - this delimiter\
    \ might not be properly closed...\n...\n107 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n117 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeok9gr__.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror[E0277]:\
    \ can't compare `()` with `{float}`\n  --> /tmp/tmpeok9gr__.rs:28:17\n   |\n28\
    \ |     while grade > 0.0 {\n   |                 ^ no implementation for `()\
    \ < {float}` and `() > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `()`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             ()\n             (A, B, C, D, E, F, G,\
    \ H, I, J, K, L)\n             (B, C, D, E, F, G, H, I, J, K, L)\n           \
    \  (C, D, E, F, G, H, I, J, K, L)\n             (D, E, F, G, H, I, J, K, L)\n\
    \             (E, F, G, H, I, J, K, L)\n             (F, G, H, I, J, K, L)\n \
    \            (G, H, I, J, K, L)\n           and 5 others\n\nerror[E0277]: can't\
    \ compare `()` with `{float}`\n  --> /tmp/tmpeok9gr__.rs:29:18\n   |\n29 |   \
    \      if grade < 3.0 {\n   |                  ^ no implementation for `() < {float}`\
    \ and `() > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>` is not\
    \ implemented for `()`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             ()\n             (A, B, C, D, E, F, G, H, I, J, K, L)\n        \
    \     (B, C, D, E, F, G, H, I, J, K, L)\n             (C, D, E, F, G, H, I, J,\
    \ K, L)\n             (D, E, F, G, H, I"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next();\n\
    \    let mut current_letter = String::from(\"E\");\n    loop {\n        if current_grade\
    \ == Some(0.0) {\n            break;\n        }\n        let mut current_letter_grade\
    \ = String::from(\"E\");\n        loop {\n            if current_grade == Some(0.0)\
    \ {\n                break;\n            }\n            let mut current_letter_grade\
    \ = current_letter_grade.chars().next().unwrap();\n            if current_grade\
    \ == Some(current_grade.unwrap()) {\n                let mut current_letter =\
    \ current_letter.chars().next().unwrap();\n            } else {\n            \
    \    let mut current_letter = String::from(\"E\");\n            }\n        }\n\
    \        letter_grades.push(current_letter_grade);\n        current_grade = grades_iter.next();\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpycjfve40.rs:29:34\n   |\n\
    29 |         if current_grade == Some(0.0) {\n   |                           \
    \       ^^^\n   |                                  |\n   |                   \
    \               expected `&f64`, found floating-point number\n   |           \
    \                       help: consider borrowing here: `&0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpycjfve40.rs:34:38\n   |\n34 |             if\
    \ current_grade == Some(0.0) {\n   |                                      ^^^\n\
    \   |                                      |\n   |                           \
    \           expected `&f64`, found floating-point number\n   |               \
    \                       help: consider borrowing here: `&0.0`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_grade = grades_copy[0];\n\
    \    let mut grades_grades_len = grades_grade as usize;\n    let mut grades_grades_grade\
    \ = grades_grade as f64;\n    let mut grades_grades_grades_len = grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grade = grades_grades_grade as f64;\n\
    \    let mut grades_grades_grades_grades_len = grades_grades_grades_grade as usize;\n\
    \    let mut grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grade as usize;\n    let\
    \ mut grades_grades_grades_grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grade as usize;\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grade as usize;\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grade\
    \ as usize;\n    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprckc13w1.rs:41:131\n   |\n\
    41 |     let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_\n   |                                       \
    \                                                                            \
    \                ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `grades_grades_grades_grades_grade` in this scope\n  --> /tmp/tmprckc13w1.rs:32:54\n\
    \   |\n32 |     let mut grades_grades_grades_grades_grades_len = grades_grades_grades_grades_grade\
    \ as usize;\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades_grades_len`\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades_grade` in this\
    \ scope\n  --> /tmp/tmprckc13w1.rs:33:54\n   |\n33 |     let mut grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grade as usize;\n   |                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `grades_grades_grades_grades_grades_len`\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades_grades_grade` in\
    \ this scope\n  --> /tmp/tmprckc13w1.rs:34:61\n   |\n34 |     let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grade as usize;\n   |                 \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades_grades_grades_len`\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades_grades_grades_grade`\
    \ in this scope\n  --> /tmp/tmprckc13w1.rs:35:61\n   |\n35 |     let mut grades_grades_grades_grades_grades_grades_len\
    \ = grades_grades_grades_grades_grades_grades_grade as usize;\n   |          \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar na"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    grades_copy.sort_unstable();\n    let mut previous_grade\
    \ = grades_copy[0];\n    let mut current_grade = grades_copy[0];\n    let mut\
    \ current_letter_grade = String::from(\"E\");\n    for grade in grades_copy {\n\
    \        if grade > previous_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_grade\
    \ = grade;\n        } else {\n            current_letter_grade = match grade {\n\
    \                0..=1 => String::from(\"D-\"),\n                1..=2 => String::from(\"\
    D\"),\n                2..=3 => String::from(\"C-\"),\n                3..=4 =>\
    \ String::from(\"C\"),\n                4..=5 => String::from(\"B-\"),\n     \
    \           5..=6 => String::from(\"B\"),\n                6..=7 => String::from(\"\
    A-\"),\n                7..=8 => String::from(\"A\"),\n                8..=9 =>\
    \ String::from(\"A+\"),\n                _ => String::from(\"E\"),\n         \
    \   };\n            current_grade = grade;\n        }\n        previous_grade\
    \ = grade;\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpkjof80r5.rs:26:17\n\
    \     |\n26   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkjof80r5.rs:37:17\n   |\n36 |             current_letter_grade\
    \ = match grade {\n   |                                          ----- this expression\
    \ has type `f64`\n37 |                 0..=1 => String::from(\"D-\"),\n   |  \
    \               ^   - this is of type `{integer}`\n   |                 |\n  \
    \ |                 expected `f64`, found integer\n   |                 help:\
    \ use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjof80r5.rs:37:21\n\
    \   |\n36 |             current_letter_grade = match grade {\n   |           \
    \                               ----- this expression has type `f64`\n37 |   \
    \              0..=1 => String::from(\"D-\"),\n   |                 -   ^\n  \
    \ |                 |   |\n   |                 |   expected `f64`, found integer\n\
    \   |                 |   help: use a float literal: `1.0`\n   |             \
    \    this is of type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjof80r5.rs:38:17\n\
    \   |\n36 |             current_letter_grade = match grade {\n   |           \
    \                               ----- this expression has type `f64`\n37 |   \
    \              0..=1 => String::from(\"D-\"),\n38 |                 1..=2 => String::from(\"\
    D\"),\n   |                 ^   - this is of type `{integer}`\n   |          \
    \       |\n   |                 expected `f64`, found integer\n   |          \
    \       help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpkjof80r5.rs:38:21\n   |\n36 |             current_letter_grade ="
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut min_grade_index = -1;\n    let\
    \ mut max_grade_index = -1;\n    let mut current_grade = grades_copy[0];\n   \
    \ let mut current_index = -1;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    \n    while current_index < grades_copy.len() {\n        if current_grade\
    \ > max_grade {\n            max_grade = current_grade;\n            max_grade_index\
    \ = current_index;\n        }\n        if current_grade < min_grade {\n      \
    \      min_grade = current_grade;\n            min_grade_index = current_index;\n\
    \        }\n        if current_grade == min_grade {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade == max_grade {\n\
    \            current_letter_grade = String::from(\"D\");\n        }\n        if\
    \ current_grade < min_grade {\n            current_letter_grade = String::from(\"\
    A-\");\n        }\n        if current_grade > max_grade {\n            current_letter_grade\
    \ = String::from(\"D-\");\n        }\n        \n        letter_grades.push(current_letter_grade);\n\
    \        \n        current_grade = grades_copy[current_index];\n        current_index\
    \ += 1;\n    }\n    \n    letter_grades.push(String::from(\"E\"));\n    \n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp4i81rrs3.rs:31:29\n\
    \   |\n31 |     let mut current_index = -1;\n   |                            \
    \ ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the following\
    \ other types implement trait `Neg`:\n             &f32\n             &f64\n \
    \            &i128\n             &i16\n             &i32\n             &i64\n\
    \             &i8\n             &isize\n           and 8 others\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp4i81rrs3.rs:29:31\n\
    \   |\n29 |     let mut max_grade_index = -1;\n   |                          \
    \     ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the\
    \ following other types implement trait `Neg`:\n             &f32\n          \
    \   &f64\n             &i128\n             &i16\n             &i32\n         \
    \    &i64\n             &i8\n             &isize\n           and 8 others\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp4i81rrs3.rs:28:31\n\
    \   |\n28 |     let mut min_grade_index = -1;\n   |                          \
    \     ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the\
    \ following other types implement trait `Neg`:\n             &f32\n          \
    \   &f64\n             &i128\n             &i16\n             &i32\n         \
    \    &i64\n             &i8\n             &isize\n           and 8 others\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_copy[0];\n    let\
    \ mut prev_grade_index = grades_copy.len() - 1;\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_grade_index = grades_copy.len() - 1;\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    while current_grade_index > 0 {\n        if current_grade\
    \ < prev_grade {\n            letter_grades.push(String::from(\"D-\"));\n    \
    \        current_grade_index = current_grade_index - 1;\n            current_grade\
    \ = grades_copy[current_grade_index];\n            current_letter_grade = String::from(\"\
    D-\");\n        } else if current_grade > prev_grade {\n            letter_grades.push(String::from(\"\
    D+\"));\n            current_grade_index = current_grade_index - 1;\n        \
    \    current_grade = grades_copy[current_grade_index];\n            current_letter_grade\
    \ = String::from(\"D+\");\n        } else {\n            letter_grades.push(String::from(\"\
    D\"));\n            current_grade_index = current_grade_index - 1;\n         \
    \   current_grade = grades_copy[current_grade_index];\n            current_letter_grade\
    \ = String::from(\"D\");\n        }\n        prev_grade = current_grade;\n   \
    \     prev_grade_index = current_grade_index;\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"D\", \"D\", \"D\", \"D\", \"D\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmplvf6b29i.rs:57:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade < 3.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"F\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmplmoengw8.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_copy[0];\n    let\
    \ mut prev_letter_grade = String::from(\"E\");\n    let mut prev_letter_grade_index\
    \ = 0;\n    let mut prev_letter_grade_index2 = 0;\n    let mut prev_letter_grade_index3\
    \ = 0;\n    let mut prev_letter_grade_index4 = 0;\n    let mut prev_letter_grade_index5\
    \ = 0;\n    let mut prev_letter_grade_index6 = 0;\n    let mut prev_letter_grade_index7\
    \ = 0;\n    let mut prev_letter_grade_index8 = 0;\n    let mut prev_letter_grade_index9\
    \ = 0;\n    let mut prev_letter_grade_index10 = 0;\n    let mut prev_letter_grade_index11\
    \ = 0;\n    let mut prev_letter_grade_index12 = 0;\n    let mut prev_letter_grade_index13\
    \ = 0;\n    let mut prev_letter_grade_index14 = 0;\n    let mut prev_letter_grade_index15\
    \ = 0;\n    let mut prev_letter_grade_index16 = 0;\n    let mut prev_letter_grade_index17\
    \ = 0;\n    let mut prev_letter_grade_index18 = 0;\n    let mut prev_letter_grade_index19\
    \ = 0;\n    let mut prev_letter_grade_index20 = 0;\n    let mut prev_letter_grade_index21\
    \ = 0;\n    let mut prev_letter_grade_index22 = 0;\n    let mut prev_letter_grade_index23\
    \ = 0;\n    let mut prev_letter_grade_index24 = 0;\n    let mut prev_letter_grade_index25\
    \ = 0;\n    let mut prev_letter_grade_index26 = 0;\n    let mut prev_letter_grade_index27\
    \ = 0;\n    let mut prev_letter_grade_index28 = 0;\n    let mut prev_letter_grade_index29\
    \ = 0;\n    let mut prev_letter_grade_index30 = 0;\n    let mut prev_letter_grade_index31\
    \ = 0;\n    let mut prev_letter_grade_index32 = 0;\n    let mut prev_letter_grade_index33\
    \ = 0;\n    let mut prev_letter_grade_index34 = 0;\n    let mut prev_letter_grade_index35\
    \ = 0;\n    let mut prev_letter_grade_index36 = 0;\n    let mut prev_letter_grade_index37\
    \ = 0;\n    let mut prev_letter_grade_index38 = 0;\n    let mut prev_letter_grade_index39\
    \ = 0;\n    let mut prev_letter_grade_index40 = 0;\n    let mut prev_letter_grade_index41\
    \ = 0;\n    let mut prev_letter_grade_index42 = 0;\n    let mut prev_letter_grade_index43\
    \ = 0;\n    let mut prev_letter_grade_index44 = 0;\n    let mut prev_letter_grade_index45\
    \ = 0;\n    let mut prev_letter_grade_index46 = 0;\n    let mut prev_letter_grade_index47\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuul3ycyr.rs:75:11\n   |\n\
    75 |     let mu\n   |           ^ help: add `;` here\n76 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuul3ycyr.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pgn2mkv.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pgn2mkv.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_pgn2mkv.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpfrflai10.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade = String::from(\"E\");\n\
    \    while gpa > 0.0 {\n        let grade = if gpa < 3.0 { String::from(\"D-\"\
    ) } else { String::from(\"D\") };\n        letter_grades.push(grade);\n      \
    \  gpa -= 3.0;\n    }\n    while gpa > 2.0 {\n        let grade = if gpa < 2.7\
    \ { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 2.7;\n    }\n    while gpa > 1.7 {\n        let grade = if gpa\
    \ < 1.3 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 1.3;\n    }\n    while gpa > 1.0 {\n        let grade = if gpa\
    \ < 0.7 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 1.0;\n    }\n    while gpa > 0.3 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.3;\n    }\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.0;\n    }\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.0;\n    }\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.0;\n    }\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.0;\n    }\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ < 0.0 { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grades.push(grade);\n\
    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpp8vodk94.rs:86:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n72 |     while gpa > 0.0 {\n   |                     - this delimiter might\
    \ not be properly closed...\n...\n76 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n86 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp8vodk94.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while current_grade\
    \ > 0.0 {\n        let mut current_letter_grade = current_letter_grade.clone();\n\
    \        if current_grade < 3.0 {\n            current_letter_grade += String::from(\"\
    +\");\n        } else if current_grade < 3.3 {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n        if current_grade < 3.7 {\n     \
    \       current_letter_grade += String::from(\"A\");\n        } else if current_grade\
    \ < 3.3 {\n            current_letter_grade += String::from(\"B\");\n        }\
    \ else if current_grade < 3.0 {\n            current_letter_grade += String::from(\"\
    C\");\n        } else if current_grade < 2.7 {\n            current_letter_grade\
    \ += String::from(\"D\");\n        } else if current_grade < 2.3 {\n         \
    \   current_letter_grade += String::from(\"E\");\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade = grades_iter.next().unwrap();\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplxugy5r0.rs:28:27\n   |\n\
    28 |     while current_grade > 0.0 {\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxugy5r0.rs:30:28\n\
    \   |\n30 |         if current_grade < 3.0 {\n   |                           \
    \ ^^^\n   |                            |\n   |                            expected\
    \ `&f64`, found floating-point number\n   |                            help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxugy5r0.rs:31:37\n\
    \   |\n31 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmplxugy5r0.rs:32:35\n   |\n32 |         } else if current_grade <\
    \ 3.3 {\n   |                                   ^^^\n   |                    \
    \               |\n   |                                   expected `&f64`, found\
    \ floating-point number\n   |                                   help: consider\
    \ borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxugy5r0.rs:33:37\n\
    \   |\n33 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmplxugy5r0.rs:35:28\n   |\n35 |         if current_grade < 3.7 {\n\
    \   |                            ^^^\n   |                            |\n   |\
    \                            expected `&f64`, found floatin"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut min_grade_index = 0;\n    let mut\
    \ max_grade_index = 0;\n    let mut min_grade_index2 = 0;\n    let mut max_grade_index2\
    \ = 0;\n    let mut min_grade_index3 = 0;\n    let mut max_grade_index3 = 0;\n\
    \    let mut min_grade_index4 = 0;\n    let mut max_grade_index4 = 0;\n    let\
    \ mut min_grade_index5 = 0;\n    let mut max_grade_index5 = 0;\n    let mut min_grade_index6\
    \ = 0;\n    let mut max_grade_index6 = 0;\n    let mut min_grade_index7 = 0;\n\
    \    let mut max_grade_index7 = 0;\n    let mut min_grade_index8 = 0;\n    let\
    \ mut max_grade_index8 = 0;\n    let mut min_grade_index9 = 0;\n    let mut max_grade_index9\
    \ = 0;\n    let mut min_grade_index10 = 0;\n    let mut max_grade_index10 = 0;\n\
    \    let mut min_grade_index11 = 0;\n    let mut max_grade_index11 = 0;\n    let\
    \ mut min_grade_index12 = 0;\n    let mut max_grade_index12 = 0;\n    let mut\
    \ min_grade_index13 = 0;\n    let mut max_grade_index13 = 0;\n    let mut min_grade_index14\
    \ = 0;\n    let mut max_grade_index14 = 0;\n    let mut min_grade_index15 = 0;\n\
    \    let mut max_grade_index15 = 0;\n    let mut min_grade_index16 = 0;\n    let\
    \ mut max_grade_index16 = 0;\n    let mut min_grade_index17 = 0;\n    let mut\
    \ max_grade_index17 = 0;\n    let mut min_grade_index18 = 0;\n    let mut max_grade_index18\
    \ = 0;\n    let mut min_grade_index19 = 0;\n    let mut max_grade_index19 = 0;\n\
    \    let mut min_grade_index20 = 0;\n    let mut max_grade_index20 = 0;\n    let\
    \ mut min_grade_index21 = 0;\n    let mut max_grade_index21 = 0;\n    let mut\
    \ min_grade_index22 = 0;\n    let mut max_grade_index22 = 0;\n    let mut min_grade_index23\
    \ = 0;\n    let mut max_grade_index23 = 0;\n    let mut min_grade_index24 = 0;\n\
    \    let mut max_grade_index24 = 0;\n    let mut min_grade_index25 = 0;\n    let\
    \ mut max_grade_index25 = 0;\n    let mut min_grade_index26 = 0;\n    let mut\
    \ max_grade_index26 = 0;\n    let mut min_grade_index27 = 0;\n    let mut \n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpacboi4eu.rs:82:1\n\
    \   |\n82 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut current_grade = max_grade;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        if grade > current_grade {\n       \
    \     current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade < min_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else {\n \
    \           if grade == current_grade {\n                let letter_grade = match\
    \ current_grade {\n                    4.0 => \"A+\",\n                    _ =>\
    \ \"A\",\n                };\n                letter_grades.push(letter_grade);\n\
    \            } else {\n                let letter_grade = match current_grade\
    \ {\n                    _ => \"A\",\n                    3.7 => \"A\",\n    \
    \                _ => \"A\",\n                };\n                letter_grades.push(letter_grade);\n\
    \            }\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpcou9cecp.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpcou9cecp.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcou9cecp.rs:30:20\n   |\n30 |\
    \         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n30\
    \ |         if grade > *current_grade {\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcou9cecp.rs:31:29\n   |\n27 |     let mut current_grade\
    \ = max_grade;\n   |                             --------- expected due to this\
    \ value\n...\n31 |             current_grade = grade;\n   |                  \
    \           ^^^^^\n   |                             |\n   |                  \
    \           expected `&f64`, found `f64`\n   |                             help:\
    \ consider borrowing here: `&grade`\n\nerror[E0308]: mismatched types\n  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_s2h9poi.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while grades_copy.len()\
    \ > 0 {\n        if grades_copy.len() == 1 {\n            letter_grades.push(current_letter_grade);\n\
    \            break;\n        }\n        let mut current_grade = grades_copy.first();\n\
    \        let mut current_letter_grade = String::from(\"E\");\n        for grade\
    \ in grades_copy {\n            if grade < current_grade {\n                current_grade\
    \ = grade;\n                current_letter_grade = String::from(\"E\");\n    \
    \            break;\n            }\n            if grade == current_grade {\n\
    \                current_letter_grade += String::from(\"+\");\n            }\n\
    \            if grade > current_grade {\n                current_letter_grade\
    \ += String::from(\"-\");\n            }\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        grades_copy.pop();\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoe7i4l95.rs:36:24\n   |\n\
    36 |             if grade < current_grade {\n   |                        ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpoe7i4l95.rs:37:33\n   |\n33 |         let mut current_grade = grades_copy.first();\n\
    \   |                                 ------------------- expected due to this\
    \ value\n...\n37 |                 current_grade = grade;\n   |              \
    \                   ^^^^^ expected enum `Option`, found `f64`\n   |\n   = note:\
    \ expected enum `Option<&f64>`\n              found type `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoe7i4l95.rs:41:25\n   |\n41 |             if\
    \ grade == current_grade {\n   |                         ^^^^^^^^^^^^^ expected\
    \ `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoe7i4l95.rs:42:41\n\
    \   |\n42 |                 current_letter_grade += String::from(\"+\");\n   |\
    \                                         ^^^^^^^^^^^^^^^^^\n   |            \
    \                             |\n   |                                        \
    \ expected `&str`, found struct `String`\n   |                               \
    \          help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoe7i4l95.rs:44:24\n   |\n44 |             if\
    \ grade > current_grade {\n   |                        ^^^^^^^^^^^^^ expected\
    \ `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoe7i4l95.rs:45:41\n\
    \   |\n45 |                 current_letter_grade += String::from(\"-\");\n   |\
    \                                         ^^^^^^^^^^^^^^^^^\n   |            \
    \                             |\n   |                                        \
    \ expected `&str`, found struct `String`\n   |                               \
    \          help: consider borrowing here: `&Str"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    for grade in grades_copy {\n        if grade > current_grade {\n        \
    \    letter_grades.push(String::from(\"A+\"));\n            current_grade = grade;\n\
    \        } else if grade < current_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n            current_grade = grade;\n        } else {\n            letter_grades.push(String::from(\"\
    B+\"));\n            current_grade = grade;\n        }\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpq9rgpqn5.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpiguf_yct.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut grades_reversed = grades_sorted.clone();\n    grades_reversed.reverse();\n\
    \    let mut grades_reversed_sorted = grades_reversed.clone();\n    grades_reversed_sorted.sort();\n\
    \    let mut grades_reversed_sorted_copy = grades_reversed_sorted.clone();\n \
    \   grades_reversed_sorted_copy.sort();\n    let mut grades_reversed_sorted_copy_copy\
    \ = grades_reversed_sorted_copy.clone();\n    grades_reversed_sorted_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy = grades_reversed_sorted_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy.pop();\n    let mut grades_reversed_sorted_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy.clone();\n    grades_reversed_sorted_copy_copy_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy_copy_copy = grades_reversed_sorted_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy.pop();\n    let mut\
    \ grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy = grades_reversed_sorted_copy_copy_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy.pop();\n    let\
    \ mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy = grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \    grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.pop();\n\
    \    let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppe3btwq2.rs:51:66\n   |\n\
    51 |     let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n52 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `grades_reversed_sorted_copy_copy_copy_copy_copy_copy` in this scope\n  -->\
    \ /tmp/tmppe3btwq2.rs:40:5\n   |\n40 |     grades_reversed_sorted_copy_copy_copy_copy_copy_copy.pop();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `grades_reversed_sorted_copy_copy_copy_copy_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_sorted_copy_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmppe3btwq2.rs:41:73\n   |\n41 |     let mut grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy_copy_copy_copy.clone();\n   |      \
    \                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_sorted_copy_copy_copy_copy_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmppe3btwq2.rs:43:78\n   |\n43 | ...y_copy_copy_copy_copy_copy\
    \ = grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmppe3btwq2.rs:44:5\n   |\n44 |     grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy_copy.pop();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_sorted_copy_copy_copy_copy_copy_copy_copy_copy`\n\
    \nerror[E0"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut current_grade = grades.iter().sum().unwrap();\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    while current_grade > 0.0 {\n        if current_grade\
    \ >= max_grade {\n            current_letter_grade = String::from(\"D-\");\n \
    \       } else if current_grade >= min_grade {\n            current_letter_grade\
    \ = String::from(\"D\");\n        } else if current_grade >= 3.0 {\n         \
    \   current_letter_grade = String::from(\"C-\");\n        } else if current_grade\
    \ >= 2.0 {\n            current_letter_grade = String::from(\"C\");\n        }\
    \ else if current_grade >= 1.7 {\n            current_letter_grade = String::from(\"\
    B-\");\n        } else if current_grade >= 1.0 {\n            current_letter_grade\
    \ = String::from(\"B\");\n        } else if current_grade >= 0.7 {\n         \
    \   current_letter_grade = String::from(\"B-\");\n        } else if current_grade\
    \ >= 0.3 {\n            current_letter_grade = String::from(\"B\");\n        }\
    \ else if current_grade >= 0.0 {\n            current_letter_grade = String::from(\"\
    B+\");\n        } else if current_grade < 0.0 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        } else {\n            current_letter_grade =\
    \ String::from(\"A+\");\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade -= max_grade;\n    }\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmptdke64c3.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmptdke64c3.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    for i in grades_copy.iter() {\n       \
    \ if i < min_grade {\n            min_grade = i;\n        }\n        if i > max_grade\
    \ {\n            max_grade = i;\n        }\n    }\n    let mut grades_range =\
    \ max_grade - min_grade;\n    for i in grades_copy.iter() {\n        let mut grade\
    \ = i - min_grade;\n        if grade >= grades_range {\n            grade -= grades_range;\n\
    \            letter_grades.push(String::from(\"D-\"));\n        }\n        if\
    \ grade < grades_range / 2 {\n            grade += grades_range;\n           \
    \ letter_grades.push(String::from(\"D+\"));\n        }\n        if grade < grades_range\
    \ / 3 {\n            grade += grades_range;\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n        if grade < grades_range / 4 {\n            grade +=\
    \ grades_range;\n            letter_grades.push(String::from(\"D+\"));\n     \
    \   }\n        if grade < grades_range / 5 {\n            grade += grades_range;\n\
    \            letter_grades.push(String::from(\"D-\"));\n        }\n        if\
    \ grade < grades_range / 6 {\n            grade += grades_range;\n           \
    \ letter_grades.push(String::from(\"D\"));\n        }\n        if grade < grades_range\
    \ / 7 {\n            grade += grades_range;\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n        if grade < grades_range / 8 {\n            grade +=\
    \ grades_range;\n            letter_grades.push(String::from(\"D-\"));\n     \
    \   }\n        if grade < grades_range / 9 {\n            grade += grades_range;\n\
    \            letter_grades.push(String::from(\"D\"));\n        }\n        if grade\
    \ < grades_range / 10 {\n            grade += grades_range;\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n        if grade < grades_range / 11 {\n            grade\
    \ += grades_range;\n            letter_grades.push(String::from(\"D-\"));\n  \
    \      }\n        if grade < grades_range / 12 {\n            grade += grades_range;\n\
    \            letter_grades.push(String::from(\"D\"));\n        }\n        if grade\
    \ \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpyigwco5v.rs:98:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n37 |     for i in grades_copy.iter() {\n   |                            \
    \     - this delimiter might not be properly closed...\n...\n88 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n98 | }\n   |   ^\n\n\
    error: expected `{`, found `}`\n  --> /tmp/tmpyigwco5v.rs:88:1\n   |\n87 |   \
    \      if grade \n   |         -- this `if` expression has a condition, but no\
    \ block\n88 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyigwco5v.rs:29:16\n   |\n29 |         if i < min_grade {\n   |     \
    \           ^^^^^^^^^\n   |                |\n   |                expected `&f64`,\
    \ found `f64`\n   |                help: consider borrowing here: `&min_grade`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyigwco5v.rs:30:25\n   |\n26 |\
    \     let mut min_grade = grades_copy[0];\n   |                         --------------\
    \ expected due to this value\n...\n30 |             min_grade = i;\n   |     \
    \                    ^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n30 |             min_grade = *i;\n   |                   \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyigwco5v.rs:32:16\n\
    \   |\n32 |         if i > max_grade {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&f64`, found `f64`\n   |     \
    \           help: consider borrowing here: `&max_grade`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyigwco5v.rs:33:25\n   |\n27 |     let mut max_grade = grades_copy[0];\n\
    \   |                         -------------- expected due to this value\n...\n\
    33 |             max_grade = i;\n   |                         ^ expected `f64`,\
    \ found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n33 |    \
    \         max_grade = *i;\n   |                         +\n\nerror[E0277]: cannot\
    \ divide `f64` by `{integer}`\n  --> /tmp/tmpyigwco5v.rs:43:33\n  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2553shs2.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    for grade in grades {\n        let letter_grade = if grade >= total_grade\
    \ {\n            String::from(\"D+\")\n        } else if grade <= total_grade\
    \ {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    C\")\n        };\n        total_grade -= grade;\n        total_letter_grade +=\
    \ letter_grade;\n        letter_grades.push(letter_grade);\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8qy_0qjv.rs:36:31\n   |\n\
    36 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    grades_string.sort();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_string[0];\n\
    \    for grade in grades_string {\n        if grade > current_grade {\n      \
    \      letter_grades.push(String::from(\"B-\"));\n            current_grade =\
    \ grade;\n        } else if grade < current_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            current_grade\
    \ = grade;\n        } else {\n            letter_grades.push(String::from(\"B-\"\
    ));\n            current_grade = grade;\n        }\n    }\n    letter_grades.push(String::from(\"\
    B-\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpnudj37ci.rs:27:29\n\
    \   |\n27 |     let mut current_grade = grades_string[0];\n   |              \
    \               ^^^^^^^^^^^^^^^^\n   |                             |\n   |   \
    \                          move occurs because value has type `String`, which\
    \ does not implement the `Copy` trait\n   |                             help:\
    \ consider borrowing here: `&grades_string[0]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while let Some(grade)\
    \ = grades_iter.next() {\n        if grade > current_grade {\n            current_letter_grade\
    \ = String::from(\"D-\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade = String::from(\"D+\");\n        } else {\n       \
    \     current_letter_grade = String::from(\"D\");\n        }\n        current_grade\
    \ = grade;\n        letter_grades.push(current_letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"D+\", \"D+\", \"D-\", \"D-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]`', /tmp/tmp68vf85jl.rs:44:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpi8tevvk4.rs:48:1\n   |\n47 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    48 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n47 |     let mut grades_copy = grades_copy.iter().cloned().collect::<Vec>\n\
    \   |                                                                    +\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp3ed_2zfk.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    while current_grade\
    \ != 0.0 {\n        let mut current_letter_grade = String::from(\"E\");\n    \
    \    \n        if current_grade < 3.0 {\n            if current_grade < current_letter_grade\
    \ {\n                current_letter_grade = String::from(\"A+\");\n          \
    \  }\n        }\n        \n        if current_grade < 3.3 {\n            if current_grade\
    \ < current_letter_grade {\n                current_letter_grade = String::from(\"\
    A\");\n            }\n        }\n        \n        if current_grade < 3.7 {\n\
    \            if current_grade < current_letter_grade {\n                current_letter_grade\
    \ = String::from(\"A-\");\n            }\n        }\n        \n        if current_grade\
    \ < 4.0 {\n            if current_grade < current_letter_grade {\n           \
    \     current_letter_grade = String::from(\"B+\");\n            }\n        }\n\
    \        \n        if current_grade < 4.3 {\n            if current_grade < current_letter_grade\
    \ {\n                current_letter_grade = String::from(\"B\");\n           \
    \ }\n        }\n        \n        if current_grade < 4.7 {\n            if current_grade\
    \ < current_letter_grade {\n                current_letter_grade = String::from(\"\
    B-\");\n            }\n        }\n        \n        if current_grade < 5.0 {\n\
    \            if current_grade < current_letter_grade {\n                current_letter_grade\
    \ = String::from(\"C+\");\n            }\n        }\n        \n        if current_grade\
    \ < 5.3 {\n            if current_grade < current_letter_grade {\n           \
    \     current_letter_grade = String::from(\"C\");\n            }\n        }\n\
    \        \n        if current_grade < 5.7 {\n            if current_grade < current_letter_grade\
    \ {\n                current_letter_grade = String::from(\"C-\");\n          \
    \  }\n        }\n        \n        if current_grade < 6.0 {\n            if current_grade\
    \ < current_letter_grade {\n                current_letter_grade = String::from(\"\
    D+\");\n            }\n        }\n        \n        if current_grade < 6.3 {\n\
    \            if current_grade < current_letter_grade {\n                current_letter_grade\
    \ = String::from(\"D\");\n            }\n        }\n        \n        if current_grade\
    \ < 6.7 {\n            if current_grade < current_letter_grade {\n           \
    \     current_letter_grade = String::from(\"D-\");\n            }\n        }\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpheez33yv.rs:113:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n29  |     while current_grade != 0.0 {\n    |                           \
    \     - this delimiter might not be properly closed...\n...\n103 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n113 | }\n    |\
    \   ^\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpheez33yv.rs:29:25\n\
    \   |\n29 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpheez33yv.rs:32:28\n   |\n32 |         if current_grade < 3.0 {\n   |\
    \                            ^^^\n   |                            |\n   |    \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpheez33yv.rs:33:32\n   |\n33 |             if\
    \ current_grade < current_letter_grade {\n   |                               \
    \ ^^^^^^^^^^^^^^^^^^^^ expected `&f64`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpheez33yv.rs:38:28\n   |\n38 |         if current_grade\
    \ < 3.3 {\n   |                            ^^^\n   |                         \
    \   |\n   |                            expected `&f64`, found floating-point number\n\
    \   |                            help: consider borrowing here: `&3.3`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpheez33yv.rs:39:32\n   |\n39 |             if\
    \ current_grade < current_letter_grade {\n   |                               \
    \ ^^^^^^^^^^^^^^^^^^^^ expected `&f64`, "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sorted = grades_copy.clone();\n\
    \    grades_sorted.sort();\n    let mut grades_sorted_len = grades_sorted.len();\n\
    \    let mut grades_sorted_copy = grades_sorted.clone();\n    let mut grades_sorted_copy_len\
    \ = grades_sorted_copy.len();\n    let mut grades_sorted_copy_len2 = grades_sorted_copy_len.clone();\n\
    \    let mut grades_sorted_copy_len3 = grades_sorted_copy_len2.clone();\n    let\
    \ mut grades_sorted_copy_len4 = grades_sorted_copy_len3.clone();\n    let mut\
    \ grades_sorted_copy_len5 = grades_sorted_copy_len4.clone();\n    let mut grades_sorted_copy_len6\
    \ = grades_sorted_copy_len5.clone();\n    let mut grades_sorted_copy_len7 = grades_sorted_copy_len6.clone();\n\
    \    let mut grades_sorted_copy_len8 = grades_sorted_copy_len7.clone();\n    let\
    \ mut grades_sorted_copy_len9 = grades_sorted_copy_len8.clone();\n    let mut\
    \ grades_sorted_copy_len10 = grades_sorted_copy_len9.clone();\n    let mut grades_sorted_copy_len11\
    \ = grades_sorted_copy_len10.clone();\n    let mut grades_sorted_copy_len12 =\
    \ grades_sorted_copy_len11.clone();\n    let mut grades_sorted_copy_len13 = grades_sorted_copy_len12.clone();\n\
    \    let mut grades_sorted_copy_len14 = grades_sorted_copy_len13.clone();\n  \
    \  let mut grades_sorted_copy_len15 = grades_sorted_copy_len14.clone();\n    let\
    \ mut grades_sorted_copy_len16 = grades_sorted_copy_len15.clone();\n    let mut\
    \ grades_sorted_copy_len17 = grades_sorted_copy_len16.clone();\n    let mut grades_sorted_copy_len18\
    \ = grades_sorted_copy_len17.clone();\n    let mut grades_sorted_copy_len19 =\
    \ grades_sorted_copy_len18.clone();\n    let mut grades_sorted_copy_len20 = grades_sorted_copy_len19.clone();\n\
    \    let mut grades_sorted_copy_len21 = grades_sorted_copy_len20.clone();\n  \
    \  let mut grades_sorted_copy_len22 = grades_sorted_copy_len21.clone();\n    let\
    \ mut grades_sorted_copy_len23 = grades_sorted_copy_len22.clone();\n    let mut\
    \ grades_sorted_copy_len24 = grades_sorted_copy_len23.clone();\n    let mut grades_sorted_copy_len25\
    \ = grades_sorted_copy_len24.clone();\n    let mut grades_sorted_copy_\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4gootfr7.rs:55:32\n   |\n\
    55 |     let mut grades_sorted_copy_\n   |                                ^ help:\
    \ add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n   --> /tmp/tmp4gootfr7.rs:27:19\n    |\n27  |\
    \     grades_sorted.sort();\n    |                   ^^^^ the trait `Ord` is not\
    \ implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4gootfr7.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_len = grades_copy.len();\n    let mut grades_index = 0;\n\
    \    let mut grades_sum = 0.0;\n    let mut grades_average = 0.0;\n    let mut\
    \ grades_letter_grades = Vec::new();\n    while grades_index < grades_len {\n\
    \        let grade = grades_copy[grades_index];\n        grades_sum += grade;\n\
    \        grades_average += grade;\n        grades_letter_grades.push(String::from(\n\
    \            match grade {\n                0.0 => \"E\",\n                1.0\
    \ => \"D+\",\n                2.0 => \"D\",\n                3.0 => \"D-\",\n\
    \                4.0 => \"C+\",\n                5.0 => \"C\",\n             \
    \   6.0 => \"C-\",\n                7.0 => \"B+\",\n                8.0 => \"\
    B\",\n                9.0 => \"B-\",\n                10.0 => \"A+\",\n      \
    \          11.0 => \"A\",\n                12.0 => \"A-\",\n                _\
    \ => \"\".to_string(),\n            },\n        ));\n        grades_index += 1;\n\
    \    }\n    grades_average /= grades_len;\n    grades_letter_grades.push(String::from(\n\
    \        match grades_average {\n            0.0 => \"E\",\n            1.0 =>\
    \ \"D+\",\n            2.0 => \"D\",\n            3.0 => \"D-\",\n           \
    \ 4.0 => \"C+\",\n            5.0 => \"C\",\n            6.0 => \"C-\",\n    \
    \        7.0 => \"B+\",\n            8.0 => \"B\",\n            9.0 => \"B-\"\
    ,\n            10.0 => \"A+\",\n            11.0 => \"A\",\n            12.0 =>\
    \ \"A-\",\n            _ => \"\".to_string(),\n        },\n    ));\n    grades_letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqye6_qp_.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmpqye6_qp_.rs:50:22\n   |\n36 | /\
    \             match grade {\n37 | |                 0.0 => \"E\",\n38 | |    \
    \             1.0 => \"D+\",\n39 | |                 2.0 => \"D\",\n...  |\n49\
    \ | |                 12.0 => \"A-\",\n   | |                         ---- this\
    \ and all prior arms are found to be of type `&str`\n50 | |                 _\
    \ => \"\".to_string(),\n   | |                      ^^^^^^^^^^^^^^\n   | |   \
    \                   |\n   | |                      expected `&str`, found struct\
    \ `String`\n   | |                      help: consider borrowing here: `&\"\"\
    .to_string()`\n51 | |             },\n   | |_____________- `match` arms have incompatible\
    \ types\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpqye6_qp_.rs:55:20\n\
    \   |\n55 |     grades_average /= grades_len;\n   |                    ^^ no implementation\
    \ for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpqye6_qp_.rs:71:18\n\
    \   |\n57 | /         match grades_average {\n58 | |             0.0 => \"E\","
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    loop {\n       \
    \ if current_grade > 0.0 {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grades_iter.next().unwrap();\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        if current_grade < 0.0 {\n      \
    \      current_grade = grades_iter.next().unwrap();\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        if current_grade == 0.0 {\n     \
    \       current_letter_grade = String::from(\"D\");\n        }\n        if current_grade\
    \ < 3.0 {\n            current_letter_grade = String::from(\"C\");\n        }\n\
    \        if current_grade < 3.7 {\n            current_letter_grade = String::from(\"\
    B\");\n        }\n        if current_grade < 4.0 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade < 4.3 {\n      \
    \      current_letter_grade = String::from(\"A\");\n        }\n        if current_grade\
    \ < 4.7 {\n            current_letter_grade = String::from(\"A\");\n        }\n\
    \        if current_grade < 5.0 {\n            current_letter_grade = String::from(\"\
    A\");\n        }\n        if current_grade < 5.3 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade < 5.7 {\n      \
    \      current_letter_grade = String::from(\"A\");\n        }\n        if current_grade\
    \ < 6.0 {\n            current_letter_grade = String::from(\"A\");\n        }\n\
    \        if current_grade < 6.3 {\n            current_letter_grade = String::from(\"\
    A\");\n        }\n        if current_grade < 6.7 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade < 7.0 {\n      \
    \      current_letter_grade = String::from(\"A\");\n        }\n        if current_grade\
    \ < 7.3 {\n            current_letter_grade = String::from(\"A\");\n        }\n\
    \        if current_grade < 7.7 {\n            current_letter_grade = String::from(\"\
    A\");\n        }\n        if current_grade < 8.0 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        }\n        if current_grade < 8.3 {\n      \
    \      current_letter_grade = String::from(\"A\");\n        }\n        if current_grade\
    \ < 8.7 {\n            current_letter_grade = String::from(\"A\");\n        }\n\
    \        if current_grade < \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp25sfutw2.rs:103:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n28  |     loop {\n    |          - this delimiter might not be properly closed...\n\
    ...\n93  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n103 | }\n    |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp25sfutw2.rs:93:1\n\
    \   |\n93 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp25sfutw2.rs:29:28\n   |\n29 |         if current_grade > 0.0 {\n\
    \   |                            ^^^\n   |                            |\n   |\
    \                            expected `&f64`, found floating-point number\n  \
    \ |                            help: consider borrowing here: `&0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp25sfutw2.rs:34:28\n   |\n34 |         if current_grade\
    \ < 0.0 {\n   |                            ^^^\n   |                         \
    \   |\n   |                            expected `&f64`, found floating-point number\n\
    \   |                            help: consider borrowing here: `&0.0`\n\nerror[E0277]:\
    \ can't compare `&f64` with `{float}`\n  --> /tmp/tmp25sfutw2.rs:38:26\n   |\n\
    38 |         if current_grade == 0.0 {\n   |                          ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp25sfutw2.rs:41:28\n   |\n41 |         if current_grade < 3.0 {\n   |\
    \                            ^^^\n   |                            |\n   |    \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  -"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort();\n    let mut letter_grades = vec![];\n    let mut current_grade\
    \ = grades_sorted[0];\n    let mut current_letter = String::from(\"E\");\n   \
    \ for grade in grades_sorted {\n        if grade > current_grade {\n         \
    \   current_letter = String::from(\"E\");\n            current_grade = grade;\n\
    \        } else if grade == current_grade {\n            current_letter = String::from(current_letter.chars().next().unwrap().to_string());\n\
    \        }\n        letter_grades.push(current_letter);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp8qwtgdw7.rs:25:19\n\
    \    |\n25  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut current_grade = max_grade;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        if grade > current_grade {\n       \
    \     current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade < min_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade = String::from(\n     \
    \           match current_grade {\n                    4.0  => \"A+\",\n     \
    \               3.7  => \"A\",\n                    3.3  => \"A-\",\n        \
    \            3.0  => \"B+\",\n                    2.7  => \"B\",\n           \
    \         2.3  => \"B-\",\n                    2.0  => \"C+\",\n             \
    \       1.7  => \"C\",\n                    1.3  => \"C-\",\n                \
    \    1.0  => \"D+\",\n                    0.7  => \"D\",\n                   \
    \ 0.0  => \"D-\",\n                    0.0  => \"E\",\n                }\n   \
    \         );\n        }\n        letter_grades.push(current_letter_grade);\n \
    \   }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp69mvkh43.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp69mvkh43.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp69mvkh43.rs:30:20\n   |\n30 |\
    \         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n30\
    \ |         if grade > *current_grade {\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp69mvkh43.rs:31:29\n   |\n27 |     let mut current_grade\
    \ = max_grade;\n   |                             --------- expected due to this\
    \ value\n...\n31 |             current_grade = grade;\n   |                  \
    \           ^^^^^\n   |                             |\n   |                  \
    \           expected `&f64`, found `f64`\n   |                             help:\
    \ consider borrowing here: `&grade`\n\nerror[E0308]: mismatched types\n  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut current_grade: f64 = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade: String;\n    \n    while current_grade != 0.0\
    \ {\n        let mut current_letter_grade: String;\n        \n        if current_grade\
    \ < 3.0 {\n            current_letter_grade = String::from(\"A+\");\n        }\
    \ else if current_grade < 3.7 {\n            current_letter_grade = String::from(\"\
    A\");\n        } else if current_grade < 4.0 {\n            current_letter_grade\
    \ = String::from(\"A-\");\n        } else if current_grade < 4.7 {\n         \
    \   current_letter_grade = String::from(\"B+\");\n        } else if current_grade\
    \ < 5.0 {\n            current_letter_grade = String::from(\"B\");\n        }\
    \ else if current_grade < 5.7 {\n            current_letter_grade = String::from(\"\
    B-\");\n        } else if current_grade < 6.0 {\n            current_letter_grade\
    \ = String::from(\"C+\");\n        } else if current_grade < 6.7 {\n         \
    \   current_letter_grade = String::from(\"C\");\n        } else if current_grade\
    \ < 7.0 {\n            current_letter_grade = String::from(\"C-\");\n        }\
    \ else if current_grade < 7.7 {\n            current_letter_grade = String::from(\"\
    D+\");\n        } else if current_grade < 8.0 {\n            current_letter_grade\
    \ = String::from(\"D\");\n        } else if current_grade < 8.7 {\n          \
    \  current_letter_grade = String::from(\"D-\");\n        } else if current_grade\
    \ < 9.0 {\n            current_letter_grade = String::from(\"E\");\n        }\
    \ else {\n            current_letter_grade = String::from(\"F\");\n        }\n\
    \        \n        grades_vec.push(current_letter_grade);\n        \n        current_grade\
    \ = grades_iter.next().unwrap();\n    }\n    \n    grades_vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpofhs7lwm.rs:26:34\n   |\n\
    26 |     let mut current_grade: f64 = grades_iter.next().unwrap();\n   |     \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                            |\n   |                            expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     let\
    \ mut current_grade: f64 = *grades_iter.next().unwrap();\n   |               \
    \                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpofhs7lwm.rs:64:25\n\
    \   |\n26 |     let mut current_grade: f64 = grades_iter.next().unwrap();\n  \
    \ |                            --- expected due to this type\n...\n64 |      \
    \   current_grade = grades_iter.next().unwrap();\n   |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n64 |         current_grade = *grades_iter.next().unwrap();\n\
    \   |                         +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.pop().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while grades_copy.len()\
    \ > 0 {\n        let mut current_grade = grades_copy.pop().unwrap();\n       \
    \ let mut current_letter_grade = String::from(\"E\");\n        if current_grade\
    \ < current_grade {\n            current_letter_grade = String::from(\"E\");\n\
    \        } else if current_grade < current_grade + 0.3 {\n            current_letter_grade\
    \ = String::from(\"A-\");\n        } else if current_grade < current_grade + 0.4\
    \ {\n            current_letter_grade = String::from(\"A\");\n        } else if\
    \ current_grade < current_grade + 0.5 {\n            current_letter_grade = String::from(\"\
    B+\");\n        } else if current_grade < current_grade + 0.6 {\n            current_letter_grade\
    \ = String::from(\"B\");\n        } else if current_grade < current_grade + 0.7\
    \ {\n            current_letter_grade = String::from(\"B-\");\n        } else\
    \ if current_grade < current_grade + 0.8 {\n            current_letter_grade =\
    \ String::from(\"C+\");\n        } else if current_grade < current_grade + 0.9\
    \ {\n            current_letter_grade = String::from(\"C\");\n        } else if\
    \ current_grade < current_grade + 1.0 {\n            current_letter_grade = String::from(\"\
    C-\");\n        } else if current_grade < current_grade + 1.1 {\n            current_letter_grade\
    \ = String::from(\"D+\");\n        } else if current_grade < current_grade + 1.2\
    \ {\n            current_letter_grade = String::from(\"D\");\n        } else if\
    \ current_grade < current_grade + 1.3 {\n            current_letter_grade = String::from(\"\
    D-\");\n        } else if current_grade < current_grade + 1.4 {\n            current_letter_grade\
    \ = String::from(\"F\");\n        } else {\n            current_letter_grade =\
    \ String::from(\"F\");\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A-\", \"A-\", \"A-\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]`', /tmp/tmp96vqaypk.rs:67:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::new();\n    let mut current_gpa =\
    \ grades_copy.clone();\n    let mut current_gpa_letter = String::new();\n    \n\
    \    while current_grade.len() > 0 {\n        let mut current_gpa_copy = current_gpa.clone();\n\
    \        let mut current_letter_grade_copy = current_letter_grade.clone();\n \
    \       let mut current_gpa_letter_copy = current_gpa_letter.clone();\n      \
    \  \n        while current_gpa_copy.len() > 0 {\n            let mut current_gpa_copy_copy\
    \ = current_gpa_copy.clone();\n            let mut current_letter_grade_copy_copy\
    \ = current_letter_grade_copy.clone();\n            let mut current_gpa_letter_copy_copy\
    \ = current_gpa_letter_copy.clone();\n            \n            if current_gpa_copy_copy.len()\
    \ == 0 {\n                break;\n            }\n            \n            if\
    \ current_gpa_copy_copy.len() == 1 {\n                current_gpa_copy_copy.pop();\n\
    \                current_letter_grade_copy_copy.pop();\n                current_gpa_letter_copy_copy.pop();\n\
    \            }\n            \n            if current_gpa_copy_copy.len() > 1 {\n\
    \                let mut current_gpa_copy_copy_copy = current_gpa_copy_copy.clone();\n\
    \                let mut current_letter_grade_copy_copy_copy = current_letter_grade_copy_copy.clone();\n\
    \                let mut current_gpa_letter_copy_copy_copy = current_gpa_letter_copy_copy.clone();\n\
    \                \n                let mut current_gpa_copy_copy_copy_copy = current_gpa_copy_copy_copy.clone();\n\
    \                let mut current_letter_grade_copy_copy_copy_copy = current_letter_grade_copy_copy_copy.clone();\n\
    \                let mut current_gpa_letter_copy_copy_copy_copy = current_gpa_letter_copy_copy_copy.clone();\n\
    \                \n                let mut current_gpa_copy_copy_copy_copy_copy_copy\
    \ = current_gpa_copy_copy_copy_copy.clone();\n                let mut current_letter_grade_copy_copy_copy_copy_copy\
    \ = current_letter_grade_copy_copy_copy_copy.clone();\n                let mut\
    \ current_gpa_letter_copy_copy_copy_copy_copy = current_gpa_letter_copy_copy_copy_copy.clone();\n\
    \                \n                let mut current_gpa_copy_copy_copy_copy_copy_copy\
    \ = current_gpa_copy_copy_copy_copy_copy.clone();\n                let mut current_letter_grade_copy_copy_copy_copy_copy_copy\
    \ = current_letter_grade_copy_copy_copy_copy_copy_copy.clone();\n            \
    \    let mut current_gpa_letter_copy_copy_copy_copy_copy_copy_copy = current_gpa_letter_copy_copy_copy_copy_copy_copy_copy.clone();\n\
    \                \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpilnwwoa0.rs:78:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n31 |     while current_grade.len() > 0 {\n   |                          \
    \         - unclosed delimiter\n...\n36 |         while current_gpa_copy.len()\
    \ > 0 {\n   |                                          - unclosed delimiter\n\
    ...\n51 |             if current_gpa_copy_copy.len() > 1 {\n   |             \
    \                                   - this delimiter might not be properly closed...\n\
    ...\n68 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    78 | }\n   |   ^\n\nerror[E0425]: cannot find value `current_gpa_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmpilnwwoa0.rs:64:69\n   |\n64 |                 let\
    \ mut current_gpa_copy_copy_copy_copy_copy_copy = current_gpa_copy_copy_copy_copy_copy.clone();\n\
    \   |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `current_gpa_copy_copy_copy_copy`\n\
    \nerror[E0425]: cannot find value `current_letter_grade_copy_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmpilnwwoa0.rs:65:78\n   |\n65 |                 let\
    \ mut current_letter_grade_copy_copy_copy_copy_copy_copy = current_letter_grade_copy_copy_copy_copy_copy_copy.clone();\n\
    \   |                                                                        \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `current_letter_grade_copy_copy_copy_copy_copy`\n\
    \nerror[E0425]: cannot find value `current_gpa_letter_copy_copy_copy_copy_copy_copy_copy`\
    \ in this scope\n  --> /tmp/tmpilnwwoa0.rs:66:81\n   |\n66 | ..._copy_copy_copy_copy_copy_copy\
    \ = current_gpa_letter_copy_copy_copy_copy_copy_copy_copy.clone();\n   |     \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists:"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut total_grade: f64 = 0.0;\n    for grade in grades {\n        total_grade\
    \ += grade;\n    }\n    let mut total_grade_div: f64 = total_grade / grades.len();\n\
    \    let mut total_grade_div_pow: f64 = total_grade_div;\n    for grade in grades\
    \ {\n        let mut grade_div: f64 = grade / total_grade_div_pow;\n        let\
    \ mut grade_div_pow: f64 = grade_div;\n        for _ in 0..grades.len() {\n  \
    \          grade_div_pow *= grade_div;\n        }\n        if grade < total_grade\
    \ {\n            grades_vec.push(String::from(\"E\"));\n        } else {\n   \
    \         let mut grade_div_pow_div: f64 = grade_div_pow;\n            for _ in\
    \ 0..grades.len() {\n                grade_div_pow_div *= grade_div_pow;\n   \
    \         }\n            let mut grade_div_pow_div_pow: f64 = grade_div_pow_div;\n\
    \            for _ in 0..grades.len() {\n                grade_div_pow_div_pow\
    \ *= grade_div_pow_div;\n            }\n            let mut grade_div_pow_div_pow_pow:\
    \ f64 = grade_div_pow_div_pow;\n            for _ in 0..grades.len() {\n     \
    \           grade_div_pow_div_pow_pow *= grade_div_pow_div_pow;\n            }\n\
    \            let mut grade_div_pow_div_pow_pow_pow: f64 = grade_div_pow_div_pow_pow;\n\
    \            for _ in 0..grades.len() {\n                grade_div_pow_div_pow_pow_pow\
    \ *= grade_div_pow_div_pow_pow;\n            }\n            let mut grade_div_pow_div_pow_pow_pow_pow:\
    \ f64 = grade_div_pow_div_pow_pow_pow;\n            for _ in 0..grades.len() {\n\
    \                grade_div_pow_div_pow_pow_pow_pow *= grade_div_pow_div_pow_pow_pow;\n\
    \            }\n            let mut grade_div_pow_div_pow_pow_pow_pow_pow: f64\
    \ = grade_div_pow_div_pow_pow_pow_pow;\n            for _ in 0..grades.len() {\n\
    \                grade_div_pow_div_pow_pow_pow_pow_pow *= grade_div_pow_div_pow_pow_pow_pow;\n\
    \            }\n            let mut grade_div_pow_div_pow_pow_pow_pow_pow_pow_pow:\
    \ f64 = grade_div_pow_div_pow_pow_pow_pow_pow;\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1c3wk6gn.rs:76:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n31 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n39 |         } else {\n   |                - this delimiter might not be\
    \ properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n76 | }\n   |   ^\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmp1c3wk6gn.rs:29:48\n   |\n29 |     let mut total_grade_div: f64\
    \ = total_grade / grades.len();\n   |                                        \
    \        ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1c3wk6gn.rs:31:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n31 | /     for grade in grades {\n32 | |      \
    \   let mut grade_div: f64 = grade / total_grade_div_pow;\n33 | |         let\
    \ mut grade_div_pow: f64 = grade_div;\n34 | |         for _ in 0..grades.len()\
    \ {\n...  |\n75 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n76 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort_unstable();\n    let mut grades_sorted_copy = grades_sorted.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcbw9w664.rs:63:48\n   |\n\
    63 |     let mut grades_sorted_copy = grades_sorted_\n   |                   \
    \                             ^ help: add `;` here\n64 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `grades_sorted_` in this scope\n  -->\
    \ /tmp/tmpcbw9w664.rs:63:34\n   |\n63 |     let mut grades_sorted_copy = grades_sorted_\n\
    \   |                                  ^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `grades_sorted`\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n    --> /tmp/tmpcbw9w664.rs:25:19\n     |\n25   |   \
    \  grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^ the\
    \ trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcbw9w664.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_copy[0];\n    let\
    \ mut prev_letter_grade = String::from(\"E\");\n    let mut prev_letter_grade_index\
    \ = 0;\n    let mut prev_gpa = grades_copy[0];\n    let mut prev_gpa_letter =\
    \ String::from(\"E\");\n    let mut prev_gpa_letter_index = 0;\n    let mut prev_gpa_letter_grade\
    \ = String::from(\"E\");\n    let mut prev_gpa_letter_grade_index = 0;\n    let\
    \ mut prev_gpa_letter_grade_index2 = 0;\n    let mut prev_gpa_letter_grade_index3\
    \ = 0;\n    let mut prev_gpa_letter_grade_index4 = 0;\n    let mut prev_gpa_letter_grade_index5\
    \ = 0;\n    let mut prev_gpa_letter_grade_index6 = 0;\n    let mut prev_gpa_letter_grade_index7\
    \ = 0;\n    let mut prev_gpa_letter_grade_index8 = 0;\n    let mut prev_gpa_letter_grade_index9\
    \ = 0;\n    let mut prev_gpa_letter_grade_index10 = 0;\n    let mut prev_gpa_letter_grade_index11\
    \ = 0;\n    let mut prev_gpa_letter_grade_index12 = 0;\n    let mut prev_gpa_letter_grade_index13\
    \ = 0;\n    let mut prev_gpa_letter_grade_index14 = 0;\n    let mut prev_gpa_letter_grade_index15\
    \ = 0;\n    let mut prev_gpa_letter_grade_index16 = 0;\n    let mut prev_gpa_letter_grade_index17\
    \ = 0;\n    let mut prev_gpa_letter_grade_index18 = 0;\n    let mut prev_gpa_letter_grade_index19\
    \ = 0;\n    let mut prev_gpa_letter_grade_index20 = 0;\n    let mut prev_gpa_letter_grade_index21\
    \ = 0;\n    let mut prev_gpa_letter_grade_index22 = 0;\n    let mut prev_gpa_letter_grade_index23\
    \ = 0;\n    let mut prev_gpa_letter_grade_index24 = 0;\n    let mut prev_gpa_letter_grade_index25\
    \ = 0;\n    let mut prev_gpa_letter_grade_index26 = 0;\n    let mut prev_gpa_letter_grade_index27\
    \ = 0;\n    let mut prev_gpa_letter_grade_index28 = 0;\n    let mut prev_gpa_letter_grade_index29\
    \ = 0;\n    let mut prev_gpa_letter_grade_index30 = 0;\n    let mut prev_gpa_letter_grade_index31\
    \ = 0;\n    let mut prev_gpa_letter_grade_index32 = 0;\n    let mut prev_gpa_letter_grade_index33\
    \ = 0;\n    let mut prev_gpa_letter_grade_index34 = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp530bioin.rs:67:11\n   |\n\
    67 |     let mu\n   |           ^ help: add `;` here\n68 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp530bioin.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp3ed_2zfk.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    let mut\
    \ grades_counter = vec![];\n    for grade in grades {\n        if grade < 3.0\
    \ {\n            grades_string.push(String::from(\"A+\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 4.0 {\n            grades_string.push(String::from(\"\
    A\"));\n            grades_counter.push(1);\n        } else if grade < 5.0 {\n\
    \            grades_string.push(String::from(\"A-\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 6.0 {\n            grades_string.push(String::from(\"\
    B+\"));\n            grades_counter.push(1);\n        } else if grade < 7.0 {\n\
    \            grades_string.push(String::from(\"B\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 8.0 {\n            grades_string.push(String::from(\"\
    B-\"));\n            grades_counter.push(1);\n        } else if grade < 9.0 {\n\
    \            grades_string.push(String::from(\"C+\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 10.0 {\n            grades_string.push(String::from(\"\
    C\"));\n            grades_counter.push(1);\n        } else if grade < 11.0 {\n\
    \            grades_string.push(String::from(\"C-\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 12.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n            grades_counter.push(1);\n        } else if grade < 13.0 {\n\
    \            grades_string.push(String::from(\"D\"));\n            grades_counter.push(1);\n\
    \        } else if grade < 14.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n            grades_counter.push(1);\n        } else if grade < 15.0 {\n\
    \            grades_string.push(String::from(\"E\"));\n            grades_counter.push(1);\n\
    \        } else {\n            grades_string.push(String::from(\"F\"));\n    \
    \        grades_counter.push(0);\n        }\n    }\n    grades_string.push(String::from(\"\
    F\"));\n    grades_counter.push(0);\n    grades_counter\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6emspqm.rs:73:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n73 |     grades_counter\n   |     ^^^^^^^^^^^^^^\
    \ expected struct `String`, found integer\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<{integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpwbo286at.rs:67:1\n   |\n67\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpwbo286at.rs:66:35\n\
    \   |\n66 |     let mut grade = grades.iter().\n   |                         \
    \          ^ help: add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwbo286at.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade < 3.0 {\n            letter_grade += \"A\";\n        } else if grade <\
    \ 3.3 {\n            letter_grade += \"A-\";\n        } else if grade < 3.7 {\n\
    \            letter_grade += \"B+\";\n        } else if grade < 4.0 {\n      \
    \      letter_grade += \"B\";\n        } else if grade < 4.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade < 4.7 {\n            letter_grade += \"\
    C+\";\n        } else if grade < 5.0 {\n            letter_grade += \"C\";\n \
    \       } else if grade < 5.3 {\n            letter_grade += \"C-\";\n       \
    \ } else if grade < 5.7 {\n            letter_grade += \"D+\";\n        } else\
    \ if grade < 6.0 {\n            letter_grade += \"D\";\n        } else if grade\
    \ < 6.3 {\n            letter_grade += \"D-\";\n        } else if grade < 6.7\
    \ {\n            letter_grade += \"E\";\n        } else {\n            letter_grade\
    \ += \"F\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A\", \"A\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpof55f4ho.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut grades_sorted_copy = grades_sorted.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let mut grades_sorted_copy\
    \ = grades_sorted_copy.clone();\n    let mut grades_sorted_copy = grades_sorted_copy.clone();\n\
    \    let mut grades_sorted_copy = grades_sorted_copy.clone();\n    let \n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp4l7wqx1z.rs:65:1\n  \
    \ |\n65 | }\n   | ^ expected pattern\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n   --> /tmp/tmp4l7wqx1z.rs:26:19\n    |\n26  |     grades_sorted.sort();\n\
    \    |                   ^^^^ the trait `Ord` is not implemented for `f64`\n \
    \   |\n    = help: the following other types implement trait `Ord`:\n        \
    \      i128\n              i16\n              i32\n              i64\n       \
    \       i8\n              isize\n              u128\n              u16\n     \
    \       and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_index\
    \ = 0;\n    let mut grades_index2 = 0;\n    let mut grades_index3 = 0;\n    let\
    \ mut grades_index4 = 0;\n    let mut grades_index5 = 0;\n    let mut grades_index6\
    \ = 0;\n    let mut grades_index7 = 0;\n    let mut grades_index8 = 0;\n    let\
    \ mut grades_index9 = 0;\n    let mut grades_index10 = 0;\n    let mut grades_index11\
    \ = 0;\n    let mut grades_index12 = 0;\n    let mut grades_index13 = 0;\n   \
    \ let mut grades_index14 = 0;\n    let mut grades_index15 = 0;\n    let mut grades_index16\
    \ = 0;\n    let mut grades_index17 = 0;\n    let mut grades_index18 = 0;\n   \
    \ let mut grades_index19 = 0;\n    let mut grades_index20 = 0;\n    let mut grades_index21\
    \ = 0;\n    let mut grades_index22 = 0;\n    let mut grades_index23 = 0;\n   \
    \ let mut grades_index24 = 0;\n    let mut grades_index25 = 0;\n    let mut grades_index26\
    \ = 0;\n    let mut grades_index27 = 0;\n    let mut grades_index28 = 0;\n   \
    \ let mut grades_index29 = 0;\n    let mut grades_index30 = 0;\n    let mut grades_index31\
    \ = 0;\n    let mut grades_index32 = 0;\n    let mut grades_index33 = 0;\n   \
    \ let mut grades_index34 = 0;\n    let mut grades_index35 = 0;\n    let mut grades_index36\
    \ = 0;\n    let mut grades_index37 = 0;\n    let mut grades_index38 = 0;\n   \
    \ let mut grades_index39 = 0;\n    let mut grades_index40 = 0;\n    let mut grades_index41\
    \ = 0;\n    let mut grades_index42 = 0;\n    let mut grades_index43 = 0;\n   \
    \ let mut grades_index44 = 0;\n    let mut grades_index45 = 0;\n    let mut grades_index46\
    \ = 0;\n    let mut grades_index47 = 0;\n    let mut grades_index48 = 0;\n   \
    \ let mut grades_index49 = 0;\n    let mut grades_index50 = 0;\n    let mut grades_index51\
    \ = 0;\n    let mut grades_index52 = 0;\n    let mut grades_index53 = 0;\n   \
    \ let mut grades_index54 = 0;\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppmbrnaho.rs:81:11\n   |\n\
    81 |     let mu\n   |           ^ help: add `;` here\n82 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmbrnaho.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut letter_grades = vec![];\n \
    \   while grades_len > 0 {\n        let mut grade = grades_copy.pop();\n     \
    \   if grade > 3.0 {\n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            grades_len -= 1;\n     \
    \       letter_grades.push(String::from(\"A\"));\n        } else if grade > 1.0\
    \ {\n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 0.7 { \n            grades_len -= 1;\n    \
    \        letter_grades.push(String::from(\"B+\"));\n        } else if grade >\
    \ 0.3 { \n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 0.0 { \n            grades_len -= 1;\n     \
    \       letter_grades.push(String::from(\"B-\"));\n        } else if grade > 0.0\
    \ { \n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.0 { \n            grades_len -= 1;\n    \
    \        letter_grades.push(String::from(\"C\"));\n        } else if grade > 0.0\
    \ { \n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            grades_len -= 1;\n    \
    \        letter_grades.push(String::from(\"D+\"));\n        } else if grade >\
    \ 0.0 { \n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            grades_len -= 1;\n     \
    \       letter_grades.push(String::from(\"D-\"));\n        } else if grade > 0.0\
    \ { \n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            grades_len -= 1;\n            letter_grades.push(String::from(\"\
    F\"));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1zjsso0a.rs:29:20\n   |\n\
    29 |         if grade > 3.0 {\n   |                    ^^^ expected enum `Option`,\
    \ found floating-point number\n   |\n   = note: expected enum `Option<f64>`\n\
    \              found type `{float}`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n29 |         if grade > Some(3.0) {\n   |                    +++++   +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zjsso0a.rs:32:27\n   |\n32 |\
    \         } else if grade > 2.0 {\n   |                           ^^^ expected\
    \ enum `Option`, found floating-point number\n   |\n   = note: expected enum `Option<f64>`\n\
    \              found type `{float}`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n32 |         } else if grade > Some(2.0) {\n   |                      \
    \     +++++   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1zjsso0a.rs:35:27\n\
    \   |\n35 |         } else if grade > 1.0 {\n   |                           ^^^\
    \ expected enum `Option`, found floating-point number\n   |\n   = note: expected\
    \ enum `Option<f64>`\n              found type `{float}`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n35 |         } else if grade > Some(1.0) {\n   |\
    \                           +++++   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1zjsso0a.rs:38:27\n   |\n38 |         } else if grade > 0.7 { \n   |\
    \                           ^^^ expected enum `Option`, found floating-point number\n\
    \   |\n   = note: expected enum `Option<f64>`\n              found type `{float}`\n\
    help: try wrapping the expression in `Some`\n   |\n38 |         } else if grade\
    \ > Some(0.7) { \n   |                           +++++   +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1zjsso0a.rs:41:27\n   |\n41 |         } else if grade >\
    \ 0.3 { \n   |                           ^^^ expected enum `Option`, found floating-point\
    \ number\n   |\n   = note: expected enum `Option<f64>`\n              found type\
    \ `{float}`\nhelp: try wrapping the expression in `Some`\n   |\n41 |         }\
    \ else if grade > Some(0.3) { \n   |                           +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1z"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp3ed_2zfk.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    while current_grade > 0.0 {\n        if current_grade < 3.0 {\n  \
    \          current_letter_grade = String::from(\"D-\");\n            current_letter_grade_index\
    \ = 0;\n            current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 3.3 {\n            current_letter_grade\
    \ = String::from(\"C-\");\n            current_letter_grade_index = 1;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 3.7 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 4.0 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 4.3 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 4.7 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 5.0 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 5.3 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 5.7 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 6.0 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n        if current_grade < 6.3 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            current_letter_grade_index = 2;\n     \
    \       current_letter_grade_index2 = 0;\n            current_letter_grade_index3\
    \ = 0;\n        }\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxccu888n.rs:108:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n31  |     while current_grade > 0.0 {\n    |                            \
    \   - this delimiter might not be properly closed...\n...\n98  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n108 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpxccu888n.rs:23:48\n   |\n23 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().sorted();\n\
    \    let mut grades_reversed = grades_sorted.rev();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_sorted.first().unwrap();\n   \
    \ let mut current_letter = String::from(\"E\");\n    for grade in grades_sorted\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter);\n\
    \            current_letter = String::from(\"E\");\n            current_grade\
    \ = grade;\n        } else if grade == current_grade {\n            current_letter\
    \ += String::from(\"+\");\n        } else {\n            current_letter += String::from(\"\
    -\");\n        }\n    }\n    letter_grades.push(current_letter);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmptz_tbxei.rs:24:52\n   |\n24 |     let mut grades_sorted\
    \ = grades.iter().cloned().sorted();\n   |                                   \
    \                 ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, f64>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptz_tbxei.rs:35:31\n   |\n35 |\
    \             current_letter += String::from(\"+\");\n   |                   \
    \            ^^^^^^^^^^^^^^^^^\n   |                               |\n   |   \
    \                            expected `&str`, found struct `String`\n   |    \
    \                           help: consider borrowing here: `&String::from(\"+\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptz_tbxei.rs:37:31\n   |\n\
    37 |             current_letter += String::from(\"-\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    -\")`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ >= 4.0 {\n            letter_grade += \"A+\";\n        } else if grade >= 3.7\
    \ {\n            letter_grade += \"A\";\n        } else if grade >= 3.3 {\n  \
    \          letter_grade += \"A-\";\n        } else if grade >= 3.0 {\n       \
    \     letter_grade += \"B+\";\n        } else if grade >= 2.7 {\n            letter_grade\
    \ += \"B\";\n        } else if grade >= 2.3 {\n            letter_grade += \"\
    B-\";\n        } else if grade >= 2.0 {\n            letter_grade += \"C+\";\n\
    \        } else if grade >= 1.7 {\n            letter_grade += \"C\";\n      \
    \  } else if grade >= 1.3 {\n            letter_grade += \"C-\";\n        } else\
    \ if grade >= 1.0 {\n            letter_grade += \"D+\";\n        } else if grade\
    \ >= 0.7 {\n            letter_grade += \"D\";\n        } else if grade >= 0.0\
    \ {\n            letter_grade += \"D-\";\n        } else {\n            letter_grade\
    \ += \"E\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8eseenle.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_sorted[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = grades_sorted.len() - 1;\n    while current_grade > 0.0 {\n        if current_grade\
    \ < grades_sorted[current_letter_grade_index] {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_letter_grade_index\
    \ = 0;\n        } else {\n            current_letter_grade_index -= 1;\n     \
    \   }\n        current_grade -= grades_sorted[current_letter_grade_index];\n \
    \   }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpyeymibjj.rs:26:19\n\
    \    |\n26  |     grades_sorted.sort();\n    |                   ^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n    |\n    = help: the following other types\
    \ implement trait `Ord`:\n              i128\n              i16\n            \
    \  i32\n              i64\n              i8\n              isize\n           \
    \   u128\n              u16\n            and 4 others\nnote: required by a bound\
    \ in `slice::<impl [T]>::sort`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut grade = grades_iter.next().unwrap();\n\
    \    let mut letter_grade = String::from(\"E\");\n    while grade != 0.0 {\n \
    \       if grade < 3.0 {\n            letter_grade += String::from(\"A\");\n \
    \       } else if grade < 3.3 {\n            letter_grade += String::from(\"A-\"\
    );\n        } else if grade < 3.7 {\n            letter_grade += String::from(\"\
    B+\");\n        } else if grade < 4.0 {\n            letter_grade += String::from(\"\
    B\");\n        } else if grade < 4.3 {\n            letter_grade += String::from(\"\
    B-\");\n        } else if grade < 4.7 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade < 5.0 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 5.3 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade < 5.7 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade < 6.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 6.3 {\n            letter_grade += String::from(\"\
    D-\");\n        } else {\n            letter_grade += String::from(\"E\");\n \
    \       }\n        grade = grades_iter.next().unwrap();\n    }\n    letter_grades.push(letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpq3xoccax.rs:28:17\n\
    \   |\n28 |     while grade != 0.0 {\n   |                 ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpq3xoccax.rs:29:20\n   |\n29 |         if grade < 3.0 {\n   |       \
    \             ^^^\n   |                    |\n   |                    expected\
    \ `&f64`, found floating-point number\n   |                    help: consider\
    \ borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq3xoccax.rs:30:29\n\
    \   |\n30 |             letter_grade += String::from(\"A\");\n   |           \
    \                  ^^^^^^^^^^^^^^^^^\n   |                             |\n   |\
    \                             expected `&str`, found struct `String`\n   |   \
    \                          help: consider borrowing here: `&String::from(\"A\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq3xoccax.rs:31:27\n   |\n\
    31 |         } else if grade < 3.3 {\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&3.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq3xoccax.rs:32:29\n\
    \   |\n32 |             letter_grade += String::from(\"A-\");\n   |          \
    \                   ^^^^^^^^^^^^^^^^^^\n   |                             |\n \
    \  |                             expected `&str`, found struct `String`\n   |\
    \                             help: consider borrowing here: `&String::from(\"\
    A-\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq3xoccax.rs:33:27\n  \
    \ |\n33 |         } else if grade < 3.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ f"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum: f64 = 0.0;\n  \
    \  let mut grades_min_value: f64 = grades_copy[0];\n    let mut grades_max_value:\
    \ f64 = grades_copy[0];\n    let mut grades_min_index: usize = 0;\n    let mut\
    \ grades_max_index: usize = 0;\n    let mut grades_min_value: f64 = grades_copy[0];\n\
    \    let mut grades_max_value: f64 = grades_copy[0];\n    let mut grades_min_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_min_value:\
    \ f64 = grades_copy[0];\n    let mut grades_max_value: f64 = grades_copy[0];\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_max_index: usize\
    \ = 0;\n    let mut grades_min_value: f64 = grades_copy[0];\n    let mut grades_max_value:\
    \ f64 = grades_copy[0];\n    let mut grades_min_index: usize = 0;\n    let mut\
    \ grades_max_index: usize = 0;\n    let mut grades_min_value: f64 = grades_copy[0];\n\
    \    let mut grades_max_value: f64 = grades_copy[0];\n    let mut grades_min_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_min_value:\
    \ f64 = grades_copy[0];\n    let mut grades_max_value: f64 = grades_copy[0];\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_max_index: usize\
    \ = 0;\n    let mut grades_min_value: f64 = grades_copy[0];\n    let mut grades_max_value:\
    \ f64 = grades_copy[0];\n    let mut grades_min_index: usize = 0;\n    let mut\
    \ grades_max_index: usize = 0;\n    let mut grades_min_value: f64 = grades_copy[0];\n\
    \    let mut grades_max_value: f64 = grades_copy[0];\n    let mut grades_min_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_min_value:\
    \ f64 = grades_copy[0];\n    let mut grades_max_value: f64 = grades_copy[0];\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_max_index: usize\
    \ = 0;\n    let mut grades_min_value: f64 = \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpylglz9p2.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next();\n\
    \    while let Some(current_grade) = current_grade {\n        let mut letter_grade\
    \ = String::from(\"\");\n        let mut current_letter_grade = String::from(\"\
    \");\n        \n        // Calculate the letter grade for the current grade\n\
    \        match current_grade {\n            4.0 => {\n                letter_grade\
    \ += \"A+\";\n            }\n            3.7 => {\n                letter_grade\
    \ += \"A\";\n            }\n            3.3 => {\n                letter_grade\
    \ += \"A-\";\n            }\n            3.0 => {\n                letter_grade\
    \ += \"B+\";\n            }\n            2.7 => {\n                letter_grade\
    \ += \"B\";\n            }\n            2.3 => {\n                letter_grade\
    \ += \"B-\";\n            }\n            2.0 => {\n                letter_grade\
    \ += \"C+\";\n            }\n            1.7 => {\n                letter_grade\
    \ += \"C\";\n            }\n            1.3 => {\n                letter_grade\
    \ += \"C-\";\n            }\n            1.0 => {\n                letter_grade\
    \ += \"D+\";\n            }\n            0.7 => {\n                letter_grade\
    \ += \"D\";\n            }\n            0.0 => {\n                letter_grade\
    \ += \"D-\";\n            }\n            _ => {\n                letter_grade\
    \ += \"E\";\n            }\n        }\n        \n        // Calculate the letter\
    \ grade for the current grade\n        match current_grade {\n            4.0\
    \ => {\n                current_letter_grade += \"A+\";\n            }\n     \
    \       3.7 => {\n                current_letter_grade += \"A\";\n           \
    \ }\n            3.3 => {\n                current_letter_grade += \"A-\";\n \
    \           }\n            3.0 => {\n                current_letter_grade += \"\
    B+\";\n            }\n            2.7 => {\n                current_letter_grade\
    \ += \"B\";\n            }\n            2.3 => {\n                current_letter_grade\
    \ += \"B-\";\n            }\n            2.0 => {\n                current_letter_grade\
    \ += \"C+\";\n            }\n            1.7 => {\n                current_letter_grade\
    \ += \"C\";\n            }\n            1.3 => {\n                current_letter_grade\
    \ += \"C-\";\n            }\n            1.0 => {\n                current_letter_grade\
    \ += \"D+\";\n            }\n            0.7 => {\n                current_letter_grade\
    \ += \"D\";\n            }\n            0.0 => {\n                current_letter_grade\
    \ += \"D-\";\n            }\n            _ => {\n                current_letter_grade\
    \ += \"E\";\n            }\n        }\n        \n        // Calculate the letter\
    \ grade for the current grade\n        match current_grade \n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpv1h3q9pk.rs:129:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n27  |     while let Some(current_grade) = current_grade {\n    |        \
    \                                           - this delimiter might not be properly\
    \ closed...\n...\n119 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n129 | }\n    |   ^\n\nerror: expected one of `!`, `.`, `::`,\
    \ `?`, `{`, or an operator, found `}`\n   --> /tmp/tmpv1h3q9pk.rs:119:1\n    |\n\
    118 |         match current_grade \n    |         -----              - expected\
    \ one of `!`, `.`, `::`, `?`, `{`, or an operator\n    |         |\n    |    \
    \     while parsing this `match` expression\n119 | }\n    | ^ unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv1h3q9pk.rs:23:48\n   |\n23 |\
    \ fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    for grade in grades_copy {\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n        }\n        if grade\
    \ < min_grade {\n            min_grade = grade;\n        }\n    }\n    let mut\
    \ grades_range = max_grade - min_grade;\n    let mut grades_range_power = grades_range\
    \ as f64;\n    let mut grades_range_power_power = grades_range_power as f64;\n\
    \    let mut grades_range_power_power_power = grades_range_power_power as f64;\n\
    \    let mut grades_range_power_power_power_power = grades_range_power_power_power\
    \ as f64;\n    let mut grades_range_power_power_power_power_power = grades_range_power_power_power_power\
    \ as f64;\n    let mut grades_range_power_power_power_power_power_power = grades_range_power_power_power_power_power\
    \ as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n    let mut grades_range_power_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power_power as f64;\n    let mut\
    \ grades_range_power_power_power_power_power_power_power_power = grades_range_power_power_power_power_power_power_power\
    \ as f64;\n    let mut grades_range_power_power_power_power_power_power_power_power\
    \ = grades_range_power_power_power_power_power_power as f64;\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4yujtaa2.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    for grade in grades_copy {\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n        }\n        if grade\
    \ < min_grade {\n            min_grade = grade;\n        }\n    }\n    let mut\
    \ min_grade_letter = String::from(\"D\");\n    let mut max_grade_letter = String::from(\"\
    E\");\n    if min_grade == max_grade {\n        min_grade_letter = String::from(\"\
    D\");\n        max_grade_letter = String::from(\"E\");\n    }\n    if min_grade\
    \ == 0.0 {\n        min_grade_letter = String::from(\"E\");\n    }\n    if max_grade\
    \ == 0.0 {\n        max_grade_letter = String::from(\"D\");\n    }\n    for grade\
    \ in grades_copy {\n        if grade < 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n        if grade < min_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade > max_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if grade == min_grade {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n        if grade < max_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade > min_grade {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        if grade == max_grade {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n        if grade < min_grade {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n        if grade > max_grade {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n        if grade == min_grade {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n        if grade < max_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grade > min_grade {\n            letter_grades.push(String::from(\"\
    D+\"));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpc2s5gv1l.rs:100:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n48  |     for grade in grades_copy {\n    |                             \
    \ - unclosed delimiter\n...\n88  |         if grade > min_grade {\n    |     \
    \                         - this delimiter might not be properly closed...\n89\
    \  |             letter_grades.push(String::from(\"D+\"));\n90  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n100 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n   --> /tmp/tmpc2s5gv1l.rs:48:5\n    |\n23  |\
    \   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    |      \
    \                                            ----------- expected `Vec<String>`\
    \ because of return type\n...\n48  | /     for grade in grades_copy {\n49  | |\
    \         if grade < 0.0 {\n50  | |             letter_grades.push(String::from(\"\
    D-\"));\n51  | |         }\n...   |\n99  | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n100 | | }\n    | |__^\
    \ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<String>`\n\
    \            found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut gpa = grades.iter().sum();\n    let mut letter_grade = String::from(\"\
    E\");\n    \n    while gpa > 0.0 {\n        let mut grade = String::from(\"E\"\
    );\n        let mut gpa = grades.iter().sum();\n        \n        if gpa > 3.0\
    \ {\n            grade = String::from(\"C\");\n            gpa = gpa - 3.0;\n\
    \        }\n        \n        if gpa > 2.7 {\n            grade = String::from(\"\
    B\");\n            gpa = gpa - 2.7;\n        }\n        \n        if gpa > 2.3\
    \ {\n            grade = String::from(\"B-\");\n            gpa = gpa - 2.3;\n\
    \        }\n        \n        if gpa > 1.7 {\n            grade = String::from(\"\
    A\");\n            gpa = gpa - 1.7;\n        }\n        \n        if gpa > 1.3\
    \ {\n            grade = String::from(\"A-\");\n            gpa = gpa - 1.3;\n\
    \        }\n        \n        if gpa > 0.7 {\n            grade = String::from(\"\
    A+\");\n            gpa = gpa - 0.7;\n        }\n        \n        if gpa > 0.3\
    \ {\n            grade = String::from(\"B+\");\n            gpa = gpa - 0.3;\n\
    \        }\n        \n        if gpa > 0.0 {\n            grade = String::from(\"\
    C+\");\n            gpa = gpa - 0.0;\n        }\n        \n        if gpa > -0.7\
    \ {\n            grade = String::from(\"D+\");\n            gpa = gpa - -0.7;\n\
    \        }\n        \n        if gpa > -0.3 {\n            grade = String::from(\"\
    D-\");\n            gpa = gpa - -0.3;\n        }\n        \n        if gpa > -0.0\
    \ {\n            grade = String::from(\"D\");\n            gpa = gpa - -0.0;\n\
    \        }\n        \n        if gpa > -3.0 {\n            grade = String::from(\"\
    C\");\n            gpa = gpa - -3.0;\n        }\n        \n        if gpa > -2.7\
    \ {\n            grade = String::from(\"B\");\n            gpa = gpa - -2.7;\n\
    \        }\n        \n        if gpa > -2.3 {\n            grade = String::from(\"\
    B-\");\n            gpa = gpa - -2.3;\n        }\n        \n        if gpa > -1.7\
    \ {\n            grade = String::from(\"A\");\n            gpa\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7kshumc5.rs:115:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n28  |     while gpa > 0.0 {\n    |                     - unclosed delimiter\n\
    ...\n102 |         if gpa > -1.7 {\n    |                       - this delimiter\
    \ might not be properly closed...\n...\n105 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n115 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmp7kshumc5.rs:28:5\n    |\n23  |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    |                                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n28  |\
    \ /     while gpa > 0.0 {\n29  | |         let mut grade = String::from(\"E\"\
    );\n30  | |         let mut gpa = grades.iter().sum();\n31  | |         \n...\
    \   |\n114 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n115 | | }\n    | |__^ expected struct `Vec`, found\
    \ `()`\n    |\n    = note: expected struct `Vec<String>`\n            found unit\
    \ type `()`\n\nerror[E0277]: can't compare `()` with `{float}`\n  --> /tmp/tmp7kshumc5.rs:32:16\n\
    \   |\n32 |         if gpa > 3.0 {\n   |                ^ no implementation for\
    \ `() < {float}` and `() > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>`\
    \ is not implemented for `()`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             ()\n             (A, B, C, D, E, F, G,\
    \ H, I, J, K, L)\n             (B, C, D, E, F, G, H, I, J, K, L)\n           \
    \  (C, D, E, F, G, H, I, J, K, L)\n             (D, E, F, G, H, I, J, K, L)\n\
    \             (E, F, G, H, I, J, K, L)\n             (F, G, H, I, J, K, L)\n \
    \            (G, H, I, J, K, L)\n           and 5 others\n\nerror[E0277]: cannot\
    \ subtract `{float}` from `()`\n  --> /tmp/tmp7kshumc5.rs:34:23\n   |\n34 |  \
    \           gpa = gpa - 3.0;\n   |                       ^ no implementation for\
    \ `() - {float}`\n   |\n   = help: the t"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8u98nsc3.rs:29:20\n   |\n\
    29 |         if grade < current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade < *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp8u98nsc3.rs:31:29\n   |\n26 |  \
    \   let mut current_grade = grades_copy.first().unwrap();\n   |              \
    \               ---------------------------- expected due to this value\n...\n\
    31 |             current_grade = grade;\n   |                             ^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8u98nsc3.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8u98nsc3.rs:34:37\n\
    \   |\n34 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp8u98nsc3.rs:36:37\n   |\n36 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_iter.next().unwrap();\n\
    \    let mut prev_letter_grade = String::from(\"E\");\n    let mut current_grade\
    \ = grades_iter.next().unwrap();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    while current_grade != 0.0 {\n        if current_grade > prev_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        if current_grade < prev_grade {\n\
    \            current_letter_grade = String::from(\"E\");\n        }\n        if\
    \ current_grade == prev_grade {\n            current_letter_grade = String::from(prev_letter_grade);\n\
    \        }\n        prev_grade = current_grade;\n        prev_letter_grade = current_letter_grade;\n\
    \        current_grade = grades_iter.next().unwrap();\n        current_letter_grade\
    \ = String::from(\"E\");\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmprtmvso0j.rs:30:25\n\
    \   |\n30 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            grades_string.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            grades_string.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            grades_string.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grades_string.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_string.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp0czf9_l8.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut gpa = gpa / 4.0;\n    let mut gpa =\
    \ gpa - 3.0;\n    let mut gpa = gpa + 3.0;\n    let mut gpa = gpa - 2.0;\n   \
    \ let mut gpa = gpa + 2.0;\n    let mut gpa = gpa - 1.0;\n    let mut gpa = gpa\
    \ + 1.0;\n    let mut gpa = gpa - 0.7;\n    let mut gpa = gpa + 0.7;\n    let\
    \ mut gpa = gpa - 0.3;\n    let mut gpa = gpa + 0.3;\n    let mut gpa = gpa -\
    \ 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut\
    \ gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n\
    \    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa =\
    \ gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n   \
    \ let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa\
    \ + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let\
    \ mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa = gpa -\
    \ 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut\
    \ gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n\
    \    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa =\
    \ gpa - 0.0;\n    let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n   \
    \ let mut gpa = gpa + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut gpa = gpa\
    \ + 0.0;\n    let mut gpa = gpa - 0.0;\n    let mut g\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpout4bqly.rs:70:14\n   |\n\
    70 |     let mut g\n   |              ^ help: add `;` here\n71 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpout4bqly.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpvv2jmfqr.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvv2jmfqr.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvv2jmfqr.rs:37:37\n   |\n37 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ >= 4.0 { \"+\" } else { \"-\" };\n        letter_grades.push(grade + String::from(\"\
    A\"));\n        gpa -= 4.0;\n    }\n    while gpa < 0.0 {\n        let grade =\
    \ if gpa >= 3.7 { \"+\" } else { \"-\" };\n        letter_grades.push(grade +\
    \ String::from(\"A\"));\n        gpa += 3.7;\n    }\n    while gpa > 3.0 {\n \
    \       let grade = if gpa >= 3.3 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"B\"));\n        gpa -= 3.3;\n    }\n    while gpa < 3.0 {\n\
    \        let grade = if gpa >= 2.7 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"B\"));\n        gpa += 2.7;\n    }\n    while gpa > 2.0 {\n\
    \        let grade = if gpa >= 2.3 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"C\"));\n        gpa -= 2.3;\n    }\n    while gpa < 2.0 {\n\
    \        let grade = if gpa >= 1.7 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"C\"));\n        gpa += 1.7;\n    }\n    while gpa > 1.0 {\n\
    \        let grade = if gpa >= 1.3 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"D\"));\n        gpa -= 1.3;\n    }\n    while gpa < 1.0 {\n\
    \        let grade = if gpa >= 0.7 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"D\"));\n        gpa += 0.7;\n    }\n    while gpa > 0.0 {\n\
    \        let grade = if gpa >= 0.0 { \"+\" } else { \"-\" };\n        letter_grades.push(grade\
    \ + String::from(\"E\"));\n        gpa -= 0.0;\n    }\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `String` to `&str`\n  --> /tmp/tmpl6xp1qs2.rs:28:34\n\
    \   |\n28 |         letter_grades.push(grade + String::from(\"A\"));\n   |   \
    \                         ----- ^ ----------------- String\n   |             \
    \               |     |\n   |                            |     `+` cannot be used\
    \ to concatenate a `&str` with a `String`\n   |                            &str\n\
    \   |\nhelp: create an owned `String` on the left and add a borrow on the right\n\
    \   |\n28 |         letter_grades.push(grade.to_owned() + &String::from(\"A\"\
    ));\n   |                                 +++++++++++   +\n\nerror[E0369]: cannot\
    \ add `String` to `&str`\n  --> /tmp/tmpl6xp1qs2.rs:33:34\n   |\n33 |        \
    \ letter_grades.push(grade + String::from(\"A\"));\n   |                     \
    \       ----- ^ ----------------- String\n   |                            |  \
    \   |\n   |                            |     `+` cannot be used to concatenate\
    \ a `&str` with a `String`\n   |                            &str\n   |\nhelp:\
    \ create an owned `String` on the left and add a borrow on the right\n   |\n33\
    \ |         letter_grades.push(grade.to_owned() + &String::from(\"A\"));\n   |\
    \                                 +++++++++++   +\n\nerror[E0369]: cannot add\
    \ `String` to `&str`\n  --> /tmp/tmpl6xp1qs2.rs:38:34\n   |\n38 |         letter_grades.push(grade\
    \ + String::from(\"B\"));\n   |                            ----- ^ -----------------\
    \ String\n   |                            |     |\n   |                      \
    \      |     `+` cannot be used to concatenate a `&str` with a `String`\n   |\
    \                            &str\n   |\nhelp: create an owned `String` on the\
    \ left and add a borrow on the right\n   |\n38 |         letter_grades.push(grade.to_owned()\
    \ + &String::from(\"B\"));\n   |                                 +++++++++++ \
    \  +\n\nerror[E0369]: cannot add `String` to `&str`\n  --> /tmp/tmpl6xp1qs2.rs:43:34\n\
    \   |\n43 |         letter_grades.push(grade + String::from(\"B\"));\n   |   \
    \                         ----- ^ ----------------- String\n   |             \
    \               |     |\n   |                            |  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = grades.iter().sum();\n\
    \    let mut grades_avg = grades_sum / grades.len();\n    let mut grades_min =\
    \ grades.iter().min();\n    let mut grades_max = grades.iter().max();\n    let\
    \ mut grades_min_avg = grades_min.iter().sum() / grades.len();\n    let mut grades_max_avg\
    \ = grades_max.iter().sum() / grades.len();\n    let mut grades_min_max = grades_min.iter().max();\n\
    \    let mut grades_max_min = grades_max.iter().min();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.iter().sum() / grades.len();\n    let mut grades_min_max_avg\
    \ = grades_min_max.\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpa_dfcx8e.rs:51:1\n   |\n51\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpa_dfcx8e.rs:50:49\n\
    \   |\n50 |     let mut grades_min_max_avg = grades_min_max.\n   |           \
    \                                      ^ help: add `;` here\n51 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmpa_dfcx8e.rs:28:40\n     |\n28   |     let mut grades_min = grades.iter().min();\n\
    \     |                                        ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpa_dfcx8e.rs:29:40\n\
    \     |\n29   |     let mut grades_max = grades.iter().max();\n     |        \
    \                                ^^^ the trait `Ord` is not implemented for `f64`\n\
    \     |\n     = help: the following other types implement trait `Ord`:\n     \
    \          i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpa_dfcx8e.rs:32:48\n\
    \     |\n32   |     let mut grades_min_max = grades_min.iter().max();\n     |\
    \                                                ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut total_grade = 0.0;\n    let mut total_letter_grades\
    \ = 0.0;\n    let mut total_letter_grades_sum = 0.0;\n    let mut total_letter_grades_product\
    \ = 0.0;\n    let mut total_letter_grades_product2 = 0.0;\n    let mut total_letter_grades_product3\
    \ = 0.0;\n    let mut total_letter_grades_product4 = 0.0;\n    let mut total_letter_grades_product5\
    \ = 0.0;\n    let mut total_letter_grades_product6 = 0.0;\n    let mut total_letter_grades_product7\
    \ = 0.0;\n    let mut total_letter_grades_product8 = 0.0;\n    let mut total_letter_grades_product9\
    \ = 0.0;\n    let mut total_letter_grades_product10 = 0.0;\n    let mut total_letter_grades_product11\
    \ = 0.0;\n    let mut total_letter_grades_product12 = 0.0;\n    let mut total_letter_grades_product13\
    \ = 0.0;\n    let mut total_letter_grades_product14 = 0.0;\n    let mut total_letter_grades_product15\
    \ = 0.0;\n    let mut total_letter_grades_product16 = 0.0;\n    let mut total_letter_grades_product17\
    \ = 0.0;\n    let mut total_letter_grades_product18 = 0.0;\n    let mut total_letter_grades_product19\
    \ = 0.0;\n    let mut total_letter_grades_product20 = 0.0;\n    let mut total_letter_grades_product21\
    \ = 0.0;\n    let mut total_letter_grades_product22 = 0.0;\n    let mut total_letter_grades_product23\
    \ = 0.0;\n    let mut total_letter_grades_product24 = 0.0;\n    let mut total_letter_grades_product25\
    \ = 0.0;\n    let mut total_letter_grades_product26 = 0.0;\n    let mut total_letter_grades_product27\
    \ = 0.0;\n    let mut total_letter_grades_product28 = 0.0;\n    let mut total_letter_grades_product29\
    \ = 0.0;\n    let mut total_letter_grades_product30 = 0.0;\n    let mut total_letter_grades_product31\
    \ = 0.0;\n    let mut total_letter_grades_product32 = 0.0;\n    let mut total_letter_grades_product33\
    \ = 0.0;\n    let mut total_letter_grades_product34 = 0.0;\n    let mut total_letter_grades_product35\
    \ = 0.0;\n    let mut total_letter_grades_product36 = 0.0;\n    let mut total_letter_grades_product37\
    \ = 0.0;\n    let mut total_letter_grades_product38 = 0.0;\n    let mut total_letter_grade\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbbd3qdi4.rs:67:31\n   |\n\
    67 |     let mut total_letter_grade\n   |                               ^ help:\
    \ add `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbbd3qdi4.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.max();\n    let mut min_grade = grades.min();\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    let mut total_letter_grades = String::new();\n    let mut total_letter_grades_num\
    \ = String::new();\n    let mut total_letter_grades_denom = String::new();\n \
    \   let mut total_letter_grades_num_denom = String::new();\n    let mut total_letter_grades_num_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom = String::new();\n\
    \    let mut total_letter_grades_num_denom_denom_denom_denom = String::new();\n\
    \    let mut total_letter_grades_num_denom_denom_denom_denom_denom = String::new();\n\
    \    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom = String::new();\n\
    \    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_denom_denom_denom_denom_denom_denom\
    \ = String::new();\n    let mut total_letter_grades_num_denom_denom_denom_denom_denom_deno\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_iyhjvg9.rs:47:71\n   |\n\
    47 |     let mut total_letter_grades_num_denom_denom_denom_denom_denom_deno\n\
    \   |                                                                       ^\
    \ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0599]: the method\
    \ `max` exists for struct `Vec<f64>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmp_iyhjvg9.rs:25:32\n    |\n25  |       let mut max_grade = grades.max();\n\
    \    |                                  ^^^ method cannot be called on `Vec<f64>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `f64: Ord`\n            which is required by\
    \ `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which is required\
    \ by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n            which is required\
    \ by `&mut Vec<f64>: Ord`\n            `Vec<f64>: Iterator`\n            which\
    \ is required by `&mut Vec<f64>: Iterator`\n            `f64: Ord`\n         \
    \   which is required by `[f64]: Ord`\n            `[f64]: Ord`\n            which\
    \ is required by `&[f64]: Ord`\n            `[f64]: Ord`\n            which is\
    \ required by `&mut [f64]: Ord`\n            `[f64]: Iterator`\n            which\
    \ is required by `&mut [f64]: Iterator`\n\nerror[E0599]: the method `min` exists\
    \ for struct `Vec<f64>`, but its trait bounds were not satisfied\n   --> /tmp/tmp_iyhjvg9.rs:26:32\n\
    \    |\n26  |       let mut min_grade = grades.min();\n    |                 \
    \                 ^^^ method cannot be called on `Vec<f64>` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `f64: Ord`\n            which is required by `Vec<f64>: Ord`\n  \
    \          `Vec<f64>: Ord`\n            which is required by `&Vec<f64>: Ord`\n\
    \            `Vec<f64>: Ord`\n            which is required by `&mut Vec<f64>:\
    \ Ord`\n            `Vec<f64>: Iterator`\n            which is required by `&mut\
    \ Vec<f64>: Iterator`\n            `f64: Ord`\n            which is required by\
    \ `[f64]: Ord`\n            `[f64]: Ord`\n  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        }\n        if\
    \ grade < current_grade {\n            current_letter_grade = String::from(current_letter_grade.chars().nth(1).unwrap());\n\
    \        }\n        letter_grades.push(current_letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp00335f0b.rs:24:9\n\
    \   |\n24 |     let mut grades_copy = grades.clone();\n   |         ----^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `current_letter_grade`\n\
    \  --> /tmp/tmp00335f0b.rs:34:49\n   |\n27 |     let mut current_letter_grade\
    \ = String::from(\"E\");\n   |         ------------------------ move occurs because\
    \ `current_letter_grade` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n31 |             current_letter_grade = String::from(\"E\");\n \
    \  |             -------------------- this reinitialization might get skipped\n\
    ...\n34 |             current_letter_grade = String::from(current_letter_grade.chars().nth(1).unwrap());\n\
    \   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n35 |         }\n36 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n   |\n   = note: borrow occurs due to deref coercion to `str`\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut current_grade = grades.iter().next().unwrap();\n    while current_grade\
    \ < max_grade {\n        let letter_grade = match current_grade {\n          \
    \  0 => \"E\",\n            1 => \"D-\", \n            2 => \"D\", \n        \
    \    3 => \"C-\", \n            4 => \"C\", \n            5 => \"B-\", \n    \
    \        6 => \"B\", \n            7 => \"B-\", \n            8 => \"B\", \n \
    \           9 => \"B-\", \n            10 => \"B\", \n            11 => \"B-\"\
    , \n            12 => \"B\", \n            13 => \"B-\", \n            14 => \"\
    B\", \n            15 => \"B-\", \n            16 => \"B\", \n            17 =>\
    \ \"B-\", \n            18 => \"B\", \n            19 => \"B-\", \n          \
    \  20 => \"B\", \n            21 => \"B-\", \n            22 => \"B\", \n    \
    \        23 => \"B-\", \n            24 => \"B\", \n            25 => \"B-\",\
    \ \n            26 => \"B\", \n            27 => \"B-\", \n            28 => \"\
    B\", \n            29 => \"B-\", \n            30 => \"B\", \n            31 =>\
    \ \"B-\", \n            32 => \"B\", \n            33 => \"B-\", \n          \
    \  34 => \"B\", \n            35 => \"B-\", \n            36 => \"B\", \n    \
    \        37 => \"B-\", \n            38 => \"B\", \n            39 => \"B-\",\
    \ \n            40 => \"B\", \n            41 => \"B-\", \n            42 => \"\
    B\", \n            43 => \"B-\", \n            44 => \"B\", \n            45 =>\
    \ \"B-\", \n            46 => \"B\", \n            47 => \"B-\", \n          \
    \  48 => \"B\", \n            49 => \"B-\", \n            50 => \"B\", \n    \
    \        51 => \"B-\", \n            52 => \"B\", \n            53 => \"B-\",\
    \ \n            54 => \"B\", \n            55 => \"B-\", \n            56 => \"\
    B\", \n            57 => \"B-\", \n            58 => \"B\", \n            59 =>\
    \ \"B-\", \n            60 => \"B\", \n            61 => \"B-\", \n          \
    \  62 => \"B\", \n            63 => \"B-\", \n            64 => \"B\", \n    \
    \        65 => \"B-\", \n            66 => \"B\", \n            67 => \"B-\",\
    \ \n            68 => \"\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp82_2phn4.rs:108:83\n\
    \    |\n108 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n    |  ___________________________________________________________________________________^\n\
    109 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut prev_grade = grades_copy.clone();\n\
    \    let mut prev_grade_index = 0;\n    let mut prev_gpa = grades_copy.clone();\n\
    \    let mut prev_gpa_index = 0;\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_grade_index = 0;\n    let mut current_gpa = grades_copy.clone();\n\
    \    let mut current_gpa_index = 0;\n    while current_grade_index < grades_copy.len()\
    \ {\n        if current_grade[current_grade_index] <= prev_grade[prev_grade_index]\
    \ {\n            prev_grade[prev_grade_index] = current_grade[current_grade_index];\n\
    \            prev_gpa[prev_gpa_index] = current_gpa[current_gpa_index];\n    \
    \        prev_grade_index += 1;\n            prev_gpa_index += 1;\n          \
    \  current_grade_index += 1;\n            current_gpa_index += 1;\n        } else\
    \ {\n            letter_grades.push(String::from(\n                format!(\"\
    {}+\", prev_grade[prev_grade_index - 1])\n            ));\n            letter_grades.push(String::from(\n\
    \                format!(\"{}\", current_grade[current_grade_index - 1])\n   \
    \         ));\n            prev_grade_index += 1;\n            prev_gpa_index\
    \ += 1;\n            current_grade_index += 1;\n            current_gpa_index\
    \ += 1;\n        }\n    }\n    letter_grades.push(String::from(format!(\"{}\"\
    , prev_grade[prev_grade_index - 1])));\n    letter_grades.push(String::from(format!(\"\
    {}\", current_grade[current_grade_index - 1])));\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"3.5\", \"3.5\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmp5z415yvb.rs:62:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade > *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:31:29\n   |\n26 |  \
    \   let mut current_grade = grades_copy.first().unwrap();\n   |              \
    \               ---------------------------- expected due to this value\n...\n\
    31 |             current_grade = grade;\n   |                             ^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42qewi8b.rs:34:37\n\
    \   |\n34 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp42qewi8b.rs:35:27\n   |\n35 |         } else if grade < current_grade\
    \ {\n   |                           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n35 |         } else if grade\
    \ < *current_grade {\n   |                           +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp42qewi8b.rs:36:37\n   |\n36 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_min\
    \ = grades_copy.iter().min().unwrap();\n    let mut grades_max = grades_copy.iter().max().unwrap();\n\
    \    let mut grades_average = grades_sum / grades_copy.len();\n    let mut grades_standard_deviation\
    \ = grades_average;\n    let mut grades_standard_deviation_squared = 0.0;\n  \
    \  let mut grades_standard_deviation_cubed = 0.0;\n    let mut grades_standard_deviation_cubified\
    \ = 0.0;\n    let mut grades_standard_deviation_cubified_squared = 0.0;\n    let\
    \ mut grades_standard_deviation_cubified_cubed = 0.0;\n    let mut grades_standard_deviation_cubified_cubed\
    \ = grades_average;\n    let mut grades_standard_deviation_cubified_cubed = grades_average;\n\
    \    let mut grades_standard_deviation_cubified_cubed = grades_average;\n    let\
    \ mut grades_standard_deviation_cubified_cubed = grades_average;\n    let mut\
    \ grades_standard_deviation_cubified_cubed = grades_average;\n    let mut grades_standard_deviation_cubified_cubed\
    \ = grades_average;\n    let mut grades_standard_deviation_cubified_cubed = grades_average;\n\
    \    let mut grades_standard_deviation_cubified_cubed = grades_average;\n    let\
    \ mut grades_standard_deviation_cubified_cubed = grades_average;\n    let mut\
    \ grades_standard_deviation_cubified_cubed = grades_average;\n    let mut grades_standard_deviation_cubified_cubed\
    \ = grades_average;\n    let mut grades_standard_deviation_cubified_cubed = grades_average;\n\
    \    let mut grades_standard_deviation_cubified_cubed = grades_average;\n    let\
    \ mut grades_standard_deviation_cubified_cubed = grades_average;\n    let mut\
    \ grades_standard_deviation_cubified_cubed = grades_average;\n    let mut grades_standard_deviation_cubified_cubed\
    \ = grades_average;\n    let mut grades_standard_deviation_cubified_cubed = grades_average;\n\
    \    let mut grades_standard_deviation_cubified_cubed = grades_average;\n    let\
    \ mut grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n \
    \   assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvp1www83.rs:54:18\n   |\n\
    54 |     let mut grade\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpvp1www83.rs:27:45\n     |\n27   |     let mut grades_min = grades_copy.iter().min().unwrap();\n\
    \     |                                             ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n    --> /tmp/tmpvp1www83.rs:28:45\n     |\n28   |     let mut\
    \ grades_max = grades_copy.iter().max().unwrap();\n     |                    \
    \                         ^^^ the trait `Ord` is not implemented for `f64`\n \
    \    |\n     = help: the following other types implement trait `Ord`:\n      \
    \         i128\n               i16\n               i32\n               i64\n \
    \              i8\n               isize\n               u128\n               u16\n\
    \             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmpvp1www83.rs:29:41\n\
    \   |\n29 |     let mut grades_average = grades_sum / grades_copy.len();\n   |\
    \                                         ^ no implementation for `{float} / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ < 3.0 {\n            letter_grade += String::from(\"A+\");\n        } else if\
    \ grade < 3.3 {\n            letter_grade += String::from(\"A\");\n        } else\
    \ if grade < 3.7 {\n            letter_grade += String::from(\"A-\");\n      \
    \  } else if grade < 4.0 {\n            letter_grade += String::from(\"B+\");\n\
    \        } else if grade < 4.3 {\n            letter_grade += String::from(\"\
    B\");\n        } else if grade < 4.7 {\n            letter_grade += String::from(\"\
    B-\");\n        } else if grade < 5.0 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade < 5.3 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 5.7 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade < 6.0 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade < 6.3 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 6.7 {\n            letter_grade += String::from(\"\
    D-\");\n        } else {\n            letter_grade += String::from(\"E\");\n \
    \       }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpesh6vt8q.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A+\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"A+\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpesh6vt8q.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"A\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"A\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesh6vt8q.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"A-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"A-\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpesh6vt8q.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    B+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpesh6vt8q.rs:36:29\n  \
    \ |\n36 |             letter_grade += String::from(\"B\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"B\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpesh6vt8q.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"B-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \   "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grade = grades_copy.iter().sum();\n\
    \    let mut grade_index = 0;\n    while grade > 0.0 {\n        letter_grades.push(String::from(grades_copy[grade_index].to_string()));\n\
    \        grade_index += 1;\n        grade = grade - grades_copy[grade_index];\n\
    \    }\n    letter_grades.push(String::from(\"E\"));\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpxt_ez_v5.rs:26:9\n\
    \   |\n26 |     let mut grade = grades_copy.iter().sum();\n   |         ^^^^^^^^^\
    \ consider giving `grade` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    while current_grade\
    \ != 0.0 {\n        let mut current_letter_grade = String::from(current_letter_grade);\n\
    \        \n        if current_grade < 3.0 {\n            if current_grade < current_grade\
    \ {\n                current_letter_grade = String::from(\"A+\");\n          \
    \  } else {\n                current_letter_grade = String::from(\"A\");\n   \
    \         }\n        } else if current_grade < 3.3 {\n            if current_grade\
    \ < current_grade {\n                current_letter_grade = String::from(\"A-\"\
    );\n            } else {\n                current_letter_grade = String::from(\"\
    B+\");\n            }\n        } else if current_grade < 3.7 {\n            if\
    \ current_grade < current_grade {\n                current_letter_grade = String::from(\"\
    B\");\n            } else {\n                current_letter_grade = String::from(\"\
    B-\");\n            }\n        } else if current_grade < 4.0 {\n            if\
    \ current_grade < current_grade {\n                current_letter_grade = String::from(\"\
    C+\");\n            } else {\n                current_letter_grade = String::from(\"\
    C\");\n            }\n        } else if current_grade < 4.3 {\n            if\
    \ current_grade < current_grade {\n                current_letter_grade = String::from(\"\
    C-\");\n            } else {\n                current_letter_grade = String::from(\"\
    D+\");\n            }\n        } else if current_grade < 4.7 {\n            if\
    \ current_grade < current_grade {\n                current_letter_grade = String::from(\"\
    D\");\n            } else {\n                current_letter_grade = String::from(\"\
    D-\");\n            }\n        } else if current_grade < 5.0 {\n            if\
    \ current_grade < current_grade {\n                current_letter_grade = String::from(\"\
    E\");\n            } else {\n                current_letter_grade = String::from(\"\
    F\");\n            }\n        } else {\n            current_letter_grade = String::from(\"\
    F\");\n        }\n        \n        letter_grades.push(current_letter_grade);\n\
    \        \n        current_grade = grades_iter.next().unwrap();\n    }\n    \n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpxk9p43u4.rs:29:25\n\
    \   |\n29 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxk9p43u4.rs:32:28\n   |\n32 |         if current_grade < 3.0 {\n   |\
    \                            ^^^\n   |                            |\n   |    \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxk9p43u4.rs:38:35\n   |\n38 |         } else\
    \ if current_grade < 3.3 {\n   |                                   ^^^\n   | \
    \                                  |\n   |                                   expected\
    \ `&f64`, found floating-point number\n   |                                  \
    \ help: consider borrowing here: `&3.3`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxk9p43u4.rs:44:35\n   |\n44 |         } else if current_grade < 3.7\
    \ {\n   |                                   ^^^\n   |                        \
    \           |\n   |                                   expected `&f64`, found floating-point\
    \ number\n   |                                   help: consider borrowing here:\
    \ `&3.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk9p43u4.rs:50:35\n\
    \   |\n50 |         } else if current_grade < 4.0 {\n   |                    \
    \               ^^^\n   |                                   |\n   |          \
    \                         expected `&f64`, found floating-point number\n   | \
    \                                  help: consider borrowing here: `&4.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxk9p43u4.rs:56:35\n   |\n56 |         } else\
    \ if current_grade < 4.3 {\n   |                      "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next();\n\
    \    while let Some(grade) = current_grade {\n        let mut letter_grade = String::from(\"\
    \");\n        letter_grade += if grade >= 3.0 { String::from(\"A+\") } else {\
    \ String::from(\"A\") };\n        letter_grade += if grade >= 2.7 { String::from(\"\
    B+\") } else { String::from(\"B\") };\n        letter_grade += if grade >= 2.3\
    \ { String::from(\"B-\") } else { String::from(\"B\") };\n        letter_grade\
    \ += if grade >= 2.0 { String::from(\"C+\") } else { String::from(\"C\") };\n\
    \        letter_grade += if grade >= 1.7 { String::from(\"C\") } else { String::from(\"\
    C-\") };\n        letter_grade += if grade >= 1.3 { String::from(\"C-\") } else\
    \ { String::from(\"C\") };\n        letter_grade += if grade >= 1.0 { String::from(\"\
    D+\") } else { String::from(\"D\") };\n        letter_grade += if grade >= 0.7\
    \ { String::from(\"D\") } else { String::from(\"D-\") };\n        letter_grade\
    \ += if grade >= 0.0 { String::from(\"D-\") } else { String::from(\"D\") };\n\
    \        letter_grades.push(letter_grade);\n        current_grade = grades_iter.next();\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nhei94u.rs:29:37\n   |\n\
    29 |         letter_grade += if grade >= 3.0 { String::from(\"A+\") } else { String::from(\"\
    A\") };\n   |                                     ^^^\n   |                  \
    \                   |\n   |                                     expected `&f64`,\
    \ found floating-point number\n   |                                     help:\
    \ consider borrowing here: `&3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nhei94u.rs:29:43\n\
    \   |\n29 |         letter_grade += if grade >= 3.0 { String::from(\"A+\") } else\
    \ { String::from(\"A\") };\n   |                                           ^^^^^^^^^^^^^^^^^^\n\
    \   |                                           |\n   |                      \
    \                     expected `&str`, found struct `String`\n   |           \
    \                                help: consider borrowing here: `&String::from(\"\
    A+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nhei94u.rs:29:71\n  \
    \ |\n29 |         letter_grade += if grade >= 3.0 { String::from(\"A+\") } else\
    \ { String::from(\"A\") };\n   |                                             \
    \                          ^^^^^^^^^^^^^^^^^\n   |                           \
    \                                            |\n   |                         \
    \                                              expected `&str`, found struct `String`\n\
    \   |                                                                       help:\
    \ consider borrowing here: `&String::from(\"A\")`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4nhei94u.rs:30:37\n   |\n30 |         letter_grade += if\
    \ grade >= 2.7 { String::from(\"B+\") } else { String::from(\"B\") };\n   |  \
    \                                   ^^^\n   |                                \
    \     |\n   |                                     expected `&f64`, found floating-point\
    \ number\n   |                                     help: consider borrowing here:\
    \ `&2.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nhei94u.rs:30:43\n\
    \   |\n30 |         letter_grade += if grade >= 2.7 { String::from(\"B+\") } else\
    \ { String::from(\"B\") };\n   |  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"B+\";\n        } else if grade > 2.7\
    \ {\n            letter_grade += \"B\";\n        } else if grade > 2.3 {\n   \
    \         letter_grade += \"B-\";\n        } else if grade > 2.0 {\n         \
    \   letter_grade += \"C+\";\n        } else if grade > 1.7 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.3 {\n            letter_grade += \"C-\"\
    ;\n        } else if grade > 1.0 {\n            letter_grade += \"D+\";\n    \
    \    } else if grade > 0.7 {\n            letter_grade += \"D\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n  \
    \          letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpang75pda.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 && grade < 4.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 && grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 && grade < 3.3 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 && grade < 3.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 && grade < 2.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 && grade < 2.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 && grade < 2.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 && grade < 1.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 && grade < 1.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 && grade < 1.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"E\", \"E\", \"E\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpvplwees4.rs:59:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum = 0.0;\n    let mut grades_sq_sum_sq = 0.0;\n\
    \    let mut grades_sq_sum_sq_sum = 0.0;\n    let mut grades_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum = 0.0;\n    let\
    \ mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq = 0.0;\n\
    \    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum = 0.0;\n\
    \    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq = 0.0;\n\
    \    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum =\
    \ 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0.0;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0zwvzjh9.rs:50:97\n   |\n\
    50 |     let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_\n\
    \   |                                                                        \
    \                         ^ help: add `;` here\n51 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0zwvzjh9.rs:23:48\n   |\n23 |\
    \ fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade >= 4.0 {\n            letter_grade += \"A+\";\n        } else if grade\
    \ > 3.7 {\n            letter_grade += \"A\";\n        } else if grade > 3.3 {\n\
    \            letter_grade += \"A-\";\n        } else if grade > 3.0 {\n      \
    \      letter_grade += \"B+\";\n        } else if grade > 2.7 {\n            letter_grade\
    \ += \"B\";\n        } else if grade > 2.3 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade > 2.0 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade > 1.7 {\n            letter_grade += \"C\";\n        } else\
    \ if grade > 1.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ > 1.0 {\n            letter_grade += \"D+\";\n        } else if grade > 0.7\
    \ {\n            letter_grade += \"D\";\n        } else if grade > 0.0 {\n   \
    \         letter_grade += \"D-\";\n        } else {\n            letter_grade\
    \ += \"E\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.clone();\n  \
    \  grades_sorted.sort_unstable();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n\
    \    let mut grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut\
    \ grades_sorted_iter = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned();\n    let mut grades_sorted_iter = grades_sorted.iter().cloned\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprn4jqtnj.rs:54:61\n   |\n\
    54 |     let mut grades_sorted_iter = grades_sorted.iter().cloned\n   |      \
    \                                                       ^ help: add `;` here\n\
    55 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n    --> /tmp/tmprn4jqtnj.rs:25:19\n     |\n25   |     grades_sorted.sort_unstable();\n\
    \     |                   ^^^^^^^^^^^^^ the trait `Ord` is not implemented for\
    \ `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::sort_unstable`\n\nerror[E0615]: attempted to take value of method `cloned`\
    \ on type `std::slice::Iter<'_, f64>`\n  --> /tmp/tmprn4jqtnj.rs:54:55\n   |\n\
    54 |     let mut grades_sorted_iter = grades_sorted.iter().cloned\n   |      \
    \                                                 ^^^^^^ method, not a field\n\
    \   |\nhelp: use parentheses to call the method\n   |\n54 |     let mut grades_sorted_iter\
    \ = grades_sorted.iter().cloned()\n   |                                      \
    \                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprn4jqtnj.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0615.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut letter_grades = vec![];\n   \
    \ let mut current_grade = grades_sorted[0];\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades_sorted {\n        if grade >\
    \ current_grade {\n            letter_grades.push(current_letter_grade);\n   \
    \         current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmp6j3sgjzj.rs:25:19\n\
    \     |\n25   |     grades_sorted.sort_unstable();\n     |                   ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6j3sgjzj.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6j3sgjzj.rs:37:37\n   |\n37 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first().unwrap();\n    for grade in grades.iter().skip(1)\
    \ {\n        let mut letter_grade = String::from(\"\");\n        if grade > current_grade\
    \ {\n            letter_grade += \"+\";\n        }\n        if grade < current_grade\
    \ {\n            letter_grade += \"-\";\n        }\n        if grade == current_grade\
    \ {\n            letter_grade += \"=\";\n        }\n        letter_grades.push(letter_grade);\n\
    \        current_grade = grade;\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"-\", \"-\", \"+\", \"+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]`', /tmp/tmp6xh5bct5.rs:45:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmp_pgn2mkv.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pgn2mkv.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_pgn2mkv.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while current_grade != 0.0 {\n        if current_grade < current_grade.floor()\
    \ {\n            current_letter_grade = String::from(\"E\");\n            current_letter_grade_index\
    \ = 0;\n        }\n        \n        if current_grade < current_grade.floor()\
    \ + 0.3 {\n            current_letter_grade = String::from(\"D-\");\n        \
    \    current_letter_grade_index = 1;\n        }\n        \n        if current_grade\
    \ < current_grade.floor() + 0.6 {\n            current_letter_grade = String::from(\"\
    D+\");\n            current_letter_grade_index = 2;\n        }\n        \n   \
    \     if current_grade < current_grade.floor() + 0.9 {\n            current_letter_grade\
    \ = String::from(\"D\");\n            current_letter_grade_index = 3;\n      \
    \  }\n        \n        if current_grade < current_grade.floor() + 1.2 {\n   \
    \         current_letter_grade = String::from(\"C-\");\n            current_letter_grade_index\
    \ = 4;\n        }\n        \n        if current_grade < current_grade.floor()\
    \ + 1.5 {\n            current_letter_grade = String::from(\"C\");\n         \
    \   current_letter_grade_index = 5;\n        }\n        \n        if current_grade\
    \ < current_grade.floor() + 1.8 {\n            current_letter_grade = String::from(\"\
    B-\");\n            current_letter_grade_index = 6;\n        }\n        \n   \
    \     if current_grade < current_grade.floor() + 2.1 {\n            current_letter_grade\
    \ = String::from(\"B\");\n            current_letter_grade_index = 7;\n      \
    \  }\n        \n        if current_grade < current_grade.floor() + 2.4 {\n   \
    \         current_letter_grade = String::from(\"A-\");\n            current_letter_grade_index\
    \ = 8;\n        }\n        \n        if current_grade < current_grade.floor()\
    \ + 2.7 {\n            current_letter_grade = String::from(\"A\");\n         \
    \   current_letter_grade_index = 9;\n        }\n        \n        if current_grade\
    \ < current_grade.floor() + 3.0 {\n            current_letter_grade = String::from(\"\
    A+\");\n            current_letter_grade_index = 10;\n        }\n        \n  \
    \      if current_grade < current_grade.floor() + 3.3 {\n            current_letter_grade\
    \ = String::from(\"A\");\n            current_letter_grade_index = 11;\n     \
    \   }\n        \n        if current_grade < current_grade.floor() + 3.6 {\n  \
    \          current_letter_grade = String::from(\"A\");\n            current_letter_grade_index\
    \ = 12;\n        }\n        \n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9hvn9vlt.rs:107:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n30  |     while current_grade != 0.0 {\n    |                           \
    \     - this delimiter might not be properly closed...\n...\n97  | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n107 | }\n    |\
    \   ^\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmp9hvn9vlt.rs:30:25\n\
    \   |\n30 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9hvn9vlt.rs:31:28\n   |\n31 |         if current_grade < current_grade.floor()\
    \ {\n   |                            ^^^^^^^^^^^^^^^^^^^^^\n   |             \
    \               |\n   |                            expected `&f64`, found `f64`\n\
    \   |                            help: consider borrowing here: `&current_grade.floor()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9hvn9vlt.rs:36:28\n   |\n36 |\
    \         if current_grade < current_grade.floor() + 0.3 {\n   |             \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                            |\n\
    \   |                            expected `&f64`, found `f64`\n   |          \
    \                  help: consider borrowing here: `&(current_grade.floor() + 0.3)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9hvn9vlt.rs:41:28\n   |\n41 |\
    \         if current_grade < current_grade.floor() + 0.6 {\n   |             \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                            |\n\
    \   |                            expected `&f64`, found `f64`\n   |          \
    \                  help: consid"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut min_grade_index = -1;\n    let\
    \ mut max_grade_index = -1;\n    \n    for grade in grades_copy {\n        if\
    \ grade < min_grade {\n            min_grade = grade;\n            min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n        }\n   \
    \     if grade > max_grade {\n            max_grade = grade;\n            max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n        }\n   \
    \ }\n    \n    for grade in grades_copy {\n        if grade == min_grade {\n \
    \           letter_grades.push(String::from(\"A+\"));\n        }\n        if grade\
    \ == max_grade {\n            letter_grades.push(String::from(\"D-\"));\n    \
    \    }\n        if grade < min_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade > max_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade < 0.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade == min_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if grade == max_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grade < min_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade > max_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade < 0.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n        if grade < 0.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if grade == min_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if grade == max_grade {\n            letter_grades.push(String::\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp59wuf4w8.rs:103:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n42  |     for grade in grades_copy {\n    |                             \
    \ - unclosed delimiter\n...\n91  |         if grade == max_grade {\n    |    \
    \                           - this delimiter might not be properly closed...\n\
    92  |             letter_grades.push(String::\n93  | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n103 | }\n    |   ^\n\nerror: expected\
    \ identifier, found `)`\n  --> /tmp/tmp59wuf4w8.rs:93:1\n   |\n93 | }\n   | ^\
    \ expected identifier\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp59wuf4w8.rs:92:31\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n92 |             letter_grades.push(String::\n\
    \   |                               ^ unclosed delimiter\n93 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmp59wuf4w8.rs:34:65\n\
    \   |\n34 |             min_grade_index = grades_copy.iter().position(|x| x ==\
    \ min_grade).unwrap();\n   |                                                 \
    \                ^^ no implementation for `&f64 == f64`\n   |\n   = help: the\
    \ trait `PartialEq<f64>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp59wuf4w8.rs:28:31\n\
    \   |\n28 |     let mut min_grade_index = -1;\n   |                          \
    \     ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the\
    \ following other types implement trait `Neg`:\n             &f32\n          \
    \   &f64\n             &i128\n  "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    \n    for grade in grades {\n        if grade < min_grade {\n           \
    \ letter_grades.push(String::from(\"D-\"));\n            min_grade_index = grades.iter().position(|x|\
    \ x == min_grade).unwrap();\n            min_grade = grade;\n        } else if\
    \ grade > max_grade {\n            letter_grades.push(String::from(\"D+\"));\n\
    \            max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \            max_grade = grade;\n        } else {\n            letter_grades.push(String::from(\n\
    \                match grades[min_grade_index..max_grade_index].iter().position(|x|\
    \ x == grade).unwrap() {\n                    0 => \"D-\",\n                 \
    \   1 => \"D\",\n                    2 => \"C-\",\n                    3 => \"\
    C\",\n                    4 => \"B-\",\n                    5 => \"B\",\n    \
    \                6 => \"A-\",\n                    7 => \"A\",\n             \
    \       _ => \"E\",\n                }\n            ));\n            min_grade_index\
    \ = grades.iter().position(|x| x == min_grade).unwrap();\n            max_grade_index\
    \ = grades.iter().position(|x| x == max_grade).unwrap();\n            min_grade\
    \ = grade;\n            max_grade = grade;\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqcb2va3r.rs:25:39\n\
    \     |\n25   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpqcb2va3r.rs:26:39\n\
    \     |\n26   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqcb2va3r.rs:31:20\n   |\n31 |\
    \         if grade < min_grade {\n   |                    ^^^^^^^^^ expected `f64`,\
    \ found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |    \
    \     if grade < *min_grade {\n   |                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqcb2va3r.rs:34:25\n   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n\
    \   |                         ---------------------------- expected due to this\
    \ value\n...\n34 |             min_grade = grade;\n   |                      \
    \   ^^^^^\n   |                         |\n   |                         expected\
    \ `&f64`, found `f64`\n   |                         help: consider borrowing here:\
    \ `&grade`\n\nerror[E0308]: mismatched types\n  --"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut grade = grades_copy[0];\n  \
    \  let mut grades_length = grades_copy.len();\n    let mut grades_index = 0;\n\
    \    while grade != 0.0 {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            grades_index += 1;\n        } else if grade < 4.0 {\n   \
    \         letter_grades.push(String::from(\"A\"));\n            grades_index +=\
    \ 1;\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grades_index += 1;\n        } else if grade < 6.0 {\n   \
    \         letter_grades.push(String::from(\"B+\"));\n            grades_index\
    \ += 1;\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n            grades_index += 1;\n        } else if grade < 8.0 {\n    \
    \        letter_grades.push(String::from(\"B-\"));\n            grades_index +=\
    \ 1;\n        } else if grade < 9.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n            grades_index += 1;\n        } else if grade < 10.0 {\n  \
    \          letter_grades.push(String::from(\"C\"));\n            grades_index\
    \ += 1;\n        } else if grade < 11.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grades_index += 1;\n        } else if grade < 12.0 {\n  \
    \          letter_grades.push(String::from(\"D+\"));\n            grades_index\
    \ += 1;\n        } else if grade < 13.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n            grades_index += 1;\n        } else if grade < 14.0 {\n   \
    \         letter_grades.push(String::from(\"D-\"));\n            grades_index\
    \ += 1;\n        } else if grade < 15.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            grades_index += 1;\n        } else {\n            letter_grades.push(String::from(\"\
    F\"));\n            grades_index += 1;\n        }\n        grade = grades_copy[grades_index];\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpxnyj6fx7.rs:25:17\n\
    \     |\n25   |     grades_copy.sort_unstable();\n     |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n     |\n     = help: the following\
    \ other types implement trait `Ord`:\n               i128\n               i16\n\
    \               i32\n               i64\n               i8\n               isize\n\
    \               u128\n               u16\n             and 4 others\nnote: required\
    \ by a bound in `core::slice::<impl [T]>::sort_unstable`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_points = 0;\n    for grade\
    \ in grades {\n        let points = grade * total_grade;\n        total_points\
    \ += points;\n        let letter_grade = if points > 0.0 {\n            if points\
    \ < total_points {\n                String::from(\"D-\")\n            } else if\
    \ points == total_points {\n                String::from(\"D\")\n            }\
    \ else {\n                String::from(\"D+\")\n            }\n        } else\
    \ {\n            String::from(\"E\")\n        };\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmptopmdu8u.rs:25:9\n\
    \   |\n25 |     let mut total_grade = grades.iter().sum();\n   |         ^^^^^^^^^^^^^^^\
    \ consider giving `total_grade` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    while current_grade\
    \ != 0.0 {\n        if current_grade < 3.0 {\n            current_letter_grade\
    \ = String::from(\"A\");\n        } else if current_grade < 4.0 {\n          \
    \  current_letter_grade = String::from(\"B\");\n        } else if current_grade\
    \ < 5.0 {\n            current_letter_grade = String::from(\"C\");\n        }\
    \ else if current_grade < 6.0 {\n            current_letter_grade = String::from(\"\
    D\");\n        } else if current_grade < 7.0 {\n            current_letter_grade\
    \ = String::from(\"E\");\n        } else {\n            current_letter_grade =\
    \ String::from(\"F\");\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade = grades_iter.next().unwrap();\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmps8me80x5.rs:28:25\n\
    \   |\n28 |     while current_grade != 0.0 {\n   |                         ^^\
    \ no implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmps8me80x5.rs:29:28\n   |\n29 |         if current_grade < 3.0 {\n   |\
    \                            ^^^\n   |                            |\n   |    \
    \                        expected `&f64`, found floating-point number\n   |  \
    \                          help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps8me80x5.rs:31:35\n   |\n31 |         } else\
    \ if current_grade < 4.0 {\n   |                                   ^^^\n   | \
    \                                  |\n   |                                   expected\
    \ `&f64`, found floating-point number\n   |                                  \
    \ help: consider borrowing here: `&4.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmps8me80x5.rs:33:35\n   |\n33 |         } else if current_grade < 5.0\
    \ {\n   |                                   ^^^\n   |                        \
    \           |\n   |                                   expected `&f64`, found floating-point\
    \ number\n   |                                   help: consider borrowing here:\
    \ `&5.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps8me80x5.rs:35:35\n\
    \   |\n35 |         } else if current_grade < 6.0 {\n   |                    \
    \               ^^^\n   |                                   |\n   |          \
    \                         expected `&f64`, found floating-point number\n   | \
    \                                  help: consider borrowing here: `&6.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps8me80x5.rs:37:35\n   |\n37 |         } else\
    \ if current_grade < 7.0 {\n   |                      "
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4weg8co0.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_len = grades.len();\n    let\
    \ mut grades_sum: f64 = 0.0;\n    let mut grades_sum_square: f64 = 0.0;\n    let\
    \ mut grades_sq_sum: f64 = 0.0;\n    let mut grades_sq_sum_square: f64 = 0.0;\n\
    \    let mut grades_sq_sum_square_2: f64 = 0.0;\n    let mut grades_sq_sum_square_3:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_4: f64 = 0.0;\n    let mut grades_sq_sum_square_5:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_6: f64 = 0.0;\n    let mut grades_sq_sum_square_7:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_8: f64 = 0.0;\n    let mut grades_sq_sum_square_9:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_10: f64 = 0.0;\n    let mut grades_sq_sum_square_11:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_12: f64 = 0.0;\n    let mut grades_sq_sum_square_13:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_14: f64 = 0.0;\n    let mut grades_sq_sum_square_15:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_16: f64 = 0.0;\n    let mut grades_sq_sum_square_17:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_18: f64 = 0.0;\n    let mut grades_sq_sum_square_19:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_20: f64 = 0.0;\n    let mut grades_sq_sum_square_21:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_22: f64 = 0.0;\n    let mut grades_sq_sum_square_23:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_24: f64 = 0.0;\n    let mut grades_sq_sum_square_25:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_26: f64 = 0.0;\n    let mut grades_sq_sum_square_27:\
    \ f64 = 0.0;\n    let mut grades_sq_sum_square_28: f64 = 0.0;\n    let \n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp6cr7r2j3.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    let mut max_grade_index = 0;\n    let mut\
    \ min_grade_index = 0;\n    let mut current_grade = grades_copy[0];\n    let mut\
    \ current_index = grades_copy.iter().enumerate().find(|&(_, grade)| grade == current_grade).unwrap();\n\
    \    while current_index != grades_copy.len() - 1 {\n        if grades_copy[current_index]\
    \ > max_grade {\n            max_grade = grades_copy[current_index];\n       \
    \     max_grade_index = current_index;\n        }\n        if grades_copy[current_index]\
    \ < min_grade {\n            min_grade = grades_copy[current_index];\n       \
    \     min_grade_index = current_index;\n        }\n        current_grade = grades_copy[current_index];\n\
    \        current_index = grades_copy.iter().enumerate().find(|&(_, grade)| grade\
    \ == current_grade).unwrap();\n    }\n    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_grade_index].to_string()));\n\
    \    letter_grades.push(String::from(grades_copy[max_\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpgktmfz_b.rs:60:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n60 |     letter_grades.push(String::from(grades_copy[max_\n\
    \   |                                                ^ unclosed delimiter\n61\
    \ | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `max_` in this scope\n  --> /tmp/tmpgktmfz_b.rs:60:49\n   |\n60 |     letter_grades.push(String::from(grades_copy[max_\n\
    \   |                                                 ^^^^ not found in this scope\n\
    \nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmpgktmfz_b.rs:31:85\n\
    \   |\n31 |     let mut current_index = grades_copy.iter().enumerate().find(|&(_,\
    \ grade)| grade == current_grade).unwrap();\n   |                            \
    \                                                         ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgktmfz_b.rs:32:28\n\
    \   |\n32 |     while current_index != grades_copy.len() - 1 {\n   |         \
    \                   ^^^^^^^^^^^^^^^^^^^^^ expected tuple, found `usize`\n   |\n\
    \   = note: expected tuple `(usize, &f64)`\n               found type `usize`\n\
    \nerror[E0277]: the type `[f64]` cannot be indexed by `(usize, &f64)`\n  --> /tmp/tmpgktmfz_b.rs:33:12\n\
    \   |\n33 |         if grades_copy[current_index] > max_grade {\n   |        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>` is not implemented for\
    \ `(usize, &f64)`\n   = help: the trait `SliceIndex<[T]>` is implemented for `(Bound<usize>,\
    \ Bound<usize>)`\n   = note: required because"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut grades_length = grades_copy.len();\n    let mut grades_grades = vec![];\n\
    \    let mut grades_grades_length = grades_grades.len();\n    let mut grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_length = grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades = vec![];\n    let mut grades_grades_grades_grades_length\
    \ = grades_grades_grades_grades.len();\n    let mut grades_grades_grades_grades_grades\
    \ = vec![];\n    let mut grades_grades_grades_grades_grades_length = grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades = vec![];\n    let mut\
    \ grades_grades_grades_grades_grades_grades_length = grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades = vec![];\n    let\
    \ mut grades_grades_grades_grades_grades_grades_grades_length = grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades = vec![];\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_length =\
    \ grades_grades_grades_grades_grades_grades_grades_grades.len();\n    let mut\
    \ grades_grades_grades_grades_grades_grades_grades_grades_grades = vec![];\n \
    \   let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_length\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n  \
    \  let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_length\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \    let mut grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_length\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades`\
    \ in this scope\n  --> /tmp/tmpgtinpnjq.rs:43:99\n   |\n43 | ...grades_grades_length\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades_grades_grades_grades_grades_grades_grades_length`\n\
    \nerror[E0425]: cannot find value `grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades`\
    \ in this scope\n  --> /tmp/tmpgtinpnjq.rs:44:113\n   |\n44 | ...ades_grades_length\
    \ = grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades.len();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_grades_length`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpgtinpnjq.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgtinpnjq.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nF"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec_iter = grades_vec.iter();\n\
    \    let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter\
    \ = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n   \
    \ let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter =\
    \ grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n    let\
    \ mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n\
    \    let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter\
    \ = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n   \
    \ let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter =\
    \ grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n    let\
    \ mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n\
    \    let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter\
    \ = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n   \
    \ let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter =\
    \ grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n    let\
    \ mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n\
    \    let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter\
    \ = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n   \
    \ let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter =\
    \ grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n    let\
    \ mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n\
    \    let mut grades_vec_iter = grades_vec.iter();\n    let mut grades_vec_iter\
    \ = grades_vec.iter();\n    let mut grades_vec_iter = grades_vec.iter();\n   \
    \ let mut grades_vec_iter = grades_vec.iter();\n    let mut grade\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnm8estn5.rs:63:18\n   |\n\
    63 |     let mut grade\n   |                  ^ help: add `;` here\n64 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnm8estn5.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010856
