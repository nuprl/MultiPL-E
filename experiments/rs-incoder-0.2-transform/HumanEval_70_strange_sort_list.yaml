name: HumanEval_70_strange_sort_list
language: rs
prompt: "/// Given list of integers, return list in strange order.\n/// Strange sorting,\
  \ is when you start with the minimum value,\n/// then maximum of the remaining integers,\
  \ then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1, 2, 3,\
  \ 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n/// vec![5,\
  \ 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\nfn strange_sort_list(lst:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut lst = lst.to_vec();\n    lst.sort();\n    lst", "    let\
    \ mut lst = lst.to_vec();\n    let mut min = lst.iter().min().unwrap();\n    let\
    \ mut max = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    while min_idx != max_idx {\n        let tmp = min;\n        min = max;\n\
    \        max = tmp;\n        min_idx = lst.iter().position(|x| x == min).unwrap();\n\
    \        max_idx = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst", "    let mut lst = lst.to_vec();\n    lst.sort();\n    lst", "    let\
    \ mut result = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for el in lst {\n        if el < min_value {\n            min_value\
    \ = el;\n        }\n        if el > max_value {\n            max_value = el;\n\
    \        }\n    }\n    for el in lst {\n        if el == min_value {\n       \
    \     result.push(max_value);\n            result.push(el);\n            result.push(min_value);\n\
    \        } else {\n            result.push(el);\n        }\n    }\n    result",
  "    let mut lst = lst.to_owned();\n    let mut min = lst.iter().min().unwrap();\n\
    \    let mut max = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    while min_idx != max_idx {\n        let tmp = min;\n        min = max;\n\
    \        max = tmp;\n        min_idx = lst.iter().position(|x| x == min).unwrap();\n\
    \        max_idx = lst.iter().position(|x| x == max).unwrap();\n    }\n    lst",
  "    let mut sorted_list = lst;\n    sorted_list.sort();\n    sorted_list", "  \
    \  let mut sorted_list = Vec::new();\n    let mut min_value = lst[0];\n    let\
    \ mut max_value = lst[0];\n    for value in lst {\n        if value < min_value\
    \ {\n            min_value = value;\n        }\n        if value > max_value {\n\
    \            max_value = value;\n        }\n    }\n    while min_value != max_value\
    \ {\n        let mut min_idx = sorted_list.len();\n        let mut max_idx = sorted_list.len();\n\
    \        for idx in 0..sorted_list.len() {\n            if sorted_list[idx] <\
    \ min_value {\n                min_idx = idx;\n            }\n            if sorted_list[idx]\
    \ > max_value {\n                max_idx = idx;\n            }\n        }\n  \
    \      sorted_list.swap(min_idx, max_idx);\n        min_value = max_value;\n \
    \       max_value = sorted_list[max_idx];\n    }\n    sorted_list", "    let mut\
    \ sorted_list = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for x in lst {\n        if x < min_value {\n            min_value\
    \ = x;\n        }\n        if x > max_value {\n            max_value = x;\n  \
    \      }\n    }\n    for x in lst {\n        if x == min_value {\n           \
    \ sorted_list.push(x);\n        }\n        if x == max_value {\n            sorted_list.push(x);\n\
    \        }\n    }\n    sorted_list", "    let mut result = Vec::new();\n    let\
    \ mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst\
    \ {\n        if value < min_value {\n            min_value = value;\n        }\n\
    \        if value > max_value {\n            max_value = value;\n        }\n \
    \   }\n    for value in lst {\n        if value < min_value {\n            result.push(value);\n\
    \        }\n        if value > max_value {\n            result.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < max_value {\n  \
    \          result.push(value);\n        }\n    }\n    result", "    let mut lst\
    \ = lst.to_vec();\n    let mut min = lst.iter().min().unwrap();\n    let mut max\
    \ = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    let mut min_idx = min_idx.saturating_sub(1);\n    let mut max_idx = max_idx.saturating_sub(1);\n\
    \    while min_idx != max_idx {\n        lst[min_idx] = lst[max_idx];\n      \
    \  min_idx -= 1;\n        max_idx -= 1;\n    }\n    lst", "    let mut sorted_list\
    \ = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value = lst[0];\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    sorted_list.push(min_value);\n    sorted_list.push(max_value);\n\
    \    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list.push(min_value);\n    sorted_list", "    let\
    \ mut sorted_list = lst;\n    sorted_list.sort();\n    sorted_list", "    let\
    \ mut lst = lst.to_vec();\n    lst.sort();\n    lst", "    let mut res = Vec::new();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min_val).unwrap();\n    let\
    \ mut max_idx = lst.iter().position(|x| x == max_val).unwrap();\n    while min_idx\
    \ < max_idx {\n        res.push(min_val);\n        min_idx += 1;\n    }\n    while\
    \ min_idx < lst.len() {\n        res.push(max_val);\n        max_idx += 1;\n \
    \   }\n    while max_idx < lst.len() {\n        res.push(min_val);\n        max_idx\
    \ += 1;\n    }\n    res", "    let mut res = Vec::new();\n    let mut min = lst.iter().min().unwrap();\n\
    \    let mut max = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n    let mut max_idx = lst.iter().position(|x| *x == max).unwrap();\n\
    \    while min_idx != max_idx {\n        res.push(lst.swap_remove(min_idx));\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    res", "    let mut\
    \ sorted_list = Vec::new();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for value in lst {\n        if value < min_value {\n        \
    \    min_value = value;\n        }\n        if value > max_value {\n         \
    \   max_value = value;\n        }\n    }\n    sorted_list.push(min_value);\n \
    \   sorted_list.push(max_value);\n    for value in lst {\n        if value < min_value\
    \ {\n            sorted_list.push(value);\n        }\n        if value > max_value\
    \ {\n            sorted_list.push(value);\n        }\n    }\n    sorted_list",
  "    let mut lst = lst.to_vec();\n    let mut min_value = lst[0];\n    let mut max_value\
    \ = lst[0];\n    for value in lst {\n        if value < min_value {\n        \
    \    min_value = value;\n        }\n        if value > max_value {\n         \
    \   max_value = value;\n        }\n    }\n    let mut lst = lst.to_vec();\n  \
    \  lst.sort_by_key(|x| {\n        if x == min_value {\n            0\n       \
    \ } else if x == max_value {\n            1\n        } else {\n            2\n\
    \        }\n    });\n    lst", "    let mut lst = lst.to_vec();\n    lst.sort();\n\
    \    lst", "    let mut lst = lst.to_vec();\n    lst.sort();\n    lst", "    let\
    \ mut sorted_list = Vec::new();\n    let mut min_value = lst[0];\n    let mut\
    \ max_value = lst[0];\n    for el in lst {\n        if el < min_value {\n    \
    \        min_value = el;\n        }\n        if el > max_value {\n           \
    \ max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n    let\
    \ mut max_value = max_value;\n    for el in lst {\n        if el < min_value {\n\
    \            min_value = el;\n        }\n        if el > max_value {\n       \
    \     max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el < min_value\
    \ {\n            min_value = el;\n        }\n        if el > max_value {\n   \
    \         max_value = el;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for el in lst {\n        if el"]
stop_tokens:
- "\n}"
