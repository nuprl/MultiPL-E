name: HumanEval_83_starts_one_ends
language: rs
prompt: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
  /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n    let\
    \ mut n = 0;\n    while n <= n / 10 {\n        n += 1;\n    }\n    n", "    match\
    \ n {\n        0 => 0,\n        _ => 1,\n    }", "    debug_assert!(n > 0);\n\
    \    debug_assert!(n % 10 == 1);\n    let mut count = 0;\n    while n > 0 {\n\
    \        count += n / 10;\n        n /= 10;\n    }\n    count", "    match n {\n\
    \        0 => 0,\n        _ => 1,\n    }", "    match n {\n        0 => 0,\n \
    \       _ => 1 + starts_one_ends(n - 1),\n    }", "    match n {\n        1 =>\
    \ 1,\n        _ => n,\n    }", "    debug_assert!(n > 0);\n    debug_assert!(n\
    \ % 10 == 1);\n    let mut count = 0;\n    for &i in &n.digits(10) {\n       \
    \ if i == 1 {\n            count += 1;\n        }\n        if i == 0 {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n \
    \   while n >= 10 {\n        if n % 10 == 1 {\n            count += 1;\n     \
    \   }\n        n /= 10;\n    }\n    count", "    match n {\n        1 => 1,\n\
    \        _ => n,\n    }", "    debug_assert!(n > 0);\n    let mut count = 0;\n\
    \    while n > 0 {\n        if n % 10 == 1 {\n            count += 1;\n      \
    \  }\n        n /= 10;\n    }\n    count", "    match n {\n        0 => 0,\n \
    \       _ => 1 + starts_one_ends(n - 1),\n    }", "    let mut count = 0;\n  \
    \  while n > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n\
    \        n /= 10;\n    }\n    count", "    match n {\n        0 => 0,\n      \
    \  1 => 1,\n        _ => 1 + starts_one_ends(n - 1),\n    }", "    debug_assert!(n\
    \ > 0);\n    let mut count = 0;\n    while n > 0 {\n        count += n / 10;\n\
    \        n /= 10;\n    }\n    count", "    let mut count = 0;\n    while n > 0\
    \ {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n /=\
    \ 10;\n    }\n    count", "    if n == 0 {\n        return 0;\n    }\n    if n\
    \ == 1 {\n        return 1;\n    }\n    if n % 2 == 0 {\n        return starts_one_ends(n\
    \ / 2) + 1;\n    }\n    return starts_one_ends(n / 2) + 2;", "    let mut count\
    \ = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n            count += 1;\n\
    \        }\n        n /= 10;\n    }\n    count", "    debug_assert!(n > 0);\n\
    \    let mut count = 0;\n    while n > 0 {\n        count += n / 10;\n       \
    \ n /= 10;\n    }\n    count", "    if n == 0 {\n        return 0;\n    }\n  \
    \  let mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if n %\
    \ i == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
  "    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n != 0 {\n      \
    \  if n % 10 == 1 {\n            count += 1;\n        }\n        n /= 10;\n  \
    \  }\n    count"]
stop_tokens:
- "\n}"
