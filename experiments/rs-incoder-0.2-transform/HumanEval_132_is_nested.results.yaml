language: rs
name: HumanEval_132_is_nested
results:
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if let Some(index)\
    \ = string.find('[', i) {\n            stack.push(index);\n            i += 1;\n\
    \        } else if let Some(index) = string.find(']', i) {\n            if stack.is_empty()\
    \ {\n                return false;\n            }\n            let top = stack.pop();\n\
    \            if top != index {\n                return false;\n            }\n\
    \            i += 1;\n        } else {\n            return false;\n        }\n\
    \    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmptfwjc8ad.rs:20:37\n     |\n20   |         if let Some(index)\
    \ = string.find('[', i) {\n     |                                     ^^^^ ---\
    \  - supplied 2 arguments\n     |                                     |\n    \
    \ |                                     expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0061]: this function takes 1 argument but 2\
    \ arguments were supplied\n    --> /tmp/tmptfwjc8ad.rs:23:44\n     |\n23   | \
    \        } else if let Some(index) = string.find(']', i) {\n     |           \
    \                                 ^^^^ ---  - supplied 2 arguments\n     |   \
    \                                         |\n     |                          \
    \                  expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfwjc8ad.rs:28:23\n  \
    \ |\n28 |             if top != index {\n   |                       ^^^^^ expected\
    \ enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n28 |             if top != Some(index) {\n   |                       +++++\
    \     +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets = 0;\n    let mut close_brackets = 0;\n    for c in\
    \ string.chars() {\n        if c == '[' {\n            stack.push(c);\n      \
    \      open_brackets += 1;\n        } else if c == ']' {\n            close_brackets\
    \ += 1;\n            if close_brackets == 1 {\n                stack.pop();\n\
    \            }\n        } else if open_brackets > 0 && close_brackets == 0 {\n\
    \            if stack.len() == 0 {\n                return false;\n          \
    \  }\n            if stack.len() == open_brackets {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ysflixi.rs:22:24\n   |\n\
    22 |             stack.push(c);\n   |                        ^ expected `usize`,\
    \ found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '[' && stack.len() > 0 && stack.pop() == '[' {\n            open_brackets\
    \ -= 1;\n        }\n        if open_brackets == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuddlgb.rs:23:65\n   |\n\
    23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == '[' {\n \
    \  |                                                                 ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == Some('[')\
    \ {\n   |                                                                 +++++\
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_index: usize = 0;\n\
    \    let mut close_brackets_stack_index: usize = 0;\n    let mut open_brackets_stack_size:\
    \ usize = 0;\n    let mut close_brackets_stack_size: usize = 0;\n    let mut open_brackets_stack_ptr:\
    \ usize = 0;\n    let mut close_brackets_stack_ptr: usize = 0;\n    let mut open_brackets_stack_ptr_2:\
    \ usize = 0;\n    let mut close_brackets_stack_ptr_2: usize = 0;\n    let mut\
    \ open_brackets_stack_ptr_3: usize = 0;\n    let mut close_brackets_stack_ptr_3:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_4: usize = 0;\n    let mut close_brackets_stack_ptr_4:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_5: usize = 0;\n    let mut close_brackets_stack_ptr_5:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_6: usize = 0;\n    let mut close_brackets_stack_ptr_6:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_7: usize = 0;\n    let mut close_brackets_stack_ptr_7:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_8: usize = 0;\n    let mut close_brackets_stack_ptr_8:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_9: usize = 0;\n    let mut close_brackets_stack_ptr_9:\
    \ usize = 0;\n    let mut open_brackets_stack_ptr_10: usize = 0;\n    let mut\
    \ close_brackets_stack_ptr_10: usize = 0;\n    let mut open_brackets_stack_ptr_11:\
    \ usize = 0;\n    let mut close_brackets_stack_ptr_11: usize = 0;\n    let mut\
    \ open_brackets_\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk68m9jf1.rs:48:27\n   |\n\
    48 |     let mut open_brackets_\n   |                           ^ help: add `;`\
    \ here\n49 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk68m9jf1.rs:16:33\n   |\n16 | fn is_nested(string: String) -> bool {\n\
    \   |    ---------                    ^^^^ expected `bool`, found `()`\n   | \
    \   |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| is_bracket(c))\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_bracket` in this scope\n  --> /tmp/tmpypnn5b60.rs:17:28\n\
    \   |\n17 |     string.chars().all(|c| is_bracket(c))\n   |                  \
    \          ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut index = 0;\n    let mut open_brackets = 0;\n    let mut close_brackets\
    \ = 0;\n    let mut open_brackets_stack: Vec<usize> = Vec::new();\n    let mut\
    \ close_brackets_stack: Vec<usize> = Vec::new();\n    let mut open_brackets_index\
    \ = 0;\n    let mut close_brackets_index = 0;\n    let mut open_brackets_index2\
    \ = 0;\n    let mut close_brackets_index2 = 0;\n    let mut open_brackets_index3\
    \ = 0;\n    let mut close_brackets_index3 = 0;\n    let mut open_brackets_index4\
    \ = 0;\n    let mut close_brackets_index4 = 0;\n    let mut open_brackets_index5\
    \ = 0;\n    let mut close_brackets_index5 = 0;\n    let mut open_brackets_index6\
    \ = 0;\n    let mut close_brackets_index6 = 0;\n    let mut open_brackets_index7\
    \ = 0;\n    let mut close_brackets_index7 = 0;\n    let mut open_brackets_index8\
    \ = 0;\n    let mut close_brackets_index8 = 0;\n    let mut open_brackets_index9\
    \ = 0;\n    let mut close_brackets_index9 = 0;\n    let mut open_brackets_index10\
    \ = 0;\n    let mut close_brackets_index10 = 0;\n    let mut open_brackets_index11\
    \ = 0;\n    let mut close_brackets_index11 = 0;\n    let mut open_brackets_index12\
    \ = 0;\n    let mut close_brackets_index12 = 0;\n    let mut open_brackets_index13\
    \ = 0;\n    let mut close_brackets_index13 = 0;\n    let mut open_brackets_index14\
    \ = 0;\n    let mut close_brackets_index14 = 0;\n    let mut open_brackets_index15\
    \ = 0;\n    let mut close_brackets_index15 = 0;\n    let mut open_brackets_index16\
    \ = 0;\n    let mut close_brackets_index16 = 0;\n    let mut open_brackets_index17\
    \ = 0;\n    let mut close_brackets_index17 = 0;\n    let mut open_brackets_index18\
    \ = 0;\n    let mut close_brackets_index18 = 0;\n    let mut open_brackets_\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpufi5e1au.rs:59:27\n   |\n\
    59 |     let mut open_brackets_\n   |                           ^ help: add `;`\
    \ here\n60 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpufi5e1au.rs:16:33\n   |\n16 | fn is_nested(string: String) -> bool {\n\
    \   |    ---------                    ^^^^ expected `bool`, found `()`\n   | \
    \   |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '[' && stack.len() > 0 && stack.pop() == '[' {\n            open_brackets\
    \ -= 1;\n        }\n        if open_brackets == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuddlgb.rs:23:65\n   |\n\
    23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == '[' {\n \
    \  |                                                                 ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == Some('[')\
    \ {\n   |                                                                 +++++\
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut bracket_stack: Vec<usize> = vec![];\n    let mut bracket_depth: usize\
    \ = 0;\n    let mut bracket_open = false;\n    let mut bracket_closed = false;\n\
    \    let mut bracket_open_depth = 0;\n    let mut bracket_closed_depth = 0;\n\
    \    let mut bracket_open_depth_max = 0;\n    let mut bracket_closed_depth_max\
    \ = 0;\n    let mut bracket_open_depth_min = 0;\n    let mut bracket_closed_depth_min\
    \ = 0;\n    let mut bracket_open_depth_sum = 0;\n    let mut bracket_closed_depth_sum\
    \ = 0;\n    let mut bracket_open_depth_product = 1;\n    let mut bracket_closed_depth_product\
    \ = 1;\n    let mut bracket_open_depth_product_max = 1;\n    let mut bracket_closed_depth_product_max\
    \ = 1;\n    let mut bracket_open_depth_product_min = 1;\n    let mut bracket_closed_depth_product_min\
    \ = 1;\n    let mut bracket_open_depth_product_sum = 1;\n    let mut bracket_closed_depth_product_sum\
    \ = 1;\n    let mut bracket_open_depth_product_product = 1;\n    let mut bracket_closed_depth_product_product\
    \ = 1;\n    let mut bracket_open_depth_product_product_max = 1;\n    let mut bracket_closed_depth_product_product_max\
    \ = 1;\n    let mut bracket_open_depth_product_product_min = 1;\n    let mut bracket_closed_depth_product_product_min\
    \ = 1;\n    let mut bracket_open_depth_product_product_sum = 1;\n    let mut bracket_closed_depth_product_product_sum\
    \ = 1;\n    let mut bracket_open_depth_product_product_product = 1;\n    let mut\
    \ bracket_closed_depth_product_product_product = 1;\n    let mut bracket_open_depth_product_product_product_max\
    \ = 1;\n    let mut bracket_closed_depth_product_product_product_max = 1;\n  \
    \  let mut bracket_open_depth_product_product_product_min = 1;\n    let mut bracket_closed_depth_product_product_product_min\
    \ = 1;\n    let mut bracket_open_depth_product_product_product_sum = 1;\n    let\
    \ mut bracket_closed_depth_product_product_product_sum = 1;\n    let mut bracket_open_depth_product_product_product_product\
    \ = 1;\n    let mut bracket_closed_depth_product_product_\n}\n\nfn main() {\n\
    \    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn65yeicx.rs:55:50\n   |\n\
    55 |     let mut bracket_closed_depth_product_product_\n   |                 \
    \                                 ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn65yeicx.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        if string[i] == '[' {\n  \
    \          stack.push(string[i]);\n            i += 1;\n        } else if string[i]\
    \ == ']' {\n            if stack.is_empty() {\n                return false;\n\
    \            }\n            let last = stack.pop();\n            if last != '['\
    \ {\n                return false;\n            }\n            i += 1;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    stack.is_empty()\n}\n\
    \nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpyu3r8xxt.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpyu3r8xxt.rs:21:24\n   |\n21 |             stack.push(string[i]);\n\
    \   |                        ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpyu3r8xxt.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\ne"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: Vec<usize> = Vec::new();\n    let mut close_brackets:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_size: usize = 0;\n    let\
    \ mut close_brackets_size: usize = 0;\n    let mut open_brackets_depth: usize\
    \ = 0;\n    let mut close_brackets_depth: usize = 0;\n    let mut open_brackets_depth_limit:\
    \ usize = 0;\n    let mut close_brackets_depth_limit: usize = 0;\n    let mut\
    \ open_brackets_depth_limit_reached = false;\n    let mut close_brackets_depth_limit_reached\
    \ = false;\n    let mut open_brackets_depth_limit_reached = false;\n    let mut\
    \ close_brackets_depth_limit_reached = false;\n    let mut open_brackets_depth_limit_reached\
    \ = false;\n    let mut close_brackets_depth_limit_reached = false;\n    let mut\
    \ open_brackets_depth_limit_reached = false;\n    let mut close_brackets_depth_limit_reached\
    \ = false;\n    let mut open_brackets_depth_limit_reached = false;\n    let mut\
    \ close_brackets_depth_limit_reached = false;\n    let mut open_brackets_depth_limit_reached\
    \ = false;\n    let mut close_brackets_depth_limit_reached = false;\n    let mut\
    \ open_brackets_depth_limit_reached = false;\n    let mut close_brackets_depth_limit_reached\
    \ = false;\n    let mut open_brackets_depth_limit_reached = false;\n    let mut\
    \ close_brackets_depth_limit_reached = false;\n    let mut open_brackets_depth_limit_reached\
    \ = false;\n    let mut close_brackets_depth_limit_reached = false;\n    let mut\
    \ open_brackets_depth_limit_reached = false;\n    let mut close_brackets_depth_limit_reached\
    \ = false;\n    let mut open_brackets_depth_limit_reached = false;\n    let mut\
    \ close_brackets_depth_limit_reached = false;\n    let mut open_brackets_depth_limit_reached\
    \ = false;\n    let mut close_brackets_depth_limit_reached = false;\n    let mut\
    \ open_brackets_depth_limit_reached = false;\n    let mut close_brackets_depth_limit_reached\
    \ = false;\n    let mut open_brackets_depth_limit_reached = false;\n    let mut\
    \ close_brackets_depth_limit_reached = false;\n    let mut open_brackets_depth_limit_\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp15kzzaby.rs:54:39\n   |\n\
    54 |     let mut open_brackets_depth_limit_\n   |                            \
    \           ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp15kzzaby.rs:16:33\n   |\n16 | fn is_nested(string:\
    \ String) -> bool {\n   |    ---------                    ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '[' && stack.len() > 0 && stack.pop() == '[' {\n            open_brackets\
    \ -= 1;\n        }\n        if open_brackets == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuddlgb.rs:23:65\n   |\n\
    23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == '[' {\n \
    \  |                                                                 ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == Some('[')\
    \ {\n   |                                                                 +++++\
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut index = 0;\n    let mut bracket_count = 0;\n    let mut bracket_open\
    \ = false;\n    let mut bracket_closed = false;\n    loop {\n        if index\
    \ >= string.len() {\n            return bracket_count == 0;\n        }\n     \
    \   let c = string[index];\n        if c == '[' {\n            stack.push(index);\n\
    \            bracket_open = true;\n            bracket_count++;\n        } else\
    \ if c == '{' {\n            stack.push(index);\n            bracket_open = true;\n\
    \            bracket_count++;\n        } else if c == '}' {\n            bracket_closed\
    \ = true;\n            bracket_count--;\n            if bracket_count == 0 {\n\
    \                bracket_open = false;\n            }\n        } else if c ==\
    \ '[' {\n            bracket_open = false;\n            bracket_closed = false;\n\
    \            bracket_count--;\n        } else if c == '{' {\n            bracket_open\
    \ = false;\n            bracket_closed = false;\n            bracket_count--;\n\
    \        } else if c == '}' {\n            bracket_open = false;\n           \
    \ bracket_closed = false;\n            bracket_count--;\n        } else if c ==\
    \ '\"' {\n            bracket_open = false;\n            bracket_closed = false;\n\
    \            bracket_count--;\n        } else if c == '\\'' {\n            bracket_open\
    \ = false;\n            bracket_closed = false;\n            bracket_count--;\n\
    \        } else if c == '/' {\n            bracket_open = false;\n           \
    \ bracket_closed = false;\n            bracket_count--;\n        } else if c ==\
    \ '\\\\' {\n            bracket_open = false;\n            bracket_closed = false;\n\
    \            bracket_count--;\n        } else if c == '\\n' {\n            bracket_open\
    \ = false;\n            bracket_closed = false;\n            bracket_count--;\n\
    \        } else if c == '\\r' {\n            bracket_open = false;\n         \
    \   bracket_closed = false;\n            bracket_count--;\n        } else if c\
    \ == '\\t' {\n            bracket_open = false;\n            bracket_closed =\
    \ false;\n            bracket_count--;\n        } else if c == '\\v' {\n     \
    \       bracket_open = false;\n            bracket_closed = false;\n         \
    \   bracket_count--;\n        } else if c == '\\b' {\n            bracket_open\
    \ = false;\n            brack\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: unknown character escape: `v`\n  --> /tmp/tmp00nf2934.rs:81:26\n\
    \   |\n81 |         } else if c == '\\v' {\n   |                          ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n   |\n81 |         } else if c ==\
    \ r\"\\v\" {\n   |                        ~~~~~\n\nerror: unknown character escape:\
    \ `b`\n  --> /tmp/tmp00nf2934.rs:85:26\n   |\n85 |         } else if c == '\\\
    b' {\n   |                          ^ unknown character escape\n   |\n   = help:\
    \ for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n   |\n85 |         } else if c ==\
    \ r\"\\b\" {\n   |                        ~~~~~\n\nerror: this file contains an\
    \ unclosed delimiter\n   --> /tmp/tmp00nf2934.rs:106:3\n    |\n16  | fn is_nested(string:\
    \ String) -> bool {\n    |                                      - unclosed delimiter\n\
    ...\n22  |     loop {\n    |          - unclosed delimiter\n...\n85  |       \
    \  } else if c == '\\b' {\n    |                             - this delimiter\
    \ might not be properly closed...\n...\n88  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n106 | }\n    |   ^\n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmp00nf2934.rs:30:26\n   |\n30 | \
    \            bracket_count++;\n   |                          ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n30 |             { let tmp =\
    \ bracket_count; bracket_count += 1; tmp };\n   |             +++++++++++    \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n30 -             bracket_count++;\n30\
    \ +             bracket_count += 1;\n   | \n\nerror: Rust has no postfix increment\
    \ operator\n  --> /tmp/tmp00nf2934.rs:34:26\n   |\n34 |             bracket_count++;\n\
    \   |                          ^^ not a valid postfix operator\n   |\nhelp: use"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n        }\n        if string[i] == ']' {\n  \
    \          if stack.is_empty() {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n        i += 1;\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6pj7zkio.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp6pj7zkio.rs:23:12\n   |\n23 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == ']'\
    \ {\n            if stack.is_empty() {\n                return false;\n      \
    \      }\n            let index = stack.pop().unwrap();\n            if index\
    \ == i {\n                return true;\n            }\n        }\n        stack.push(i);\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpwiy_6ryn.rs:21:12\n\
    \   |\n21 |         if string[i] == ']' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == ']'\
    \ {\n            close_brackets++;\n            stack.pop();\n        } else if\
    \ string[i] == '[' {\n            open_brackets++;\n            stack.push(0);\n\
    \        } else if string[i] == ']' && open_brackets > close_brackets {\n    \
    \        open_brackets--;\n        } else if string[i] == '[' && open_brackets\
    \ < close_brackets {\n            close_brackets--;\n        }\n        i += 1;\n\
    \    }\n    open_brackets == close_brackets\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp5i2b5ndq.rs:23:27\n\
    \   |\n23 |             close_brackets++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |       \
    \      { let tmp = close_brackets; close_brackets += 1; tmp };\n   |         \
    \    +++++++++++               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n23 -            \
    \ close_brackets++;\n23 +             close_brackets += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmp5i2b5ndq.rs:26:26\n   |\n26\
    \ |             open_brackets++;\n   |                          ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n26 |             { let\
    \ tmp = open_brackets; open_brackets += 1; tmp };\n   |             +++++++++++\
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n26 -             open_brackets++;\n\
    26 +             open_brackets += 1;\n   | \n\nerror: expected expression, found\
    \ `;`\n  --> /tmp/tmp5i2b5ndq.rs:29:28\n   |\n29 |             open_brackets--;\n\
    \   |                            ^ expected expression\n\nerror: expected expression,\
    \ found `;`\n  --> /tmp/tmp5i2b5ndq.rs:31:29\n   |\n31 |             close_brackets--;\n\
    \   |                             ^ expected expression\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp5i2b5ndq.rs:22:12\n   |\n\
    22 |         if string[i] == ']' {\n   |            ^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5i2b5ndq.rs:25:19\n   |\n25 |         } else if string[i] == '['\
    \ {\n   |                   ^^^^^^^^^"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    for c in string.chars()\
    \ {\n        if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == '{' {\n            stack.push(c);\n        } else\
    \ if c == '}' {\n            close_brackets += 1;\n            if close_brackets\
    \ == open_brackets {\n                stack.pop();\n            }\n        }\n\
    \    }\n    stack.len() == 0 && close_brackets == open_brackets\n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzr3tzkyw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut bracket_count = 0;\n    let mut bracket_depth = 0;\n    let mut bracket_open\
    \ = false;\n    let mut bracket_closed = false;\n    let mut bracket_open_depth\
    \ = 0;\n    let mut bracket_closed_depth = 0;\n    let mut bracket_open_depth_max\
    \ = 0;\n    let mut bracket_closed_depth_max = 0;\n    let mut bracket_open_depth_max_index\
    \ = 0;\n    let mut bracket_closed_depth_max_index = 0;\n    let mut bracket_open_depth_min\
    \ = 0;\n    let mut bracket_closed_depth_min = 0;\n    let mut bracket_open_depth_min_index\
    \ = 0;\n    let mut bracket_closed_depth_min_index = 0;\n    let mut bracket_open_depth_max_depth\
    \ = 0;\n    let mut bracket_closed_depth_max_depth = 0;\n    let mut bracket_open_depth_min_depth\
    \ = 0;\n    let mut bracket_closed_depth_min_depth = 0;\n    let mut bracket_open_depth_min_depth_index\
    \ = 0;\n    let mut bracket_closed_depth_min_depth_index = 0;\n    let mut bracket_open_depth_max_depth_index\
    \ = 0;\n    let mut bracket_closed_depth_max_depth_index = 0;\n    let mut bracket_open_depth_min_depth_index\
    \ = 0;\n    let mut bracket_closed_depth_min_depth_index = 0;\n    let mut bracket_open_depth_max_depth_index_max\
    \ = 0;\n    let mut bracket_closed_depth_max_depth_index_max = 0;\n    let mut\
    \ bracket_open_depth_min_depth_index_max = 0;\n    let mut bracket_closed_depth_min_depth_index_max\
    \ = 0;\n    let mut bracket_open_depth_max_depth_index_min = 0;\n    let mut bracket_closed_depth_max_depth_index_min\
    \ = 0;\n    let mut bracket_open_depth_min_depth_index_min = 0;\n    let mut bracket_closed_depth_min_depth_index_min\
    \ = 0;\n    let mut bracket_open_depth_max_depth_index_min_index = 0;\n    let\
    \ mut bracket_closed_depth_max_depth_index_min_index = 0;\n    let mut bracket_open_depth_min_depth_index_min_index\
    \ = 0;\n    let mut bracket_closed_depth_min_depth_index_min_index = 0;\n    let\
    \ mut bracket_open_depth_max_depth_index_min_index_max = 0;\n    let mut \n}\n\
    \nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp56wraf6s.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut index = 0;\n    let mut bracket_count = 0;\n    let mut bracket_level\
    \ = 0;\n    let mut bracket_open = false;\n    let mut bracket_closed = false;\n\
    \    let mut bracket_opening_char = false;\n    let mut bracket_closing_char =\
    \ false;\n    let mut bracket_opening_char_count = 0;\n    let mut bracket_closing_char_count\
    \ = 0;\n    let mut bracket_opening_char_index = 0;\n    let mut bracket_closing_char_index\
    \ = 0;\n    let mut bracket_opening_char_string = \"\";\n    let mut bracket_closing_char_string\
    \ = \"\";\n    let mut bracket_opening_char_string_index = 0;\n    let mut bracket_closing_char_string_index\
    \ = 0;\n    let mut bracket_opening_char_string_index2 = 0;\n    let mut bracket_closing_char_string_index2\
    \ = 0;\n    let mut bracket_opening_char_string_index3 = 0;\n    let mut bracket_closing_char_string_index3\
    \ = 0;\n    let mut bracket_opening_char_string_index4 = 0;\n    let mut bracket_closing_char_string_index4\
    \ = 0;\n    let mut bracket_opening_char_string_index5 = 0;\n    let mut bracket_closing_char_string_index5\
    \ = 0;\n    let mut bracket_opening_char_string_index6 = 0;\n    let mut bracket_closing_char_string_index6\
    \ = 0;\n    let mut bracket_opening_char_string_index7 = 0;\n    let mut bracket_closing_char_string_index7\
    \ = 0;\n    let mut bracket_opening_char_string_index8 = 0;\n    let mut bracket_closing_char_string_index8\
    \ = 0;\n    let mut bracket_opening_char_string_index9 = 0;\n    let mut bracket_closing_char_string_index9\
    \ = 0;\n    let mut bracket_opening_char_string_index10 = 0;\n    let mut bracket_closing_char_string_index10\
    \ = 0;\n    let mut bracket_opening_char_string_index11 = 0;\n    let mut bracket_closing_char_string_index11\
    \ = 0;\n    let mut bracket_opening_char_string_index12 = 0;\n    let mut bracket_closing_char_string_index12\
    \ = 0;\n    let mut bracket_opening_char_string_index13 = 0;\n    let mut bracket_closing_char_string_index13\
    \ = 0;\n    let mut bracket_open\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk_1yvj1l.rs:57:25\n   |\n\
    57 |     let mut bracket_open\n   |                         ^ help: add `;` here\n\
    58 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_1yvj1l.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            open_brackets\
    \ += 1;\n            i += 1;\n        } else if string[i] == ']' {\n         \
    \   close_brackets += 1;\n            i += 1;\n        } else if string[i] ==\
    \ '{' {\n            i += 1;\n            stack.push(string[i]);\n        } else\
    \ if string[i] == '}' {\n            i += 1;\n            if open_brackets > close_brackets\
    \ {\n                return false;\n            }\n            open_brackets -=\
    \ 1;\n            close_brackets -= 1;\n            stack.pop();\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    open_brackets == close_brackets\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu2b84nbt.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu2b84nbt.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu2b84nbt.rs:28:19\n   |\n28 |         } else if string[i] == '{'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerro"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        if string[i] == '[' {\n  \
    \          stack.push(string[i]);\n            i += 1;\n        } else if string[i]\
    \ == ']' {\n            if stack.is_empty() {\n                return false;\n\
    \            }\n            let top = stack.pop();\n            if top != '['\
    \ {\n                return false;\n            }\n            i += 1;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    stack.is_empty()\n}\n\
    \nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8n4s3q8q.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8n4s3q8q.rs:21:24\n   |\n21 |             stack.push(string[i]);\n\
    \   |                        ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8n4s3q8q.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\ne"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| is_bracket(c))\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_bracket` in this scope\n  --> /tmp/tmpypnn5b60.rs:17:28\n\
    \   |\n17 |     string.chars().all(|c| is_bracket(c))\n   |                  \
    \          ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    \n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzs90qdop.rs:16:33\n   |\n\
    16 | fn is_nested(string: String) -> bool {\n   |    ---------               \
    \     ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut bracket_depth: usize = 0;\n    let mut bracket_depths: Vec<usize>\
    \ = Vec::new();\n    let mut bracket_depths_len: usize = 0;\n    let mut bracket_depths_lens:\
    \ Vec<usize> = Vec::new();\n    let mut bracket_depths_lens_len: usize = 0;\n\
    \    let mut bracket_depths_lens_lens: Vec<usize> = Vec::new();\n    let mut bracket_depths_lens_lens_len:\
    \ usize = 0;\n    let mut bracket_depths_lens_lens_lens: Vec<usize> = Vec::new();\n\
    \    let mut bracket_depths_lens_lens_lens_len: usize = 0;\n    let mut bracket_depths_lens_lens_lens_lens:\
    \ Vec<usize> = Vec::new();\n    let mut bracket_depths_lens_lens_lens_lens_len:\
    \ usize = 0;\n    let mut bracket_depths_lens_lens_lens_lens_lens: usize = 0;\n\
    \    let mut bracket_depths_lens_lens_lens_lens_lens_len: usize = 0;\n    let\
    \ mut bracket_depths_lens_lens_lens_lens_lens_lens_len: usize = 0;\n    let mut\
    \ bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens: usize = 0;\n    let\
    \ mut bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens: usize\
    \ = 0;\n    let mut bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ usize = 0;\n    let mut bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens:\
    \ usize = 0;\n    let mut bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp921d09yv.rs:38:71\n   |\n\
    38 |     let mut bracket_depths_lens_lens_lens_lens_lens_lens_lens_lens_len\n\
    \   |                                                                       ^\
    \ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp921d09yv.rs:16:33\n   |\n16 | fn is_nested(string: String)\
    \ -> bool {\n   |    ---------                    ^^^^ expected `bool`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.\n}\n\n\
    fn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n   --> /tmp/tmp838pevg1.rs:119:1\n    |\n\
    119 | }\n    | ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp838pevg1.rs:118:5\n\
    \    |\n16  | fn is_nested(string: String) -> bool {\n    |                  \
    \               ---- expected `bool` because of return type\n...\n118 |     stack.\n\
    \    |     ^^^^^ expected `bool`, found struct `Vec`\n    |\n    = note: expected\
    \ type `bool`\n             found struct `Vec<{integer}>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = Vec::new();\n    let mut close_brackets = Vec::new();\n\
    \    \n    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n\
    \            open_brackets.push(c);\n        }\n        if c == '[' {\n      \
    \      if stack.len() == 0 {\n                return false;\n            }\n \
    \           close_brackets.push(c);\n        }\n        if c == ']' {\n      \
    \      if stack.len() == 0 {\n                return false;\n            }\n \
    \           stack.pop();\n            open_brackets.pop();\n        }\n      \
    \  if c == ']' {\n            if stack.len() == 0 {\n                return false;\n\
    \            }\n            close_brackets.pop();\n        }\n    }\n    \n  \
    \  if stack.len() != 0 {\n        return false;\n    }\n    \n    if open_brackets.len()\
    \ != close_brackets.len() {\n        return false;\n    }\n    \n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp___7df_m.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if stack.is_empty()\
    \ {\n            return false;\n        }\n        let mut j = i;\n        while\
    \ j < string.len() && string[j] == string[stack.last()] {\n            j = j +\
    \ 1;\n        }\n        if j == i {\n            stack.pop();\n        } else\
    \ {\n            stack.push(j);\n        }\n        i = j;\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpahtn6md8.rs:25:35\n\
    \   |\n25 |         while j < string.len() && string[j] == string[stack.last()]\
    \ {\n   |                                   ^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&{integer}>`\n\
    \  --> /tmp/tmpahtn6md8.rs:25:48\n   |\n25 |         while j < string.len() &&\
    \ string[j] == string[stack.last()] {\n   |                                  \
    \              ^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&{integer}>`\n\
    \   |\n   = help: the trait `Index<Option<&{integer}>>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut open_brackets: usize = 0;\n    let mut close_brackets:\
    \ usize = 0;\n    let mut open_brackets_stack: Vec<usize> = vec![0; string.len()];\n\
    \    let mut close_brackets_stack: Vec<usize> = vec![0; string.len()];\n    let\
    \ mut open_brackets_stack_index: usize = 0;\n    let mut close_brackets_stack_index:\
    \ usize = 0;\n    let mut open_brackets_stack_index2: usize = 0;\n    let mut\
    \ close_brackets_stack_index2: usize = 0;\n    let mut open_brackets_stack_index3:\
    \ usize = 0;\n    let mut close_brackets_stack_index3: usize = 0;\n    let mut\
    \ open_brackets_stack_index4: usize = 0;\n    let mut close_brackets_stack_index4:\
    \ usize = 0;\n    let mut open_brackets_stack_index5: usize = 0;\n    let mut\
    \ close_brackets_stack_index5: usize = 0;\n    let mut open_brackets_stack_index6:\
    \ usize = 0;\n    let mut close_brackets_stack_index6: usize = 0;\n    let mut\
    \ open_brackets_stack_index7: usize = 0;\n    let mut close_brackets_stack_index7:\
    \ usize = 0;\n    let mut open_brackets_stack_index8: usize = 0;\n    let mut\
    \ close_brackets_stack_index8: usize = 0;\n    let mut open_brackets_stack_index9:\
    \ usize = 0;\n    let mut close_brackets_stack_index9: usize = 0;\n    let mut\
    \ open_brackets_stack_index10: usize = 0;\n    let mut close_brackets_stack_index10:\
    \ usize = 0;\n    let mut open_brackets_stack_index11: usize = 0;\n    let mut\
    \ close_brackets_stack_index11: usize = 0;\n    let mut open_brackets_stack_index12:\
    \ usize = 0;\n    let mut close_brackets_stack_index12: usize = 0;\n    let mut\
    \ open_brackets_stack_index13: usize = 0;\n    let mut close_brackets_stack_index13:\
    \ usize = 0;\n    let mut open_brackets_stack_index14: usize = 0;\n    let mu\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb78_vhak.rs:49:11\n   |\n\
    49 |     let mu\n   |           ^ help: add `;` here\n50 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb78_vhak.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.\n}\n\n\
    fn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n   --> /tmp/tmp838pevg1.rs:119:1\n    |\n\
    119 | }\n    | ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp838pevg1.rs:118:5\n\
    \    |\n16  | fn is_nested(string: String) -> bool {\n    |                  \
    \               ---- expected `bool` because of return type\n...\n118 |     stack.\n\
    \    |     ^^^^^ expected `bool`, found struct `Vec`\n    |\n    = note: expected\
    \ type `bool`\n             found struct `Vec<{integer}>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == ']' {\n            open_brackets -= 1;\n            if open_brackets ==\
    \ 0 {\n                stack.pop();\n            }\n        }\n    }\n    stack.len()\
    \ > 0 && stack.len() == open_brackets\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyewat4nn.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n\
    \            open_brackets += 1;\n        } else if c == '{' {\n            stack.push(c);\n\
    \            open_brackets += 1;\n        } else if c == '}' {\n            close_brackets\
    \ += 1;\n            if open_brackets == close_brackets {\n                stack.pop();\n\
    \                open_brackets -= 1;\n            }\n        }\n    }\n    stack.len()\
    \ != 0\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa9gcv841.rs:22:24\n   |\n\
    22 |             stack.push(c);\n   |                        ^ expected `usize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa9gcv841.rs:25:24\n\
    \   |\n25 |             stack.push(c);\n   |                        ^ expected\
    \ `usize`, found `char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: Vec<usize> = Vec::new();\n    let mut close_brackets:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_idx: usize = 0;\n    let\
    \ mut close_brackets_idx: usize = 0;\n    let mut idx = 0;\n    while idx < string.len()\
    \ {\n        if string[idx] == '[' {\n            stack.push(idx);\n         \
    \   open_brackets.push(idx);\n            open_brackets_idx += 1;\n        }\n\
    \        if string[idx] == ']' {\n            close_brackets.push(idx);\n    \
    \        close_brackets_idx += 1;\n        }\n        if string[idx] == '[' &&\
    \ open_brackets_idx > close_brackets_idx {\n            open_brackets_idx -= 1;\n\
    \        }\n        if string[idx] == ']' && open_brackets_idx > close_brackets_idx\
    \ {\n            close_brackets_idx -= 1;\n        }\n        idx += 1;\n    }\n\
    \    stack.len() > 0 && stack.iter().all(|&idx| close_brackets_idx == open_brackets_idx)\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp_endc85e.rs:24:12\n\
    \   |\n24 |         if string[idx] == '[' {\n   |            ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp_endc85e.rs:29:12\n   |\n29 |         if string[idx] == ']' {\n\
    \   |            ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp_endc85e.rs:33:12\n\
    \   |\n33 |         if string[idx] == '[' && open_brackets_idx > close_brackets_idx\
    \ {\n   |            ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n          "
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut bracket_depth: usize = 0;\n    let mut bracket_depth_count: usize\
    \ = 0;\n    let mut bracket_depth_index: usize = 0;\n    let mut bracket_depth_index2:\
    \ usize = 0;\n    let mut bracket_depth_index3: usize = 0;\n    let mut bracket_depth_index4:\
    \ usize = 0;\n    let mut bracket_depth_index5: usize = 0;\n    let mut bracket_depth_index6:\
    \ usize = 0;\n    let mut bracket_depth_index7: usize = 0;\n    let mut bracket_depth_index8:\
    \ usize = 0;\n    let mut bracket_depth_index9: usize = 0;\n    let mut bracket_depth_index10:\
    \ usize = 0;\n    let mut bracket_depth_index11: usize = 0;\n    let mut bracket_depth_index12:\
    \ usize = 0;\n    let mut bracket_depth_index13: usize = 0;\n    let mut bracket_depth_index14:\
    \ usize = 0;\n    let mut bracket_depth_index15: usize = 0;\n    let mut bracket_depth_index16:\
    \ usize = 0;\n    let mut bracket_depth_index17: usize = 0;\n    let mut bracket_depth_index18:\
    \ usize = 0;\n    let mut bracket_depth_index19: usize = 0;\n    let mut bracket_depth_index20:\
    \ usize = 0;\n    let mut bracket_depth_index21: usize = 0;\n    let mut bracket_depth_index22:\
    \ usize = 0;\n    let mut bracket_depth_index23: usize = 0;\n    let mut bracket_depth_index24:\
    \ usize = 0;\n    let mut bracket_depth_index25: usize = 0;\n    let mut bracket_depth_index26:\
    \ usize = 0;\n    let mut bracket_depth_index27: usize = 0;\n    let mut bracket_depth_index28:\
    \ usize = 0;\n    let mut bracket_depth_index29: usize = 0;\n    let mut bracket_depth_index30:\
    \ usize = 0;\n    let mut bracket_depth_index31: usize = 0;\n    let mut bracket_depth_index32:\
    \ usize = 0;\n    let mut brack\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppm1kz6r4.rs:54:18\n   |\n\
    54 |     let mut brack\n   |                  ^ help: add `;` here\n55 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppm1kz6r4.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut pos = 0;\n    let mut bracket_count = 0;\n    while pos < string.len()\
    \ {\n        if string[pos] == '[' {\n            stack.push(pos);\n         \
    \   bracket_count += 1;\n        }\n        if string[pos] == ']' {\n        \
    \    bracket_count -= 1;\n            if bracket_count == 0 {\n              \
    \  stack.pop();\n            }\n        }\n        pos += 1;\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpduy4_21z.rs:21:12\n\
    \   |\n21 |         if string[pos] == '[' {\n   |            ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpduy4_21z.rs:25:12\n   |\n25 |         if string[pos] == ']' {\n\
    \   |            ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n            i += 1;\n        } else if string[i]\
    \ == ']' {\n            stack.pop();\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    stack.len() > 1\n}\n\nfn main() {\n\
    \    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpobe9gemo.rs:21:12\n\
    \   |\n21 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpobe9gemo.rs:24:19\n   |\n24 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for ch in string.chars() {\n        if ch == '['\
    \ {\n            stack.push(ch);\n            open_brackets += 1;\n        } else\
    \ if ch == ']' {\n            open_brackets -= 1;\n            if open_brackets\
    \ == 0 {\n                stack.pop();\n            }\n        }\n    }\n    stack.len()\
    \ > 0 && stack.last().is_some()\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgqshp_ir.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    let mut open_brackets = 0;\n    let\
    \ mut closed_brackets = 0;\n    while i < string.len() {\n        if string[i]\
    \ == '[' {\n            stack.push(open_brackets);\n            open_brackets\
    \ += 1;\n        }\n        if string[i] == ']' {\n            closed_brackets\
    \ += 1;\n            if open_brackets == stack[stack.len() - 1] {\n          \
    \      stack.pop();\n            } else {\n                open_brackets -= 1;\n\
    \            }\n        }\n        i += 1;\n    }\n    stack.len() == closed_brackets\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp94jjcwmu.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp94jjcwmu.rs:26:12\n   |\n26 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut bracket_count = 0;\n    let mut bracket_open = false;\n    let mut bracket_closed\
    \ = false;\n    let mut bracket_open_depth = 0;\n    let mut bracket_closed_depth\
    \ = 0;\n    let mut bracket_open_depth_max = 0;\n    let mut bracket_closed_depth_max\
    \ = 0;\n    let mut bracket_open_depth_min = 0;\n    let mut bracket_closed_depth_min\
    \ = 0;\n    let mut bracket_open_depth_sum = 0;\n    let mut bracket_closed_depth_sum\
    \ = 0;\n    let mut bracket_open_depth_product = 1;\n    let mut bracket_closed_depth_product\
    \ = 1;\n    let mut bracket_open_depth_product2 = 0;\n    let mut bracket_closed_depth_product2\
    \ = 0;\n    let mut bracket_open_depth_product3 = 0;\n    let mut bracket_closed_depth_product3\
    \ = 0;\n    let mut bracket_open_depth_product4 = 0;\n    let mut bracket_closed_depth_product4\
    \ = 0;\n    let mut bracket_open_depth_product5 = 0;\n    let mut bracket_closed_depth_product5\
    \ = 0;\n    let mut bracket_open_depth_product6 = 0;\n    let mut bracket_closed_depth_product6\
    \ = 0;\n    let mut bracket_open_depth_product7 = 0;\n    let mut bracket_closed_depth_product7\
    \ = 0;\n    let mut bracket_open_depth_product8 = 0;\n    let mut bracket_closed_depth_product8\
    \ = 0;\n    let mut bracket_open_depth_product9 = 0;\n    let mut bracket_closed_depth_product9\
    \ = 0;\n    let mut bracket_open_depth_product10 = 0;\n    let mut bracket_closed_depth_product10\
    \ = 0;\n    let mut bracket_open_depth_product11 = 0;\n    let mut bracket_closed_depth_product11\
    \ = 0;\n    let mut bracket_open_depth_product12 = 0;\n    let mut bracket_closed_depth_product12\
    \ = 0;\n    let mut bracket_open_depth_product13 = 0;\n    let mut bracket_closed_depth_product13\
    \ = 0;\n    let mut bracket_open_depth_product14 = 0;\n    let mut bracket_closed_depth_product14\
    \ = 0;\n    let mut bracket_open_depth_product15 = 0;\n    let mut bracket_closed_depth_product15\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmporw5dp47.rs:60:1\n\
    \   |\n60 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: Vec<usize> = vec![];\n    let mut close_brackets:\
    \ Vec<usize> = vec![];\n    let mut i = 0;\n    while i < string.len() {\n   \
    \     if string[i] == '[' {\n            stack.push(i);\n            open_brackets.push(i);\n\
    \        }\n        if string[i] == ']' {\n            close_brackets.push(stack.len());\n\
    \        }\n        if string[i] == ']' && stack.len() > 0 {\n            stack.pop();\n\
    \            close_brackets.pop();\n        }\n        i += 1;\n    }\n    open_brackets.len()\
    \ > 0 && close_brackets.len() > 0 && open_brackets.iter().all(|&i| close_brackets.contains(&i))\
    \ && stack.len() == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpglzhkka1.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpglzhkka1.rs:26:12\n   |\n26 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpglzhkka1.rs:29:12\n   |\n29 |         if string[i] == ']' && stack.len()\
    \ > 0 {\n   |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborti"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| {\n       \
    \ if c == '[' {\n            true\n        } else if c == ']' {\n            true\n\
    \        } else if c == '{' {\n            true\n        } else if c == '}' {\n\
    \            true\n        } else if c == '(' {\n            true\n        } else\
    \ if c == ')' {\n            true\n        } else {\n            false\n     \
    \   }\n    })\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuo819ear.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '[' && stack.len() > 0 && stack.pop() == '[' {\n            open_brackets\
    \ -= 1;\n        }\n        if open_brackets == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuddlgb.rs:23:65\n   |\n\
    23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == '[' {\n \
    \  |                                                                 ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == Some('[')\
    \ {\n   |                                                                 +++++\
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| {\n       \
    \ c != '[' && c != ']'\n    })\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq9f83xib.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut bracket_level: usize = 0;\n    let mut bracket_level_count: usize\
    \ = 0;\n    let mut bracket_level_string: String = String::new();\n    let mut\
    \ bracket_level_string_length: usize = 0;\n    let mut bracket_level_string_len:\
    \ usize = 0;\n    let mut bracket_level_string_len2: usize = 0;\n    let mut bracket_level_string_len3:\
    \ usize = 0;\n    let mut bracket_level_string_len4: usize = 0;\n    let mut bracket_level_string_len5:\
    \ usize = 0;\n    let mut bracket_level_string_len6: usize = 0;\n    let mut bracket_level_string_len7:\
    \ usize = 0;\n    let mut bracket_level_string_len8: usize = 0;\n    let mut bracket_level_string_len9:\
    \ usize = 0;\n    let mut bracket_level_string_len10: usize = 0;\n    let mut\
    \ bracket_level_string_len11: usize = 0;\n    let mut bracket_level_string_len12:\
    \ usize = 0;\n    let mut bracket_level_string_len13: usize = 0;\n    let mut\
    \ bracket_level_string_len14: usize = 0;\n    let mut bracket_level_string_len15:\
    \ usize = 0;\n    let mut bracket_level_string_len16: usize = 0;\n    let mut\
    \ bracket_level_string_len17: usize = 0;\n    let mut bracket_level_string_len18:\
    \ usize = 0;\n    let mut bracket_level_string_len19: usize = 0;\n    let mut\
    \ bracket_level_string_len20: usize = 0;\n    let mut bracket_level_string_len21:\
    \ usize = 0;\n    let mut bracket_level_string_len22: usize = 0;\n    let mut\
    \ bracket_level_string_len23: usize = 0;\n    let mut bracket_level_string_len24:\
    \ usize = 0;\n    let mut bracket_level_string_len25: usize = 0;\n    let mut\
    \ bracket_level_string_len26: usize = 0;\n    let mut bracket_level_string_len27:\
    \ usize = 0;\n    let mut bracket_level_string_len28: usize = 0;\n    let mut\
    \ \n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp_x53wv1e.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            stack.push(string[i]);\n\
    \            open_brackets += 1;\n        } else if string[i] == ']' {\n     \
    \       closed_brackets += 1;\n            if open_brackets == closed_brackets\
    \ {\n                let mut found = false;\n                while !found && i\
    \ < string.len() {\n                    if string[i] == ']' {\n              \
    \          found = true;\n                    } else if string[i] == '[' {\n \
    \                       open_brackets += 1;\n                    } else {\n  \
    \                      i += 1;\n                    }\n                }\n   \
    \             stack.pop();\n            }\n        } else if string[i] == '['\
    \ {\n            open_brackets += 1;\n        } else if string[i] == ']' {\n \
    \           closed_brackets += 1;\n        }\n        i += 1;\n    }\n    stack.len()\
    \ > 0 && stack.len() == open_brackets\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2g_sn9zt.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp2g_sn9zt.rs:23:24\n   |\n23 |             stack.push(string[i]);\n\
    \   |                        ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp2g_sn9zt.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\ne"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for ch in string.chars() {\n        if ch == '['\
    \ {\n            stack.push(ch);\n            open_brackets += 1;\n        } else\
    \ if ch == ']' {\n            open_brackets -= 1;\n            if open_brackets\
    \ == 0 {\n                stack.pop();\n            }\n        } else if ch ==\
    \ '[' || ch == ']' || ch == '(' || ch == ')' {\n            return false;\n  \
    \      }\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpze_g19sn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    let mut open_brackets = 0;\n    while\
    \ i < string.len() {\n        if string[i] == '[' {\n            stack.push(0);\n\
    \            open_brackets += 1;\n        }\n        if string[i] == ']' {\n \
    \           open_brackets -= 1;\n        }\n        if open_brackets == 0 {\n\
    \            stack.pop();\n        }\n        i += 1;\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkzi6t9sf.rs:21:12\n\
    \   |\n21 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpkzi6t9sf.rs:25:12\n   |\n25 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut closed_brackets_stack = Vec::new();\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut len = string.len();\n    while i < len\
    \ {\n        if string[i] == '[' {\n            open_brackets++;\n           \
    \ open_brackets_stack.push(string[i]);\n            stack.push(string[i]);\n \
    \           i += 1;\n        } else if string[i] == ']' {\n            closed_brackets++;\n\
    \            closed_brackets_stack.push(string[i]);\n            if closed_brackets\
    \ == open_brackets {\n                let mut found = false;\n               \
    \ while !found && j < len {\n                    if closed_brackets_stack[j] ==\
    \ ']' {\n                        found = true;\n                    } else if\
    \ closed_brackets_stack[j] == open_brackets_stack[j] {\n                     \
    \   closed_brackets_stack.pop();\n                        open_brackets_stack.pop();\n\
    \                        j += 1;\n                    } else {\n             \
    \           j += 1;\n                    }\n                }\n              \
    \  if closed_brackets == open_brackets {\n                    stack.pop();\n \
    \               }\n            }\n            i += 1;\n        } else if string[i]\
    \ == '{' {\n            stack.push(string[i]);\n            i += 1;\n        }\
    \ else if string[i] == '}' {\n            if closed_brackets == open_brackets\
    \ {\n                closed_brackets_stack.pop();\n                open_brackets_stack.pop();\n\
    \            }\n            i += 1;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    open_brackets == closed_brackets\n}\n\nfn main() {\n   \
    \ let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmph76wfg_w.rs:27:26\n\
    \   |\n27 |             open_brackets++;\n   |                          ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n27 |       \
    \      { let tmp = open_brackets; open_brackets += 1; tmp };\n   |           \
    \  +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n27 -             open_brackets++;\n\
    27 +             open_brackets += 1;\n   | \n\nerror: Rust has no postfix increment\
    \ operator\n  --> /tmp/tmph76wfg_w.rs:32:28\n   |\n32 |             closed_brackets++;\n\
    \   |                            ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n32 |             { let tmp = closed_brackets; closed_brackets\
    \ += 1; tmp };\n   |             +++++++++++                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    32 -             closed_brackets++;\n32 +             closed_brackets += 1;\n\
    \   | \n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmph76wfg_w.rs:26:12\n   |\n26 |         if string[i] == '[' {\n   |  \
    \          ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph76wfg_w.rs:31:19\n   |\n31 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == ']' {\n            closed_brackets\
    \ += 1;\n        }\n        if string[i] == '[' {\n            open_brackets +=\
    \ 1;\n        }\n        if open_brackets > closed_brackets {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpn_q9fwhx.rs:22:12\n\
    \   |\n22 |         if string[i] == ']' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn_q9fwhx.rs:25:12\n   |\n25 |         if string[i] == '[' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut open_brackets: usize = 0;\n    let mut close_brackets:\
    \ usize = 0;\n    let mut open_brackets_stack: Vec<usize> = vec![0; string.len()];\n\
    \    let mut close_brackets_stack: Vec<usize> = vec![0; string.len()];\n    let\
    \ mut open_brackets_stack_index: usize = 0;\n    let mut close_brackets_stack_index:\
    \ usize = 0;\n    let mut open_brackets_stack_index2: usize = 0;\n    let mut\
    \ close_brackets_stack_index2: usize = 0;\n    let mut open_brackets_stack_index3:\
    \ usize = 0;\n    let mut close_brackets_stack_index3: usize = 0;\n    let mut\
    \ open_brackets_stack_index4: usize = 0;\n    let mut close_brackets_stack_index4:\
    \ usize = 0;\n    let mut open_brackets_stack_index5: usize = 0;\n    let mut\
    \ close_brackets_stack_index5: usize = 0;\n    let mut open_brackets_stack_index6:\
    \ usize = 0;\n    let mut close_brackets_stack_index6: usize = 0;\n    let mut\
    \ open_brackets_stack_index7: usize = 0;\n    let mut close_brackets_stack_index7:\
    \ usize = 0;\n    let mut open_brackets_stack_index8: usize = 0;\n    let mut\
    \ close_brackets_stack_index8: usize = 0;\n    let mut open_brackets_stack_index9:\
    \ usize = 0;\n    let mut close_brackets_stack_index9: usize = 0;\n    let mut\
    \ open_brackets_stack_index10: usize = 0;\n    let mut close_brackets_stack_index10:\
    \ usize = 0;\n    let mut open_brackets_stack_index11: usize = 0;\n    let mut\
    \ close_brackets_stack_index11: usize = 0;\n    let mut open_brackets_stack_index12:\
    \ usize = 0;\n    let mut close_brackets_stack_index12: usize = 0;\n    let mut\
    \ open_brackets_stack_index13: usize = 0;\n    let mut close_brackets_stack_index13:\
    \ usize = 0;\n    let mut open_brackets_stack_index14: usize = 0;\n    let mu\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb78_vhak.rs:49:11\n   |\n\
    49 |     let mu\n   |           ^ help: add `;` here\n50 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb78_vhak.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut bracket_count = 0;\n    let mut bracket_open = false;\n    let mut bracket_closed\
    \ = false;\n    let mut bracket_open_index = 0;\n    let mut bracket_close_index\
    \ = 0;\n    let mut bracket_open_index2 = 0;\n    let mut bracket_close_index2\
    \ = 0;\n    let mut bracket_open_index3 = 0;\n    let mut bracket_close_index3\
    \ = 0;\n    let mut bracket_open_index4 = 0;\n    let mut bracket_close_index4\
    \ = 0;\n    let mut bracket_open_index5 = 0;\n    let mut bracket_close_index5\
    \ = 0;\n    let mut bracket_open_index6 = 0;\n    let mut bracket_close_index6\
    \ = 0;\n    let mut bracket_open_index7 = 0;\n    let mut bracket_close_index7\
    \ = 0;\n    let mut bracket_open_index8 = 0;\n    let mut bracket_close_index8\
    \ = 0;\n    let mut bracket_open_index9 = 0;\n    let mut bracket_close_index9\
    \ = 0;\n    let mut bracket_open_index10 = 0;\n    let mut bracket_close_index10\
    \ = 0;\n    let mut bracket_open_index11 = 0;\n    let mut bracket_close_index11\
    \ = 0;\n    let mut bracket_open_index12 = 0;\n    let mut bracket_close_index12\
    \ = 0;\n    let mut bracket_open_index13 = 0;\n    let mut bracket_close_index13\
    \ = 0;\n    let mut bracket_open_index14 = 0;\n    let mut bracket_close_index14\
    \ = 0;\n    let mut bracket_open_index15 = 0;\n    let mut bracket_close_index15\
    \ = 0;\n    let mut bracket_open_index16 = 0;\n    let mut bracket_close_index16\
    \ = 0;\n    let mut bracket_open_index17 = 0;\n    let mut bracket_close_index17\
    \ = 0;\n    let mut bracket_open_index18 = 0;\n    let mut bracket_close_index18\
    \ = 0;\n    let mut bracket_open_index19 = 0;\n    let mut bracket_close_index19\
    \ = 0;\n    let mut bracket_open_index20 = 0;\n    let mut bracket_close_index20\
    \ = 0;\n    let mut bracket_open_index21 = 0;\n    let mut bracket_close_index21\
    \ = 0;\n    let mut bracket_open_index22 = 0;\n    let mut bracket_close_index22\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplgc5b263.rs:65:11\n   |\n\
    65 |     let mu\n   |           ^ help: add `;` here\n66 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplgc5b263.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut in_bracket = false;\n    let mut in_quote = false;\n    let mut in_escape\
    \ = false;\n    let mut in_string = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp86cuoa_p.rs:89:23\n   |\n\
    89 |     let mut in_comment\n   |                       ^ help: add `;` here\n\
    90 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86cuoa_p.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n        } else if string[i] == ']' {\n      \
    \      if stack.len() == 0 {\n                return false;\n            }\n \
    \           stack.pop();\n        } else {\n            i += 1;\n        }\n \
    \       i += 1;\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpojjb48jd.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpojjb48jd.rs:22:19\n   |\n22 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        if string[i] == ']' {\n      \
    \      close_brackets++;\n            if close_brackets == 1 {\n             \
    \   stack.pop();\n            }\n        } else if string[i] == '[' {\n      \
    \      open_brackets++;\n            if open_brackets == 1 {\n               \
    \ stack.push(i);\n            }\n        } else {\n            i += 1;\n     \
    \   }\n    }\n    open_brackets == close_brackets\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpxzrc2wtr.rs:23:27\n\
    \   |\n23 |             close_brackets++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |       \
    \      { let tmp = close_brackets; close_brackets += 1; tmp };\n   |         \
    \    +++++++++++               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n23 -            \
    \ close_brackets++;\n23 +             close_brackets += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpxzrc2wtr.rs:28:26\n   |\n28\
    \ |             open_brackets++;\n   |                          ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n28 |             { let\
    \ tmp = open_brackets; open_brackets += 1; tmp };\n   |             +++++++++++\
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n28 -             open_brackets++;\n\
    28 +             open_brackets += 1;\n   | \n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpxzrc2wtr.rs:22:12\n   |\n22 |  \
    \       if string[i] == ']' {\n   |            ^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpxzrc2wtr.rs:27:19\n   |\n27 |         } else if string[i] == '['\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n      "
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    stack.push(0);\n    let mut i = 0;\n    while i < string.len() {\n      \
    \  if string[i] == '[' {\n            stack.push(i);\n            i += 1;\n  \
    \      } else if string[i] == ']' {\n            if stack.pop() != i {\n     \
    \           return false;\n            }\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    stack.pop() == string.len()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp83kw_swh.rs:21:12\n\
    \   |\n21 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp83kw_swh.rs:24:19\n   |\n24 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp83kw_swh.rs:25:31\n\
    \   |\n25 |             if stack.pop() != i {\n   |                          \
    \     ^ expected enum `Option`, found `usize`\n   |\n   = note: expected enum\
    \ `Option<usize>`\n              found type `usize`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n25 |             if stack.pop() != Some(i) {\n   |        \
    \                       +++++ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp83kw_swh.rs:33:20\n\
    \   |\n33 |     stack.pop() == string.len()\n   |                    ^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expressio"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut bracket_count = 0;\n    let mut bracket_level = 0;\n    for c in\
    \ string.chars() {\n        if c == '[' {\n            stack.push(bracket_level);\n\
    \            bracket_level += 1;\n        }\n        if c == '{' {\n         \
    \   stack.push(bracket_level);\n            bracket_level += 1;\n        }\n \
    \       if c == '}' {\n            stack.pop();\n            bracket_level -=\
    \ 1;\n        }\n        if c == '[' {\n            bracket_count += 1;\n    \
    \    }\n        if c == '{' {\n            bracket_count += 1;\n        }\n  \
    \      if c == '}' {\n            bracket_count -= 1;\n        }\n        if bracket_level\
    \ == 0 && bracket_count == 0 {\n            return true;\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpno2fkmgh.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == ']' {\n            open_brackets -= 1;\n            if open_brackets ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcxtqbfhw.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: Vec<usize> = Vec::new();\n    let mut close_brackets:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_size: usize = 0;\n    let\
    \ mut close_brackets_size: usize = 0;\n    let mut bracket_size: usize = 0;\n\
    \    let mut bracket_open = false;\n    let mut bracket_close = false;\n    let\
    \ mut bracket_open_size = 0;\n    let mut bracket_close_size = 0;\n    let mut\
    \ bracket_open_size2 = 0;\n    let mut bracket_close_size2 = 0;\n    let mut bracket_open_size3\
    \ = 0;\n    let mut bracket_close_size3 = 0;\n    let mut bracket_open_size4 =\
    \ 0;\n    let mut bracket_close_size4 = 0;\n    let mut bracket_open_size5 = 0;\n\
    \    let mut bracket_close_size5 = 0;\n    let mut bracket_open_size6 = 0;\n \
    \   let mut bracket_close_size6 = 0;\n    let mut bracket_open_size7 = 0;\n  \
    \  let mut bracket_close_size7 = 0;\n    let mut bracket_open_size8 = 0;\n   \
    \ let mut bracket_close_size8 = 0;\n    let mut bracket_open_size9 = 0;\n    let\
    \ mut bracket_close_size9 = 0;\n    let mut bracket_open_size10 = 0;\n    let\
    \ mut bracket_close_size10 = 0;\n    let mut bracket_open_size11 = 0;\n    let\
    \ mut bracket_close_size11 = 0;\n    let mut bracket_open_size12 = 0;\n    let\
    \ mut bracket_close_size12 = 0;\n    let mut bracket_open_size13 = 0;\n    let\
    \ mut bracket_close_size13 = 0;\n    let mut bracket_open_size14 = 0;\n    let\
    \ mut bracket_close_size14 = 0;\n    let mut bracket_open_size15 = 0;\n    let\
    \ mut bracket_close_size15 = 0;\n    let mut bracket_open_size16 = 0;\n    let\
    \ mut bracket_close_size16 = 0;\n    let mut bracket_open_size17 = 0;\n    let\
    \ mut bracket_close_size17 = 0;\n    let mut bracket_open_size18 = 0;\n    let\
    \ mut bracket_close_size18 = 0;\n    let mut bracket_open_size19 = 0;\n    let\
    \ mut bracket_\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps13u9ms_.rs:62:21\n   |\n\
    62 |     let mut bracket_\n   |                     ^ help: add `;` here\n63 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps13u9ms_.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut index = 0;\n    let mut open_brackets = 0;\n   \
    \ let mut closed_brackets = 0;\n    while index < string.len() {\n        if string[index]\
    \ == '[' {\n            open_brackets += 1;\n        }\n        if string[index]\
    \ == ']' {\n            closed_brackets += 1;\n        }\n        if open_brackets\
    \ > closed_brackets {\n            stack[index] = open_brackets;\n        }\n\
    \        if closed_brackets > open_brackets {\n            stack[index] = closed_brackets;\n\
    \        }\n        index += 1;\n    }\n    stack.is_empty()\n}\n\nfn main() {\n\
    \    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmppiyxyrnw.rs:22:12\n\
    \   |\n22 |         if string[index] == '[' {\n   |            ^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmppiyxyrnw.rs:25:12\n   |\n25 |         if string[index] == ']' {\n\
    \   |            ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n \
    \  = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n        }\n        if string[i] == ']' {\n  \
    \          if stack.len() == 0 {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n        i += 1;\n    }\n    stack.len()\
    \ == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp4n5z22ic.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp4n5z22ic.rs:23:12\n   |\n23 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    for c in string.chars()\
    \ {\n        if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == '{' {\n            stack.push(c);\n          \
    \  close_brackets += 1;\n        } else if c == '}' {\n            if open_brackets\
    \ > close_brackets {\n                return false;\n            }\n         \
    \   stack.pop();\n            close_brackets -= 1;\n        }\n    }\n    stack.len()\
    \ == 0 && close_brackets == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4illp3d7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if stack.is_empty()\
    \ {\n            return false;\n        }\n        let mut j = i;\n        while\
    \ j < string.len() {\n            if string[j] == ']' {\n                stack.pop();\n\
    \            } else {\n                stack.push(j);\n            }\n       \
    \     j += 1\n        }\n        i += 1\n    }\n    stack.is_empty()\n}\n\nfn\
    \ main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6mi5ypuo.rs:26:16\n\
    \   |\n26 |             if string[j] == ']' {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_size: usize = 0;\n\
    \    let mut close_brackets_stack_size: usize = 0;\n    let mut open_brackets_stack_index:\
    \ usize = 0;\n    let mut close_brackets_stack_index: usize = 0;\n    let mut\
    \ open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_size: usize = 0;\n\
    \    let mut close_brackets_stack_size: usize = 0;\n    let mut open_brackets_stack_index:\
    \ usize = 0;\n    let mut close_brackets_stack_index: usize = 0;\n    let mut\
    \ open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_size: usize = 0;\n\
    \    let mut close_brackets_stack_size: usize = 0;\n    let mut open_brackets_stack_index:\
    \ usize = 0;\n    let mut close_brackets_stack_index: usize = 0;\n    let mut\
    \ open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_size: usize = 0;\n\
    \    let mut close_brackets_stack_size: usize = 0;\n    let mut open_brackets_stack_index:\
    \ usize = 0;\n    let mut close_brackets_stack_index: usize = 0;\n    let mut\
    \ open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_size: usize = 0;\n\
    \    let mut close_bracket\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp54uh950z.rs:47:26\n   |\n\
    47 |     let mut close_bracket\n   |                          ^ help: add `;`\
    \ here\n48 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp54uh950z.rs:16:33\n   |\n16 | fn is_nested(string: String) -> bool {\n\
    \   |    ---------                    ^^^^ expected `bool`, found `()`\n   | \
    \   |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut in_bracket = false;\n    let mut in_quote = false;\n    let mut in_escape\
    \ = false;\n    let mut in_string = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment = false;\n    let mut in_comment\
    \ = false;\n    let mut in_comment = false;\n    let mut in_comment = false;\n\
    \    let mut in_comment = false;\n    let mut in_comment = false;\n    let mut\
    \ in_comment = false;\n    let mut in_comment\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp86cuoa_p.rs:89:23\n   |\n\
    89 |     let mut in_comment\n   |                       ^ help: add `;` here\n\
    90 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86cuoa_p.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    stack.push(0);\n    let mut inside_paren = false;\n    let mut inside_curly\
    \ = false;\n    let mut inside_angle = false;\n    let mut inside_square = false;\n\
    \    let mut inside_curly_square = false;\n    let mut inside_angle_square = false;\n\
    \    let mut inside_curly_angle = false;\n    let mut inside_curly_angle_square\
    \ = false;\n    let mut inside_angle_bracket = false;\n    let mut inside_curly_bracket\
    \ = false;\n    let mut inside_curly_bracket_square = false;\n    let mut inside_curly_bracket_angle\
    \ = false;\n    let mut inside_curly_bracket_angle_square = false;\n    let mut\
    \ inside_curly_bracket_angle_bracket = false;\n    let mut inside_curly_bracket_angle_bracket_square\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket = false;\n\
    \    let mut inside_curly_bracket_angle_bracket_bracket_square = false;\n    let\
    \ mut inside_curly_bracket_angle_bracket_bracket_bracket = false;\n    let mut\
    \ inside_curly_bracket_angle_bracket_bracket_bracket_square = false;\n    let\
    \ mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket = false;\n  \
    \  let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_square =\
    \ false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket_square\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket_bracket_square\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = false;\n    let mut inside_curly_bracket_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_square\
    \ = false;\n    let mut inside_curly_bracket_angle_brack\n}\n\nfn main() {\n \
    \   let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa39y2ade.rs:46:45\n   |\n\
    46 |     let mut inside_curly_bracket_angle_brack\n   |                      \
    \                       ^ help: add `;` here\n47 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa39y2ade.rs:16:33\n   |\n16 |\
    \ fn is_nested(string: String) -> bool {\n   |    ---------                  \
    \  ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for ch in string.chars() {\n        if ch == '['\
    \ {\n            stack.push(ch);\n            open_brackets += 1;\n        } else\
    \ if ch == ']' {\n            open_brackets -= 1;\n            if open_brackets\
    \ == 0 {\n                stack.pop();\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqvi5kx9y.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i] == '[' {\n            stack.push(i);\n            i += 1;\n      \
    \  } else if string[i] == ']' {\n            if stack.len() == 0 {\n         \
    \       return false;\n            }\n            let top = stack.len();\n   \
    \         if top > i {\n                stack.pop();\n                i += 1;\n\
    \            }\n        }\n        i += 1;\n    }\n    stack.len() == 0\n}\n\n\
    fn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp85oflang.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp85oflang.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i] == '[' {\n            stack.push(0);\n        }\n        if string[i]\
    \ == ']' {\n            if stack.len() == 0 {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n        i += 1;\n    }\n\
    \    stack.len() == 0 || stack.pop() == 0\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfcgevlwv.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpfcgevlwv.rs:23:12\n   |\n23 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcgevlwv.rs:31:40\n\
    \   |\n31 |     stack.len() == 0 || stack.pop() == 0\n   |                   \
    \                     ^ expected enum `Option`, found integer\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `{integer}`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n31 |     stack.len() == 0 || stack.pop()\
    \ == Some(0)\n   |                                        +++++ +\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: Vec<usize> = Vec::new();\n    let mut close_brackets:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_size: usize = 0;\n    let\
    \ mut close_brackets_size: usize = 0;\n    let mut open_brackets_depth: usize\
    \ = 0;\n    let mut close_brackets_depth: usize = 0;\n    let mut open_brackets_depth_limit:\
    \ usize = 0;\n    let mut close_brackets_depth_limit: usize = 0;\n    let mut\
    \ open_brackets_depth_limit2: usize = 0;\n    let mut close_brackets_depth_limit2:\
    \ usize = 0;\n    let mut open_brackets_depth_limit3: usize = 0;\n    let mut\
    \ close_brackets_depth_limit3: usize = 0;\n    let mut open_brackets_depth_limit4:\
    \ usize = 0;\n    let mut close_brackets_depth_limit4: usize = 0;\n    let mut\
    \ open_brackets_depth_limit5: usize = 0;\n    let mut close_brackets_depth_limit5:\
    \ usize = 0;\n    let mut open_brackets_depth_limit6: usize = 0;\n    let mut\
    \ close_brackets_depth_limit6: usize = 0;\n    let mut open_brackets_depth_limit7:\
    \ usize = 0;\n    let mut close_brackets_depth_limit7: usize = 0;\n    let mut\
    \ open_brackets_depth_limit8: usize = 0;\n    let mut close_brackets_depth_limit8:\
    \ usize = 0;\n    let mut open_brackets_depth_limit9: usize = 0;\n    let mut\
    \ close_brackets_depth_limit9: usize = 0;\n    let mut open_brackets_depth_limit10:\
    \ usize = 0;\n    let mut close_brackets_depth_limit10: usize = 0;\n    let mut\
    \ open_brackets_depth_limit11: usize = 0;\n    let mut close_brackets_depth_limit11:\
    \ usize = 0;\n    let mut open_brackets_depth_limit12: usize = 0;\n    let mut\
    \ close_brackets_depth_limit12: usize = 0;\n    let mut open_brackets_depth_limit13:\
    \ usize = 0;\n    let mut close_brackets_depth_limit13: usize\n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv5o5bp1t.rs:49:48\n   |\n\
    49 |     let mut close_brackets_depth_limit13: usize\n   |                   \
    \                             ^ help: add `;` here\n50 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv5o5bp1t.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut index = 0;\n    while index < string.len() {\n        if string[index]\
    \ == '[' {\n            stack.push(index);\n        }\n        if string[index]\
    \ == ']' {\n            if stack.len() == 0 {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n        index += 1;\n   \
    \ }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpmwr4m9em.rs:20:12\n\
    \   |\n20 |         if string[index] == '[' {\n   |            ^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpmwr4m9em.rs:23:12\n   |\n23 |         if string[index] == ']' {\n\
    \   |            ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n \
    \  = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: Vec<usize> = vec![];\n    let mut close_brackets:\
    \ Vec<usize> = vec![];\n    let mut open_brackets_size: usize = 0;\n    let mut\
    \ close_brackets_size: usize = 0;\n    let mut open_brackets_idx: usize = 0;\n\
    \    let mut close_brackets_idx: usize = 0;\n    let mut open_brackets_idx2: usize\
    \ = 0;\n    let mut close_brackets_idx2: usize = 0;\n    let mut open_brackets_idx3:\
    \ usize = 0;\n    let mut close_brackets_idx3: usize = 0;\n    let mut open_brackets_idx4:\
    \ usize = 0;\n    let mut close_brackets_idx4: usize = 0;\n    let mut open_brackets_idx5:\
    \ usize = 0;\n    let mut close_brackets_idx5: usize = 0;\n    let mut open_brackets_idx6:\
    \ usize = 0;\n    let mut close_brackets_idx6: usize = 0;\n    let mut open_brackets_idx7:\
    \ usize = 0;\n    let mut close_brackets_idx7: usize = 0;\n    let mut open_brackets_idx8:\
    \ usize = 0;\n    let mut close_brackets_idx8: usize = 0;\n    let mut open_brackets_idx9:\
    \ usize = 0;\n    let mut close_brackets_idx9: usize = 0;\n    let mut open_brackets_idx10:\
    \ usize = 0;\n    let mut close_brackets_idx10: usize = 0;\n    let mut open_brackets_idx11:\
    \ usize = 0;\n    let mut close_brackets_idx11: usize = 0;\n    let mut open_brackets_idx12:\
    \ usize = 0;\n    let mut close_brackets_idx12: usize = 0;\n    let mut open_brackets_idx13:\
    \ usize = 0;\n    let mut close_brackets_idx13: usize = 0;\n    let mut open_brackets_idx14:\
    \ usize = 0;\n    let mut close_brackets_idx14: usize = 0;\n    let mut open_brackets_idx15:\
    \ usize = 0;\n    let mut close_brackets_idx15\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg1nsdfv_.rs:51:33\n   |\n\
    51 |     let mut close_brackets_idx15\n   |                                 ^\
    \ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg1nsdfv_.rs:16:33\n   |\n16 | fn is_nested(string: String)\
    \ -> bool {\n   |    ---------                    ^^^^ expected `bool`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut pos = 0;\n    while pos < string.len() {\n        if string[pos]\
    \ == '[' {\n            stack.push(pos);\n        } else if string[pos] == ']'\
    \ {\n            if stack.is_empty() {\n                return false;\n      \
    \      }\n            stack.pop();\n        } else {\n            pos += 1;\n\
    \        }\n        pos += 1;\n    }\n    stack.is_empty()\n}\n\nfn main() {\n\
    \    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe6n6566l.rs:20:12\n\
    \   |\n20 |         if string[pos] == '[' {\n   |            ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpe6n6566l.rs:22:19\n   |\n22 |         } else if string[pos] ==\
    \ ']' {\n   |                   ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut bracket_count = 0;\n    let mut bracket_open = false;\n    let mut\
    \ bracket_closed = false;\n    let mut bracket_open_index = 0;\n    let mut bracket_close_index\
    \ = 0;\n    let mut bracket_open_index2 = 0;\n    let mut bracket_close_index2\
    \ = 0;\n    let mut bracket_open_index3 = 0;\n    let mut bracket_close_index3\
    \ = 0;\n    let mut bracket_open_index4 = 0;\n    let mut bracket_close_index4\
    \ = 0;\n    let mut bracket_open_index5 = 0;\n    let mut bracket_close_index5\
    \ = 0;\n    let mut bracket_open_index6 = 0;\n    let mut bracket_close_index6\
    \ = 0;\n    let mut bracket_open_index7 = 0;\n    let mut bracket_close_index7\
    \ = 0;\n    let mut bracket_open_index8 = 0;\n    let mut bracket_close_index8\
    \ = 0;\n    let mut bracket_open_index9 = 0;\n    let mut bracket_close_index9\
    \ = 0;\n    let mut bracket_open_index10 = 0;\n    let mut bracket_close_index10\
    \ = 0;\n    let mut bracket_open_index11 = 0;\n    let mut bracket_close_index11\
    \ = 0;\n    let mut bracket_open_index12 = 0;\n    let mut bracket_close_index12\
    \ = 0;\n    let mut bracket_open_index13 = 0;\n    let mut bracket_close_index13\
    \ = 0;\n    let mut bracket_open_index14 = 0;\n    let mut bracket_close_index14\
    \ = 0;\n    let mut bracket_open_index15 = 0;\n    let mut bracket_close_index15\
    \ = 0;\n    let mut bracket_open_index16 = 0;\n    let mut bracket_close_index16\
    \ = 0;\n    let mut bracket_open_index17 = 0;\n    let mut bracket_close_index17\
    \ = 0;\n    let mut bracket_open_index18 = 0;\n    let mut bracket_close_index18\
    \ = 0;\n    let mut bracket_open_index19 = 0;\n    let mut bracket_close_index19\
    \ = 0;\n    let mut bracket_open_index20 = 0;\n    let mut bracket_close_index20\
    \ = 0;\n    let mut bracket_open_index21 = 0;\n    let mut bracket_close_index21\
    \ = 0;\n    let mut bracket_open_index22 = 0;\n    let mut bracket_close_index\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkgovbyb7.rs:64:32\n   |\n\
    64 |     let mut bracket_close_index\n   |                                ^ help:\
    \ add `;` here\n65 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkgovbyb7.rs:16:33\n   |\n16 | fn is_nested(string: String) -> bool\
    \ {\n   |    ---------                    ^^^^ expected `bool`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut close_brackets_stack = Vec::new();\n    let mut open\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqy5unfyc.rs:52:17\n   |\n\
    52 |     let mut open\n   |                 ^ help: add `;` here\n53 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqy5unfyc.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut bracket_count = 0;\n    for c in string.chars() {\n        if c ==\
    \ '[' {\n            stack.push(bracket_count);\n            bracket_count +=\
    \ 1;\n        } else if c == ']' {\n            bracket_count -= 1;\n        \
    \    if bracket_count == 0 {\n                return stack.pop() == 0;\n     \
    \       }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7pp040l6.rs:26:39\n   |\n\
    26 |                 return stack.pop() == 0;\n   |                          \
    \             ^ expected enum `Option`, found integer\n   |\n   = note: expected\
    \ enum `Option<usize>`\n              found type `{integer}`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n26 |                 return stack.pop() == Some(0);\n\
    \   |                                       +++++ +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut bracket_count = 0;\n    let mut bracket_open = false;\n    let mut bracket_closed\
    \ = false;\n    let mut bracket_opening_count = 0;\n    let mut bracket_closing\
    \ = false;\n    let mut bracket_opening_open = false;\n    let mut bracket_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_count = 0;\n    let mut bracket_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_count = 0;\n    let mut\
    \ bracket_opening_opening_opening_closed = false;\n    let mut bracket_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_closed = false;\n\
    \    let mut bracket_opening_opening_opening_opening_opening_count = 0;\n    let\
    \ mut bracket_opening_opening_opening_opening_opening_closed = false;\n    let\
    \ mut bracket_opening_opening_opening_opening_opening_opening_count = 0;\n   \
    \ let mut bracket_opening_opening_opening_opening_opening_opening_closed = false;\n\
    \    let mut bracket_opening_opening_opening_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_opening_opening_opening_opening_opening_opening_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_opening_opening_opening_open\n}\n\nfn\
    \ main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptrdec1jh.rs:45:57\n   |\n\
    45 |     let mut bracket_opening_opening_opening_opening_open\n   |          \
    \                                               ^ help: add `;` here\n46 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptrdec1jh.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            stack.push(string[i]);\n\
    \            open_brackets += 1;\n        } else if string[i] == ']' {\n     \
    \       close_brackets += 1;\n            if close_brackets == open_brackets {\n\
    \                stack.pop();\n            } else {\n                return false;\n\
    \            }\n        } else {\n            i += 1;\n        }\n    }\n    stack.len()\
    \ == open_brackets\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpm_akrbtp.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpm_akrbtp.rs:23:24\n   |\n23 |             stack.push(string[i]);\n\
    \   |                        ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpm_akrbtp.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\ne"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            stack.push(1);\n\
    \            open_brackets += 1;\n        } else if string[i] == ']' {\n     \
    \       closed_brackets += 1;\n            if stack.len() == 0 {\n           \
    \     return false;\n            }\n            stack.pop();\n            open_brackets\
    \ -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    stack.len()\
    \ == 0 && closed_brackets == open_brackets\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqi_3grqy.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpqi_3grqy.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut pos = 0;\n    let mut bracket_count = 0;\n    while pos < string.len()\
    \ {\n        if string[pos] == '[' {\n            stack.push(pos);\n         \
    \   bracket_count += 1;\n        }\n        if string[pos] == ']' {\n        \
    \    bracket_count -= 1;\n            if bracket_count == 0 {\n              \
    \  stack.pop();\n            }\n        }\n        pos += 1;\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpduy4_21z.rs:21:12\n\
    \   |\n21 |         if string[pos] == '[' {\n   |            ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpduy4_21z.rs:25:12\n   |\n25 |         if string[pos] == ']' {\n\
    \   |            ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut open_brackets_stack: Vec<usize> = vec![];\n    let mut close_brackets_stack:\
    \ Vec<usize> = vec![];\n    let mut open_brackets_stack_index: usize = 0;\n  \
    \  let mut close_brackets_stack_index: usize = 0;\n    let mut open_brackets_stack_index2:\
    \ usize = 0;\n    let mut close_brackets_stack_index2: usize = 0;\n    let mut\
    \ open_brackets_stack_index3: usize = 0;\n    let mut close_brackets_stack_index3:\
    \ usize = 0;\n    let mut open_brackets_stack_index4: usize = 0;\n    let mut\
    \ close_brackets_stack_index4: usize = 0;\n    let mut open_brackets_stack_index5:\
    \ usize = 0;\n    let mut close_brackets_stack_index5: usize = 0;\n    let mut\
    \ open_brackets_stack_index6: usize = 0;\n    let mut close_brackets_stack_index6:\
    \ usize = 0;\n    let mut open_brackets_stack_index7: usize = 0;\n    let mut\
    \ close_brackets_stack_index7: usize = 0;\n    let mut open_brackets_stack_index8:\
    \ usize = 0;\n    let mut close_brackets_stack_index8: usize = 0;\n    let mut\
    \ open_brackets_stack_index9: usize = 0;\n    let mut close_brackets_stack_index9:\
    \ usize = 0;\n    let mut open_brackets_stack_index10: usize = 0;\n    let mut\
    \ close_brackets_stack_index10: usize = 0;\n    let mut open_brackets_stack_index11:\
    \ usize = 0;\n    let mut close_brackets_stack_index11: usize = 0;\n    let mut\
    \ open_brackets_stack_index12: usize = 0;\n    let mut close_brackets_stack_index12:\
    \ usize = 0;\n    let mut open_brackets_stack_index13: usize = 0;\n    let mut\
    \ close_brackets_stack_index13: usize = 0;\n    let mut open_brackets_stack_index14:\
    \ usize = 0;\n    let mut close_brackets_stack_index14\n}\n\nfn main() {\n   \
    \ let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpynpzv11n.rs:49:41\n   |\n\
    49 |     let mut close_brackets_stack_index14\n   |                          \
    \               ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpynpzv11n.rs:16:33\n   |\n16 | fn is_nested(string:\
    \ String) -> bool {\n   |    ---------                    ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i] == '[' {\n            stack.push(i);\n            i += 1;\n      \
    \  } else if string[i] == ']' {\n            if stack.len() == 0 {\n         \
    \       return false;\n            }\n            let top = stack.len() - 1;\n\
    \            if top < i {\n                return false;\n            }\n    \
    \        stack.pop();\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    stack.len() == 0\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpc62tfl45.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpc62tfl45.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut index = 0;\n    while index < string.len() {\n        if string[index]\
    \ == '[' {\n            stack.push(index);\n        }\n        if string[index]\
    \ == ']' {\n            if stack.len() == 0 {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n        index += 1;\n   \
    \ }\n    stack.len() == 0 && true\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxgg836am.rs:20:12\n\
    \   |\n20 |         if string[index] == '[' {\n   |            ^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpxgg836am.rs:23:12\n   |\n23 |         if string[index] == ']' {\n\
    \   |            ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n \
    \  = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut open_brackets: Vec<usize> = vec![0; string.len()];\n\
    \    let mut close_brackets: Vec<usize> = vec![0; string.len()];\n    let mut\
    \ open_brackets_stack: Vec<usize> = vec![0; string.len()];\n    let mut close_brackets_stack:\
    \ Vec<usize> = vec![0; string.len()];\n    let mut open_brackets_stack_index:\
    \ usize = 0;\n    let mut close_brackets_stack_index: usize = 0;\n    let mut\
    \ open_brackets_stack_len: usize = 0;\n    let mut close_brackets_stack_len: usize\
    \ = 0;\n    let mut open_brackets_stack_len2: usize = 0;\n    let mut close_brackets_stack_len2:\
    \ usize = 0;\n    let mut open_brackets_stack_len3: usize = 0;\n    let mut close_brackets_stack_len3:\
    \ usize = 0;\n    let mut open_brackets_stack_len4: usize = 0;\n    let mut close_brackets_stack_len4:\
    \ usize = 0;\n    let mut open_brackets_stack_len5: usize = 0;\n    let mut close_brackets_stack_len5:\
    \ usize = 0;\n    let mut open_brackets_stack_len6: usize = 0;\n    let mut close_brackets_stack_len6:\
    \ usize = 0;\n    let mut open_brackets_stack_len7: usize = 0;\n    let mut close_brackets_stack_len7:\
    \ usize = 0;\n    let mut open_brackets_stack_len8: usize = 0;\n    let mut close_brackets_stack_len8:\
    \ usize = 0;\n    let mut open_brackets_stack_len9: usize = 0;\n    let mut close_brackets_stack_len9:\
    \ usize = 0;\n    let mut open_brackets_stack_len10: usize = 0;\n    let mut close_brackets_stack_len10:\
    \ usize = 0;\n    let mut open_brackets_stack_len11: usize = 0;\n    let mut close_brackets_stack_len11:\
    \ usize = 0;\n    let mut open_brackets_stack_len12: usize = 0;\n    let mut close_brackets_stack_len12:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = is_nested;\n \
    \   assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp579c60xo.rs:48:11\n   |\n\
    48 |     let mu\n   |           ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp579c60xo.rs:16:33\n \
    \  |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------         \
    \           ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    let mut open = 0;\n    let mut close\
    \ = 0;\n    while i < string.len() {\n        if string[i] == '[' {\n        \
    \    open += 1;\n            i += 1;\n        }\n        if string[i] == ']' {\n\
    \            close += 1;\n            i += 1;\n        }\n        if open > close\
    \ {\n            stack[i] = close;\n            i += 1;\n        }\n        if\
    \ open < close {\n            stack[i] = open;\n            i += 1;\n        }\n\
    \    }\n    for i in 0..stack.len() {\n        if stack[i] == 0 {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpaphvues_.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpaphvues_.rs:26:12\n   |\n26 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut in_bracket = false;\n    let mut in_quote = false;\n    let mut in_escape\
    \ = false;\n    let mut in_comment = false;\n    let mut in_string = false;\n\
    \    let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = false;\n    let mut in_number\
    \ = false;\n    let mut in_number = false;\n    let mut in_number = false;\n \
    \   let mut in_number = false;\n    let mut in_number = \n}\n\nfn main() {\n \
    \   let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\"\
    )), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpzx9utywv.rs:90:1\n\
    \   |\n90 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    let mut open_brackets_stack: Vec<usize> = Vec::new();\n    let mut close_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets_stack_len: usize = 0;\n\
    \    let mut close_brackets_stack_len: usize = 0;\n    let mut open_brackets_stack_len2:\
    \ usize = 0;\n    let mut close_brackets_stack_len2: usize = 0;\n    let mut open_brackets_stack_len3:\
    \ usize = 0;\n    let mut close_brackets_stack_len3: usize = 0;\n    let mut open_brackets_stack_len4:\
    \ usize = 0;\n    let mut close_brackets_stack_len4: usize = 0;\n    let mut open_brackets_stack_len5:\
    \ usize = 0;\n    let mut close_brackets_stack_len5: usize = 0;\n    let mut open_brackets_stack_len6:\
    \ usize = 0;\n    let mut close_brackets_stack_len6: usize = 0;\n    let mut open_brackets_stack_len7:\
    \ usize = 0;\n    let mut close_brackets_stack_len7: usize = 0;\n    let mut open_brackets_stack_len8:\
    \ usize = 0;\n    let mut close_brackets_stack_len8: usize = 0;\n    let mut open_brackets_stack_len9:\
    \ usize = 0;\n    let mut close_brackets_stack_len9: usize = 0;\n    let mut open_brackets_stack_len10:\
    \ usize = 0;\n    let mut close_brackets_stack_len10: usize = 0;\n    let mut\
    \ open_brackets_stack_len11: usize = 0;\n    let mut close_brackets_stack_len11:\
    \ usize = 0;\n    let mut open_brackets_stack_len12: usize = 0;\n    let mut close_brackets_stack_len12:\
    \ usize = 0;\n    let mut open_brackets_stack_len13: usize = 0;\n    let mut close_brackets_stack_len13:\
    \ usize = 0;\n    let mut open_brackets_stack_len14: usize = 0;\n    let mut close_brackets_\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmkinzlfn.rs:49:28\n   |\n\
    49 |     let mut close_brackets_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmkinzlfn.rs:16:33\n   |\n16 | fn is_nested(string: String) -> bool\
    \ {\n   |    ---------                    ^^^^ expected `bool`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n            i += 1;\n        } else if string[i]\
    \ == ']' {\n            if stack.is_empty() {\n                return false;\n\
    \            }\n            let top = stack.last().unwrap();\n            if top\
    \ < i {\n                return false;\n            }\n            stack.pop();\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    stack.is_empty()\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpl3_833g3.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpl3_833g3.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl3_833g3.rs:28:22\n\
    \   |\n28 |             if top < i {\n   |                      ^\n   |      \
    \                |\n   |                      expected `&usize`, found `usize`\n\
    \   |                      help: consider borrowing here: `&i`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '{' {\n            stack.push(c);\n        } else if c == '}' {\n     \
    \       if open_brackets == 0 {\n                return false;\n            }\n\
    \            open_brackets -= 1;\n            stack.pop();\n        }\n    }\n\
    \    open_brackets == 0\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq8cys4gg.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    let mut open_brackets = 0;\n    let\
    \ mut close_brackets = 0;\n    while i < string.len() {\n        if string[i]\
    \ == '[' {\n            open_brackets += 1;\n            i += 1;\n        } else\
    \ if string[i] == ']' {\n            close_brackets += 1;\n            i += 1;\n\
    \        } else if string[i] == '{' {\n            i += 1;\n        } else if\
    \ string[i] == '}' {\n            i += 1;\n        } else {\n            stack[stack.len()\
    \ - close_brackets] = i;\n            i += 1;\n        }\n    }\n    stack.iter().all(|&i|\
    \ string[stack[i]] == '[')\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpzi102hie.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpzi102hie.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpzi102hie.rs:28:19\n   |\n28 |         } else if string[i] == '{'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerro"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut index = 0;\n    let mut open_brackets = 0;\n   \
    \ let mut closed_brackets = 0;\n    while index < string.len() {\n        if string[index]\
    \ == '[' {\n            open_brackets += 1;\n            stack[index] = open_brackets;\n\
    \        } else if string[index] == ']' {\n            closed_brackets += 1;\n\
    \            stack[index] = closed_brackets;\n        } else if string[index]\
    \ == '[' && open_brackets > closed_brackets {\n            closed_brackets +=\
    \ 1;\n        } else if string[index] == ']' && open_brackets > closed_brackets\
    \ {\n            open_brackets += 1;\n        }\n        index += 1;\n    }\n\
    \    stack.is_empty()\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9vusrna4.rs:22:12\n\
    \   |\n22 |         if string[index] == '[' {\n   |            ^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp9vusrna4.rs:25:19\n   |\n25 |         } else if string[index] ==\
    \ ']' {\n   |                   ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp9vusrna4.rs:28:19\n   |\n28 |         } else if string[index] ==\
    \ '[' && open_brackets > closed_brackets {\n   |                   ^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<st"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    for c in string.chars() {\n        if c == '[' {\n\
    \            stack.push(c);\n            open_brackets += 1;\n        } else if\
    \ c == '[' && stack.len() > 0 && stack.pop() == '[' {\n            open_brackets\
    \ -= 1;\n        }\n        if open_brackets == 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuddlgb.rs:23:65\n   |\n\
    23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == '[' {\n \
    \  |                                                                 ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n23 |         } else if c == '[' && stack.len() > 0 && stack.pop() == Some('[')\
    \ {\n   |                                                                 +++++\
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut index = 0;\n    loop {\n        if index >= string.len() {\n    \
    \        return false;\n        }\n        if string[index] == '[' {\n       \
    \     stack.push(index);\n        }\n        if string[index] == ']' {\n     \
    \       if stack.len() == 0 {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n        index += 1;\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpg14q2oy_.rs:23:12\n\
    \   |\n23 |         if string[index] == '[' {\n   |            ^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpg14q2oy_.rs:26:12\n   |\n26 |         if string[index] == ']' {\n\
    \   |            ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n \
    \  = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nwarning:\
    \ unreachable expression\n  --> /tmp/tmpg14q2oy_.rs:34:5\n   |\n19 | /     loop\
    \ {\n20 | |         if index >= string.len() {\n21 | |             return false;\n\
    22 | |         }\n...  |\n32 | |         index += 1;\n33 | |     }\n   | |_____-\
    \ any code following this expression is unreachable\n34 |       true\n   |   \
    \    ^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    for c in string.chars()\
    \ {\n        if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == '{' {\n            stack.push(c);\n        } else\
    \ if c == '}' {\n            close_brackets += 1;\n            if close_brackets\
    \ == open_brackets {\n                stack.pop();\n            }\n        }\n\
    \    }\n    stack.len() == 0 || (close_brackets == open_brackets)\n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8wuce842.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    for ch in string.chars() {\n        if ch == '[' {\n            stack.push(0);\n\
    \        } else if ch == ']' {\n            if stack.len() == 0 {\n          \
    \      return false;\n            }\n            let top = stack.last().unwrap();\n\
    \            if top < stack.len() - 1 {\n                return false;\n     \
    \       }\n            stack.pop();\n        } else {\n            stack.push((stack.len()\
    \ + 1) * 2);\n        }\n    }\n    stack.len() == 0 || stack.pop() == 0\n}\n\n\
    fn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsvtwebqx.rs:26:22\n   |\n\
    26 |             if top < stack.len() - 1 {\n   |                      ^^^^^^^^^^^^^^^\n\
    \   |                      |\n   |                      expected `&usize`, found\
    \ `usize`\n   |                      help: consider borrowing here: `&(stack.len()\
    \ - 1)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvtwebqx.rs:34:40\n \
    \  |\n34 |     stack.len() == 0 || stack.pop() == 0\n   |                    \
    \                    ^ expected enum `Option`, found integer\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `{integer}`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n34 |     stack.len() == 0 || stack.pop()\
    \ == Some(0)\n   |                                        +++++ +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            stack.push(string[i]);\n\
    \            open_brackets += 1;\n        } else if string[i] == ']' {\n     \
    \       close_brackets += 1;\n            if close_brackets == open_brackets {\n\
    \                stack.pop();\n            }\n        } else if string[i] == '{'\
    \ {\n            stack.push(string[i]);\n        } else if string[i] == '}' {\n\
    \            close_brackets += 1;\n            if close_brackets == open_brackets\
    \ {\n                stack.pop();\n            }\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    stack.len() == 0 && close_brackets == open_brackets\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvzume2zd.rs:22:12\n\
    \   |\n22 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvzume2zd.rs:23:24\n   |\n23 |             stack.push(string[i]);\n\
    \   |                        ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvzume2zd.rs:25:19\n   |\n25 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\ne"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n            i += 1;\n        } else if string[i]\
    \ == ']' {\n            if stack.len() == 0 {\n                return false;\n\
    \            }\n            let top = stack.pop();\n            if top < i {\n\
    \                return false;\n            }\n            i += 1;\n        }\n\
    \        i += 1;\n    }\n    stack.len() == 0 && true\n}\n\nfn main() {\n    let\
    \ candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp93u681zn.rs:21:12\n\
    \   |\n21 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp93u681zn.rs:24:19\n   |\n24 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93u681zn.rs:29:22\n\
    \   |\n29 |             if top < i {\n   |                      ^ expected enum\
    \ `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n  \
    \            found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n29 |             if top < Some(i) {\n   |                      +++++ +\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    let mut open_brackets_stack\
    \ = Vec::new();\n    let mut closed_brackets_stack = Vec::new();\n    let mut\
    \ open_brackets_stack_size = Vec::new();\n    let mut closed_brackets_stack_size\
    \ = Vec::new();\n    let mut open_brackets_stack_ptr = Vec::new();\n    let mut\
    \ closed_brackets_stack_ptr = Vec::new();\n    let mut open_brackets_stack_ptr_ptr\
    \ = Vec::new();\n    let mut closed_brackets_stack_ptr_ptr = Vec::new();\n   \
    \ let mut open_brackets_stack_ptr_ptr_ptr = Vec::new();\n    let mut closed_brackets_stack_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut open_brackets_stack_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut closed_brackets_stack_ptr_ptr_ptr_ptr = Vec::new();\n    let mut\
    \ open_brackets_stack_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr\
    \ = Vec::new();\n    let mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n   \
    \ let mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n    let\
    \ mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut closed_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr = Vec::new();\n\
    \    let mut open_brackets_stack_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr =\
    \ Vec::new();\n    let mut close\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3bkilqcg.rs:45:18\n   |\n\
    45 |     let mut close\n   |                  ^ help: add `;` here\n46 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bkilqcg.rs:16:33\n\
    \   |\n16 | fn is_nested(string: String) -> bool {\n   |    ---------        \
    \            ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| {\n       \
    \ if c == '[' {\n            true\n        } else if c == '{' {\n            true\n\
    \        } else if c == '(' {\n            true\n        } else if c == ']' {\n\
    \            true\n        } else if c == '}' {\n            true\n        } else\
    \ if c == ')' {\n            true\n        } else if c == '\"' {\n           \
    \ true\n        } else {\n            false\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp89z16l3a.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if stack.is_empty()\
    \ {\n            return false;\n        }\n        let mut j = i;\n        while\
    \ j < string.len() {\n            if string[j] == ']' {\n                stack.pop();\n\
    \            } else {\n                stack.push(j);\n            }\n       \
    \     j += 1\n        }\n        i += 1;\n    }\n    stack.is_empty()\n}\n\nfn\
    \ main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6r_p8bfq.rs:26:16\n\
    \   |\n26 |             if string[j] == ']' {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    let mut index = 0;\n    let mut open_brackets = 0;\n    let mut close_brackets\
    \ = 0;\n    let mut open_brackets_stack: Vec<usize> = Vec::new();\n    let mut\
    \ close_brackets_stack: Vec<usize> = Vec::new();\n    let mut open_brackets_stack_index\
    \ = 0;\n    let mut close_brackets_stack_index = 0;\n    let mut open_brackets_stack_index2\
    \ = 0;\n    let mut close_brackets_stack_index2 = 0;\n    let mut open_brackets_stack_index3\
    \ = 0;\n    let mut close_brackets_stack_index3 = 0;\n    let mut open_brackets_stack_index4\
    \ = 0;\n    let mut close_brackets_stack_index4 = 0;\n    let mut open_brackets_stack_index5\
    \ = 0;\n    let mut close_brackets_stack_index5 = 0;\n    let mut open_brackets_stack_index6\
    \ = 0;\n    let mut close_brackets_stack_index6 = 0;\n    let mut open_brackets_stack_index7\
    \ = 0;\n    let mut close_brackets_stack_index7 = 0;\n    let mut open_brackets_stack_index8\
    \ = 0;\n    let mut close_brackets_stack_index8 = 0;\n    let mut open_brackets_stack_index9\
    \ = 0;\n    let mut close_brackets_stack_index9 = 0;\n    let mut open_brackets_stack_index10\
    \ = 0;\n    let mut close_brackets_stack_index10 = 0;\n    let mut open_brackets_stack_index11\
    \ = 0;\n    let mut close_brackets_stack_index11 = 0;\n    let mut open_brackets_stack_index12\
    \ = 0;\n    let mut close_brackets_stack_index12 = 0;\n    let mut open_brackets_stack_index13\
    \ = 0;\n    let mut close_brackets_stack_index13 = 0;\n    let mut open_brackets_stack_index14\
    \ = 0;\n    let mut close_brackets_stack_index14 = 0;\n    let mut open_brackets_stack_index15\
    \ = 0;\n    let mut close_brackets_stack_index15 = 0;\n    let mut open_brackets_stack_index16\
    \ = 0;\n    let mut close_brackets_stack_index16 = 0;\n    let mut open_brackets_stack_index17\
    \ = 0;\n    let mut close_brackets_stack_index17\n}\n\nfn main() {\n    let candidate\
    \ = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n\
    \    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprvh_us0i.rs:56:41\n   |\n\
    56 |     let mut close_brackets_stack_index17\n   |                          \
    \               ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprvh_us0i.rs:16:33\n   |\n16 | fn is_nested(string:\
    \ String) -> bool {\n   |    ---------                    ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| {\n       \
    \ c != '[' && c != ']' && c != '{' && c != '}'\n    })\n}\n\nfn main() {\n   \
    \ let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")),\
    \ true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7_h35vij.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    \n    for index in string.chars().skip(1) {\n        if index == '[' {\n\
    \            stack.push(index + 1);\n        } else if index == ']' {\n      \
    \      if stack.len() == 0 {\n                return false;\n            }\n \
    \           \n            let top = stack.pop();\n            if top != index\
    \ {\n                return false;\n            }\n        }\n    }\n    \n  \
    \  stack.len() == 0 && true\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `char`\n  --> /tmp/tmpjet6_jld.rs:22:30\n\
    \   |\n22 |             stack.push(index + 1);\n   |                        -----\
    \ ^ - {integer}\n   |                        |\n   |                        char\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjet6_jld.rs:29:23\n   |\n29 |\
    \             if top != index {\n   |                       ^^^^^ expected enum\
    \ `Option`, found `char`\n   |\n   = note: expected enum `Option<{integer}>`\n\
    \              found type `char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: usize = 0;\n    let mut closed_brackets: usize = 0;\n\
    \    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n\
    \            open_brackets += 1;\n        } else if c == ']' {\n            closed_brackets\
    \ += 1;\n            if open_brackets > closed_brackets {\n                return\
    \ false;\n            }\n            open_brackets -= 1;\n        }\n    }\n \
    \   open_brackets == closed_brackets\n}\n\nfn main() {\n    let candidate = is_nested;\n\
    \    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgc8mkow6.rs:22:24\n   |\n\
    22 |             stack.push(c);\n   |                        ^ expected `usize`,\
    \ found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaiv2wu_4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().all(|c| {\n       \
    \ if c == '[' {\n            true\n        } else if c == ']' {\n            true\n\
    \        } else if c == '{' {\n            true\n        } else if c == '}' {\n\
    \            true\n        } else if c == '(' {\n            true\n        } else\
    \ if c == ')' {\n            true\n        } else {\n            false\n     \
    \   }\n    })\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuo819ear.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![];\n\
    \    for c in string.chars() {\n        if c == '[' {\n            stack.push(0)\n\
    \        } else if c == '{' {\n            stack.push(1)\n        } else if c\
    \ == '}' {\n            stack.pop();\n            if stack.len() == 0 {\n    \
    \            return false;\n            }\n        }\n    }\n    stack.len() ==\
    \ 0\n}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo2ghu59v.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack = Vec::new();\n    stack.push(0);\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if string[i] == '['\
    \ {\n            stack.push(i);\n            i += 1;\n        }\n        if string[i]\
    \ == ']' {\n            stack.pop();\n            i += 1;\n        }\n       \
    \ i += 1;\n    }\n    stack.is_empty()\n}\n\nfn main() {\n    let candidate =\
    \ is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmph12e04ix.rs:21:12\n\
    \   |\n21 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph12e04ix.rs:25:12\n   |\n25 |         if string[i] == ']' {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = Vec::new();\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n\
    \    stack.push(0);\n    stack.push(0);\n    stack.push(0);\n    \n}\n\nfn main()\
    \ {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzs90qdop.rs:16:33\n   |\n\
    16 | fn is_nested(string: String) -> bool {\n   |    ---------               \
    \     ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010731
- exit_code: 1
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    let mut stack: Vec<usize> = vec![0;\
    \ string.len()];\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i] == '[' {\n            stack.push(0);\n            i += 1;\n      \
    \  } else if string[i] == ']' {\n            stack.pop();\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    stack.is_empty()\n\
    }\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
    [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
    []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
    \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
    \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvnpt5b8w.rs:20:12\n\
    \   |\n20 |         if string[i] == '[' {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvnpt5b8w.rs:23:19\n   |\n23 |         } else if string[i] == ']'\
    \ {\n   |                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010732
- exit_code: 101
  program: "/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
    []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n///\
    \ false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
    [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\n\
    fn is_nested(string: String) -> bool {\n    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')\n}\n\nfn main() {\n    let candidate = is_nested;\n  \
    \  assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    []]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"\
    [[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n \
    \   assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"\
    [[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"\
    ]]]]]]]]\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd7gkyc8c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010731
