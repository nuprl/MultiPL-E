language: rs
name: HumanEval_37_sort_even
results:
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len() - 1);\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpsnsq7dql.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len() - 1);\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_values = even.clone();\n\
    \    let mut odd_values = odd.clone();\n    for i in 0..even.len() {\n       \
    \ if i % 2 == 0 {\n            even_values[i] = even[i];\n        } else {\n \
    \           odd_values[i] = odd[i];\n        }\n    }\n    even = even_values;\n\
    \    odd = odd_values;\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `odd` is never read\n  --> /tmp/tmpqvs5tp5j.rs:21:5\n\
    \   |\n21 |     odd = odd_values;\n   |     ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `l`\n  --> /tmp/tmpqvs5tp5j.rs:10:19\n   |\n8  | fn sort_even(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |              - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n9  |     let mut\
    \ even = l;\n   |                    - value moved here\n10 |     let mut odd\
    \ = l;\n   |                   ^ value used here after move\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len());\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp_1nrohdh.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp33a9iazo.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter().cloned().zip(odd.iter().cloned()).map(|(a, b)| {\n        if\
    \ a.0 % 2 == 0 {\n            b.0\n        } else {\n            a.0\n       \
    \ }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpfvjfy4xn.rs:14:14\n   |\n14 |         if a.0 % 2 == 0 {\n   | \
    \             ^\n\nerror[E0610]: `isize` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmpfvjfy4xn.rs:15:15\n   |\n15 |             b.0\n \
    \  |               ^\n\nerror[E0610]: `isize` is a primitive type and therefore\
    \ doesn't have fields\n  --> /tmp/tmpfvjfy4xn.rs:17:15\n   |\n17 |           \
    \  a.0\n   |               ^\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0610`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = even[i];\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpb2orurg5.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    even.iter().zip(odd.iter()).for_each(|(a, b)| {\n        if a % 2 == 0 {\n\
    \            *a = *b;\n        }\n    });\n    even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0594]: cannot assign to `*a`, which is behind a `&` reference\n\
    \  --> /tmp/tmpg5f5stqm.rs:15:13\n   |\n13 |     even.iter().zip(odd.iter()).for_each(|(a,\
    \ b)| {\n   |                                            - help: consider changing\
    \ this to be a mutable reference: `&mut isize`\n14 |         if a % 2 == 0 {\n\
    15 |             *a = *b;\n   |             ^^^^^^^ `a` is a `&` reference, so\
    \ the data it refers to cannot be written\n\nerror[E0382]: use of moved value:\
    \ `l`\n  --> /tmp/tmpg5f5stqm.rs:10:19\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - move occurs because `l` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n9  |     let mut even = l;\n   |\
    \                    - value moved here\n10 |     let mut odd = l;\n   |     \
    \              ^ value used here after move\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0382, E0594.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        if *a %\
    \ 2 == 0 {\n            *a = *b;\n        }\n    });\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpv6ll41bw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| {\n        if a % 2 == 0 {\n            a as isize\n\
    \        } else {\n            b as isize\n        }\n    });\n    l\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in even.iter_mut() {\n  \
    \      if i % 2 == 0 {\n            *i = *i + (*i as isize);\n        }\n    }\n\
    \    for i in odd.iter_mut() {\n        if i % 2 == 0 {\n            *i = *i -\
    \ (*i as isize);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpzgwq2zoo.rs:12:14\n\
    \   |\n12 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n12 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpzgwq2zoo.rs:17:14\n\
    \   |\n17 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n17 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ < even[odd_idx] {\n            even[even_idx] = even[odd_idx];\n           \
    \ even[odd_idx] = even[even_idx];\n            even_idx = even_idx + 1;\n    \
    \        odd_idx = odd_idx + 1;\n        } else {\n            even[even_idx]\
    \ = even[odd_idx];\n            even[odd_idx] = even[even_idx];\n            even_idx\
    \ = even_idx + 1;\n            odd_idx = odd_idx + 1;\n        }\n    }\n    while\
    \ odd_idx < odd.len() {\n        even[even_idx] = odd[odd_idx];\n        even[odd_idx]\
    \ = even[even_idx];\n        even_idx = even_idx + 1;\n        odd_idx = odd_idx\
    \ + 1;\n    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpuirbwfzv.rs:10:9\n\
    \   |\n10 |     let mut odd = l;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpuirbwfzv.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ < even[even_idx + 1] {\n            even[even_idx] = even[even_idx + 1];\n \
    \           even[even_idx + 1] += 1;\n            even_idx += 2;\n        } else\
    \ {\n            even[even_idx] = even[even_idx - 1];\n            even[even_idx\
    \ - 1] += 1;\n            even_idx += 2;\n        }\n    }\n    while odd_idx\
    \ < odd.len() {\n        if odd[odd_idx] < odd[odd_idx + 1] {\n            odd[odd_idx]\
    \ = odd[odd_idx + 1];\n            odd[odd_idx + 1] += 1;\n            odd_idx\
    \ += 2;\n        } else {\n            odd[odd_idx] = odd[odd_idx - 1];\n    \
    \        odd[odd_idx - 1] += 1;\n            odd_idx += 2;\n        }\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpal5s8ol_.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ < even[even_index + 1] {\n            even[even_index] = even[even_index + 1];\n\
    \            even[even_index + 1] = even[even_index];\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index];\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] < odd[odd_index + 1] {\n            odd[odd_index]\
    \ = odd[odd_index + 1];\n            odd[odd_index + 1] = odd[odd_index];\n  \
    \          odd_index += 1;\n        } else {\n            odd[odd_index] = odd[odd_index];\n\
    \            odd_index += 1;\n        }\n    }\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmprof5alhw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| a % 2 == b % 2);\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq055bpdr.rs:9:31\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| a % 2 == b % 2);\n  |                        \
    \       ^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_values = even.clone();\n\
    \    let mut odd_values = odd.clone();\n    for i in 0..even.len() {\n       \
    \ if i % 2 == 0 {\n            even_values[i] = even[i];\n        } else {\n \
    \           odd_values[i] = odd[i];\n        }\n    }\n    even = even_values;\n\
    \    odd = odd_values;\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `odd` is never read\n  --> /tmp/tmpqvs5tp5j.rs:21:5\n\
    \   |\n21 |     odd = odd_values;\n   |     ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `l`\n  --> /tmp/tmpqvs5tp5j.rs:10:19\n   |\n8  | fn sort_even(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |              - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n9  |     let mut\
    \ even = l;\n   |                    - value moved here\n10 |     let mut odd\
    \ = l;\n   |                   ^ value used here after move\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len());\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp_1nrohdh.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpbulh62ii.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = even.clone();\n    odd.sort();\n    for\
    \ i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n\
    \        } else {\n            odd[i] = even[i];\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -3, 2, 1, 3, 3, 0, 5, 1, 123]`,\n right: `[-10, 3, -5, 2, -3, 3, 5,\
    \ 0, 9, 1, 123]`', /tmp/tmprsnk_ycr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[even.len() - 1 - i];\n        } else {\n            odd[i] = odd[odd.len()\
    \ - 1 - i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpzq6ivjph.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter(|(i, _)| i % 2 == 0).map(|(i, _)| {\n \
    \       l.swap(i, i);\n        l.swap(i, i + 1);\n        l.swap(i, i + 2);\n\
    \        l.swap(i, i + 3);\n        l.swap(i, i + 4);\n        l.swap(i, i + 5);\n\
    \        l.swap(i, i + 6);\n        l.swap(i, i + 7);\n        l.swap(i, i + 8);\n\
    \        l.swap(i, i + 9);\n        l.swap(i, i + 10);\n        l.swap(i, i +\
    \ 11);\n        l.swap(i, i + 12);\n        l.swap(i, i + 13);\n        l.swap(i,\
    \ i + 14);\n        l.swap(i, i + 15);\n        l.swap(i, i + 16);\n        l.swap(i,\
    \ i + 17);\n        l.swap(i, i + 18);\n        l.swap(i, i + 19);\n        l.swap(i,\
    \ i + 20);\n        l.swap(i, i + 21);\n        l.swap(i, i + 22);\n        l.swap(i,\
    \ i + 23);\n        l.swap(i, i + 24);\n        l.swap(i, i + 25);\n        l.swap(i,\
    \ i + 26);\n        l.swap(i, i + 27);\n        l.swap(i, i + 28);\n        l.swap(i,\
    \ i + 29);\n        l.swap(i, i + 30);\n        l.swap(i, i + 31);\n        l.swap(i,\
    \ i + 32);\n        l.swap(i, i + 33);\n        l.swap(i, i + 34);\n        l.swap(i,\
    \ i + 35);\n        l.swap(i, i + 36);\n        l.swap(i, i + 37);\n        l.swap(i,\
    \ i + 38);\n        l.swap(i, i + 39);\n        l.swap(i, i + 40);\n        l.swap(i,\
    \ i + 41);\n        l.swap(i, i + 42);\n        l.swap(i, i + 43);\n        l.swap(i,\
    \ i + 44);\n        l.swap(i, i + 45);\n        l.swap(i, i + 46);\n        l.swap(i,\
    \ i + 47);\n        l.swap(i, i + 48);\n        l.swap(i, i + 49);\n        l.swap(i,\
    \ i + 50);\n        l.swap(i, i + 51);\n        l.swap(i, i + 52);\n        l.swap(i,\
    \ i + 53);\n        l.swap(i, i + 54);\n        l.swap(i, i + 55);\n        l.swap(i,\
    \ i + 56);\n        l.swap(i, i + 57);\n        l.swap(i, i + 58);\n        l.swap(i,\
    \ i + 59);\n        l.swap(i, i + 60);\n        l.swap(i, i + 61);\n        l.swap(i,\
    \ i + 62);\n        l.swap\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk76hikbj.rs:81:3\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                           - unclosed delimiter\n9  |     l.iter().cloned().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(i, _)| {\n   |                                       \
    \                           - unclosed delimiter\n...\n81 | }\n   |   ^\n\nerror:\
    \ expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `fn`\n  -->\
    \ /tmp/tmpk76hikbj.rs:76:1\n   |\n74 | }\n   |  - expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n75 | \n76 | fn main() {\n   | ^^ unexpected token\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq82x8p_f.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ % 2 == 0 {\n            even[even_index] = even[even_index] + 1;\n         \
    \   even_index += 1;\n        } else {\n            even[even_index] = even[even_index]\
    \ - 1;\n            even_index += 1;\n        }\n    }\n    while odd_index <\
    \ odd.len() {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index]\
    \ = odd[odd_index] + 1;\n            odd_index += 1;\n        } else {\n     \
    \       odd[odd_index] = odd[odd_index] - 1;\n            odd_index += 1;\n  \
    \      }\n    }\n    even.extend(odd.iter().cloned());\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpmg4nd8za.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[even.len() - i - 1];\n        } else {\n            odd[i] = odd[odd.len()\
    \ - i - 1];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpik9rbhc3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpbulh62ii.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in even.iter_mut() {\n  \
    \      *i -= 1;\n        *i /= 2;\n        *i += 1;\n    }\n    for i in odd.iter_mut()\
    \ {\n        *i += 1;\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpomo0oppw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| {\n        if a % 2 == 0 {\n            a as isize\n\
    \        } else {\n            b as isize\n        }\n    });\n    l\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfqgx353z.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len());\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp_1nrohdh.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfqgx353z.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().map(|(i, v)| (i % 2, v)).collect::<Vec<_>>().sort_by_key(|&(_,\
    \ v)| v).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpb2k1up0i.rs:9:105\n\
    \  |\n9 |     l.iter().cloned().enumerate().map(|(i, v)| (i % 2, v)).collect::<Vec<_>>().sort_by_key(|&(_,\
    \ v)| v).collect()\n  |                                                      \
    \                                                   ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n     \
    \       odd[i] = odd[i];\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpg6zoy8um.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n     \
    \       odd[i] = odd[i];\n        }\n    }\n    even.sort();\n    odd.sort();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpnsp3dkrf.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ < even[even_index + 1] {\n            even[even_index] = even[even_index + 1];\n\
    \            even[even_index + 1] = even[even_index];\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index];\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] < odd[odd_index + 1] {\n            odd[odd_index]\
    \ = odd[odd_index + 1];\n            odd[odd_index + 1] = odd[odd_index];\n  \
    \          odd_index += 1;\n        } else {\n            odd[odd_index] = odd[odd_index];\n\
    \            odd_index += 1;\n        }\n    }\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmprof5alhw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        if a % 2\
    \ == 0 {\n            *a = *b;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpvs0w6nxm.rs:14:14\n\
    \   |\n14 |         if a % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `a`\n   |\n14 |         if *a % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut i = 0;\n    while i < even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i / 2];\n           \
    \ odd.push(i);\n        }\n        i += 1;\n    }\n    even.extend(odd.clone());\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbmoied2o.rs:15:22\n   |\n\
    15 |             odd.push(i);\n   |                      ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             odd.push(i.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len() - 1);\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpsnsq7dql.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len() - 1);\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ > even[even_idx - 1] {\n            even.swap(even_idx, even_idx - 1);\n   \
    \         even_idx += 1;\n        } else {\n            even_idx += 1;\n     \
    \   }\n    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx] > odd[odd_idx\
    \ - 1] {\n            odd.swap(odd_idx, odd_idx - 1);\n            odd_idx +=\
    \ 1;\n        } else {\n            odd_idx += 1;\n        }\n    }\n    odd\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpxulcc0dz.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            odd[i] = even[i];\n\
    \        } else {\n            odd[i] = even[i];\n            odd[i / 2] = even[i\
    \ / 2];\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpcbqe34hf.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| {\n        if a % 2 == 0 {\n            a - b\n  \
    \      } else {\n            b - a\n        }\n    });\n    l\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu89aw7ld.rs:11:13\n   |\n\
    11 |             a - b\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu89aw7ld.rs:13:13\n\
    \   |\n13 |             b - a\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = even[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp_qjnryzq.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        while even_index\
    \ < even.len() && even[even_index] < even[even_index + 1] {\n            even_index\
    \ += 1;\n        }\n        while odd_index < odd.len() && odd[odd_index] > odd[odd_index\
    \ + 1] {\n            odd_index += 1;\n        }\n        if even_index < even.len()\
    \ {\n            even[even_index] = even[even_index + 1];\n            even_index\
    \ += 1;\n        }\n        if odd_index < odd.len() {\n            odd[odd_index]\
    \ = odd[odd_index + 1];\n            odd_index += 1;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmphtnhigsr.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in even.iter_mut() {\n  \
    \      *i -= 1;\n        *i += 1;\n    }\n    for i in odd.iter_mut() {\n    \
    \    *i -= 1;\n    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpc5s7dmja.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        *a = *b;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpd1lk39_q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    even.iter().cloned().zip(odd.iter().cloned()).map(|(a, b)| {\n        if\
    \ a % 2 == 0 {\n            a\n        } else {\n            b\n        }\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpgvo9o7hi.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut i = 0;\n    while i < even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i / 2];\n           \
    \ odd.swap(i, i / 2);\n        }\n        i += 1;\n    }\n    odd\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpcqp4mu2x.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        while odd_index\
    \ < odd.len() {\n            if even[even_index] > odd[odd_index] {\n        \
    \        odd.swap(odd_index, even_index);\n                even_index += 1;\n\
    \                odd_index += 1;\n            } else {\n                break;\n\
    \            }\n        }\n        even_index += 1;\n        odd_index += 1;\n\
    \    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpmpi58xnt.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpmpi58xnt.rs:10:19\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move occurs\
    \ because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    9  |     let mut even = l;\n   |                    - value moved here\n10 | \
    \    let mut odd = l;\n   |                   ^ value used here after move\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ > even[even_idx + 1] {\n            odd.swap(odd_idx, even_idx);\n         \
    \   odd_idx += 1;\n        }\n        even_idx += 1;\n    }\n    while odd_idx\
    \ < odd.len() {\n        if odd[odd_idx] > odd[odd_idx + 1] {\n            even.swap(even_idx,\
    \ odd_idx);\n            even_idx += 1;\n        }\n        odd_idx += 1;\n  \
    \  }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpbfaacleo.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    even.iter().cloned().zip(odd.iter().cloned()).map(|(a, b)| {\n        if\
    \ a % 2 == 0 {\n            a\n        } else {\n            b\n        }\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpgvo9o7hi.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_values = even.clone();\n\
    \    let mut odd_values = odd.clone();\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even_values[i]\
    \ = even[i];\n        } else {\n            odd_values[i] = odd[i];\n        }\n\
    \    }\n    even_values\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp9feyhxne.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        while even[even_idx]\
    \ < even[even_idx + 1] {\n            even_idx += 1;\n        }\n        even[even_idx]\
    \ = even[even_idx - 1];\n        even_idx += 1;\n        while odd_idx < odd.len()\
    \ {\n            while odd[odd_idx] < even[even_idx + 1] {\n                odd_idx\
    \ += 1;\n            }\n            odd[odd_idx] = even[even_idx - 1];\n     \
    \       odd_idx += 1;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp66aponlb.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        odd[i] = even[i];\n    }\n    odd\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpp7e7il8i.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() && odd_index < odd.len()\
    \ {\n        if even[even_index] % 2 == 0 {\n            even[even_index] = even[even_index];\n\
    \            even_index += 1;\n        } else {\n            odd[odd_index] =\
    \ odd[odd_index];\n            odd_index += 1;\n        }\n    }\n    while even_index\
    \ < even.len() {\n        even[even_index] = even[even_index];\n        even_index\
    \ += 1;\n    }\n    while odd_index < odd.len() {\n        odd[odd_index] = odd[odd_index];\n\
    \        odd_index += 1;\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpfk2hjfoq.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        while odd_index\
    \ < odd.len() {\n            if even[even_index] > odd[odd_index] {\n        \
    \        odd.swap(odd_index, even_index);\n                odd_index += 1;\n \
    \           }\n            odd_index += 1;\n        }\n        even_index += 1;\n\
    \    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpylelaap_.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpylelaap_.rs:10:19\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move occurs\
    \ because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    9  |     let mut even = l;\n   |                    - value moved here\n10 | \
    \    let mut odd = l;\n   |                   ^ value used here after move\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len());\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp_1nrohdh.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfqgx353z.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ < even[even_idx - 1] {\n            odd.swap(odd_idx, even_idx);\n         \
    \   odd_idx += 1;\n        }\n        even_idx += 1;\n    }\n    while odd_idx\
    \ < odd.len() {\n        if odd[odd_idx] < even[odd_idx] {\n            even.swap(even_idx,\
    \ odd_idx);\n            even_idx += 1;\n        }\n        odd_idx += 1;\n  \
    \  }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpqmqtrxjn.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ % 2 == 0 {\n            even[even_index] = even[even_index] + 1;\n         \
    \   even_index += 1;\n        } else {\n            even[even_index] = even[even_index]\
    \ - 1;\n            even_index += 1;\n        }\n    }\n    while odd_index <\
    \ odd.len() {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index]\
    \ = odd[odd_index] + 1;\n            odd_index += 1;\n        } else {\n     \
    \       odd[odd_index] = odd[odd_index] - 1;\n            odd_index += 1;\n  \
    \      }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp1xnxove0.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = even;\n    odd.swap(0,\
    \ even.len() - 1);\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpsnsq7dql.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len() - 1);\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_values = even.clone();\n\
    \    let mut odd_values = odd.clone();\n    even.sort();\n    odd.sort();\n  \
    \  for i in 0..even.len() {\n        if i % 2 == 0 {\n            even_values[i]\
    \ = even[i];\n        } else {\n            odd_values[i] = odd[i];\n        }\n\
    \    }\n    even_values\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpn0jwoigw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ < even[even_idx + 1] {\n            even[even_idx] = even[even_idx + 1];\n \
    \           even[even_idx + 1] += 1;\n            even_idx += 2;\n        } else\
    \ {\n            even[even_idx] += 1;\n            even_idx += 1;\n        }\n\
    \    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx] < odd[odd_idx\
    \ + 1] {\n            odd[odd_idx] = odd[odd_idx + 1];\n            odd[odd_idx\
    \ + 1] += 1;\n            odd_idx += 2;\n        } else {\n            odd[odd_idx]\
    \ += 1;\n            odd_idx += 1;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpj2xde0e3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v.clone())\n        } else {\n            None\n        }\n\
    \    }).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmp0he9pn_e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ > even[even_index + 1] {\n            odd.swap(odd_index, even_index);\n   \
    \         odd_index += 1;\n        }\n        even_index += 1;\n    }\n    while\
    \ odd_index < odd.len() {\n        if even[odd_index] > even[odd_index + 1] {\n\
    \            even.swap(even_index, odd_index);\n            even_index += 1;\n\
    \        }\n        odd_index += 1;\n    }\n    even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpkca4hayx.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = even[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp_qjnryzq.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        odd[i] = even[i];\n    }\n    odd\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpp7e7il8i.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n\
    \    even.extend(&odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 1, 2, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpv8o4bcnx.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        while odd_idx <\
    \ odd.len() {\n            if even[even_idx] > odd[odd_idx] {\n              \
    \  even[even_idx] = odd[odd_idx];\n                even_idx++;\n             \
    \   odd_idx++;\n            } else {\n                break;\n            }\n\
    \        }\n        even[even_idx] = even[even_idx - 1];\n        even_idx++;\n\
    \    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpixcqjyor.rs:17:25\n\
    \   |\n17 |                 even_idx++;\n   |                         ^^ not a\
    \ valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n17 |         \
    \        { let tmp = even_idx; even_idx += 1; tmp };\n   |                 +++++++++++\
    \         ~~~~~~~~~~~~~~~~~~~~~~\n17 -                 even_idx++;\n17 +     \
    \            even_idx += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpixcqjyor.rs:24:17\n   |\n24 |         even_idx++;\n   |       \
    \          ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n \
    \  |\n24 |         { let tmp = even_idx; even_idx += 1; tmp };\n   |         +++++++++++\
    \         ~~~~~~~~~~~~~~~~~~~~~~\n24 -         even_idx++;\n24 +         even_idx\
    \ += 1;\n   | \n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ > even[even_idx + 1] {\n            even[even_idx] = even[even_idx + 1];\n \
    \           even[even_idx + 1] = 0;\n            even_idx += 2;\n        } else\
    \ {\n            even[even_idx] = even[even_idx + 1];\n            even[even_idx\
    \ + 1] = 0;\n            even_idx += 2;\n        }\n    }\n    while odd_idx <\
    \ odd.len() {\n        if odd[odd_idx] > odd[odd_idx + 1] {\n            odd[odd_idx]\
    \ = odd[odd_idx + 1];\n            odd[odd_idx + 1] = 0;\n            odd_idx\
    \ += 2;\n        } else {\n            odd[odd_idx] = odd[odd_idx + 1];\n    \
    \        odd[odd_idx + 1] = 0;\n            odd_idx += 2;\n        }\n    }\n\
    \    even.clone() + odd\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp7ih_iuq_.rs:35:18\n\
    \   |\n35 |     even.clone() + odd\n   |     ------------ ^ --- Vec<isize>\n \
    \  |     |\n   |     Vec<isize>\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n     \
    \       odd[i] = odd[i];\n        }\n    }\n    even.sort();\n    odd.sort();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpnsp3dkrf.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq82x8p_f.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.iter().cloned().chain(odd.iter().cloned()).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmplvm3csx9.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| {\n        if a % 2 == 0 {\n            b.cmp(a)\n\
    \        } else {\n            a.cmp(b)\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphu167lvi.rs:9:5\n   |\n8\
    \  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n9  | /\
    \     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |    \
    \         b.cmp(a)\n12 | |         } else {\n13 | |             a.cmp(b)\n14 |\
    \ |         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp33a9iazo.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        if v % 2\
    \ == 0 {\n            *w = v;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp1qhdsp8k.rs:14:14\n\
    \   |\n14 |         if v % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `v`\n   |\n14 |         if *v % 2 == 0 {\n   |         \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qhdsp8k.rs:15:18\n   |\n\
    15 |             *w = v;\n   |             --   ^ expected `isize`, found `&mut\
    \ isize`\n   |             |\n   |             expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |         \
    \    *w = *v;\n   |                  +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let\
    \ mut odd_index = 0;\n    while even_index < even.len() {\n        while odd_index\
    \ < odd.len() {\n            if even[even_index] > odd[odd_index] {\n        \
    \        odd.swap(odd_index, odd.len());\n                odd_index += 1;\n  \
    \          } else {\n                break;\n            }\n        }\n      \
    \  even.swap(even_index, even.len());\n        even_index += 1;\n    }\n    odd\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpwbrmbzeh.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror[E0502]: cannot borrow `odd` as immutable because it is also borrowed as\
    \ mutable\n  --> /tmp/tmpwbrmbzeh.rs:16:37\n   |\n16 |                 odd.swap(odd_index,\
    \ odd.len());\n   |                 --------------------^^^^^^^^^-\n   |     \
    \            |   |               |\n   |                 |   |               immutable\
    \ borrow occurs here\n   |                 |   mutable borrow later used by call\n\
    \   |                 mutable borrow occurs here\n   |\nhelp: try adding a local\
    \ storing this argument...\n  --> /tmp/tmpwbrmbzeh.rs:16:37\n   |\n16 |      \
    \           odd.swap(odd_index, odd.len());\n   |                            \
    \         ^^^^^^^^^\nhelp: ...and then using that local as the argument to this\
    \ call\n  --> /tmp/tmpwbrmbzeh.rs:16:17\n   |\n16 |                 odd.swap(odd_index,\
    \ odd.len());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0502]:\
    \ cannot borrow `even` as immutable because it is also borrowed as mutable\n \
    \ --> /tmp/tmpwbrmbzeh.rs:22:31\n   |\n22 |         even.swap(even_index, even.len());\n\
    \   |         ----------------------^^^^^^^^^^-\n   |         |    |         \
    \       |\n   |         |    |                immutable borrow occurs here\n \
    \  |         |    mutable borrow later used by call\n   |         mutable borrow\
    \ occurs here\n   |\nhelp: try adding a local storing this argument...\n  -->\
    \ /tmp/tmpwbrmbzeh.rs:22:31\n   |\n22 |         even.swap(even_index, even.len());\n\
    \   |                               ^^^^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmpwbrmbzeh.rs:22:9\n   |\n22 |   \
    \      even.swap(even_index, even.len());\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due t"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        if v % 2\
    \ == 0 {\n            *w = v;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp6f5aoz45.rs:14:14\n\
    \   |\n14 |         if v % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `v`\n   |\n14 |         if *v % 2 == 0 {\n   |         \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6f5aoz45.rs:15:18\n   |\n\
    15 |             *w = v;\n   |             --   ^ expected `isize`, found `&mut\
    \ isize`\n   |             |\n   |             expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |         \
    \    *w = *v;\n   |                  +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = even[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp_qjnryzq.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter(|(i, _)| i % 2 == 0).map(|(i, v)| {\n \
    \       v.sort_unstable();\n        v.into_iter().cloned().collect::<Vec<_>>()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp_ec7lbbe.rs:10:11\n   |\n10 |         v.sort_unstable();\n\
    \   |           ^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: `isize`\
    \ is not an iterator\n  --> /tmp/tmp_ec7lbbe.rs:11:11\n   |\n11 |         v.into_iter().cloned().collect::<Vec<_>>()\n\
    \   |           ^^^^^^^^^ `isize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `isize: Iterator`\n           which\
    \ is required by `isize: IntoIterator`\n           `&isize: Iterator`\n      \
    \     which is required by `&isize: IntoIterator`\n           `&mut isize: Iterator`\n\
    \           which is required by `&mut isize: IntoIterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, x)| {\n        if i % 2 == 0 {\n\
    \            Some(x.clone())\n        } else {\n            None\n        }\n\
    \    }).cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmpnxlx0f6m.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmpnxlx0f6m.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpnxlx0f6m.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnxlx0f6m.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[even.len() - i - 1];\n        } else {\n            odd[i] = odd[odd.len()\
    \ - i - 1];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpik9rbhc3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if even[i] == i {\n            even[i]\
    \ = even[even.len() - 1];\n            even.pop();\n        } else {\n       \
    \     odd[i] = odd[odd.len() - 1];\n            odd.pop();\n        }\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptbjkc1gh.rs:14:23\n   |\n\
    14 |         if even[i] == i {\n   |                       ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         if even[i] == i.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut i = 0;\n    while i < even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i / 2];\n           \
    \ odd.swap(i, i / 2);\n            i += 1;\n        } else {\n            even[i]\
    \ = even[i / 2];\n            i += 1;\n        }\n    }\n    odd\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmppe027q25.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().map(|(i, v)| {\n        if i % 2 == 0 {\n    \
    \        v.clone()\n        } else {\n            v.sort_unstable().cloned()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpdeywgt8m.rs:13:15\n   |\n13 |             v.sort_unstable().cloned()\n\
    \   |               ^^^^^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[even.len() - i - 1];\n        } else {\n            odd[i] = odd[odd.len()\
    \ - i - 1];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpik9rbhc3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] =\
    \ even[i];\n        } else {\n            odd[i] = odd[i];\n        }\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpq3xwco08.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).map(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            a\n        } else {\n          \
    \  b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmphv_iilzz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter(|(i, _)| i % 2 == 0).map(|(i, _)| {\n \
    \       let mut v = vec![l.get_mut(i).unwrap()];\n        v.sort_unstable();\n\
    \        v\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `Vec<&mut isize>`\n    --> /tmp/tmps3by7uz4.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=Vec<&mut isize>>`\n     |\n \
    \    = help: the trait `FromIterator<Vec<&mut isize>>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfqgx353z.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    for i in 0..even.len() {\n    \
    \    if i % 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n \
    \           odd[i / 2] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdliddiae.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        if a % 2\
    \ == 0 {\n            *a = *b;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpvs0w6nxm.rs:14:14\n\
    \   |\n14 |         if a % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `a`\n   |\n14 |         if *a % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable_by(|a, b| {\n        if a % 2 == 0 {\n            a as isize\n\
    \        } else {\n            b as isize\n        }\n    });\n    l\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmp9q9qeq91.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp9q9qeq91.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    let mut odd = l;\n    odd.sort();\n\
    \    for i in 0..even.len() {\n        odd[i] = even[i];\n    }\n    odd\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpp7e7il8i.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter().cloned().zip(odd.iter().cloned()).map(|(a, b)| {\n        if\
    \ a.0 % 2 == 0 {\n            b.0\n        } else {\n            a.0\n       \
    \ }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpfvjfy4xn.rs:14:14\n   |\n14 |         if a.0 % 2 == 0 {\n   | \
    \             ^\n\nerror[E0610]: `isize` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmpfvjfy4xn.rs:15:15\n   |\n15 |             b.0\n \
    \  |               ^\n\nerror[E0610]: `isize` is a primitive type and therefore\
    \ doesn't have fields\n  --> /tmp/tmpfvjfy4xn.rs:17:15\n   |\n17 |           \
    \  a.0\n   |               ^\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0610`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n  \
    \      } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 3, 0, 0, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpk2uxgus6.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_values = even.clone();\n\
    \    let mut odd_values = odd.clone();\n    even.sort();\n    odd.sort();\n  \
    \  for i in 0..even.len() {\n        if i % 2 == 0 {\n            even_values[i]\
    \ = even[i];\n        } else {\n            odd_values[i] = odd[i];\n        }\n\
    \    }\n    even_values\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpn0jwoigw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l.iter() {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        } else {\n      \
    \      odd.push(i);\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpje2dqyhi.rs:21:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n21 | \
    \    even\n   |     ^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ > even[even_idx + 1] {\n            even.swap(even_idx, even_idx + 1);\n   \
    \         even_idx += 1;\n        } else {\n            even_idx += 1;\n     \
    \   }\n    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx] > odd[odd_idx\
    \ + 1] {\n            odd.swap(odd_idx, odd_idx + 1);\n            odd_idx +=\
    \ 1;\n        } else {\n            odd_idx += 1;\n        }\n    }\n    odd\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp7nii89v5.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfqgx353z.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = vec![];\n    let mut odd = vec![];\n    for i in l {\n      \
    \  if i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpqf9r1q48.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8cdeq3ua.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ < even[even_idx + 1] {\n            even[even_idx] = even[even_idx + 1];\n \
    \           even[even_idx + 1] += 1;\n            even_idx += 2;\n        } else\
    \ {\n            even[even_idx] += 1;\n            even_idx += 1;\n        }\n\
    \    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx] < odd[odd_idx\
    \ + 1] {\n            odd[odd_idx] = odd[odd_idx + 1];\n            odd[odd_idx\
    \ + 1] += 1;\n            odd_idx += 2;\n        } else {\n            odd[odd_idx]\
    \ += 1;\n            odd_idx += 1;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpj2xde0e3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq82x8p_f.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    let mut even_value = 0;\n    let mut odd_value = 0;\n\
    \    while even_idx < even.len() {\n        if even[even_idx] > odd_value {\n\
    \            odd_value = even[even_idx];\n            odd_idx = even_idx;\n  \
    \      }\n        even_value = 0;\n        even_idx += 1;\n    }\n    while odd_idx\
    \ < odd.len() {\n        if even[odd_idx] > odd_value {\n            odd_value\
    \ = even[odd_idx];\n            odd_idx = odd_idx;\n        }\n        even_value\
    \ = 0;\n        odd_idx += 1;\n    }\n    even.swap(even_idx, odd_idx);\n    odd\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `even_value` is assigned to, but never used\n  --> /tmp/tmpxxwq3oc9.rs:13:13\n\
    \   |\n13 |     let mut even_value = 0;\n   |             ^^^^^^^^^^\n   |\n \
    \  = note: `#[warn(unused_variables)]` on by default\n   = note: consider using\
    \ `_even_value` instead\n\nwarning: value assigned to `even_value` is never read\n\
    \  --> /tmp/tmpxxwq3oc9.rs:20:9\n   |\n20 |         even_value = 0;\n   |    \
    \     ^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n\
    \   = help: maybe it is overwritten before being read?\n\nwarning: value assigned\
    \ to `even_value` is never read\n  --> /tmp/tmpxxwq3oc9.rs:28:9\n   |\n28 |  \
    \       even_value = 0;\n   |         ^^^^^^^^^^\n   |\n   = help: maybe it is\
    \ overwritten before being read?\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpxxwq3oc9.rs:10:9\n   |\n10 |     let mut odd = l;\n   |       \
    \  ----^^^\n   |         |\n   |         help: remove this `mut`\n   |\n   = note:\
    \ `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use of moved value: `l`\n\
    \  --> /tmp/tmpxxwq3oc9.rs:10:19\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - move occurs because `l` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n9  |     let mut even = l;\n   |      \
    \              - value moved here\n10 |     let mut odd = l;\n   |           \
    \        ^ value used here after move\n\nerror: aborting due to previous error;\
    \ 4 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 101
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    even.sort();\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpesa71wu1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 == 0 {\n\
    \            Some(v)\n        } else {\n            None\n        }\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmp8luo8ckb.rs:15:8\n\
    \     |\n15   |     }).cloned().collect()\n     |        ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected enum `Option<&_>`\n           \
    \     found enum `Option<isize>`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8luo8ckb.rs:15:17\n   |\n15 |        }).cloned().collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmp8luo8ckb.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3,\
    \ 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut even = l;\n    let mut odd = l;\n    let mut even_idx = 1;\n    let\
    \ mut odd_idx = 1;\n    while even_idx < even.len() {\n        if even[even_idx]\
    \ > even[even_idx - 1] {\n            even.swap(even_idx, even_idx - 1);\n   \
    \         even_idx += 1;\n        } else {\n            even_idx += 1;\n     \
    \   }\n    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx] > odd[odd_idx\
    \ - 1] {\n            odd.swap(odd_idx, odd_idx - 1);\n            odd_idx +=\
    \ 1;\n        } else {\n            odd_idx += 1;\n        }\n    }\n    odd\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpxulcc0dz.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010865
