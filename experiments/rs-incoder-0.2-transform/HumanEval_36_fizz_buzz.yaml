name: HumanEval_36_fizz_buzz
language: rs
prompt: "/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
  /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    if n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n    \
    \    fizz_buzz(n - 11) + fizz_buzz(n - 13)\n    }", "    let mut count = 0;\n\
    \    let mut digits = n.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ digits_len = digits.len();\n    let mut digits_sum = 0;\n    let mut digits_product\
    \ = 1;\n    let mut digits_product2 = 1;\n    let mut digits_product3 = 1;\n \
    \   let mut digits_product4 = 0;\n    let mut digits_product5 = 0;\n    let mut\
    \ digits_product6 = 0;\n    let mut digits_product7 = 0;\n    let mut digits_product8\
    \ = 0;\n    let mut digits_product9 = 0;\n    let mut digits_product10 = 0;\n\
    \    let mut digits_product11 = 0;\n    let mut digits_product12 = 0;\n    let\
    \ mut digits_product13 = 0;\n    let mut digits_product14 = 0;\n    let mut digits_product15\
    \ = 0;\n    let mut digits_product16 = 0;\n    let mut digits_product17 = 0;\n\
    \    let mut digits_product18 = 0;\n    let mut digits_product19 = 0;\n    let\
    \ mut digits_product20 = 0;\n    let mut digits_product21 = 0;\n    let mut digits_product22\
    \ = 0;\n    let mut digits_product23 = 0;\n    let mut digits_product24 = 0;\n\
    \    let mut digits_product25 = 0;\n    let mut digits_product26 = 0;\n    let\
    \ mut digits_product27 = 0;\n    let mut digits_product28 = 0;\n    let mut digits_product29\
    \ = 0;\n    let mut digits_product30 = 0;\n    let mut digits_product31 = 0;\n\
    \    let mut digits_product32 = 0;\n    let mut digits_product33 = 0;\n    let\
    \ mut digits_product34 = 0;\n    let mut digits_product35 = 0;\n    let mut digits_product36\
    \ = 0;\n    let mut digits_product37 = 0;\n    let mut digits_product38 = 0;\n\
    \    let mut digits_product39 = 0;\n    let mut digits_product40 = 0;\n    let\
    \ mut digits_product41 = 0;\n    let mut digits_product42 = 0;\n    let mut digits_product43\
    \ = 0;\n    let mut digits_product44 = 0;\n    let mut digits_product45 = 0;\n\
    \    let mut digits_product46 = 0;\n    let mut digits_product47 = 0;\n    let\
    \ mut digits_product48 = 0;\n    let mut digits_product49 = 0;\n    let mut digits_product50\
    \ = 0;\n    let mut digits_product51 = 0;\n    let mut digits_product52 = 0;\n\
    \    let mut digits_product53", "    let mut count = 0;\n    for &d in n.to_string().chars().filter(|&c|\
    \ c != '0') {\n        if d == '7' {\n            count += 1;\n        }\n   \
    \     if d == '8' {\n            count += 1;\n        }\n        if d == '9' {\n\
    \            count += 1;\n        }\n        if d == '0' {\n            count\
    \ += 1;\n        }\n        if d == '1' {\n            count += 1;\n        }\n\
    \        if d == '2' {\n            count += 1;\n        }\n        if d == '3'\
    \ {\n            count += 1;\n        }\n        if d == '4' {\n            count\
    \ += 1;\n        }\n        if d == '5' {\n            count += 1;\n        }\n\
    \        if d == '6' {\n            count += 1;\n        }\n        if d == '7'\
    \ {\n            count += 1;\n        }\n        if d == '8' {\n            count\
    \ += 1;\n        }\n        if d == '9' {\n            count += 1;\n        }\n\
    \        if d == '0' {\n            count += 1;\n        }\n        if d == '1'\
    \ {\n            count += 1;\n        }\n        if d == '2' {\n            count\
    \ += 1;\n        }\n        if d == '3' {\n            count += 1;\n        }\n\
    \        if d == '4' {\n            count += 1;\n        }\n        if d == '5'\
    \ {\n            count += 1;\n        }\n        if d == '6' {\n            count\
    \ += 1;\n        }\n        if d == '7' {\n            count += 1;\n        }\n\
    \        if d == '8' {\n            count += 1;\n        }\n        if d == '9'\
    \ {\n            count += 1;\n        }\n        if d == '0' {\n            count\
    \ += 1;\n        }\n        if d == '1' {\n            count += 1;\n        }\n\
    \        if d == '2' {\n            count += 1;\n        }\n        if d == '3'\
    \ {\n            count += 1;\n        }\n        if d == '4' {\n            count\
    \ += 1;\n        }\n        if d == '5' {\n            count += 1;\n        }\n\
    \        if d == '6' {\n            count += 1;\n        }\n        if d == '7'\
    \ {\n            count += 1;\n        }\n        if d == '8' {\n            count\
    \ += 1;\n        }\n        if d == '9' {\n            count += 1;\n        }\n\
    \        if d == '0' {\n            count += 1;\n        }\n        if d == '1'\
    \ {\n            count += 1;\n        }\n        if d == '2' {\n", "    let mut\
    \ count = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n   \
    \         count += 1;\n        }\n        n /= 10;\n    }\n    count", "    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 1)\n    }", "    let mut count = 0;\n    while n > 0 {\n        if n % 11\
    \ == 0 || n % 13 == 0 {\n            count += 1;\n        }\n        n /= 10;\n\
    \    }\n    count", "    if n % 11 == 0 || n % 13 == 0 {\n        n\n    } else\
    \ {\n        fizz_buzz(n - 11) + fizz_buzz(n - 13)\n    }", "    let mut count\
    \ = 0;\n    for d in n.checked_div(11).unwrap() {\n        if d.checked_div(13).unwrap().is_some()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for &d in &n {\n        if d % 11 == 0 || d % 13 == 0 {\n        \
    \    count += 1;\n        }\n    }\n    count", "    if n % 11 == 0 || n % 13\
    \ == 0 {\n        n\n    } else {\n        fizz_buzz(n - 1) + 1\n    }", "   \
    \ debug_assert!(n % 11 == 0 || n % 13 == 0);\n    let mut count = 0;\n    while\
    \ n > 0 {\n        if n % 11 == 0 {\n            count += 1;\n        }\n    \
    \    if n % 13 == 0 {\n            count += 1;\n        }\n        n /= 11;\n\
    \        n /= 13;\n    }\n    count", "    if n % 11 == 0 || n % 13 == 0 {\n \
    \       n\n    } else {\n        fizz_buzz(n - 11) + fizz_buzz(n - 13)\n    }",
  "    if n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 1)\n    }", "    if n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n\
    \        1 + fizz_buzz(n - 1)\n    }", "    if n % 11 == 0 || n % 13 == 0 {\n\
    \        0\n    } else {\n        1 + fizz_buzz(n - 1)\n    }", "    if n % 11\
    \ == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n - 1)\n\
    \    }", "    let mut count = 0;\n    while n > 0 {\n        if n % 11 == 0 ||\
    \ n % 13 == 0 {\n            count += 1;\n        }\n        n /= 10;\n    }\n\
    \    count", "    if n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n \
    \       1 + fizz_buzz(n - 1)\n    }", "    let mut count = 0;\n    let mut i =\
    \ 1;\n    while i <= n {\n        if i % 11 == 0 || i % 13 == 0 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count", "    let mut counter\
    \ = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n         \
    \   counter += 1;\n        }\n        n /= 10;\n    }\n    counter"]
stop_tokens:
- "\n}"
