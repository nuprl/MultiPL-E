name: HumanEval_128_prod_signs
language: rs
prompt: "/// You are given an array arr of integers and you need to return\n/// sum\
  \ of magnitudes of integers multiplied by product of all signs\n/// of each number\
  \ in the array, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n\
  /// Example:\n/// >>> prod_signs(vec![1, 2, 2, -4])\n/// Some(9)\n/// >>> prod_signs(vec![0,\
  \ 1])\n/// Some(0)\n/// >>> prod_signs(vec![])\n/// None\nfn prod_signs(arr: Vec<isize>)\
  \ -> Option<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    if arr.is_empty() {\n        return None;\n    }\n\n    let mut\
    \ product = arr[0] as isize;\n    for &i in arr {\n        product *= i;\n   \
    \ }\n\n    let mut sum = 0;\n    for i in arr {\n        sum += if i == -1 {\n\
    \            -1\n        } else if i == 1 {\n            1\n        } else {\n\
    \            0\n        };\n    }\n\n    Some(product * sum)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut product = 1;\n    let mut sign\
    \ = 1;\n\n    for x in arr.iter() {\n        if x < 0 {\n            sign = -1;\n\
    \        }\n        product *= x;\n    }\n\n    Some(sign * product)", "    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut product = arr[0];\n\
    \    for &i in &arr {\n        product *= i;\n    }\n    let mut sum = 0;\n  \
    \  for &i in &arr {\n        sum += if i == 0 {\n            1\n        } else\
    \ {\n            -1\n        };\n    }\n    Some(product * sum)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut product = 1;\n    let mut sign\
    \ = 1;\n    for x in arr {\n        if x < 0 {\n            sign *= -1;\n    \
    \    }\n        product *= x;\n    }\n    Some(sign * product)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut prod = 1;\n    for x in arr {\n\
    \        prod *= x;\n        if x < 0 {\n            prod *= -1;\n        }\n\
    \    }\n    Some(prod)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \n    let mut res = isize::one();\n    for i in arr.iter() {\n        res *= i;\n\
    \        res *= if *i < 0 { -1 } else { 1 };\n    }\n    Some(res)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n    let mut product = arr[0];\n    for i in\
    \ arr.iter().rev() {\n        product *= i;\n    }\n    let mut magnitude = product;\n\
    \    for i in arr.iter().rev() {\n        magnitude *= i;\n    }\n    Some(magnitude)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = arr[0];\n\
    \    for &x in &arr {\n        product *= x;\n    }\n\n    let mut sign = 1;\n\
    \    for &x in &arr {\n        sign *= x;\n    }\n\n    Some(sign * product)",
  "    let mut product = 1;\n    for x in arr {\n        product *= x;\n    }\n  \
    \  Some(product)", "    let mut res = Some(0);\n    for x in arr {\n        res.map(|y|\
    \ if x == y { 1 } else { -1 }).or(Some(res.unwrap() * x))\n    }\n    res", " \
    \   if arr.is_empty() {\n        return None;\n    }\n    let mut product = arr[0];\n\
    \    for &i in &arr {\n        product *= i;\n    }\n    let mut sum = 0;\n  \
    \  for i in &arr {\n        sum += if i == -1 {\n            -1\n        } else\
    \ if i == 1 {\n            1\n        } else {\n            0\n        };\n  \
    \  }\n    Some(product * sum)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut product = 1;\n    let mut sign = 1;\n    for x in arr {\n\
    \        product *= x;\n        sign *= match x {\n            1 => 1,\n     \
    \       -1 => -1,\n            _ => 0,\n        };\n    }\n    Some(sign * product)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = 1;\n\
    \    let mut sign = 1;\n    for &i in arr {\n        product *= i;\n        sign\
    \ *= if i < 0 {\n            -1\n        } else {\n            1\n        };\n\
    \    }\n    Some(product * sign)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n\n    let mut product = 1;\n    let mut sign = 1;\n    for x in arr {\n\
    \        product *= x;\n        sign *= match x {\n            1 => 1,\n     \
    \       -1 => -1,\n            0 => 0,\n            _ => panic!(\"Invalid input\"\
    ),\n        };\n    }\n    Some(product * sign)", "    if arr.is_empty() {\n \
    \       return None;\n    }\n\n    let mut product = arr[0] as isize;\n    for\
    \ &x in arr.iter().skip(1) {\n        product *= x;\n    }\n\n    let mut sum\
    \ = 0;\n    for &x in arr.iter() {\n        sum += x * product;\n        product\
    \ *= x;\n    }\n\n    Some(sum)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut product = arr[0];\n    for i in 1..arr.len() {\n        product\
    \ *= arr[i];\n    }\n    Some(product)", "    if arr.is_empty() {\n        return\
    \ None;\n    }\n    let mut product = 1;\n    let mut sign = 1;\n    for x in\
    \ arr {\n        product *= x;\n        sign *= if x < 0 { -1 } else { 1 };\n\
    \    }\n    Some(product * sign)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n\n    let mut product = 1;\n    let mut sign = 1;\n\n    for &x in arr\
    \ {\n        if x < 0 {\n            product *= sign;\n            sign = -1;\n\
    \        } else {\n            product *= sign;\n            sign = 1;\n     \
    \   }\n    }\n\n    Some(product)", "    if arr.is_empty() {\n        return None;\n\
    \    }\n\n    let mut product = arr[0];\n    for i in arr.iter().rev() {\n   \
    \     product *= i;\n    }\n\n    let mut sum = 0;\n    for i in arr.iter().rev()\
    \ {\n        sum += i * product;\n        product *= i;\n    }\n\n    Some(sum)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = 1;\n\
    \    for &i in arr {\n        product *= i;\n    }\n\n    let mut magnitudes =\
    \ vec![];\n    for &i in arr {\n        if *i < 0 {\n            magnitudes.push(-i);\n\
    \        } else {\n            magnitudes.push(i);\n        }\n    }\n\n    Some(product\
    \ * magnitudes.iter().product())"]
stop_tokens:
- "\n}"
