language: rs
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        num = num / 10;\n        if digit % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0uavtzh0.rs:12:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 1;\n\
    \    while i <= num {\n        if num % i == 0 {\n            even = even * 2\
    \ + 1;\n        } else {\n            odd = odd + 1;\n        }\n        i +=\
    \ 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 5)`,\n right: `(0, 1)`', /tmp/tmpqq_ikyj6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num = num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpuhcktdgz.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpuhcktdgz.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num.len();\n    while num_digits > 0 {\n        let digit = num % 10;\n  \
    \      if digit % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n        num_digits -= 1;\n   \
    \ }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp83s5y29w.rs:10:30\n   |\n10 |     let mut num_digits =\
    \ num.len();\n   |                              ^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpkbxvlkzb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num;\n    while num_digits > 0 {\n        let digit = num_digits % 10;\n \
    \       if digit % 2 == 0 {\n            even += 1;\n        } else {\n      \
    \      odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpofh60rzr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num.len();\n    while num_digits > 0 {\n        let digit = num % 10;\n  \
    \      even = if digit % 2 == 0 {\n            even\n        } else {\n      \
    \      even\n        };\n        odd = if digit % 2 == 0 {\n            odd\n\
    \        } else {\n            odd\n        };\n        num_digits -= 1;\n   \
    \     num = num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1kg92qup.rs:10:30\n   |\n10 |     let mut num_digits =\
    \ num.len();\n   |                              ^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 == 1;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpp3l_2nft.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpp3l_2nft.rs:12:13\n   |\n12 |         odd += num % 2 == 1;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num.to_digits();\n    while let Some(digit) = digits.next() {\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpsy9zycoz.rs:10:26\n   |\n10 |     let mut digits\
    \ = num.to_digits();\n   |                          ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n   \
    \     if digit % 2 == 0 {\n            even += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpcrdks43a.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpcrdks43a.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        n /= 10;\n        if n % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmpd1nuag1w.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        if digits % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmppufs7du2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num;\n    while num_digits > 0 {\n        let digit = num_digits % 10;\n \
    \       if digit % 2 == 0 {\n            even += 1;\n        } else {\n      \
    \      odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpofh60rzr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n   \
    \     if digit % 2 == 0 {\n            even += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpcrdks43a.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpcrdks43a.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 1;\n\
    \    while i <= num {\n        if num % i == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        i += 1;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 5)`,\n right: `(0, 1)`', /tmp/tmpvayx8p2d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n   \
    \     if digit % 2 == 0 {\n            even += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpcrdks43a.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpcrdks43a.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmplre36u7l.rs:13:14\n\
    \   |\n13 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmplre36u7l.rs:14:13\n   |\n14 |         odd += digit % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        num = num / 10;\n        if digit % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0uavtzh0.rs:12:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num.to_digits();\n    while let Some(digit) = digits.next() {\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpsy9zycoz.rs:10:26\n   |\n10 |     let mut digits\
    \ = num.to_digits();\n   |                          ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 == 1;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpp3l_2nft.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpp3l_2nft.rs:12:13\n   |\n12 |         odd += num % 2 == 1;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        num = num / 10;\n        if digit % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0uavtzh0.rs:12:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num = num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpuhcktdgz.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpuhcktdgz.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num.num_digits();\n    while num_digits > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n        num /= 10;\n        num_digits -= 1;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `num_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpjck5boqn.rs:10:30\n   |\n10 |     let mut num_digits\
    \ = num.num_digits();\n   |                              ^^^^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp1urd08pb.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp1urd08pb.rs:14:13\n   |\n14 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        if digits % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmppufs7du2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        n /= 10;\n        even += n % 2 == 0;\n        odd\
    \ += n % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpcysaschm.rs:13:14\n\
    \   |\n13 |         even += n % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpcysaschm.rs:14:13\n   |\n14 |         odd += n % 2 == 1;\n   |\
    \             ^^ no implementation for `{integer} += bool`\n   |\n   = help: the\
    \ trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        }\n\
    \        else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpwmcqrnkx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmplre36u7l.rs:13:14\n\
    \   |\n13 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmplre36u7l.rs:14:13\n   |\n14 |         odd += digit % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        if digits % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmppufs7du2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even = num % 10;\n        odd = even % 2;\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpyy7a0mqn.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num.to_digits();\n    while !digits.is_empty() {\n        let digit = digits.remove();\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp41z79nez.rs:10:26\n   |\n10 |     let mut digits\
    \ = num.to_digits();\n   |                          ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n\
    \            odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpwh7c7wsc.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        }\n\
    \        n /= 2;\n    }\n    while n > 0 {\n        if n % 2 == 1 {\n        \
    \    odd += 1;\n        }\n        n /= 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpuw_12na2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even = num % 10;\n        odd = odd + (even % 2 == 0);\n        num =\
    \ num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `bool` to `{integer}`\n  --> /tmp/tmp5_dha7ta.rs:12:19\n\
    \   |\n12 |         odd = odd + (even % 2 == 0);\n   |                   ^ no\
    \ implementation for `{integer} + bool`\n   |\n   = help: the trait `Add<bool>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        digits\
    \ /= 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnw13d1xx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        digits\
    \ /= 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnw13d1xx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even = num % 10;\n        odd = num % 10;\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnrdpqw5x.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        num = num / 10;\n        if digit % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0uavtzh0.rs:12:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut digits = 0;\n    let mut nums = num.to_digits();\n    while nums.len()\
    \ > 0 {\n        digit = nums.len() - 1;\n        if nums[digit] % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        nums.remove(digit);\n        digits += 1;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp7ikjytxm.rs:12:24\n   |\n12 |     let mut nums\
    \ = num.to_digits();\n   |                        ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num.digits();\n    while num_digits > 0 {\n        let digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfew2p_hb.rs:10:30\n   |\n10 |     let mut num_digits =\
    \ num.digits();\n   |                              ^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        digits\
    \ /= 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnw13d1xx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        n /= 10;\n        even += n % 2 == 0;\n        odd\
    \ += n % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpuafdnyqd.rs:13:14\n\
    \   |\n13 |         even += n % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpuafdnyqd.rs:14:13\n   |\n14 |         odd += n % 2 != 0;\n   |\
    \             ^^ no implementation for `{integer} += bool`\n   |\n   = help: the\
    \ trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        num = num / 10;\n        if digit % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0uavtzh0.rs:12:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnjo3_y60.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        if digits % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmppufs7du2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 1;\n\
    \    while i <= num {\n        if num % i == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        i += 1;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 5)`,\n right: `(0, 1)`', /tmp/tmpvayx8p2d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        let digit = digits % 10;\n        digits\
    \ /= 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnw13d1xx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmp0vkqmzyh.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp0vkqmzyh.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        even += digit as isize;\n        odd += digit as isize;\n   \
    \     num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmp6tyhjeua.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        if digits % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmppufs7du2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num;\n    while num_digits > 0 {\n        let digit = num_digits % 10;\n \
    \       if digit % 2 == 0 {\n            even += 1;\n        } else {\n      \
    \      odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpofh60rzr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp1urd08pb.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp1urd08pb.rs:14:13\n   |\n14 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits\
    \ = num;\n    while num_digits > 0 {\n        let digit = num_digits % 10;\n \
    \       if digit % 2 == 0 {\n            even += 1;\n        } else {\n      \
    \      odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpofh60rzr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n   \
    \     if digit % 2 == 0 {\n            even += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmpcrdks43a.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpcrdks43a.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n\
    \            odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpwh7c7wsc.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 1;\n\
    \    while i <= num {\n        if num % i == 0 {\n            even += 1;\n   \
    \     } else {\n            odd += 1;\n        }\n        i += 1;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 5)`,\n right: `(0, 1)`', /tmp/tmpvayx8p2d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: -1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = num;\n\
    \    while i >= 0 {\n        i += i / 10;\n        even += 1;\n        i += i\
    \ / 10;\n        odd += 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010546
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp1urd08pb.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp1urd08pb.rs:14:13\n   |\n14 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp2vwcaw_a.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp2vwcaw_a.rs:15:13\n   |\n15 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `digit` is never read\n  --> /tmp/tmp0vkqmzyh.rs:10:13\n\
    \   |\n10 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp0vkqmzyh.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvbik6dkv.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        n /= 10;\n        even += n % 2 == 0;\n        odd\
    \ += n % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpcysaschm.rs:13:14\n\
    \   |\n13 |         even += n % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpcysaschm.rs:14:13\n   |\n14 |         odd += n % 2 == 1;\n   |\
    \             ^^ no implementation for `{integer} += bool`\n   |\n   = help: the\
    \ trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpkbxvlkzb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmped9bwut8.rs:11:14\n\
    \   |\n11 |         even += num % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmped9bwut8.rs:12:13\n   |\n12 |         odd += num % 2 != 0;\n  \
    \ |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpt35p1sog.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv7gygq2q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n\
    \            odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmprhjubcyy.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n\
    \    let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpybxsvle0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo1w0ufv.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit /= 10;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp93g5eu8p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num.to_digits();\n    while let Some(digit) = digits.next() {\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpsy9zycoz.rs:10:26\n   |\n10 |     let mut digits\
    \ = num.to_digits();\n   |                          ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n\
    \    while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpvxmc994a.rs:13:14\n\
    \   |\n13 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpvxmc994a.rs:14:13\n   |\n14 |         odd += digit % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4t84caz0.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        digits /= 10;\n        even += digits\
    \ % 2 == 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpsc03znpl.rs:13:14\n\
    \   |\n13 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpsc03znpl.rs:14:13\n   |\n14 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010541
