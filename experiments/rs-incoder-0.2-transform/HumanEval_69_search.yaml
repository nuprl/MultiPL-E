name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for v in lst {\n        if v > 0 {\n \
    \           if *v >= *max_freq {\n                max_freq = *v;\n           \
    \     max_val = v;\n            }\n        }\n    }\n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    *max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   for x in freq.keys() {\n        if freq[x] > 0 {\n            return x;\n\
    \        }\n    }\n    \n    -1", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    max_val", "    let mut freq = HashMap::new();\n    for x in lst {\n \
    \       freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = 0;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    match max {\n  \
    \      Some(x) => x,\n        None => -1,\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (k, v) in freq.iter()\
    \ {\n        if v > max_freq {\n            max_freq = v;\n            max_val\
    \ = k;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max {\n            max = x;\n     \
    \   }\n    }\n    match freq.entry(max).or_insert(0) {\n        Some(count) =>\
    \ count,\n        None => -1,\n    }", "    let mut freq = HashMap::new();\n \
    \   for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.iter() {\n    \
    \    if *x > max_freq {\n            max_freq = *x;\n            max_val = x;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    *max_val",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0)",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == 0\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for ele in lst {\n        freq.entry(ele).or_insert(0) += 1;\n    }\n   \
    \ \n    if freq.values().iter().any(|&x| x > 0) && freq.values().iter().any(|&x|\
    \ x >= freq.values().iter().max()) {\n        -1\n    } else {\n        freq.iter().max().unwrap()\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max = x;\n            max_freq = freq[x];\n\
    \        }\n    }\n    if max != -1 && max_freq >= freq[max] {\n        max as\
    \ isize\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        return -1;\n    }\n    \n    return max_val;"]
stop_tokens:
- "\n}"
