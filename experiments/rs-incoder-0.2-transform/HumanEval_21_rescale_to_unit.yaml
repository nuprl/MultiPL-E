name: HumanEval_21_rescale_to_unit
language: rs
prompt: "/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
tests: "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n\
    \    for n in numbers {\n        if n < min_number {\n            min_number =\
    \ n;\n        }\n        if n > max_number {\n            max_number = n;\n  \
    \      }\n    }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_number]);\n\
    \    new_numbers.extend_from_slice(&[max_number]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min_val = numbers[0];\n    let mut\
    \ max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n  \
    \          min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut scale = max_val - min_val;\n    for n in\
    \ numbers {\n        *n -= min_val;\n        *n *= scale;\n    }\n    numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n       \
    \ let new_value = ((n - min_value) / (max_value - min_value)) * 2.0 - 1.0;\n \
    \       new_numbers.push((new_value + 1.0) / 2.0);\n    }\n    new_numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    for n in numbers\
    \ {\n        *n -= min;\n        *n *= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = max - min;\n    numbers.iter().for_each(|n|\
    \ n /= scale);\n    numbers + [min]", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = max - min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_value {\n            min_value = n;\n        }\n     \
    \   if n > max_value {\n            max_value = n;\n        }\n    }\n    let\
    \ mut scale = (max_value - min_value).recip();\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min_value) / scale);\n\
    \    }\n    new_numbers", "    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_number {\n       \
    \     min_number = n;\n        }\n        if n > max_number {\n            max_number\
    \ = n;\n        }\n    }\n    let mut scale = 1.0 * (max_number - min_number)\
    \ / (1.0 * numbers.len());\n    for n in numbers {\n        n -= min_number;\n\
    \        n *= scale;\n        scale *= (1.0 + 1.0e-10);\n    }\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for &n in numbers {\n        new_numbers.push((n\
    \ - min).map(|x| x / scale).unwrap());\n    }\n    new_numbers", "    let mut\
    \ min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number < min_number {\n            min_number = number;\n\
    \        }\n        if number > max_number {\n            max_number = number;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for number in numbers\
    \ {\n        let new_number = (number - min_number) / (max_number - min_number);\n\
    \        new_numbers.push(new_number);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min_number = numbers.iter().min().unwrap();\n\
    \    let mut max_number = numbers.iter().max().unwrap();\n    min_number = min_number\
    \ / max_number;\n    max_number = max_number / min_number;\n    numbers.iter().map(|x|\
    \ x / max_number).collect()", "    let mut min_value = numbers[0];\n    let mut\
    \ max_value = numbers[0];\n    for n in numbers {\n        if n < min_value {\n\
    \            min_value = n;\n        }\n        if n > max_value {\n         \
    \   max_value = n;\n        }\n    }\n    let mut rescaled_numbers = Vec::new();\n\
    \    for n in numbers {\n        rescaled_numbers.push((n - min_value) / (max_value\
    \ - min_value));\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = max - min;\n    let mut scaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        scaled_numbers.push((n - min)\
    \ / scale);\n    }\n    scaled_numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * (max - min);\n    if scale == 0.0 {\n\
    \        return vec![];\n    }\n    let mut result = vec![];\n    for n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min {\n            new_n =\
    \ 0.0;\n        }\n        if new_n > max {\n            new_n = 1.0;\n      \
    \  }\n        result.push(new_n * scale);\n    }\n    result", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n    \
    \    if n < min {\n            min = n;\n        }\n        if n > max {\n   \
    \         max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for &n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let\
    \ mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_val {\n            min_val = n;\n        }\n        if\
    \ n > max_val {\n            max_val = n;\n        }\n    }\n    let mut scale\
    \ = max_val - min_val;\n    for n in numbers {\n        *n -= min_val;\n     \
    \   *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push((n - min) * scale);\n    }\n    result",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for n in numbers {\n        n -= min;\n        n *= scale;\n    }\n\
    \    numbers", "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for n in numbers {\n        if n < min_val {\n            min_val = n;\n\
    \        }\n        if n > max_val {\n            max_val = n;\n        }\n  \
    \  }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n        let\
    \ new_n = ((n - min_val) / (max_val - min_val)) * 2.0 - 1.0;\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        new_numbers.push((n - min) / scale);\n    }\n    new_numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push(n\
    \ * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut rescaled_numbers = Vec::new();\n    for &n in numbers {\n   \
    \     let mut n = n * max - min;\n        n += min;\n        rescaled_numbers.push(n);\n\
    \    }\n    rescaled_numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = max - min;\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n  \
    \  for n in numbers {\n        let new_n = ((n - min_val) / (max_val - min_val))\
    \ * 2.0 - 1.0;\n        new_numbers.push(new_n);\n    }\n    new_numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let new_n = ((n - min) / (max - min)) as f64;\n\
    \        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n       \
    \ if n < min {\n            min = n;\n        }\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for n in numbers {\n        if n <\
    \ min_number {\n            min_number = n;\n        }\n        if n > max_number\
    \ {\n            max_number = n;\n        }\n    }\n    let mut scale = max_number\
    \ - min_number;\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        new_numbers.push((n - min_number) / scale);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n       \
    \ let mut new_n = n;\n        if new_n < min_value {\n            new_n -= min_value;\n\
    \        }\n        if new_n > max_value {\n            new_n -= max_value;\n\
    \        }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let\
    \ mut min_number = numbers.iter().min().unwrap();\n    let mut max_number = numbers.iter().max().unwrap();\n\
    \    let mut min_number = min_number - min_number % 1.0; // ensure min_number\
    \ is a multiple of 1.0\n    let mut max_number = max_number + 1.0 - max_number\
    \ % 1.0; // ensure max_number is a multiple of 1.0\n    min_number /= 1.0;\n \
    \   max_number /= 1.0;\n    min_number += 0.0;\n    max_number += 1.0;\n    min_number.min(max_number).unwrap();\n\
    \    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(numbers.iter().map(|n|\
    \ n * min_number).collect::<Vec<_>>());\n    new_numbers.extend_from_slice(numbers.iter().map(|n|\
    \ n * max_number).collect::<Vec<_>>());\n    new_numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n       \
    \ if n < min {\n            min = n;\n        }\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n  \
    \  if scale == 0.0 {\n        scale = 0.1;\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < min_number {\n\
    \            min_number = number;\n        }\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    let mut new_numbers =\
    \ Vec::new();\n    for number in numbers {\n        let new_number = (number -\
    \ min_number) / (max_number - min_number);\n        new_numbers.push(new_number);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        new_numbers.push((n - min) / scale);\n    }\n    new_numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = max - min;\n    numbers.iter().for_each(|n|\
    \ n / scale);\n    numbers", "    let mut min = numbers[0];\n    let mut max =\
    \ numbers[0];\n    for n in numbers {\n        if n < min {\n            min =\
    \ n;\n        }\n        if n > max {\n            max = n;\n        }\n    }\n\
    \    let mut scale = max - min;\n    if scale == 0.0 {\n        return vec![];\n\
    \    }\n    let mut new_numbers = vec![];\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    scale = 1.0 / scale;\n    for n in numbers {\n        *n -= min;\n      \
    \  *n *= scale;\n    }\n    numbers", "    let mut min_value = numbers[0];\n \
    \   let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min_value) / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for &n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for &n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min {\n            new_n -=\
    \ min;\n        }\n        if new_n > max {\n            new_n -= max;\n     \
    \   }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for n in\
    \ numbers {\n        if n < min_number {\n            min_number = n;\n      \
    \  }\n        if n > max_number {\n            max_number = n;\n        }\n  \
    \  }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_number]);\n\
    \    new_numbers.extend_from_slice(&[max_number]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min_val = numbers[0];\n    let mut\
    \ max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n  \
    \          min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        let new_n = ((n - min_val) / (max_val - min_val)) * 2.0 +\
    \ 0.5;\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = max - min;\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    numbers.iter().for_each(|n|\
    \ {\n        n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    for n in numbers\
    \ {\n        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for n in numbers\
    \ {\n        rescaled_numbers.push((n - min) / (max - min));\n    }\n    rescaled_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for &n in numbers {\n        *n /= scale;\n    }\n    numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min).div(scale));\n    }\n    result", "    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number < min_number {\n            min_number = number;\n        }\n       \
    \ if number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    let mut new_numbers = Vec::new();\n    for number in numbers {\n        let\
    \ new_number = (number - min_number) / (max_number - min_number);\n        new_numbers.push(new_number);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n \
    \   for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min_val = numbers[0];\n \
    \   let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n  \
    \  for n in numbers {\n        let mut new_n = n;\n        if new_n < min_val\
    \ {\n            new_n -= min_val;\n        }\n        if new_n > max_val {\n\
    \            new_n -= max_val;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    for &n in numbers {\n        *n /= scale;\n\
    \    }\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n\
    \    numbers", "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for n in numbers {\n        if n < min_val {\n            min_val = n;\n\
    \        }\n        if n > max_val {\n            max_val = n;\n        }\n  \
    \  }\n    let mut scale = max_val - min_val;\n    for n in numbers {\n       \
    \ *n -= min_val;\n        *n /= scale;\n    }\n    numbers", "    let mut min_val\
    \ = numbers[0];\n    let mut max_val = numbers[0];\n    for n in numbers {\n \
    \       if n < min_val {\n            min_val = n;\n        }\n        if n >\
    \ max_val {\n            max_val = n;\n        }\n    }\n    let mut rescaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        let mut new_val = ((n - min_val)\
    \ / (max_val - min_val)) * 2.0 - 1.0;\n        if new_val < 0.0 {\n          \
    \  new_val = 0.0;\n        }\n        if new_val > 1.0 {\n            new_val\
    \ = 1.0;\n        }\n        rescaled_numbers.push(new_val);\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for n in numbers {\n        *n -= min;\n        *n *= scale;\n  \
    \  }\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n \
    \   for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n\
    \    });\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push((n - min) * scale);\n    }\n    result",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n * scale);\n    }\n    result", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n\
    \    for n in numbers {\n        *n -= min_val;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min).mul(scale));\n    }\n    result", "    let mut min = numbers[0];\n  \
    \  let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n \
    \           min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 * (max - min);\n    scale = 1.0 / scale;\n    numbers.iter().map(|n|\
    \ n * scale).collect()", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut rescaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        rescaled_numbers.push((n - min)\
    \ / (max - min));\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = (max - min).recip();\n    for n in numbers {\n   \
    \     *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for &n in numbers {\n        if n < min {\n     \
    \       min = n;\n        }\n        if n > max {\n            max = n;\n    \
    \    }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for &n in numbers {\n        if n <\
    \ min_value {\n            min_value = n;\n        }\n        if n > max_value\
    \ {\n            max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for &n in numbers {\n        let mut new_n = n;\n        if new_n < min_value\
    \ {\n            new_n -= min_value;\n        }\n        if new_n > max_value\
    \ {\n            new_n -= max_value;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0f64 / max - min;\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min_value = numbers[0];\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut rescaled\
    \ = Vec::new();\n    for n in numbers {\n        rescaled.push((n - min) / (max\
    \ - min));\n    }\n    rescaled", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    for n in numbers {\n        *n /= scale;\n    }\n  \
    \  numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n \
    \   for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0f64;\n    for &n in numbers {\n        *n /= max -\
    \ min;\n        *n *= scale;\n        scale *= 1.0f64;\n    }\n    numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    for n in numbers {\n\
    \        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let new_n = ((n - min) / (max - min)) * 2.0 + 0.5;\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ new_numbers = Vec::new();\n    for &n in numbers {\n        let mut new_n =\
    \ n;\n        if new_n < min {\n            new_n -= min;\n        }\n       \
    \ if new_n > max {\n            new_n -= max;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min_value = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_value {\n        \
    \    min_value = n;\n        }\n        if n > max_value {\n            max_value\
    \ = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        let new_value = ((n - min_value) / (max_value - min_value))\
    \ * 2.0 - 1.0;\n        new_numbers.push(new_value);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut rescaled: Vec<f64> =\
    \ Vec::new();\n    for n in numbers {\n        rescaled.push((n - min) / (max\
    \ - min));\n    }\n    rescaled", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * max / min;\n    for n in numbers {\n       \
    \ *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n     \
    \   n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n *= scale;\n    }\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for &n in numbers {\n        *n /= scale;\n    }\n    numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 * (max - min);\n    let mut scaled_numbers = Vec::new();\n    for\
    \ &n in numbers {\n        scaled_numbers.push((n - min) / scale);\n    }\n  \
    \  scaled_numbers", "    let mut min_val = numbers[0];\n    let mut max_val =\
    \ numbers[0];\n    for n in numbers {\n        if n < min_val {\n            min_val\
    \ = n;\n        }\n        if n > max_val {\n            max_val = n;\n      \
    \  }\n    }\n    let mut scale = (max_val - min_val).recip();\n    for n in numbers\
    \ {\n        *n -= min_val * scale;\n        scale *= (max_val - min_val).recip();\n\
    \    }\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_val {\n            min_val = n;\n        }\n\
    \        if n > max_val {\n            max_val = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let new_val =\
    \ ((n - min_val) / (max_val - min_val)) * 1.0 + 0.0;\n        new_numbers.push(new_val);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 * (max - min);\n    if scale == 0.0 {\n        scale = 0.1;\n  \
    \  }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n        n\
    \ -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for n in numbers\
    \ {\n        rescaled_numbers.push((n - min) / (max - min));\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min).div(scale));\n    }\n    result", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for &n in numbers {\n        if n <\
    \ min_value {\n            min_value = n;\n        }\n        if n > max_value\
    \ {\n            max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for &n in numbers {\n        let new_n = ((n - min_value) / (max_value -\
    \ min_value)) * 2.0 + 0.5;\n        new_numbers.push(new_n);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 / (max - min);\n    for n in numbers {\n\
    \        *n -= min;\n        *n *= scale;\n    }\n    numbers", "    let mut min_value\
    \ = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers {\n\
    \        if n < min_value {\n            min_value = n;\n        }\n        if\
    \ n > max_value {\n            max_value = n;\n        }\n    }\n    let mut rescaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        rescaled_numbers.push((n - min_value)\
    \ / (max_value - min_value));\n    }\n    rescaled_numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min).div(scale));\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n  \
    \  for n in numbers {\n        let mut new_n = n;\n        if n < min_val {\n\
    \            new_n -= min_val;\n        }\n        if n > max_val {\n        \
    \    new_n -= max_val;\n        }\n        new_numbers.push(new_n);\n    }\n \
    \   new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut rescaled_numbers = Vec::new();\n    for &n in numbers {\n   \
    \     let n = n * max - min;\n        rescaled_numbers.push(n);\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for &n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n   \
    \ let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let new_value = ((n - min_value) / (max_value\
    \ - min_value)) * 2.0 - 1.0;\n        new_numbers.push(new_value);\n    }\n  \
    \  new_numbers", "    let mut min_value = numbers[0];\n    let mut max_value =\
    \ numbers[0];\n    for n in numbers {\n        if n < min_value {\n          \
    \  min_value = n;\n        }\n        if n > max_value {\n            max_value\
    \ = n;\n        }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for\
    \ n in numbers {\n        rescaled_numbers.push((n - min_value) / (max_value -\
    \ min_value));\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min_number = numbers[0];\n  \
    \  let mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < min_number {\n            min_number = number;\n        }\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    let\
    \ mut scale = max_number - min_number;\n    for number in numbers {\n        number\
    \ -= min_number;\n        number *= scale;\n    }\n    numbers", "    let mut\
    \ min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number < min_number {\n            min_number = number;\n\
    \        }\n        if number > max_number {\n            max_number = number;\n\
    \        }\n    }\n    let mut scaled_numbers = Vec::new();\n    for number in\
    \ numbers {\n        scaled_numbers.push((number - min_number) / (max_number -\
    \ min_number));\n    }\n    scaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push((n - min).mul(scale));\n    }\n \
    \   result", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for &n in numbers {\n        if n < min_value {\n            min_value =\
    \ n;\n        }\n        if n > max_value {\n            max_value = n;\n    \
    \    }\n    }\n    let mut scale = (max_value - min_value).recip();\n    for &n\
    \ in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers",
  "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_val {\n            min_val = n;\n        }\n\
    \        if n > max_val {\n            max_val = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let mut new_n\
    \ = n;\n        if new_n < min_val {\n            new_n -= min_val;\n        }\n\
    \        if new_n > max_val {\n            new_n -= max_val;\n        }\n    \
    \    new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0f64;\n    if min < 0 {\n        scale\
    \ = -1.0 / min;\n    }\n    let mut result = vec![0.0f64; numbers.len()];\n  \
    \  for n in numbers {\n        result[numbers.iter().position(|&x| x == n).unwrap()]\
    \ = n * scale;\n    }\n    result", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    let mut result = Vec::new();\n    for &n in\
    \ numbers {\n        result.push((n - min) * scale);\n    }\n    result", "  \
    \  let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    numbers.iter().for_each(|n| {\n        n -= min;\n        n /= scale;\n\
    \    });\n    numbers", "    let mut min_val = numbers[0];\n    let mut max_val\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_val {\n          \
    \  min_val = n;\n        }\n        if n > max_val {\n            max_val = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min_val {\n            new_n\
    \ -= min_val;\n        }\n        if new_n > max_val {\n            new_n -= max_val;\n\
    \        }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let\
    \ mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_number {\n            min_number = n;\n \
    \       }\n        if n > max_number {\n            max_number = n;\n        }\n\
    \    }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_number]);\n\
    \    new_numbers.extend_from_slice(&[max_number]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push((n - min) * scale);\n    }\n    result", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 / (max - min);\n\
    \    for n in numbers {\n        *n -= min;\n        *n *= scale;\n    }\n   \
    \ numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n  \
    \  for &n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    let mut result = Vec::new();\n    for &n in numbers\
    \ {\n        result.push(n * scale);\n    }\n    result", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min {\n            new_n -=\
    \ min;\n        }\n        if new_n > max {\n            new_n -= max;\n     \
    \   }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for n in numbers {\n        if n < min_val {\n            min_val = n;\n\
    \        }\n        if n > max_val {\n            max_val = n;\n        }\n  \
    \  }\n    let mut scale = (max_val - min_val).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min_val).map(|x|\
    \ x * scale).unwrap());\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut rescaled: Vec<f64> = Vec::new();\n\
    \    for n in numbers {\n        rescaled.push((n - min) / (max - min));\n   \
    \ }\n    rescaled", "    let mut min_value = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_value {\n        \
    \    min_value = n;\n        }\n        if n > max_value {\n            max_value\
    \ = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut rescaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        rescaled_numbers.push((n - min)\
    \ / (max - min));\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for n in numbers\
    \ {\n        rescaled_numbers.push((n - min) / (max - min));\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n    numbers",
  "    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n  \
    \  for n in numbers {\n        if n < min_number {\n            min_number = n;\n\
    \        }\n        if n > max_number {\n            max_number = n;\n       \
    \ }\n    }\n    let mut scale = (max_number - min_number).recip();\n    let mut\
    \ new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min_number) * scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n  \
    \  for n in numbers {\n        let mut new_n = n;\n        if new_n < min_val\
    \ {\n            new_n -= min_val;\n        }\n        if new_n > max_val {\n\
    \            new_n -= max_val;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    scale = scale / 2.0 + 1.0;\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push((n - min) * scale);\n    }\n    result",
  "    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n  \
    \  for number in numbers.iter() {\n        if number < min_number {\n        \
    \    min_number = number;\n        }\n        if number > max_number {\n     \
    \       max_number = number;\n        }\n    }\n    let mut scale = (max_number\
    \ - min_number).recip();\n    for number in numbers.iter() {\n        *number\
    \ -= min_number;\n        *number *= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    for &n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * (max - min);\n    let mut result = vec![0.0;\
    \ numbers.len()];\n    for n in numbers {\n        result[numbers.iter().position(|&x|\
    \ x == n).unwrap()] = n * scale;\n    }\n    result", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut rescaled = Vec::new();\n    for n in numbers {\n\
    \        rescaled.push((n - min) / (max - min));\n    }\n    rescaled", "    let\
    \ mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_val {\n            min_val = n;\n        }\n        if\
    \ n > max_val {\n            max_val = n;\n        }\n    }\n    let mut scale\
    \ = (max_val - min_val).recip();\n    for n in numbers {\n        *n -= min_val\
    \ * scale;\n        scale *= 1.0;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for &n in numbers {\n        if n < min {\n         \
    \   min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut rescaled: Vec<f64> = Vec::new();\n    for &n in numbers {\n\
    \        rescaled.push((n - min) / (max - min));\n    }\n    rescaled", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_value {\n            min_value = n;\n        }\n     \
    \   if n > max_value {\n            max_value = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let mut new_n\
    \ = n;\n        if n == 0.0 {\n            new_n = 1.0;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers.sort();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.dedup();\n    new_numbers.dedup();\n\
    \    new_numbers.dedup();\n    new_numbers.ded", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for n in numbers\
    \ {\n        rescaled_numbers.push((n - min) / (max - min));\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    if scale == 0.0 {\n        scale = 1.0;\n    }\n    numbers.iter().map(|n|\
    \ n * scale).collect()", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n      \
    \  let new_value = ((n - min_value) / (max_value - min_value)).floor();\n    \
    \    new_numbers.push(new_value);\n    }\n    new_numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n       \
    \ if n < min {\n            min = n;\n        }\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_val {\n            min_val = n;\n        }\n        if\
    \ n > max_val {\n            max_val = n;\n        }\n    }\n    let mut scale\
    \ = (max_val - min_val).recip();\n    for n in numbers {\n        *n -= min_val;\n\
    \        *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    for n in numbers\
    \ {\n        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n -= min;\n        *n *= scale;\n    }\n   \
    \ numbers", "    let mut min_number = numbers.iter().min().unwrap();\n    let\
    \ mut max_number = numbers.iter().max().unwrap();\n    let mut min_number = min_number\
    \ / max_number;\n    let mut max_number = max_number / min_number;\n    numbers.iter_mut().for_each(|x|\
    \ {\n        *x = *x / max_number;\n    });\n    numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n      \
    \  if n < min {\n            min = n;\n        }\n        if n > max {\n     \
    \       max = n;\n        }\n    }\n    let mut scale = 1.0f64 / max - min;\n\
    \    for &n in numbers {\n        *n -= min;\n        *n *= scale;\n    }\n  \
    \  numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n \
    \   for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min_value = numbers[0];\n    let mut\
    \ max_value = numbers[0];\n    for n in numbers {\n        if n < min_value {\n\
    \            min_value = n;\n        }\n        if n > max_value {\n         \
    \   max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    if scale == 0.0 {\n        return vec![];\n    }\n    let\
    \ mut rescaled_numbers = vec![];\n    for n in numbers {\n        rescaled_numbers.push(n\
    \ / scale + min);\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut rescaled: Vec<f64> = Vec::new();\n\
    \    for n in numbers {\n        rescaled.push((n - min) / (max - min));\n   \
    \ }\n    rescaled", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers", " \
    \   let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n   \
    \ for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut rescaled_numbers = Vec::new();\n    for n in numbers {\n \
    \       rescaled_numbers.push((n - min_value) / (max_value - min_value));\n  \
    \  }\n    rescaled_numbers"]
stop_tokens:
- "\n}"
