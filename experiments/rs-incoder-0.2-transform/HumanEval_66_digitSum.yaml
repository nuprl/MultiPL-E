name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n        \
    \    sum += c.to_digit(10);\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c.to_digit(10);\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_upper() {\n            sum += c.to_digit(10);\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         sum += c.to_digit(10);\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n        \
    \    sum += c - '0';\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c >= '0' && c <= '9' {\n            sum += c -\
    \ '0';\n        } else {\n            break;\n        }\n    }\n    return sum;",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         sum += c.to_digit(10);\n        }\n    }\n    sum", "    s.chars().filter(|c|\
    \ c >= '0' && c <= '9').sum()", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c.to_digit(10);\n        }\n    }\n \
    \   sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n        \
    \    sum += c.to_digit(10);\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n            sum\
    \ += c - '0';\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_upper() {\n            sum += c.to_digit(10);\n        }\n  \
    \  }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n\
    \            sum += c - '0';\n        } else {\n            break;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_upper() {\n            sum += c.to_digit(10);\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
