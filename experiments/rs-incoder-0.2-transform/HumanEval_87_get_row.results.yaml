language: rs
name: HumanEval_87_get_row
results:
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for cell in row.iter() {\n            if cell == x {\n\
    \                row_result.push((cell.0, cell.1));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by_key(|&(_, y)| y.iter().rev().cloned());\n\
    \    result.sort_by_key(|&(_, y)| y.iter().cloned());\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfq94fe_r.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfq94fe_r.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfq94fe_r.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfq94fe_r.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfq94fe_r.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfq94fe_r.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfq94fe_r.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfq94fe_r.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfq94fe_r.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfq94fe_r.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfq94fe_r.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst.first().len();\n\
    \    let mut col_pos = 0;\n    let mut row_pos = 0;\n    let mut col_max = col_len;\n\
    \    let mut row_max = row_len;\n    let mut col_min = col_len;\n    let mut row_min\
    \ = row_len;\n    let mut col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n\
    \    let mut col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n    let\
    \ mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n    let mut\
    \ col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let mut col_max_idx\
    \ = col_len;\n    let mut row_max_idx = row_len;\n    let mut col_min_idx = col_len;\n\
    \    let mut row_min_idx = row_len;\n    let mut col_max_pos = col_len;\n    let\
    \ mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;\n    let mut\
    \ row_min_pos = row_len;\n    let mut col_max_idx = col_len;\n    let mut row_max_idx\
    \ = row_len;\n    let mut col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n\
    \    let mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n    let\
    \ mut col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let mut\
    \ col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n    let mut col_min_idx\
    \ = col_len;\n    let mut row_min_idx = row_len;\n    let mut col_max_pos = col_len;\n\
    \    let mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;\n    let\
    \ mut row_min_pos = row_len;\n    let mut col_max_idx = col_len;\n    let mut\
    \ row_max_idx = row_len;\n    let mut col_min_idx = col_len;\n    let mut row_min_idx\
    \ = row_len;\n    let mut col_max_pos = col_len;\n    let mut row_max_pos = row_len;\n\
    \    let mut col_min_pos = col_len;\n    let mut row_min_pos = row_len;\n    let\
    \ mut col_max_idx = col_len;\n    let mut row_max_idx = row_len;\n    let mut\
    \ col_min_idx = col_len;\n    let mut row_min_idx = row_len;\n    let mut col_max_pos\
    \ = col_len;\n    let mut row_max_pos = row_len;\n    let mut col_min_pos = col_len;\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbzxrm14g.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbzxrm14g.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbzxrm14g.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbzxrm14g.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbzxrm14g.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbzxrm14g.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbzxrm14g.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbzxrm14g.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbzxrm14g.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbzxrm14g.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbzxrm14g.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd_sw5tnh.rs:80:17\n   |\n\
    80 |     let mut row_\n   |                 ^ help: add `;` here\n81 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < rows {\n        row_sort.clear();\n\
    \        col_sort.clear();\n        row_sort.push(i);\n        col_sort.push(i);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        while j < cols\
    \ {\n            if lst[i][j] == x {\n                row_sort.push(j);\n    \
    \            col_sort.push(j);\n                row_coords.push(i);\n        \
    \        col_coords.push(i);\n            }\n            j += 1\n        }\n \
    \       row_sorted.clear();\n        col_sorted.clear();\n        row_sorted.push(row_sort);\n\
    \        col_sorted.push(col_sort);\n        coords.push(row_coords);\n      \
    \  coords.push(col_coords);\n        i += 1;\n        j = 0;\n    }\n    coords\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi75ecp9d.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi75ecp9d.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi75ecp9d.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi75ecp9d.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi75ecp9d.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi75ecp9d.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi75ecp9d.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi75ecp9d.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi75ecp9d.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi75ecp9d.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi75ecp9d.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_sorted =\
    \ Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n\
    \    let mut col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<isize>::new();\n    let mut col_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<isize>::new();\n    let mut col_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sort_reversed = Vec::<isize>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n\
    \    let mut col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<isize>::new();\n    let mut col_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sorted\
    \ = Vec::<isize>::new();\n    let mut col_sort_reversed = Vec::<isize>::new();\n\
    \    let mut row_sort_reversed = Vec::<isize>::new();\n    let mut row_sorted\
    \ = Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<isize>::new();\n\
    \    let mut col_sort_reversed = Vec::<isize>::new();\n    let mut row_sort_reversed\
    \ = Vec::<isize>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<isize>::new();\n    let mut col_sort_reversed\
    \ = Vec::<isize>::new();\n    let \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp6qhz6t_3.rs:50:1\n  \
    \ |\n50 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp6qhz6t_3.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6qhz6t_3.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6qhz6t_3.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6qhz6t_3.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6qhz6t_3.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6qhz6t_3.rs:59:17\n   |\n59 |     assert"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n\
    \        let mut row_result = Vec::<(isize, isize)>::new();\n        for element\
    \ in row {\n            if element == x {\n                row_result.push((row,\
    \ element));\n            }\n        }\n        result.push(row_result.iter().cloned().collect());\n\
    \    }\n    result.sort_by_key(|row| row.iter().cloned().collect::<Vec<_>>());\n\
    \    result.sort_by_key(|row| row.iter().cloned().rev().collect::<Vec<_>>());\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdzx_sg3a.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdzx_sg3a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdzx_sg3a.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdzx_sg3a.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdzx_sg3a.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        let mut found = false;\n        while !found && col <\
    \ cols {\n            if lst[row][col] == x {\n                found = true;\n\
    \                coords.push((row, col));\n            }\n            col += 1;\n\
    \        }\n        row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(x,\
    \ y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n    coords.reverse();\n \
    \   coords\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp32gjoidv.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp32gjoidv.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp32gjoidv.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp32gjoidv.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp32gjoidv.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp32gjoidv.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp32gjoidv.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp32gjoidv.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp32gjoidv.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp32gjoidv.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp32gjoidv.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n\
    \        let mut row_result = Vec::<(isize, isize)>::new();\n        for (i, val)\
    \ in row.iter().enumerate() {\n            if i == x {\n                row_result.push((i,\
    \ val));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_, y)| -y.1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpanpzw2ch.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpanpzw2ch.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpanpzw2ch.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpanpzw2ch.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpanpzw2ch.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpanpzw2ch.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpanpzw2ch.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpanpzw2ch.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpanpzw2ch.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpanpzw2ch.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpanpzw2ch.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx_max = row.iter().max().unwrap();\n        col_max = row.iter().map(|x|\
    \ x.unwrap()).max().unwrap();\n        if row_idx < row_idx_max && col_max < col_max\
    \ {\n            if row[row_idx][col_max] == x {\n                row.push(row_idx,\
    \ col_max);\n            }\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpszu7sh7a.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpszu7sh7a.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpszu7sh7a.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpszu7sh7a.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpszu7sh7a.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpszu7sh7a.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpszu7sh7a.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpszu7sh7a.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpszu7sh7a.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpszu7sh7a.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpszu7sh7a.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4jpy_l8h.rs:83:11\n   |\n\
    83 |     let mu\n   |           ^ help: add `;` here\n84 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:88:17\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4jpy_l8h.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:90:25\n   |\n90 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:91:25\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n \
    \   while row_idx < rows {\n        let mut row_sorted = vec![];\n        let\
    \ mut col_sorted = vec![];\n        let mut row_row_idx = 0;\n        let mut\
    \ col_col_idx = 0;\n        while col_col_idx < cols {\n            if row_row_idx\
    \ < rows && col_col_idx < cols {\n                if row_row_idx != row_idx {\n\
    \                    row_sorted.push((row_row_idx, row_idx));\n              \
    \  }\n                if col_col_idx != col_idx {\n                    col_sorted.push((col_col_idx,\
    \ col_idx));\n                }\n                row_row_idx += 1;\n         \
    \       col_col_idx += 1;\n            } else {\n                break;\n    \
    \        }\n        }\n        result.push((row_sorted.len(), col_sorted.len()));\n\
    \        row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1kw3qkln.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1kw3qkln.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1kw3qkln.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1kw3qkln.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1kw3qkln.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1kw3qkln.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1kw3qkln.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1kw3qkln.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1kw3qkln.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1kw3qkln.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1kw3qkln.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows {\n        let mut row_coord = vec![];\n        while\
    \ col_idx < cols {\n            if row_idx == row_idx {\n                row_coord.push((row_idx,\
    \ col_idx));\n            }\n            if col_idx == col_idx {\n           \
    \     row_coord.push((row_idx, col_idx));\n            }\n            if row_idx\
    \ == row_idx && col_idx == col_idx {\n                row_coord.push((row_idx,\
    \ col_idx));\n            }\n            col_idx += 1;\n        }\n        result.push(row_coord);\n\
    \        row_idx += 1;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgh4h7om3.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgh4h7om3.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgh4h7om3.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgh4h7om3.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgh4h7om3.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgh4h7om3.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgh4h7om3.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgh4h7om3.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgh4h7om3.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgh4h7om3.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgh4h7om3.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    for row in lst {\n        let mut coord\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                coord.push((row.len(), col.len()));\n            }\n        }\n\
    \        coords.push_back(coord);\n    }\n    coords.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    coords.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    coords\n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2g8gqe6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ 0;\n    let mut col_end = 0;\n    let mut row_start2 = 0;\n    let mut col_start2\
    \ = 0;\n    let mut row_end2 = 0;\n    let mut col_end2 = 0;\n    while row_idx\
    \ < row_len {\n        row_end = 0;\n        col_end = 0;\n        while col_idx\
    \ < col_len {\n            row_end2 = row_end;\n            col_end2 = col_end;\n\
    \            row_start = row_idx;\n            col_start = col_idx;\n        \
    \    if row_idx < row_len {\n                row_end += lst[row_idx].len();\n\
    \            }\n            if col_idx < col_len {\n                col_end +=\
    \ lst[row_idx][col_idx].len();\n            }\n            if row_start <= row_end2\
    \ && col_start <= col_end2 {\n                if lst[row_idx][col_idx] == x {\n\
    \                    result.push((row_idx, col_idx));\n                }\n   \
    \         }\n            col_idx += 1;\n        }\n        row_idx += 1;\n   \
    \     col_idx = 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmnckmbqj.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmnckmbqj.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmnckmbqj.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmnckmbqj.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmnckmbqj.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmnckmbqj.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmnckmbqj.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmnckmbqj.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmnckmbqj.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmnckmbqj.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmnckmbqj.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2 = vec![];\n    let mut\
    \ row_sort_idx3 = vec![];\n    let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4\
    \ = vec![];\n    let mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 =\
    \ vec![];\n    let mut col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n\
    \    let mut col_sort_idx6 = vec![];\n    let mut row_sort_idx7 = vec![];\n  \
    \  let mut col_sort_idx7 = vec![];\n    let mut row_sort_idx8 = vec![];\n    let\
    \ mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9 = vec![];\n    let mut\
    \ col_sort_idx9 = vec![];\n    let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10\
    \ = vec![];\n    let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11\
    \ = vec![];\n    let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12\
    \ = vec![];\n    let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13\
    \ = vec![];\n    let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14\
    \ = vec![];\n    let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15\
    \ = vec![];\n    let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16\
    \ = vec![];\n    let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17\
    \ = vec![];\n    let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18\
    \ = vec![];\n    let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19\
    \ = vec![];\n    let mut row_sort_idx20 = vec![];\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmph6nt73ko.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmph6nt73ko.rs:68:17\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmph6nt73ko.rs:68:25\n \
    \  |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph6nt73ko.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph6nt73ko.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph6nt73ko.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph6nt73ko.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph6nt73ko.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph6nt73ko.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph6nt73ko.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph6nt73ko.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph6nt73ko.rs:73:17\n   |\n73 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        if row_len\
    \ == x {\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n         \
    \   row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \            row.sort_by(|a, b| a.\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxw28nu7u.rs:61:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n22 |     for row in lst {\n   |                   \
    \ - unclosed delimiter\n23 |         row_len += row.len();\n24 |         if row_len\
    \ == x {\n   |                         - this delimiter might not be properly\
    \ closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n61 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpxw28nu7u.rs:50:24\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ closing delimiter possibly meant for this\n...\n50 |             row.sort_by(|a,\
    \ b| a.\n   |                        ^ unclosed delimiter\n51 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: unexpected token: `)`\n  --> /tmp/tmpxw28nu7u.rs:51:1\n\
    \   |\n51 | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxw28nu7u.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxw28nu7u.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxw28nu7u.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxw28nu7u.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxw28nu7u.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxw28nu7u.rs:57:25\n   "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = vec![];\n    let mut col_sorted_idx_end = vec![];\n\
    \    let mut row_sorted_idx_end = \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp9avzgvbl.rs:65:1\n\
    \   |\n65 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp9avzgvbl.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp9avzgvbl.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9avzgvbl.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9avzgvbl.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9avzgvbl.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9avzgvbl.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9avzgvbl.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9avzgvbl.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9avzgvbl.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9avzgvbl.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9avzgvbl.rs:74:17\n   |\n74 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorter: Vec<(isize, isize)> = vec![];\n    let mut col_sorter:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_sorter_index = 0;\n    let mut\
    \ col_sorter_index = 0;\n    let mut row_sorter_index2 = 0;\n    let mut col_sorter_index2\
    \ = 0;\n    let mut row_sorter_index3 = 0;\n    let mut col_sorter_index3 = 0;\n\
    \    let mut row_sorter_index4 = 0;\n    let mut col_sorter_index4 = 0;\n    let\
    \ mut row_sorter_index5 = 0;\n    let mut col_sorter_index5 = 0;\n    let mut\
    \ row_sorter_index6 = 0;\n    let mut col_sorter_index6 = 0;\n    let mut row_sorter_index7\
    \ = 0;\n    let mut col_sorter_index7 = 0;\n    let mut row_sorter_index8 = 0;\n\
    \    let mut col_sorter_index8 = 0;\n    let mut row_sorter_index9 = 0;\n    let\
    \ mut col_sorter_index9 = 0;\n    let mut row_sorter_index10 = 0;\n    let mut\
    \ col_sorter_index10 = 0;\n    let mut row_sorter_index11 = 0;\n    let mut col_sorter_index11\
    \ = 0;\n    let mut row_sorter_index12 = 0;\n    let mut col_sorter_index12 =\
    \ 0;\n    let mut row_sorter_index13 = 0;\n    let mut col_sorter_index13 = 0;\n\
    \    let mut row_sorter_index14 = 0;\n    let mut col_sorter_index14 = 0;\n  \
    \  let mut row_sorter_index15 = 0;\n    let mut col_sorter_index15 = 0;\n    let\
    \ mut row_sorter_index16 = 0;\n    let mut col_sorter_index16 = 0;\n    let mut\
    \ row_sorter_index17 = 0;\n    let mut col_sorter_index17 = 0;\n    let mut row_sorter_index18\
    \ = 0;\n    let mut col_sorter_index18 = 0;\n    let mut row_sorter_index19 =\
    \ 0;\n    let mut col_sorter_index19 = 0;\n    let mut row_sorter_index20 = 0;\n\
    \    let mut col_sorter_index20 = 0;\n    let mut row_sorter_index21 = 0;\n  \
    \  let mut col_sorter_index\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpftg37jjy.rs:67:29\n   |\n\
    67 |     let mut col_sorter_index\n   |                             ^ help: add\
    \ `;` here\n68 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpftg37jjy.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpftg37jjy.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpftg37jjy.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpftg37jjy.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpftg37jjy.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpftg37jjy.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpftg37jjy.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpftg37jjy.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpftg37jjy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpftg37jjy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n\
    \        let mut col_max = 0;\n        let mut col_min = 0;\n        for col in\
    \ row {\n            if col > col_max {\n                col_max = col;\n    \
    \        }\n            if col < col_min {\n                col_min = col;\n \
    \           }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = 0;\n        for col in row {\n         \
    \   if col == x {\n                row_idx += 1;\n            }\n        }\n \
    \       let mut row_idx = row_idx as isize;\n        let mut col_max = col_max\
    \ as isize;\n        let mut col_min = col_min as isize;\n        for col in row\
    \ {\n            if col > col_max {\n                col_max = col;\n        \
    \    }\n            if col < col_min {\n                col_min = col;\n     \
    \       }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_min as isize;\n        for\
    \ col in row {\n            if col > col_max {\n                col_max = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \            }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_min as isize;\n        for\
    \ col in row {\n            if col > col_max {\n                col_max = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \            }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_min as isize;\n        for\
    \ col in row {\n            if col > col_max {\n                col_max = col;\n\
    \            }\n            if col < col_min {\n                col_min = col;\n\
    \            }\n        }\n        if col_min == col_max {\n            continue;\n\
    \        }\n        let mut row_idx = row_idx as isize;\n        let mut col_max\
    \ = col_max as isize;\n        let mut col_min = col_m\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppy9lzmqu.rs:110:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n21  |     for row in lst {\n    |                 \
    \   - this delimiter might not be properly closed...\n...\n100 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `;`, found `}`\n   --> /tmp/tmppy9lzmqu.rs:99:32\n    |\n99  |\
    \         let mut col_min = col_m\n    |                                ^ help:\
    \ add `;` here\n100 | }\n    | - unexpected token\n\nerror[E0425]: cannot find\
    \ value `col_m` in this scope\n  --> /tmp/tmppy9lzmqu.rs:99:27\n   |\n99 |   \
    \      let mut col_min = col_m\n   |                           ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmppy9lzmqu.rs:104:17\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmppy9lzmqu.rs:104:25\n    |\n104 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmppy9lzmqu.rs:105:17\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmppy9lzmqu.rs:105:25\n    |\n105 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmppy9lzmqu.rs:106:17\n    |\n106 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmppy9lzmqu.rs:106:25\n    |\n106 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tm"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut rows\
    \ = lst.len();\n        let mut cols = lst[0].len();\n        let mut coords =\
    \ vec![];\n        let mut row_coords = vec![];\n        let mut col_coords =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted =\
    \ vec![];\n        let mut row_sorted = vec![];\n        let \n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpc0ii1y0h.rs:81:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - this delimiter\
    \ might not be properly closed...\n...\n71 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n81 | }\n   |   ^\n\nerror: expected pattern,\
    \ found `}`\n  --> /tmp/tmpc0ii1y0h.rs:71:1\n   |\n71 | }\n   | ^ expected pattern\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc0ii1y0h.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc0ii1y0h.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc0ii1y0h.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc0ii1y0h.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc0ii1y0h.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc0ii1y0h.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc0ii1y0h.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc0ii1y0h.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in t"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    while col_idx < cols {\n        if row_idx == rows {\n           \
    \ break;\n        }\n        let mut row_value = vec![0; cols];\n        for row_idx\
    \ in 0..rows {\n            row_value[col_idx] = lst[row_idx][col_idx];\n    \
    \        col_idx += 1;\n        }\n        if row_value[x] == x {\n          \
    \  result.push((row_idx, col_idx));\n        }\n        row_idx += 1;\n      \
    \  col_idx += 1;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(x));\n    result.sort_by_key(|&(_,\
    \ y)| -y.cmp(x));\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7gyhspxr.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7gyhspxr.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7gyhspxr.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7gyhspxr.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7gyhspxr.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7gyhspxr.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7gyhspxr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7gyhspxr.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7gyhspxr.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7gyhspxr.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7gyhspxr.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = std::cmp::min(lst.len(),\
    \ x);\n    let mut col_max = 0;\n    let mut col_min = std::cmp::min(lst.len(),\
    \ x);\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let\
    \ mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut\
    \ col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx\
    \ = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n\
    \    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let\
    \ mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let\
    \ mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut\
    \ col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx\
    \ = col_max;\n    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n\
    \    let mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let\
    \ mut col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut\
    \ col_max_idx = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx\
    \ = col_min;\n    let mut col_min_idx = col_max;\n    let mut col_max_idx = col_min;\n\
    \    let mut col_min_idx = col_max;\n    let mut col_max_\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgzvbwryz.rs:67:21\n   |\n\
    67 |     let mut col_max_\n   |                     ^ help: add `;` here\n68 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpgzvbwryz.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgzvbwryz.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgzvbwryz.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgzvbwryz.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgzvbwryz.rs:74:17\n  \
    \ |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgzvbwryz.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgzvbwryz.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgzvbwryz.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgzvbwryz.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgzvbwryz.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `lef"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut row_len = lst.len();\n    let\
    \ mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx =\
    \ 0;\n    while row_idx < row_len {\n        let mut row_sorted = vec![];\n  \
    \      let mut col_sorted = vec![];\n        let mut row_row_idx = 0;\n      \
    \  let mut col_col_idx = 0;\n        while col_idx < col_len {\n            if\
    \ row_row_idx < row_len {\n                row_sorted.push(row_idx);\n       \
    \         row_row_idx += 1;\n            }\n            if col_col_idx < col_len\
    \ {\n                col_sorted.push(col_idx);\n                col_col_idx +=\
    \ 1;\n            }\n        }\n        if row_row_idx < row_len {\n         \
    \   row_sorted.push(row_idx);\n            row_row_idx += 1;\n        }\n    \
    \    if col_col_idx < col_len {\n            col_sorted.push(col_idx);\n     \
    \       col_col_idx += 1;\n        }\n        if row_row_idx < row_len && col_col_idx\
    \ < col_len {\n            let mut row_row_idx = row_row_idx;\n            let\
    \ mut col_col_idx = col_col_idx;\n            while row_row_idx < row_len && col_col_idx\
    \ < col_len {\n                if row_row_idx < row_len {\n                  \
    \  row_sorted.push(row_row_idx);\n                    row_row_idx += 1;\n    \
    \            }\n                if col_col_idx < col_len {\n                 \
    \   col_sorted.push(col_col_idx);\n                    col_col_idx += 1;\n   \
    \             }\n            }\n        }\n        result.push((row_sorted, col_sorted));\n\
    \        row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.iter().rev().cloned());\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk5kpzvyy.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk5kpzvyy.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk5kpzvyy.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk5kpzvyy.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk5kpzvyy.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    for row in lst {\n        let mut row_idx\
    \ = 0;\n        let mut col_idx = 0;\n        for el in row {\n            if\
    \ el == x {\n                rows.push((row_idx, col_idx));\n            }\n \
    \           row_idx += 1;\n            col_idx += 1;\n        }\n    }\n    sort_rows(rows);\n\
    \    sort_cols(rows);\n    rows\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_rows` in this scope\n  --> /tmp/tmp0pii2zyu.rs:31:5\n\
    \   |\n31 |     sort_rows(rows);\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sort_cols` in this scope\n  --> /tmp/tmp0pii2zyu.rs:32:5\n\
    \   |\n32 |     sort_cols(rows);\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0pii2zyu.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0pii2zyu.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0pii2zyu.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0pii2zyu.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0pii2zyu.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0pii2zyu.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0pii2zyu.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0pii2zyu.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0pii2zyu.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tm"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        if row_len\
    \ == x {\n            row_idx += 1;\n            col_pos = 0;\n            col_len\
    \ = 0;\n        }\n        for col in row {\n            col_len += 1;\n     \
    \       if col_len == x {\n                row.swap(row_idx, col_pos);\n     \
    \           row_idx += 1;\n                col_pos += 1;\n                col_len\
    \ -= 1;\n            }\n        }\n    }\n    row\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp480i38tc.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp480i38tc.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp480i38tc.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp480i38tc.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp480i38tc.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp480i38tc.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp480i38tc.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp480i38tc.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp480i38tc.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp480i38tc.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp480i38tc.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmplrrvrjmx.rs:74:1\n  \
    \ |\n74 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmplrrvrjmx.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmplrrvrjmx.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplrrvrjmx.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplrrvrjmx.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplrrvrjmx.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplrrvrjmx.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplrrvrjmx.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplrrvrjmx.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplrrvrjmx.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplrrvrjmx.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplrrvrjmx.rs:83:17\n   |\n83 |     assert"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows {\n        let mut row_result = Vec::new();\n      \
    \  while col_idx < cols {\n            if row_idx == row_idx {\n             \
    \   row_result.push((row_idx, col_idx));\n            }\n            if col_idx\
    \ > cols {\n                break;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                col_idx++;\n            } else {\n                col_idx\
    \ = 0;\n            }\n        }\n        result.push(row_result);\n        row_idx++;\n\
    \        col_idx = 0;\n    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x|\
    \ x.1, |a, b| b.0 - a.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpmcna99cn.rs:32:25\n\
    \   |\n32 |                 col_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpmcna99cn.rs:38:17\n\
    \   |\n38 |         row_idx++;\n   |                 ^ expected expression\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmcna99cn.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmcna99cn.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmcna99cn.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmcna99cn.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmcna99cn.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmcna99cn.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmcna99cn.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmcna99cn.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmcna99cn.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmcna99cn.rs:52:25\n   |\n52 |"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_coord = vec![];\n        let\
    \ mut col_coord = vec![];\n        for _ in 0..col_len {\n            row_coord.push((row_idx,\
    \ col_idx));\n            col_coord.push((row_idx, col_idx));\n            col_idx\
    \ += 1;\n        }\n        result.push((row_idx, row_coord));\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|(_, coord)| coord.0);\n    result.sort_by_key(|(_,\
    \ coord)| coord.1);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpn4umrtjh.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn4umrtjh.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn4umrtjh.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn4umrtjh.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn4umrtjh.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn4umrtjh.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn4umrtjh.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn4umrtjh.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn4umrtjh.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn4umrtjh.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn4umrtjh.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_num_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo2cdwtk3.rs:86:17\n   |\n\
    86 |     let mut row_\n   |                 ^ help: add `;` here\n87 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo2cdwtk3.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo2cdwtk3.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo2cdwtk3.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:94:17\n   |\n94 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:94:25\n\
    \   |\n94 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo2cdwtk3.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo2cdwtk3.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < rows {\n        row_coord.clear();\n        col_coord.clear();\n\
    \        row_coord.push((row, 0));\n        col_coord.push((0, col));\n      \
    \  while j < cols {\n            if lst[i][j] == x {\n                coords.push(row_coord);\n\
    \                coords.push(col_coord);\n                i += 1;\n          \
    \      j += 1;\n            } else {\n                row_coord.push((row, j));\n\
    \                col_coord.push((i, j));\n            }\n        }\n        row\
    \ += 1;\n        col += 1;\n    }\n    coords\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5fu8f6u4.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5fu8f6u4.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5fu8f6u4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5fu8f6u4.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5fu8f6u4.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx = 0;\n    let\
    \ mut row_len_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx\
    \ = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut col\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg08_h_mz.rs:83:16\n   |\n\
    83 |     let mut col\n   |                ^ help: add `;` here\n84 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpg08_h_mz.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg08_h_mz.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg08_h_mz.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg08_h_mz.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg08_h_mz.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg08_h_mz.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg08_h_mz.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg08_h_mz.rs:91:25\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg08_h_mz.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg08_h_mz.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_idx = 1;\n        while col_idx\
    \ < col_len {\n            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        row_idx += 1;\n        col_len = lst[row_idx].len();\n   \
    \ }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ -y.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprhqpq9r5.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprhqpq9r5.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprhqpq9r5.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprhqpq9r5.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprhqpq9r5.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprhqpq9r5.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprhqpq9r5.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprhqpq9r5.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprhqpq9r5.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprhqpq9r5.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprhqpq9r5.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_pos\
    \ = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_pos\
    \ = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_pos\
    \ = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_pos\
    \ = 0;\n    let mut col_pos = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len\n}\n\nfn main() {\n    let candidate =\
    \ get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdrp7lfw8.rs:84:20\n   |\n\
    84 |     let mut col_len\n   |                    ^ help: add `;` here\n85 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdrp7lfw8.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdrp7lfw8.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdrp7lfw8.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:92:25\n\
    \   |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdrp7lfw8.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdrp7lfw8.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len\
    \ = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len\
    \ = 0;\n    while row_len < lst.len() {\n        let mut col_pos_len = 0;\n  \
    \      while col_pos_len < lst.len() {\n            let mut col_pos_idx = 0;\n\
    \            while col_pos_idx < lst.len() {\n                let mut col_pos\
    \ = 0;\n                while col_pos < lst.len() {\n                    let mut\
    \ col_pos_len = 0;\n                    while col_pos_len < lst.len() {\n    \
    \                    let mut col_pos_idx = 0;\n                        while col_pos_idx\
    \ < lst.len() {\n                            let mut col_pos = 0;\n          \
    \                  while col_pos < lst.len() {\n                             \
    \   if col_pos == col_pos_idx {\n                                    if col_pos\
    \ == col_pos_len {\n                                        row.push((row_idx,\
    \ col_pos));\n                                        break;\n               \
    \                     }\n                                    col_pos_len += 1;\n\
    \                                }\n                                col_pos +=\
    \ 1;\n                            }\n                            col_pos_idx +=\
    \ 1;\n                        }\n                        col_pos_len += 1;\n \
    \                   }\n                    col_pos_len += 1;\n               \
    \ }\n                col_pos_idx += 1;\n            }\n            col_pos_len\
    \ += 1;\n        }\n        row_len += 1;\n    }\n    row.sort_by_key(|&(x, y)|\
    \ x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n\
    \    row.sort_by_key(|&(x, y)| y.1);\n    row\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpeovmqmtp.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeovmqmtp.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeovmqmtp.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpeovmqmtp.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpeovmqmtp.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeovmqmtp.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeovmqmtp.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeovmqmtp.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpeovmqmtp.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeovmqmtp.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeovmqmtp.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        row_idx +=\
    \ 1;\n        if row_len == x {\n            rows.push((row_idx, col_idx));\n\
    \            row_len = 0;\n            row_idx = 0;\n            col_idx = 0;\n\
    \        }\n        for col in row {\n            col_len += 1;\n            col_idx\
    \ += 1;\n            if col_len == x {\n                rows.push((row_idx, col_idx));\n\
    \                col_len = 0;\n                col_idx = 0;\n            }\n \
    \       }\n    }\n    rows\n        .iter()\n        .sort_by(|a, b| a.1.cmp(&b.1))\n\
    \        .sort_by(|a, b| b.0.cmp(&a.0))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpox7yg6hk.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpox7yg6hk.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpox7yg6hk.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpox7yg6hk.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpox7yg6hk.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpox7yg6hk.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpox7yg6hk.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpox7yg6hk.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpox7yg6hk.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpox7yg6hk.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpox7yg6hk.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    for row\
    \ in lst {\n        row_coords.clear();\n        col_coords.clear();\n       \
    \ for col in row {\n            if col == x {\n                row_coords.push((row,\
    \ col));\n                col_coords.push((row, col));\n            }\n      \
    \  }\n        coords.push_back(row_coords);\n        coords.push_back(col_coords);\n\
    \    }\n    coords.sort_by_key(|&(_, y)| y.0);\n    coords.sort_by_key(|&(_, y)|\
    \ y.1, |x, y| x.0 > y.0);\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnv79c1zy.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnv79c1zy.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnv79c1zy.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnv79c1zy.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnv79c1zy.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnv79c1zy.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnv79c1zy.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnv79c1zy.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnv79c1zy.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnv79c1zy.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnv79c1zy.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < lst.len()\
    \ {\n        let mut row_idx = 0;\n        while col_idx < lst[row_idx].len()\
    \ {\n            if lst[row_idx][col_idx] == x {\n                row.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                col_idx += 1;\n \
    \           } else {\n                col_idx += 1;\n            }\n        }\n\
    \        row_idx += 1;\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n    row.sort_by_key(|&(_,\
    \ y)| -y.1);\n    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfyzrtgru.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfyzrtgru.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfyzrtgru.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfyzrtgru.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfyzrtgru.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfyzrtgru.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfyzrtgru.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfyzrtgru.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfyzrtgru.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfyzrtgru.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfyzrtgru.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_max = lst[0].len();\n    for row in lst {\n        let mut col_min\
    \ = col_max;\n        for col in row.iter() {\n            if col < col_min {\n\
    \                col_min = col;\n            }\n        }\n        if col_min\
    \ == col_max {\n            row.push((row_idx, col_min));\n        } else {\n\
    \            row.push((row_idx, col_min));\n            row.push((row_idx, col_max));\n\
    \        }\n        row_idx += 1;\n        col_max = col_min;\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.0);\n    row.sort_by_key(|&(_, y)| -y.1);\n    row\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7zbw9_vy.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7zbw9_vy.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7zbw9_vy.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7zbw9_vy.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7zbw9_vy.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n\
    \        row_len += row.len();\n        col_len = row.len();\n    }\n    for row\
    \ in lst {\n        if row_idx < row.len() {\n            let mut row_idx = row.iter().enumerate().filter(|&(i,\
    \ _)| i == row_idx).count();\n            let mut row_idx = row_idx / col_len;\n\
    \            let mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx\
    \ % col_len;\n            let mut row_idx = row_idx / col_len;\n            let\
    \ mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n\
    \            let mut row_idx = row_idx / col_len;\n            let mut row_idx\
    \ = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n         \
    \   let mut row_idx = row_idx / col_len;\n            let mut row_idx = row_idx\
    \ - 1;\n            let mut row_idx = row_idx % col_len;\n            let mut\
    \ row_idx = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n \
    \           let mut row_idx = row_idx % col_len;\n            let mut row_idx\
    \ = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n         \
    \   let mut row_idx = row_idx % col_len;\n            let mut row_idx = row_idx\
    \ / col_len;\n            let mut row_idx = row_idx - 1;\n            let mut\
    \ row_idx = row_idx % col_len;\n            let mut row_idx = row_idx / col_len;\n\
    \            let mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx\
    \ % col_len;\n            let mut row_idx = row_idx / col_len;\n            let\
    \ mut row_idx = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n\
    \            let mut row_idx = row_idx / col_len;\n            let mut row_idx\
    \ = row_idx - 1;\n            let mut row_idx = row_idx % col_len;\n         \
    \   let mut row_idx = row_idx / col_len;\n            let mut row_idx = row_idx\
    \ - 1;\n            let mut row_idx = row_idx % col_len;\n            let mut\
    \ row_idx = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n \
    \           let mut row_idx = row_idx % col_len;\n            let mut row_idx\
    \ = row_idx / col_len;\n            let mut row_idx = row_idx - 1;\n         \
    \   let mut row_idx = row_idx \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxmbos8d2.rs:77:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n25 |     for row in lst {\n   |                   \
    \ - unclosed delimiter\n26 |         if row_idx < row.len() {\n   |          \
    \                      - this delimiter might not be properly closed...\n...\n\
    67 | }\n   | - ...as it matches this but it has different indentation\n...\n77\
    \ | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpxmbos8d2.rs:66:38\n\
    \   |\n66 |             let mut row_idx = row_idx \n   |                     \
    \                 ^ help: add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxmbos8d2.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxmbos8d2.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxmbos8d2.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxmbos8d2.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxmbos8d2.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxmbos8d2.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxmbos8d2.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: can"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < rows {\n        let mut row_sorted\
    \ = vec![];\n        let mut col_sorted = vec![];\n        let mut row_coord =\
    \ vec![];\n        let mut col_coord = vec![];\n        let mut j = 0;\n     \
    \   while j < cols {\n            if lst[i][j] == x {\n                row_sorted.push((i,\
    \ j));\n                col_sorted.push((j, i));\n                row_coord.push((i,\
    \ j));\n                col_coord.push((j, i));\n            }\n            j\
    \ += 1\n        }\n        row_sorted.sort_by_key(|&(x, y)| x.0);\n        col_sorted.sort_by_key(|&(x,\
    \ y)| y.0);\n        row_coord.sort_by_key(|&(x, y)| x.0);\n        col_coord.sort_by_key(|&(x,\
    \ y)| y.0);\n        coords.push(row_coord);\n        coords.push(col_coord);\n\
    \        row_sorted.sort_by_key(|&(x, y)| y.0);\n        col_sorted.sort_by_key(|&(x,\
    \ y)| x.0);\n        row_coord.sort_by_key(|&(x, y)| y.0);\n        col_coord.sort_by_key(|&(x,\
    \ y)| x.0);\n        coords.push(row_coord);\n        coords.push(col_coord);\n\
    \        i += 1;\n    }\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgakkdemp.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgakkdemp.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgakkdemp.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgakkdemp.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgakkdemp.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgakkdemp.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgakkdemp.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgakkdemp.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgakkdemp.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgakkdemp.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgakkdemp.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        return Vec::new();\n    }\n    let mut rows\
    \ = lst.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n    rows.sort_by_key(|row|\
    \ row.iter().cloned());\n    rows.sort_by_key(|row| row.iter().cloned().rev());\n\
    \    let mut cols = rows.iter().map(|row| row.iter().cloned()).collect::<Vec<_>>();\n\
    \    cols.sort_by_key(|col| col.iter().cloned());\n    cols.sort_by_key(|col|\
    \ col.iter().cloned().rev());\n    let mut result = vec![];\n    for row in rows.iter()\
    \ {\n        let mut col = row.iter().cloned();\n        let mut found = false;\n\
    \        for col in cols.iter() {\n            if col.contains(&x) {\n       \
    \         result.push((row.iter().cloned(), col.iter().cloned()));\n         \
    \       found = true;\n                break;\n            }\n        }\n    \
    \    if !found {\n            result.push((row.iter().cloned(), col.iter().cloned()));\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpas1_b9cw.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpas1_b9cw.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpas1_b9cw.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpas1_b9cw.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpas1_b9cw.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpas1_b9cw.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpas1_b9cw.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpas1_b9cw.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpas1_b9cw.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpas1_b9cw.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpas1_b9cw.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row:\
    \ Vec<(isize, isize)> = vec![];\n        let mut row_idx = 0;\n        for row_idx\
    \ in 0..lst.len() {\n            let mut row_idx2 = row_idx;\n            let\
    \ mut row_idx3 = row_idx;\n            let mut row_idx4 = row_idx;\n         \
    \   let mut row_idx5 = row_idx;\n            let mut row_idx6 = row_idx;\n   \
    \         let mut row_idx7 = row_idx;\n            let mut row_idx8 = row_idx;\n\
    \            let mut row_idx9 = row_idx;\n            let mut row_idx10 = row_idx;\n\
    \            let mut row_idx11 = row_idx;\n            let mut row_idx12 = row_idx;\n\
    \            let mut row_idx13 = row_idx;\n            let mut row_idx14 = row_idx;\n\
    \            let mut row_idx15 = row_idx;\n            let mut row_idx16 = row_idx;\n\
    \            let mut row_idx17 = row_idx;\n            let mut row_idx18 = row_idx;\n\
    \            let mut row_idx19 = row_idx;\n            let mut row_idx20 = row_idx;\n\
    \            let mut row_idx21 = row_idx;\n            let mut row_idx22 = row_idx;\n\
    \            let mut row_idx23 = row_idx;\n            let mut row_idx24 = row_idx;\n\
    \            let mut row_idx25 = row_idx;\n            let mut row_idx26 = row_idx;\n\
    \            let mut row_idx27 = row_idx;\n            let mut row_idx28 = row_idx;\n\
    \            let mut row_idx29 = row_idx;\n            let mut row_idx30 = row_idx;\n\
    \            let mut row_idx31 = row_idx;\n            let mut row_idx32 = row_idx;\n\
    \            let mut row_idx33 = row_idx;\n            let mut row_idx34 = row_idx;\n\
    \            let mut row_idx35 = row_idx;\n            let mut row_idx36 = row_idx;\n\
    \            let mut row_idx37 = row_idx;\n            let mut row_idx38 = row_idx;\n\
    \            let mut row_idx39 = row_idx;\n            let mut row_idx40 = row_idx;\n\
    \            let mut row_idx41 = row_idx;\n            let mut row_idx42 = row_idx;\n\
    \            let mut row_idx43 = row_idx;\n            let mut row_idx44 = row_idx;\n\
    \            let mu\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1yud_jqt.rs:77:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - unclosed delimiter\n\
    ...\n22 |         for row_idx in 0..lst.len() {\n   |                        \
    \             - this delimiter might not be properly closed...\n...\n67 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n77 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp1yud_jqt.rs:66:19\n\
    \   |\n66 |             let mu\n   |                   ^ help: add `;` here\n\
    67 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp1yud_jqt.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1yud_jqt.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1yud_jqt.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1yud_jqt.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1yud_jqt.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1yud_jqt.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1yud_jqt.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_num = 0;\n    let mut col_max_idx = 0;\n    let mut row_max =\
    \ vec![];\n    for row in lst {\n        row_max.push(row.iter().max().unwrap());\n\
    \        if row_idx == x {\n            col_max_idx = row.iter().max().unwrap();\n\
    \            break;\n        }\n        col_num = row.iter().max().unwrap();\n\
    \        if col_num > col_max_idx {\n            col_max_idx = col_num;\n    \
    \    }\n        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0mk_5blv.rs:75:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n22 |     for row in lst {\n   |                   \
    \ - this delimiter might not be properly closed...\n...\n65 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n75 | }\n   |   ^\n\n\
    error: mismatched closing delimiter: `}`\n  --> /tmp/tmp0mk_5blv.rs:64:20\n  \
    \ |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n\
    \   |                                                                   - closing\
    \ delimiter possibly meant for this\n...\n64 |         row.sort_by(|a, b| b.cmp\n\
    \   |                    ^ unclosed delimiter\n65 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0mk_5blv.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0mk_5blv.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0mk_5blv.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0mk_5blv.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0mk_5blv.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0mk_5blv.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0mk_5blv.rs:72:17\n   |\n72 |     as"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min = 0;\n \
    \   let mut col_max = 0;\n    let mut col_min = 0;\n    let mut row_max = 0;\n\
    \    let mut row_min = 0;\n    let mut col_sum = 0;\n    let mut col_product =\
    \ 0;\n    let mut col_product_max = 0;\n    let mut col_product_min = 0;\n   \
    \ let mut col_product_sum = 0;\n    let mut col_product_product = 0;\n    let\
    \ mut col_product_product_max = 0;\n    let mut col_product_product_min = 0;\n\
    \    let mut col_product_product_sum = 0;\n    let mut col_product_product_product\
    \ = 0;\n    let mut col_product_product_product_max = 0;\n    let mut col_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_sum = 0;\n    let mut col_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_max = 0;\n    let mut\
    \ col_product_product_product_product_min = 0;\n    let mut col_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product = 0;\n    let\
    \ mut col_product_product_product_product_product_max = 0;\n    let mut col_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_sum = 0;\n   \
    \ let mut col_product_product_product_product_product_product = 0;\n    let mut\
    \ col_product_product_product_product_product_product_max = 0;\n    let mut col_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_sum =\
    \ 0;\n    let mut col_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_sum\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_max\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_product_min\
    \ = 0;\n    let mut col_product_product_product_product_product_product_product_\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfnwcbuyt.rs:64:73\n   |\n\
    64 |     let mut col_product_product_product_product_product_product_product_\n\
    \   |                                                                        \
    \ ^ help: add `;` here\n65 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfnwcbuyt.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfnwcbuyt.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfnwcbuyt.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfnwcbuyt.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {r"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row.len(), col.len()));\n            }\n\
    \        }\n        result.push(row_result);\n    }\n    result.sort_by(|a, b|\
    \ b.iter().cmp(a.iter()).rev());\n    result.sort_by(|a, b| b.iter().cmp(a.iter()).rev());\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkzx_6oty.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkzx_6oty.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkzx_6oty.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkzx_6oty.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkzx_6oty.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkzx_6oty.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkzx_6oty.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkzx_6oty.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkzx_6oty.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkzx_6oty.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkzx_6oty.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut row_idx_min = row_idx_max;\n    let\
    \ mut col_max = 0;\n    let mut col_min = col_max;\n    for row in lst {\n   \
    \     let mut col = 0;\n        let mut col_max = 0;\n        let mut col_min\
    \ = col_max;\n        for col in row {\n            if col == x {\n          \
    \      row.push(col_max);\n                row.push(col_min);\n              \
    \  row_idx_max = row_idx;\n                row_idx_min = row_idx;\n          \
    \      col_max = col;\n                col_min = col;\n            }\n       \
    \     col_max = std::cmp::max(col_max, col);\n            col_min = std::cmp::min(col_min,\
    \ col);\n        }\n        row.push(col_max);\n        row.push(col_min);\n \
    \       row_idx += 1;\n    }\n    row.sort_by_key(|&x| x.0);\n    row.sort_by_key(|&x|\
    \ x.1);\n    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmnes2v93.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmnes2v93.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmnes2v93.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmnes2v93.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmnes2v93.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmnes2v93.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmnes2v93.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmnes2v93.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmnes2v93.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmnes2v93.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmnes2v93.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n\
    \        row_len += row.len();\n        col_len = row.len();\n        if row_len\
    \ == x {\n            row.sort_by(|a, b| a.cmp(b));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            row.sort_by(|a,\
    \ b| b.cmp(a));\n            row.sort_by(|a, b| b.cmp(a));\n            \n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpc7iueq9d.rs:73:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n21 |     for row in lst {\n   |                   \
    \ - unclosed delimiter\n...\n24 |         if row_len == x {\n   |            \
    \             - this delimiter might not be properly closed...\n...\n63 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n73 | }\n\
    \   |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc7iueq9d.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc7iueq9d.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc7iueq9d.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc7iueq9d.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc7iueq9d.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc7iueq9d.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc7iueq9d.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc7iueq9d.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in thi"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_max = lst[0].len();\n    let mut col_max = lst[0].len();\n  \
    \  while row_idx < rows {\n        let mut row_min = row_max;\n        while col_idx\
    \ < cols {\n            if row_idx < rows && col_idx < cols {\n              \
    \  if row_idx < rows {\n                    if row_idx < row_max {\n         \
    \               if row_idx < row_min {\n                            row_min =\
    \ row_idx;\n                        }\n                    }\n               \
    \ }\n                if col_idx < cols {\n                    if col_idx < col_max\
    \ {\n                        if col_idx < col_min {\n                        \
    \    col_min = col_idx;\n                        }\n                    }\n  \
    \              }\n            }\n            col_idx++;\n        }\n        row_idx++;\n\
    \        col_idx = 0;\n        row_max = row_min;\n        col_max = col_min;\n\
    \        result.push((row_min, col_min));\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| -x.1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmp46l9d5cx.rs:43:21\n\
    \   |\n43 |             col_idx++;\n   |                     ^ expected expression\n\
    \nerror: expected expression, found `+`\n  --> /tmp/tmp46l9d5cx.rs:45:17\n   |\n\
    45 |         row_idx++;\n   |                 ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `col_min` in this scope\n  --> /tmp/tmp46l9d5cx.rs:37:38\n\
    \   |\n37 |                         if col_idx < col_min {\n   |             \
    \                         ^^^^^^^ help: a local variable with a similar name exists:\
    \ `col_max`\n\nerror[E0425]: cannot find value `col_min` in this scope\n  -->\
    \ /tmp/tmp46l9d5cx.rs:38:29\n   |\n38 | ...                   col_min = col_idx;\n\
    \   |                       ^^^^^^^ help: a local variable with a similar name\
    \ exists: `col_max`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp46l9d5cx.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp46l9d5cx.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp46l9d5cx.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp46l9d5cx.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp46l9d5cx.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp46l9d5cx.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp46l9d5cx.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut\
    \ col_sorted = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted\
    \ = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n  \
    \  let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut\
    \ row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n\
    \    let mut col_sort = Vec::new();\n    let mut row_sorted = Vec::new();\n  \
    \  let mut col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n    let\
    \ mut col_sort = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut\
    \ col_sort = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sort =\
    \ Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n  \
    \  let mut row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut\
    \ row_sort = Vec::new();\n    let mut col_sort = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sort = Vec::new();\n\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp44sxvyvf.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp44sxvyvf.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp44sxvyvf.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp44sxvyvf.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp44sxvyvf.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp44sxvyvf.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp44sxvyvf.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp44sxvyvf.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp44sxvyvf.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp44sxvyvf.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp44sxvyvf.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx_idx = vec![];\n    let mut col_sort_idx_idx = vec![];\n   \
    \ let mut row_sort_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqqepo77.rs:50:86\n   |\n\
    50 |     let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    \   |                                                                        \
    \              ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsqqepo77.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqqepo77.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqqepo77.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqqepo77.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqqepo77.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqqepo77.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqqepo77.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqqepo77.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsqqepo77.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqqepo77.rs:59:25\n   |\n59 |"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_max = lst[0].len();\n    for row in lst {\n        let mut\
    \ col_min = col_max;\n        for col in row.iter() {\n            if col < col_min\
    \ {\n                col_min = col;\n            }\n        }\n        if col_min\
    \ == col_max {\n            continue;\n        }\n        let mut row_idx = 0;\n\
    \        for col in row.iter() {\n            if col == x {\n                row_idx\
    \ += 1;\n            }\n        }\n        row.sort_by(|a, b| a.cmp(b));\n   \
    \     row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n \
    \       row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| a.cmp(b));\n        row.sort_by(|a, b| b.cmp(a));\n\
    \        row.sort_by(|a, b| b.cmp(a));\n        row.sort_by(|a, b| a.cmp(b));\n\
    \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq1y49kuh.rs:80:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n20 |     for row in lst {\n   |                   \
    \ - this delimiter might not be properly closed...\n...\n70 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq1y49kuh.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq1y49kuh.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq1y49kuh.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq1y49kuh.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq1y49kuh.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq1y49kuh.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq1y49kuh.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq1y49kuh.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq1y49kuh.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n  "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9aq8ru8g.rs:68:20\n   |\n\
    68 |     let mut row_sor\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row:\
    \ Vec<(isize, isize)> = vec![];\n        let mut row_idx = 0;\n        let mut\
    \ row_idx2 = 0;\n        let mut row_idx3 = 0;\n        let mut row_idx4 = 0;\n\
    \        let mut row_idx5 = 0;\n        let mut row_idx6 = 0;\n        let mut\
    \ row_idx7 = 0;\n        let mut row_idx8 = 0;\n        let mut row_idx9 = 0;\n\
    \        let mut row_idx10 = 0;\n        let mut row_idx11 = 0;\n        let mut\
    \ row_idx12 = 0;\n        let mut row_idx13 = 0;\n        let mut row_idx14 =\
    \ 0;\n        let mut row_idx15 = 0;\n        let mut row_idx16 = 0;\n       \
    \ let mut row_idx17 = 0;\n        let mut row_idx18 = 0;\n        let mut row_idx19\
    \ = 0;\n        let mut row_idx20 = 0;\n        let mut row_idx21 = 0;\n     \
    \   let mut row_idx22 = 0;\n        let mut row_idx23 = 0;\n        let mut row_idx24\
    \ = 0;\n        let mut row_idx25 = 0;\n        let mut row_idx26 = 0;\n     \
    \   let mut row_idx27 = 0;\n        let mut row_idx28 = 0;\n        let mut row_idx29\
    \ = 0;\n        let mut row_idx30 = 0;\n        let mut row_idx31 = 0;\n     \
    \   let mut row_idx32 = 0;\n        let mut row_idx33 = 0;\n        let mut row_idx34\
    \ = 0;\n        let mut row_idx35 = 0;\n        let mut row_idx36 = 0;\n     \
    \   let mut row_idx37 = 0;\n        let mut row_idx38 = 0;\n        let mut row_idx39\
    \ = 0;\n        let mut row_idx40 = 0;\n        let mut row_idx41 = 0;\n     \
    \   let mut row_idx42 = 0;\n        let mut row_idx43 = 0;\n        let mut row_idx44\
    \ = 0;\n        let mut row_idx45 = 0;\n        let mut row_idx46 = 0;\n     \
    \   let mut row_idx47 = 0;\n        let mut row_idx48 = 0;\n        let mut row_idx49\
    \ = 0;\n        let mut row_idx50 = 0;\n        let mut row_idx51 = 0;\n     \
    \   let mut row_idx52 = 0;\n        let mut row_idx53 = 0;\n        let mut row_idx54\
    \ = 0;\n        let mut row_idx55 = 0;\n        let mut row_idx56 = 0;\n     \
    \   let mut row_idx57 = 0;\n        let mut row_idx58 = 0;\n        let mut row_idx59\
    \ = 0;\n        let mut row_idx60 = 0;\n        let mut row_idx61\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpio0sdgtl.rs:92:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - this delimiter\
    \ might not be properly closed...\n...\n82 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n92 | }\n   |   ^\n\nerror: expected `;`,\
    \ found `}`\n  --> /tmp/tmpio0sdgtl.rs:81:26\n   |\n81 |         let mut row_idx61\n\
    \   |                          ^ help: add `;` here\n82 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpio0sdgtl.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpio0sdgtl.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpio0sdgtl.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpio0sdgtl.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpio0sdgtl.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpio0sdgtl.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpio0sdgtl.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpio0sdgtl.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                    "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_col_len\
    \ = col_len;\n        while col_idx < row_col_len {\n            if row_idx ==\
    \ row_idx {\n                let mut row_col = vec![];\n                for _\
    \ in 0..col_len {\n                    row_col.push((row_idx, col_idx));\n   \
    \                 col_idx += 1;\n                }\n                row.push(row_col);\n\
    \            } else {\n                if row_idx == row_idx {\n             \
    \       let mut row_col = vec![];\n                    for _ in 0..col_len {\n\
    \                        row_col.push((row_idx, col_idx));\n                 \
    \       col_idx += 1;\n                    }\n                    row.push(row_col);\n\
    \                } else {\n                    let mut row_col = vec![];\n   \
    \                 for _ in 0..col_len {\n                        row_col.push((row_idx,\
    \ col_idx));\n                        col_idx += 1;\n                    }\n \
    \                   row.push(row_col);\n                }\n            }\n   \
    \     }\n        col_idx = 0;\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.0);\n    row.sort_by_key(|&(_, y)| y.1);\n    row\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqb39h__g.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqb39h__g.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqb39h__g.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqb39h__g.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqb39h__g.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqb39h__g.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqb39h__g.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqb39h__g.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqb39h__g.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqb39h__g.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqb39h__g.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        return vec![];\n    }\n    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_col\
    \ = 0;\n    let mut row_col_max = lst.len();\n    let mut row_col_min = row_col_max\
    \ - 1;\n    let mut row_col_mid = row_col_max / 2;\n    let mut row_col_mid_idx\
    \ = row_col_mid;\n    let mut row_col_mid_idx_max = row_col_mid;\n    let mut\
    \ row_col_mid_idx_min = row_col_mid;\n    let mut row_col_mid_idx_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid = row_col_mid;\n    let\
    \ mut row_col_mid_idx_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid = row_col_mid;\n   \
    \ let mut row_col_mid_idx_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid = row_col_mid;\n\
    \    let mut row_col_mid_idx_mid_mid_mid_mid_max = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_mid_mid_min\
    \ = row_col_mid;\n    let mut row_col_mid_idx_mid_mid_\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7c8cwpcg.rs:53:37\n   |\n\
    53 |     let mut row_col_mid_idx_mid_mid_\n   |                              \
    \       ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7c8cwpcg.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7c8cwpcg.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7c8cwpcg.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7c8cwpcg.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7c8cwpcg.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerro"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    for row in lst {\n  \
    \      let mut row_sorted = vec![];\n        for elem in row.iter() {\n      \
    \      if elem.0 == x {\n                row_sorted.push((elem.0, elem.1));\n\
    \            }\n        }\n        row_sorted.sort_by_key(|&(_, y)| y.0);\n  \
    \      row_sorted.sort_by_key(|&(_, y)| y.1);\n        row_sorted.reverse();\n\
    \        return row_sorted;\n    }\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq9s4s_er.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9s4s_er.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq9s4s_er.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq9s4s_er.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq9s4s_er.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq9s4s_er.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq9s4s_er.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq9s4s_er.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq9s4s_er.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9s4s_er.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq9s4s_er.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row.len(), col.len()));\n            }\n\
    \        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|row|\
    \ row[0].cmp(&row[1]));\n    result.sort_by_key(|row| row[1].cmp(&row[0]));\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjtsg1hjd.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjtsg1hjd.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjtsg1hjd.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjtsg1hjd.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjtsg1hjd.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    lst.iter().enumerate().filter(|(i,\
    \ row)| {\n        if i == 0 {\n            true\n        } else {\n         \
    \   row.iter().any(|&x| x == x)\n        }\n    }).map(|(i, row)| {\n        (i,\
    \ row.iter().enumerate().filter(|(_, y)| y.1 == x).map(|(_, y)| y.0).collect())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphm6l77m1.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphm6l77m1.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphm6l77m1.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphm6l77m1.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphm6l77m1.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphm6l77m1.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphm6l77m1.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphm6l77m1.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphm6l77m1.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphm6l77m1.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphm6l77m1.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else if row_idx < rows {\n        \
    \    col_idx += 1;\n        } else {\n            row_idx += 1;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq5cuvbyg.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq5cuvbyg.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq5cuvbyg.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq5cuvbyg.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq5cuvbyg.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        let mut col_max = 0;\n\
    \        for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        if col_max > x {\n            break;\n\
    \        }\n        row_idx += 1;\n    }\n    let mut row_max = row_idx;\n   \
    \ let mut col_min = col_max;\n    for row in lst {\n        let mut col_min =\
    \ 0;\n        for col in row {\n            if col < col_min {\n             \
    \   col_min = col;\n            }\n        }\n        if col_min < x {\n     \
    \       break;\n        }\n        row_max += 1;\n    }\n    let mut row_min =\
    \ row_idx;\n    let mut col_mid = col_max;\n    for row in lst {\n        let\
    \ mut col_mid = 0;\n        for col in row {\n            if col > col_mid {\n\
    \                col_mid = col;\n            }\n        }\n        if col_mid\
    \ < x {\n            break;\n        }\n        row_min += 1;\n    }\n    let\
    \ mut row_mid = row_idx;\n    let mut col_left = col_mid;\n    let mut col_right\
    \ = col_max;\n    for row in lst {\n        let mut col_left = 0;\n        for\
    \ col in row {\n            if col < col_left {\n                col_left = col;\n\
    \            }\n        }\n        if col_left < x {\n            break;\n   \
    \     }\n        row_mid += 1;\n    }\n    let mut row_right = row_idx;\n    let\
    \ mut col_top = col_mid;\n    let mut col_bottom = col_min;\n    for row in lst\
    \ {\n        let mut col_top = 0;\n        for col in row {\n            if col\
    \ > col_top {\n                col_top = col;\n            }\n        }\n    \
    \    if col_top > x {\n            break;\n        }\n        row_right += 1;\n\
    \    }\n    let mut row_top = row_idx;\n    let mut col_mid = col_min;\n    for\
    \ row in lst {\n        let mut col_mid = 0;\n        for col in row {\n     \
    \       if col < col_mid {\n                col_mid = col;\n            }\n  \
    \      }\n        if col_mid < x {\n            break;\n        }\n        row_top\
    \ += 1;\n    }\n    let mut row_bottom = row_idx;\n    let mut col_left = col_mid;\n\
    \    let mut col_right = col_mid;\n    for row in lst {\n        let mut \n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwtqwjbyq.rs:119:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n107 |     for row in lst {\n    |                 \
    \   - this delimiter might not be properly closed...\n108 |         let mut \n\
    109 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    119 | }\n    |   ^\n\nerror: expected identifier, found `}`\n   --> /tmp/tmpwtqwjbyq.rs:109:1\n\
    \    |\n109 | }\n    | ^ expected identifier\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n   --> /tmp/tmpwtqwjbyq.rs:113:17\n    |\n113 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpwtqwjbyq.rs:113:25\n\
    \    |\n113 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpwtqwjbyq.rs:114:17\n    |\n114 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpwtqwjbyq.rs:114:25\n\
    \    |\n114 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpwtqwjbyq.rs:115:17\n    |\n115 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpwtqwjbyq.rs:115:25\n\
    \    |\n115 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpwtqwjbyq.rs:116:17\n    |\n116 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpwtqwjbyq.rs:116:25\n\
    \    |\n116 |     assert_eq!({left}, {right});\n    |  "
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \    }\n    for row in lst {\n        if row_idx >= row.len() {\n            break;\n\
    \        }\n        if row_len == row.len() {\n            row_idx += 1;\n   \
    \         continue;\n        }\n        let mut row_idx2 = 0;\n        let mut\
    \ row_len2 = 0;\n        for row_idx2 in row {\n            row_len2 += 1;\n \
    \       }\n        if row_len2 < row_len {\n            break;\n        }\n  \
    \      if row_idx2 == x {\n            row_idx += 1;\n            continue;\n\
    \        }\n        if row_idx2 < x {\n            break;\n        }\n       \
    \ if row_idx2 == x {\n            row_idx += 1;\n            continue;\n     \
    \   }\n        if row_idx2 < x {\n            break;\n        }\n        if row_idx2\
    \ == x {\n            row_idx += 1;\n            continue;\n        }\n      \
    \  if row_idx2 < x {\n            break;\n        }\n        if row_idx2 == x\
    \ {\n            row_idx += 1;\n            continue;\n        }\n        if row_idx2\
    \ < x {\n            break;\n        }\n        if row_idx2 == x {\n         \
    \   row_idx += 1;\n            continue;\n        }\n        if row_idx2 < x {\n\
    \            break;\n        }\n        if row_idx2 == x {\n            row_idx\
    \ += 1;\n            continue;\n        }\n        if row_idx2 < x {\n       \
    \     break;\n        }\n        if row_idx2 == x {\n            row_idx += 1;\n\
    \            continue;\n        }\n        if row_idx2 < x {\n            break;\n\
    \        }\n        if row_idx2 == x {\n            row_idx += 1;\n          \
    \  continue;\n        }\n        if row_idx2 < x {\n            break;\n     \
    \   }\n        if row_idx2 == x {\n            row_idx += 1;\n            continue;\n\
    \        }\n        if row_idx2 < x {\n            break;\n        }\n       \
    \ if row_idx2 == x {\n            row_idx += 1;\n            continue;\n     \
    \   }\n        if row_idx2 < x {\n            break;\n        }\n        if row_idx2\
    \ == x {\n            row_idx += 1;\n            continue;\n        }\n      \
    \  if row_idx2 < x {\n            break;\n        }\n        if row_idx2 == x\
    \ {\n            row_idx += 1;\n            continue;\n        }\n        if row_idx2\
    \ < x {\n            break;\n        }\n        if row_idx2 == x {\n         \
    \   row_idx += 1;\n            continue;\n        }\n        if row_idx2 < x {\n\
    \            break;\n        }\n        if row_idx2 == x {\n            row_\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpncvg_a39.rs:142:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n23  |     for row in lst {\n    |                 \
    \   - unclosed delimiter\n...\n130 |         if row_idx2 == x {\n    |       \
    \                   - this delimiter might not be properly closed...\n131 |  \
    \           row_\n132 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n142 | }\n    |   ^\n\nerror[E0425]: cannot find value `row_`\
    \ in this scope\n   --> /tmp/tmpncvg_a39.rs:131:13\n    |\n131 |             row_\n\
    \    |             ^^^^ help: a local variable with a similar name exists: `row`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpncvg_a39.rs:136:17\n\
    \    |\n136 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpncvg_a39.rs:136:25\n    |\n136 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpncvg_a39.rs:137:17\n\
    \    |\n137 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpncvg_a39.rs:137:25\n    |\n137 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpncvg_a39.rs:138:17\n\
    \    |\n138 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpncvg_a39.rs:138:25\n    |\n138 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpncvg_a39.rs:139:17\n\
    \    |\n139 |     assert_eq!({left}, {right});\n    |               "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n \
    \   let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n\
    \    let mut row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut\
    \ col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n \
    \   let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len\
    \ = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut\
    \ col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n \
    \   let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkm2s5y74.rs:83:11\n   |\n\
    83 |     let mu\n   |           ^ help: add `;` here\n84 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkm2s5y74.rs:88:17\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkm2s5y74.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkm2s5y74.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkm2s5y74.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkm2s5y74.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkm2s5y74.rs:90:25\n   |\n90 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkm2s5y74.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkm2s5y74.rs:91:25\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkm2s5y74.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkm2s5y74.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    while col_idx < cols {\n        if row_idx == rows {\n            break;\n\
    \        }\n        let mut row_start = row_idx;\n        let mut row_end = row_idx;\n\
    \        let mut col_start = col_idx;\n        let mut col_end = col_idx;\n  \
    \      while row_end < rows && col_end < cols {\n            if row_end == rows\
    \ {\n                row_end += 1;\n                col_end += 1;\n          \
    \      continue;\n            }\n            if col_end == cols {\n          \
    \      row_end += 1;\n                col_end += 1;\n                continue;\n\
    \            }\n            if lst[row_end][col_end] == x {\n                result.push((row_start,\
    \ col_start));\n                row_end += 1;\n                col_end += 1;\n\
    \                continue;\n            }\n            row_end += 1;\n       \
    \     col_end += 1;\n        }\n        row_idx += 1;\n        col_idx += 1;\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvt77bg0h.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvt77bg0h.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvt77bg0h.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvt77bg0h.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvt77bg0h.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvt77bg0h.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvt77bg0h.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvt77bg0h.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvt77bg0h.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvt77bg0h.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvt77bg0h.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut row_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut col_pos_idx2 = 0;\n    let mut row_pos_idx2 = 0;\n    let\
    \ mut col_pos_idx3 = 0;\n    let mut row_pos_idx3 = 0;\n    let mut col_pos_idx4\
    \ = 0;\n    let mut row_pos_idx4 = 0;\n    let mut col_pos_idx5 = 0;\n    let\
    \ mut row_pos_idx5 = 0;\n    let mut col_pos_idx6 = 0;\n    let mut row_pos_idx6\
    \ = 0;\n    let mut col_pos_idx7 = 0;\n    let mut row_pos_idx7 = 0;\n    let\
    \ mut col_pos_idx8 = 0;\n    let mut row_pos_idx8 = 0;\n    let mut col_pos_idx9\
    \ = 0;\n    let mut row_pos_idx9 = 0;\n    let mut col_pos_idx10 = 0;\n    let\
    \ mut row_pos_idx10 = 0;\n    let mut col_pos_idx11 = 0;\n    let mut row_pos_idx11\
    \ = 0;\n    let mut col_pos_idx12 = 0;\n    let mut row_pos_idx12 = 0;\n    let\
    \ mut col_pos_idx13 = 0;\n    let mut row_pos_idx13 = 0;\n    let mut col_pos_idx14\
    \ = 0;\n    let mut row_pos_idx14 = 0;\n    let mut col_pos_idx15 = 0;\n    let\
    \ mut row_pos_idx15 = 0;\n    let mut col_pos_idx16 = 0;\n    let mut row_pos_idx16\
    \ = 0;\n    let mut col_pos_idx17 = 0;\n    let mut row_pos_idx17 = 0;\n    let\
    \ mut col_pos_idx18 = 0;\n    let mut row_pos_idx18 = 0;\n    let mut col_pos_idx19\
    \ = 0;\n    let mut row_pos_idx19 = 0;\n    let mut col_pos_idx20 = 0;\n    let\
    \ mut row_pos_idx20 = 0;\n    let mut col_pos_idx21 = 0;\n    let mut row_pos_idx21\
    \ = 0;\n    let mut col_pos_idx22 = 0;\n    let mut row_pos_idx22 = 0;\n    let\
    \ mut col_pos_idx23 = 0;\n    let mut row_pos_idx23 = 0;\n    let mut col_pos_idx24\
    \ = 0;\n    let mut row_pos_idx24 = 0;\n    let mut col_pos_idx25 = 0;\n    let\
    \ mut row_pos_idx25 = 0;\n    let mut col_pos_idx26 = 0;\n    let mut row_pos_idx26\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpn3k931eq.rs:76:1\n  \
    \ |\n76 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpn3k931eq.rs:80:17\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpn3k931eq.rs:80:25\n \
    \  |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3k931eq.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3k931eq.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn3k931eq.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn3k931eq.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn3k931eq.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3k931eq.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3k931eq.rs:84:17\n   |\n84 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn3k931eq.rs:84:25\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3k931eq.rs:85:17\n   |\n85 |     assert"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    for row in lst {\n        let mut row_coords = vec![];\n    \
    \    let mut row_cols = vec![];\n        for col in row {\n            if col\
    \ == x {\n                row_coords.push((row, col));\n            }\n      \
    \      row_cols.push((col, row));\n        }\n        row_coords.sort_by(|a, b|\
    \ a.1.cmp(&b.1));\n        row_coords.reverse();\n        row_cols.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n        row_cols.reverse();\n        row_coords.reverse();\n\
    \        row_cols.reverse();\n        coords.push(row_coords);\n        rows.push(row_cols);\n\
    \        cols.push(row_cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    coords.reverse();\n    rows.sort_by(|a, b| b.0.cmp(&a.0));\n    rows.reverse();\n\
    \    cols.sort_by(|a, b| b.0.cmp(&a.0));\n    cols.reverse();\n    coords.reverse();\n\
    \    rows.reverse();\n    cols.reverse();\n    coords\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwl8ud9zc.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwl8ud9zc.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwl8ud9zc.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwl8ud9zc.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwl8ud9zc.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((col, row.len()));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by(|a, b| b.iter().rev().collect::<Vec<_>>().cmp(a.iter().rev().collect::<Vec<_>>()));\n\
    \    result.sort_by(|a, b| b.iter().collect::<Vec<_>>().cmp(a.iter().collect::<Vec<_>>()));\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7zng7jis.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7zng7jis.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7zng7jis.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7zng7jis.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7zng7jis.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7zng7jis.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7zng7jis.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7zng7jis.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7zng7jis.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7zng7jis.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7zng7jis.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3:\
    \ Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut\
    \ row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n\
    \    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize>\
    \ = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10:\
    \ Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut\
    \ row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n\
    \    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize>\
    \ = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17:\
    \ Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut\
    \ row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n\
    \    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize>\
    \ = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24:\
    \ Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut\
    \ row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n\
    \    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize>\
    \ = vec![];\n    let mut row_idx30: \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmp32fjlobh.rs:48:1\n   |\n\
    47 |     let mut row_idx30: \n   |         ------------- while parsing the type\
    \ for `mut row_idx30`\n48 | }\n   | ^ expected type\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:52:17\n   |\n52 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp32fjlobh.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp32fjlobh.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp32fjlobh.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut rows = vec![];\n    for row in\
    \ lst {\n        let mut cols = vec![];\n        for col in row {\n          \
    \  if col == x {\n                coords.push((row, col));\n            }\n  \
    \          cols.push(col);\n        }\n        rows.push(cols);\n    }\n    coords.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.iter().map(|&(x,\
    \ y)| x).collect()\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf_u8gp66.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf_u8gp66.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf_u8gp66.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf_u8gp66.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf_u8gp66.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf_u8gp66.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf_u8gp66.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf_u8gp66.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf_u8gp66.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf_u8gp66.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf_u8gp66.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_start = 0;\n    let mut col_start = 0;\n  \
    \  while row_idx < row_len {\n        let row_end = row_start + lst[row_idx].len();\n\
    \        while col_idx < col_len {\n            let col_end = col_start + lst[row_idx][col_idx].len();\n\
    \            if row_end >= row_start && col_end >= col_start {\n             \
    \   if lst[row_idx][col_idx] == x {\n                    rows.push((row_idx, col_idx));\n\
    \                }\n            }\n            col_idx += 1;\n        }\n    \
    \    row_start += lst[row_idx].len();\n        col_idx = 0;\n        row_idx +=\
    \ 1;\n    }\n    rows\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpahyrll8p.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahyrll8p.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpahyrll8p.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpahyrll8p.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpahyrll8p.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpahyrll8p.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpahyrll8p.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpahyrll8p.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpahyrll8p.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahyrll8p.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpahyrll8p.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row = Vec::<(isize, isize)>::new();\n    for row in lst {\n \
    \       let mut col = Vec::<isize>::new();\n        for col in row {\n       \
    \     if col == x {\n                row.push(col);\n            }\n        }\n\
    \    }\n    row.sort_by_key(|&(x, y)| x.cmp(y));\n    row.sort_by_key(|&(x, y)|\
    \ y.cmp(x));\n    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvsf4lwq3.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvsf4lwq3.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvsf4lwq3.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvsf4lwq3.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvsf4lwq3.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row = Vec::<(isize, isize)>::new();\n    for col in lst {\n \
    \       if col[x] == x {\n            row.push((col, x));\n        }\n    }\n\
    \    row.sort_by_key(|&(_, y)| y);\n    row.sort_by_key(|&(_, y)| -y);\n    row\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7815xtsh.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7815xtsh.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7815xtsh.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7815xtsh.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7815xtsh.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7815xtsh.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7815xtsh.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7815xtsh.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7815xtsh.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7815xtsh.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7815xtsh.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut\
    \ col_sorted = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ k = 0;\n    while i < rows {\n        row_sorted.clear();\n        col_sorted.clear();\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n        row_coords.extend((i, 0));\n        col_coords.extend((0,\
    \ j));\n        row_sorted.extend(row_coords);\n        col_sorted.extend(col_coords);\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.extend((i,\
    \ 0));\n        col_coords.extend((0, j));\n        row_sorted.extend(row_coords);\n\
    \        col_sorted.extend(col_coords);\n        row_coords.clear();\n       \
    \ col_coords.clear();\n\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp37oi6nb1.rs:97:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n27 |     while i < rows {\n   |                   \
    \ - this delimiter might not be properly closed...\n...\n87 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n97 | }\n   |   ^\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp37oi6nb1.rs:91:17\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp37oi6nb1.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp37oi6nb1.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp37oi6nb1.rs:92:25\n\
    \   |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp37oi6nb1.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp37oi6nb1.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp37oi6nb1.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp37oi6nb1.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp37oi6nb1.rs:95:17\n  \
    \ |\n95 |     assert_eq!({left}, {right});\n  "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut row_pos = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    for row in lst {\n        row_len += 1;\n\
    \        col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n \
    \       col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n  \
    \      col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n   \
    \     col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n    \
    \    col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n     \
    \   col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n      \
    \  col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n       \
    \ col_len += 1;\n    }\n    for row in lst {\n        row_len += 1;\n        col_len\
    \ += 1;\n    }\n    for row in lst {\n        row_len += 1;\n        col_len +=\
    \ 1;\n    }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n\
    \    }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n \
    \   }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n  \
    \  }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n   \
    \ }\n    for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n\
    \    for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n \
    \   for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n  \
    \  for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n   \
    \ for row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for\
    \ row in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row\
    \ in lst {\n        row_len += 1;\n        col_len += 1;\n    }\n    for row in\
    \ lst {\n        row_len += 1;\n        col_len += 1;\n\n}\n\nfn main() {\n  \
    \  let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwomslb7b.rs:124:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n110 |     for row in lst {\n    |                 \
    \   - this delimiter might not be properly closed...\n...\n114 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n124 | }\n    |   ^\n\n\
    error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpwomslb7b.rs:118:17\n\
    \    |\n118 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwomslb7b.rs:118:25\n    |\n118 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwomslb7b.rs:119:17\n\
    \    |\n119 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwomslb7b.rs:119:25\n    |\n119 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwomslb7b.rs:120:17\n\
    \    |\n120 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwomslb7b.rs:120:25\n    |\n120 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwomslb7b.rs:121:17\n\
    \    |\n121 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpwomslb7b.rs:121:25\n    |\n121 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpwomslb7b.rs"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n \
    \   while row_idx < rows {\n        let mut row_coord = vec![];\n        while\
    \ col_idx < cols {\n            row_coord.push((row_idx, col_idx));\n        \
    \    col_idx += 1;\n        }\n        result.push(row_coord);\n        row_idx\
    \ += 1;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7e9uqwsh.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7e9uqwsh.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7e9uqwsh.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7e9uqwsh.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7e9uqwsh.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n\
    \    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps961_qc0.rs:82:11\n   |\n\
    82 |     let mu\n   |           ^ help: add `;` here\n83 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps961_qc0.rs:87:17\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps961_qc0.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps961_qc0.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps961_qc0.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps961_qc0.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps961_qc0.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps961_qc0.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps961_qc0.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps961_qc0.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps961_qc0.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < rows {\n        let mut row_sort = vec![];\n        let mut col_sort\
    \ = vec![];\n        let mut row_sorted = vec![];\n        let mut col_sorted\
    \ = vec![];\n        while j < cols {\n            if lst[i][j] == x {\n     \
    \           row_sort.push((i, j));\n                col_sort.push((j, i));\n \
    \               row_sorted.push((i, j));\n                col_sorted.push((j,\
    \ i));\n            }\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            i += 1;\n            i += 1;\n            i += 1;\n            i\
    \ += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n     \
    \       i += 1;\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \            \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3wy43l5b.rs:129:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n30  |     while i < rows {\n    |                 \
    \   - unclosed delimiter\n...\n35  |         while j < cols {\n    |         \
    \               - this delimiter might not be properly closed...\n...\n119 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n129 | }\n\
    \    |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmp3wy43l5b.rs:123:17\n\
    \    |\n123 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp3wy43l5b.rs:123:25\n    |\n123 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp3wy43l5b.rs:124:17\n\
    \    |\n124 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp3wy43l5b.rs:124:25\n    |\n124 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp3wy43l5b.rs:125:17\n\
    \    |\n125 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp3wy43l5b.rs:125:25\n    |\n125 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmp3wy43l5b.rs:126:17\n\
    \    |\n126 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmp3wy43l5b.rs:126:25\n    |\n126 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_max = lst.len();\n    let mut col_max\
    \ = lst[0].len();\n    let mut row_min = 0;\n    let mut col_min = 0;\n    let\
    \ mut row_max_idx = 0;\n    let mut col_max_idx = 0;\n    let mut row_min_idx\
    \ = 0;\n    let mut col_min_idx = 0;\n    let mut row_max_idx2 = 0;\n    let mut\
    \ col_max_idx2 = 0;\n    let mut row_min_idx2 = 0;\n    let mut col_min_idx2 =\
    \ 0;\n    let mut row_max_idx3 = 0;\n    let mut col_max_idx3 = 0;\n    let mut\
    \ row_min_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let mut row_max_idx4 =\
    \ 0;\n    let mut col_max_idx4 = 0;\n    let mut row_min_idx4 = 0;\n    let mut\
    \ col_min_idx4 = 0;\n    let mut row_max_idx5 = 0;\n    let mut col_max_idx5 =\
    \ 0;\n    let mut row_min_idx5 = 0;\n    let mut col_min_idx5 = 0;\n    let mut\
    \ row_max_idx6 = 0;\n    let mut col_max_idx6 = 0;\n    let mut row_min_idx6 =\
    \ 0;\n    let mut col_min_idx6 = 0;\n    let mut row_max_idx7 = 0;\n    let mut\
    \ col_max_idx7 = 0;\n    let mut row_min_idx7 = 0;\n    let mut col_min_idx7 =\
    \ 0;\n    let mut row_max_idx8 = 0;\n    let mut col_max_idx8 = 0;\n    let mut\
    \ row_min_idx8 = 0;\n    let mut col_min_idx8 = 0;\n    let mut row_max_idx9 =\
    \ 0;\n    let mut col_max_idx9 = 0;\n    let mut row_min_idx9 = 0;\n    let mut\
    \ col_min_idx9 = 0;\n    let mut row_max_idx10 = 0;\n    let mut col_max_idx10\
    \ = 0;\n    let mut row_min_idx10 = 0;\n    let mut col_min_idx10 = 0;\n    let\
    \ mut row_max_idx11 = 0;\n    let mut col_max_idx11 = 0;\n    let mut row_min_idx11\
    \ = 0;\n    let mut col_min_idx11 = 0;\n    let mut row_max_idx12 = 0;\n    let\
    \ mut col_max_idx12 = 0;\n    let mut row_min_idx12 = 0;\n    let mut col_min_idx12\
    \ = 0;\n    let mut row_max_idx13 = 0;\n    let mut col_max_idx13 = 0;\n    let\
    \ mut row_min_idx13 = 0;\n    let mut col_min_idx13 = 0;\n}\n\nfn main() {\n \
    \   let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3s12bxn4.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3s12bxn4.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3s12bxn4.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3s12bxn4.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3s12bxn4.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3s12bxn4.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3s12bxn4.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3s12bxn4.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3s12bxn4.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3s12bxn4.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3s12bxn4.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_coord = vec![(row_idx, col_idx)];\n\
    \        let mut col_coord = vec![(row_idx, col_idx)];\n        for _ in 0..col_len\
    \ {\n            col_coord.push((row_idx, col_idx));\n        }\n        for _\
    \ in 0..col_len {\n            result.push((row_idx, col_idx));\n        }\n \
    \       row_idx += 1;\n        col_idx += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsb31i6d8.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsb31i6d8.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsb31i6d8.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsb31i6d8.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsb31i6d8.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsb31i6d8.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsb31i6d8.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsb31i6d8.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsb31i6d8.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsb31i6d8.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsb31i6d8.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = lst.len();\n    let mut col_len = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_max = lst.iter().map(|v| v.len()).max().unwrap();\n\
    \    let mut col_max_idx = 0;\n    let mut col_max_val = lst.iter().map(|v| v.len()).max().unwrap();\n\
    \    let mut col_max_val_pos = 0;\n    let mut col_max_val_neg = 0;\n    let mut\
    \ col_max_val_neg_idx = 0;\n    let mut col_max_val_neg_val = 0;\n    let mut\
    \ col_max_val_neg_val_pos = 0;\n    let mut col_max_val_neg_val_neg = 0;\n   \
    \ let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_max_val_neg_val_neg_val\
    \ = 0;\n    let mut col_max_val_neg_val_neg_idx = 0;\n    let mut col_\n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppg61ufu_.rs:60:17\n   |\n\
    60 |     let mut col_\n   |                 ^ help: add `;` here\n61 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppg61ufu_.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppg61ufu_.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppg61ufu_.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppg61ufu_.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppg61ufu_.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg61ufu_.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg61ufu_.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppg61ufu_.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppg61ufu_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppg61ufu_.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_end = row_start;\n        while col_idx < col_len {\n\
    \            if row_end == row_start {\n                row_end += 1;\n      \
    \      }\n            if row_end == row_idx {\n                row_end += 1;\n\
    \            }\n            if col_idx < col_len {\n                if row_end\
    \ == row_idx {\n                    row_end += 1;\n                }\n       \
    \         if row_end == row_idx {\n                    row_end += 1;\n       \
    \         }\n                if col_idx < col_len {\n                    if row_end\
    \ == row_idx {\n                        row_end += 1;\n                    }\n\
    \                    if row_end == row_idx {\n                        row_end\
    \ += 1;\n                    }\n                    if col_idx < col_len {\n \
    \                       if row_end == row_idx {\n                            row_end\
    \ += 1;\n                        }\n                        if row_end == row_idx\
    \ {\n                            row_end += 1;\n                        }\n  \
    \                      if col_idx < col_len {\n                            if\
    \ row_end == row_idx {\n                                row_end += 1;\n      \
    \                      }\n                            if row_end == row_idx {\n\
    \                                row_end += 1;\n                            }\n\
    \                            if col_idx < col_len {\n                        \
    \        if row_end == row_idx {\n                                    row_end\
    \ += 1;\n                                }\n                                if\
    \ row_end == row_idx {\n                                    row_end += 1;\n  \
    \                              }\n                                if col_idx <\
    \ col_len {\n                                    if row_end == row_idx {\n   \
    \                                     row_end += 1;\n                        \
    \            }\n                                    if row_end == row_idx {\n\
    \                                        row_end += 1;\n                     \
    \               }\n                                    if col_idx < col_len {\n\
    \                                        if row_end == row_idx {\n           \
    \                                 row_end += 1;\n                            \
    \            }\n                                        if row_end == row_idx\
    \ {\n                                            row_end += 1;\n             \
    \                           }\n                                        if col_idx\
    \ < col_len {\n                                            if row_end == row_idx\
    \ {\n                                                row_end += 1;\n         \
    \                                   }\n                                      \
    \      if row_end == row_idx {\n                                             \
    \   row_end += 1;\n                                            }\n           \
    \                                 if col_idx < col_len {\n                   \
    \                             if row_end == row_idx {\n                      \
    \                              row_end += 1;\n                               \
    \                 }\n                                                if row_end\
    \ == row_idx {\n                                                    row_end +=\
    \ 1;\n                                                }\n                    \
    \                            if col_idx < col_len {\n                        \
    \                            if row_end == row_idx {\n                       \
    \                                 \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmper0ftmw1.rs:109:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n24  |     while row_idx < row_len {\n    |        \
    \                     - unclosed delimiter\n25  |         let mut row_end = row_start;\n\
    26  |         while col_idx < col_len {\n    |                               \
    \  - unclosed delimiter\n...\n33  |             if col_idx < col_len {\n    |\
    \                                  - unclosed delimiter\n...\n40  |          \
    \       if col_idx < col_len {\n    |                                      - unclosed\
    \ delimiter\n...\n47  |                     if col_idx < col_len {\n    |    \
    \                                      - unclosed delimiter\n...\n54  |      \
    \                   if col_idx < col_len {\n    |                            \
    \                  - unclosed delimiter\n...\n61  |                          \
    \   if col_idx < col_len {\n    |                                            \
    \      - unclosed delimiter\n...\n68  |                                 if col_idx\
    \ < col_len {\n    |                                                      - unclosed\
    \ delimiter\n...\n75  |                                     if col_idx < col_len\
    \ {\n    |                                                          - unclosed\
    \ delimiter\n...\n82  |                                         if col_idx < col_len\
    \ {\n    |                                                              - unclosed\
    \ delimiter\n...\n89  |                                             if col_idx\
    \ < col_len {\n    |                                                         \
    \         - unclosed delimiter\n...\n96  |                                   \
    \              if col_idx < col_len {\n    |                                 \
    \                                     - unclosed delimiter\n97  |            \
    \                                         if row_end == row_idx {\n    |     \
    \                                                       "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_max = rows - 1;\n    let mut col_max = cols - 1;\n    while row_idx\
    \ <= row_max && col_idx <= col_max {\n        if row_idx < row_max && col_idx\
    \ < col_max {\n            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                row_idx++;\n                col_idx++;\n       \
    \     } else if lst[row_idx][col_idx] > x {\n                row_idx++;\n    \
    \        } else {\n                col_idx++;\n            }\n        } else {\n\
    \            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpq43k1jfo.rs:28:25\n\
    \   |\n28 |                 row_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpq43k1jfo.rs:31:25\n\
    \   |\n31 |                 row_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpq43k1jfo.rs:33:25\n\
    \   |\n33 |                 col_idx++;\n   |                         ^ expected\
    \ expression\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq43k1jfo.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq43k1jfo.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq43k1jfo.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq43k1jfo.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq43k1jfo.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq43k1jfo.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq43k1jfo.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq43k1jfo.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq43k1jfo.rs:48:17\n  \
    \ |\n48 |     "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else {\n            col_idx += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpobnaesl5.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpobnaesl5.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpobnaesl5.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpobnaesl5.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpobnaesl5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpobnaesl5.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpobnaesl5.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpobnaesl5.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpobnaesl5.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpobnaesl5.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpobnaesl5.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprq4egett.rs:71:11\n   |\n\
    71 |     let mu\n   |           ^ help: add `;` here\n72 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprq4egett.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprq4egett.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprq4egett.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprq4egett.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprq4egett.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprq4egett.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprq4egett.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprq4egett.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprq4egett.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprq4egett.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord\
    \ = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\
    \    while i < rows {\n        row_coord.clear();\n        col_coord.clear();\n\
    \        row_coord.push(i);\n        col_coord.push(j);\n        while j < cols\
    \ {\n            if lst[i][j] == x {\n                coords.push((row_coord.clone(),\
    \ col_coord.clone()));\n                row_coord.push(j);\n                col_coord.push(j);\n\
    \                i += 1;\n                j += 1;\n                break;\n  \
    \          }\n            i += 1;\n            j += 1;\n        }\n    }\n   \
    \ coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x, y)| y.0);\n\
    \    coords.sort_by_key(|&(x, y)| x.1.cmp(&y.1));\n    coords.sort_by_key(|&(x,\
    \ y)| y.1.cmp(&x.1));\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpncka7_cm.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpncka7_cm.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpncka7_cm.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpncka7_cm.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpncka7_cm.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpncka7_cm.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpncka7_cm.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpncka7_cm.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpncka7_cm.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpncka7_cm.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpncka7_cm.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sor\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa7v7n8f5.rs:68:20\n   |\n\
    68 |     let mut row_sor\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa7v7n8f5.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa7v7n8f5.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa7v7n8f5.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa7v7n8f5.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa7v7n8f5.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    while row_idx < rows {\n        while col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        col_idx = 0;\n \
    \       row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8_8fabi3.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_8fabi3.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_8fabi3.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8_8fabi3.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8_8fabi3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8_8fabi3.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8_8fabi3.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8_8fabi3.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8_8fabi3.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_8fabi3.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_8fabi3.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    for row in lst {\n  \
    \      let mut row_sorted = vec![];\n        for elem in row.iter().cloned() {\n\
    \            if elem == x {\n                row_sorted.push((elem.0, elem.1));\n\
    \            }\n        }\n        row_sorted.sort_by_key(|&(_, y)| y.0);\n  \
    \      row_sorted.sort_by_key(|&(_, y)| -y.1);\n        row_sorted.reverse();\n\
    \        row_sorted.iter().cloned().collect()\n    }\n    row\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdmmiqy9p.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdmmiqy9p.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdmmiqy9p.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdmmiqy9p.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdmmiqy9p.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst\
    \ {\n        let mut cols = vec![];\n        for col in row {\n            if\
    \ col == x {\n                cols.push((col, row.len()));\n            }\n  \
    \      }\n        rows.push(cols);\n    }\n    rows.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    rows\n}\n\nfn\
    \ main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvep_v8f_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvep_v8f_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvep_v8f_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvep_v8f_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvep_v8f_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvep_v8f_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvep_v8f_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvep_v8f_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvep_v8f_.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvep_v8f_.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvep_v8f_.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((row, col));\n            }\n        }\n    \
    \    result.push(row_result);\n    }\n    result.sort_by(|a, b| a.iter().rev().cmp(b.iter().rev()));\n\
    \    result.sort_by(|a, b| b.iter().rev().cmp(a.iter().rev()));\n    result\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxn7pt_h_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxn7pt_h_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxn7pt_h_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxn7pt_h_.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxn7pt_h_.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row\
    \ = vec![];\n        let mut row_idx = vec![];\n        let mut row_idx_idx =\
    \ vec![];\n        let mut row_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx = vec![];\n        let mut\
    \ row_idx_idx_idx_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n \
    \       let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n        let\
    \ mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n        let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnkt9_9c9.rs:55:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - this delimiter\
    \ might not be properly closed...\n...\n45 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n55 | }\n   |   ^\n\nerror: expected `;`,\
    \ found `}`\n  --> /tmp/tmpnkt9_9c9.rs:44:97\n   |\n44 |         let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n\
    \   |                                                                        \
    \                         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnkt9_9c9.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnkt9_9c9.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnkt9_9c9.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnkt9_9c9.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnkt9_9c9.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnkt9_9c9.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnkt9_9c9.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    for row in lst {\n        let mut row_coords = vec![];\n    \
    \    let mut row_cols = vec![];\n        for coord in row.iter() {\n         \
    \   if coord.0 > x {\n                break;\n            }\n            row_coords.push(coord.0);\n\
    \            row_cols.push(coord.1);\n        }\n        coords.push(row_coords);\n\
    \        rows.push(row_cols);\n        cols.push(row_cols.iter().cloned().reverse());\n\
    \    }\n    coords.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    cols.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    coords.iter().map(|x| x.iter().cloned()).collect()\n}\n\nfn main() {\n  \
    \  let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9tn73vlr.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9tn73vlr.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9tn73vlr.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9tn73vlr.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9tn73vlr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9tn73vlr.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9tn73vlr.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9tn73vlr.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9tn73vlr.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9tn73vlr.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9tn73vlr.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n\
    \        row_len += row.len();\n        col_len += row.last().unwrap();\n    }\n\
    \    for row in lst {\n        let mut row_idx = 0;\n        let mut row_len =\
    \ 0;\n        let mut col_len = 0;\n        for col in row {\n            row_len\
    \ += 1;\n            col_len += 1;\n            if col == x {\n              \
    \  row.insert(row_idx, row_len);\n                row.insert(row_idx, col_len);\n\
    \                row_idx += 1;\n                row_len += 1;\n              \
    \  col_len += 1;\n            }\n        }\n    }\n    row.sort_by_key(|&(_, y)|\
    \ y.cmp(x));\n    row.sort_by_key(|&(_, y)| -y.cmp(x));\n    row\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzv3zojf6.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzv3zojf6.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzv3zojf6.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzv3zojf6.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzv3zojf6.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzv3zojf6.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzv3zojf6.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzv3zojf6.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzv3zojf6.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzv3zojf6.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzv3zojf6.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd_sw5tnh.rs:80:17\n   |\n\
    80 |     let mut row_\n   |                 ^ help: add `;` here\n81 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut\
    \ col_pos_len_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n\
    \    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n\
    \    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n\
    \    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n\
    \    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_idx = 0;\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx = 0;\n\
    \    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut\
    \ col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_idx\
    \ = 0;\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:81:17\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoj7gb5e_.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoj7gb5e_.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoj7gb5e_.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoj7gb5e_.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoj7gb5e_.rs:86:17\n   |\n86 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx <\
    \ rows && col_idx < cols {\n        if row_idx < rows && col_idx < cols {\n  \
    \          if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                col_idx += 1;\n \
    \           }\n        }\n        if row_idx < rows {\n            row_idx +=\
    \ 1;\n            row_max = rows;\n            col_idx = 1;\n            col_max\
    \ = cols;\n        }\n        if col_idx < cols {\n            col_idx += 1;\n\
    \            row_idx = 1;\n            row_max = rows;\n            col_idx =\
    \ 1;\n            col_max = cols;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjzv_km30.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjzv_km30.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjzv_km30.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjzv_km30.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjzv_km30.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjzv_km30.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjzv_km30.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjzv_km30.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjzv_km30.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjzv_km30.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjzv_km30.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        if row_len\
    \ == x {\n            row.sort();\n            row.sort_by_key(|&x| -x);\n   \
    \         row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n \
    \           row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x| -x);\n\
    \            row.sort_by_key(|&x| -x);\n            row.sort_by_key(|&x\n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpog0y2ct8.rs:73:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n22 |     for row in lst {\n   |                   \
    \ - unclosed delimiter\n23 |         row_len += row.len();\n24 |         if row_len\
    \ == x {\n   |                         - this delimiter might not be properly\
    \ closed...\n...\n63 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n73 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpog0y2ct8.rs:62:28\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ closing delimiter possibly meant for this\n...\n62 |             row.sort_by_key(|&x\n\
    \   |                            ^ unclosed delimiter\n63 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: expected one of `:`, `@`, or `|`, found `)`\n  -->\
    \ /tmp/tmpog0y2ct8.rs:63:1\n   |\n62 |             row.sort_by_key(|&x\n   | \
    \                               - expected one of `:`, `@`, or `|`\n63 | }\n \
    \  | ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpog0y2ct8.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpog0y2ct8.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpog0y2ct8.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpog0y2ct8.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpog0y2ct8.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        let mut found = false;\n        for col in 0..cols {\n\
    \            if lst[row][col] == x {\n                found = true;\n        \
    \        break;\n            }\n        }\n        if found {\n            result.push((row,\
    \ col));\n        }\n        row += 1;\n    }\n    result.sort_by_key(|&(x, y)|\
    \ x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp84719pe.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp84719pe.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp84719pe.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp84719pe.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp84719pe.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp84719pe.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp84719pe.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp84719pe.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp84719pe.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp84719pe.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp84719pe.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n\
    \        col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n\
    \    for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n     \
    \   col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n  \
    \  for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n     \
    \   col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n  \
    \  for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    \    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_max = row.iter().max().unwrap();\n   \
    \ }\n    let mut col_min = 0;\n    for row in lst {\n        row_idx += 1;\n \
    \       col_min = row.iter().min().unwrap();\n    }\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        row_idx += 1;\n     \
    \   col_max = row.iter().max().unwrap();\n    }\n    let mut col_min = 0;\n  \
    \  for row in lst {\n        row_idx += 1;\n        col_min = row.iter().min().unwrap();\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpe2qssitn.rs:104:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n91  |     for row in lst {\n    |                 \
    \   - this delimiter might not be properly closed...\n...\n94  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n104 | }\n    |   ^\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe2qssitn.rs:98:17\n\
    \   |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe2qssitn.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe2qssitn.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe2qssitn.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpe2qssitn.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpe2qssitn.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpe2qssitn.rs:101:17\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpe2qssitn.rs:101:25\n    |\n101 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpe2qssitn.rs:102:17\n    |\n102 | "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n\
    \        let mut row_result = Vec::<(isize, isize)>::new();\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|row| row.0);\n    result.sort_by_key(|row| row.1, |a,\
    \ b| b.1.cmp(&a.1));\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9maod0cm.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9maod0cm.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9maod0cm.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9maod0cm.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9maod0cm.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9maod0cm.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9maod0cm.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9maod0cm.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9maod0cm.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9maod0cm.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9maod0cm.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    for row_idx in 0..lst.len() {\n        let\
    \ row_len = lst[row_idx].len();\n        if row_len > x {\n            break;\n\
    \        }\n        let mut row_cols: Vec<(isize, isize)> = Vec::new();\n    \
    \    for col_idx in 0..row_len {\n            if col_idx >= x {\n            \
    \    break;\n            }\n            row_cols.push((row_idx, col_idx));\n \
    \       }\n        row.push(row_cols);\n    }\n    row.sort_by_key(|&(_, y)| y.0);\n\
    \    row.sort_by_key(|&(_, y)| -y.1);\n    row\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphtlhxws7.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphtlhxws7.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphtlhxws7.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphtlhxws7.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphtlhxws7.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphtlhxws7.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphtlhxws7.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphtlhxws7.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphtlhxws7.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphtlhxws7.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphtlhxws7.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    for row in lst {\n        let mut cols = vec![];\n        for\
    \ col in row {\n            if col == x {\n                coords.push((row, col));\n\
    \            }\n            cols.push(col);\n        }\n        rows.push(row);\n\
    \        cols.push(cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.iter().map(|&(_, c)| c.clone()).collect()\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptxlg232c.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptxlg232c.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptxlg232c.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptxlg232c.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptxlg232c.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptxlg232c.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptxlg232c.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptxlg232c.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptxlg232c.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptxlg232c.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptxlg232c.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9aq8ru8g.rs:68:20\n   |\n\
    68 |     let mut row_sor\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    let mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos\
    \ = 0;\n    let mut row_pos_idx = 0;\n    let mut row_pos_len = 0;\n    let mut\
    \ col_pos_pos_idx = 0;\n    let mut col_pos_pos_len = 0;\n    let mut row_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_len = 0;\n    let mut col_pos_pos_pos_idx = 0;\n\
    \    let mut col_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_idx = 0;\n\
    \    let mut row_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_idx = 0;\n\
    \    let mut col_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut\
    \ row_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let\
    \ mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx\
    \ = 0;\n    let mut row_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let\
    \ mut col_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_idx = 0;\n    let mut col_pos_pos_pos_pos_pos_pos_pos_\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3l1ehf46.rs:60:45\n   |\n\
    60 |     let mut col_pos_pos_pos_pos_pos_pos_pos_\n   |                      \
    \                       ^ help: add `;` here\n61 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3l1ehf46.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3l1ehf46.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3l1ehf46.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3l1ehf46.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3l1ehf46.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3l1ehf46.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3l1ehf46.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3l1ehf46.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3l1ehf46.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3l1ehf46.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = \n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpoljq0s_m.rs:77:1\n\
    \   |\n77 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpoljq0s_m.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoljq0s_m.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoljq0s_m.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoljq0s_m.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoljq0s_m.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoljq0s_m.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoljq0s_m.rs:86:17\n   |\n86 |     "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        let mut found = false;\n        while !found && col <\
    \ cols {\n            if lst[row][col] == x {\n                result.push((row,\
    \ col));\n                found = true;\n            }\n            col += 1\n\
    \        }\n        row += 1;\n        col = 0;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp74cpbd1z.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp74cpbd1z.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp74cpbd1z.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp74cpbd1z.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp74cpbd1z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp74cpbd1z.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp74cpbd1z.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp74cpbd1z.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp74cpbd1z.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp74cpbd1z.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp74cpbd1z.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst\
    \ {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n        rows.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    cols.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    rows.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    let mut result = vec![];\n    for\
    \ row in rows {\n        let mut cols = vec![];\n        for col in cols {\n \
    \           if col[0] == x {\n                result.push((row, col));\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8cwj3wl_.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8cwj3wl_.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8cwj3wl_.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8cwj3wl_.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8cwj3wl_.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_start = 0;\n\
    \    let mut col_end = 0;\n    let mut col_lens = vec![];\n    let mut col_starts\
    \ = vec![];\n    let mut col_ends = vec![];\n    let mut col_lens_idx = 0;\n \
    \   let mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let mut row_lens\
    \ = vec![];\n    let mut row_starts = vec![];\n    let mut row_ends = vec![];\n\
    \    let mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx\
    \ = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let\
    \ mut col_ends_idx = 0;\n    let mut row_lens_idx = 0;\n    let mut row_starts_idx\
    \ = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx = 0;\n    let\
    \ mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let mut row_lens_idx\
    \ = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx = 0;\n    let\
    \ mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let mut col_ends_idx\
    \ = 0;\n    let mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let\
    \ mut row_ends_idx = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx\
    \ = 0;\n    let mut col_ends_idx = 0;\n    let mut row_lens_idx = 0;\n    let\
    \ mut row_starts_idx = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx\
    \ = 0;\n    let mut col_starts_idx = 0;\n    let mut col_ends_idx = 0;\n    let\
    \ mut row_lens_idx = 0;\n    let mut row_starts_idx = 0;\n    let mut row_ends_idx\
    \ = 0;\n    let mut col_lens_idx = 0;\n    let mut col_starts_idx = 0;\n    let\
    \ mut col_ends_idx = 0;\n    let mut row_lens_idx = 0;\n    let mut row_starts_idx\
    \ = 0;\n    let mut row_ends_idx = 0;\n    let mut col_lens_idx = 0;\n    let\
    \ mut col_starts_idx = 0;\n    let mut col_\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy1vn3_5k.rs:73:17\n   |\n\
    73 |     let mut col_\n   |                 ^ help: add `;` here\n74 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy1vn3_5k.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy1vn3_5k.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy1vn3_5k.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy1vn3_5k.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy1vn3_5k.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n \
    \   while row_idx < rows {\n        let mut row_result = vec![];\n        while\
    \ col_idx < cols {\n            if row_idx == row_idx {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            if col_idx < cols {\n               \
    \ if row_idx == row_idx {\n                    row_result.push((row_idx, col_idx));\n\
    \                }\n                if col_idx < cols {\n                    if\
    \ row_idx == row_idx {\n                        row_result.push((row_idx, col_idx));\n\
    \                    }\n                    if col_idx < cols {\n            \
    \            if row_idx == row_idx {\n                            row_result.push((row_idx,\
    \ col_idx));\n                        }\n                        if col_idx <\
    \ cols {\n                            if row_idx == row_idx {\n              \
    \                  row_result.push((row_idx, col_idx));\n                    \
    \        }\n                            if col_idx < cols {\n                \
    \                if row_idx == row_idx {\n                                   \
    \ row_result.push((row_idx, col_idx));\n                                }\n  \
    \                              if col_idx < cols {\n                         \
    \           if row_idx == row_idx {\n                                        row_result.push((row_idx,\
    \ col_idx));\n                                    }\n                        \
    \            if col_idx < cols {\n                                        if row_idx\
    \ == row_idx {\n                                            row_result.push((row_idx,\
    \ col_idx));\n                                        }\n                    \
    \                    if col_idx < cols {\n                                   \
    \         if row_idx == row_idx {\n                                          \
    \      row_result.push((row_idx, col_idx));\n                                \
    \            }\n                                            if col_idx < cols\
    \ {\n                                                if row_idx == row_idx {\n\
    \                                                    row_result.push((row_idx,\
    \ col_idx));\n                                                }\n            \
    \                                    if col_idx < cols {\n                   \
    \                                 if row_idx == row_idx {\n                  \
    \                                      row_result.push((row_idx, col_idx));\n\
    \                                                    }\n                     \
    \                               if col_idx < cols {\n                        \
    \                                if row_idx == row_idx {\n                   \
    \                                         row_result.push((row_idx, col_idx));\n\
    \                                                        }\n                 \
    \                                       if col_idx < cols {\n                \
    \                                            if row_idx == row_idx {\n       \
    \                                                         row_result.push((row_idx,\
    \ col_idx));\n                                                            }\n\
    \                                                            if col_idx < cols\
    \ {\n                                                                if row_idx\
    \ == row_idx {\n                                                             \
    \       row_result.push((row_idx, col_idx));\n                               \
    \                                 }\n                                        \
    \                        if col_idx < cols {\n                               \
    \                                     if row_idx == row_idx {\n              \
    \                                                          row_result.push((row_idx,\
    \ col_idx));\n                                                               \
    \     }\n                                                                    if\
    \ col_id\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp2rtvg_7p.rs:95:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n22 |     while row_idx < rows {\n   |             \
    \             - unclosed delimiter\n23 |         let mut row_result = vec![];\n\
    24 |         while col_idx < cols {\n   |                              - unclosed\
    \ delimiter\n...\n28 |             if col_idx < cols {\n   |                 \
    \              - unclosed delimiter\n...\n32 |                 if col_idx < cols\
    \ {\n   |                                   - unclosed delimiter\n...\n36 |  \
    \                   if col_idx < cols {\n   |                                \
    \       - unclosed delimiter\n...\n40 |                         if col_idx < cols\
    \ {\n   |                                           - unclosed delimiter\n...\n\
    44 |                             if col_idx < cols {\n   |                   \
    \                            - unclosed delimiter\n...\n48 |                 \
    \                if col_idx < cols {\n   |                                   \
    \                - unclosed delimiter\n...\n52 |                             \
    \        if col_idx < cols {\n   |                                           \
    \            - unclosed delimiter\n...\n56 |                                 \
    \        if col_idx < cols {\n   |                                           \
    \                - unclosed delimiter\n...\n60 |                             \
    \                if col_idx < cols {\n   |                                   \
    \                            - unclosed delimiter\n...\n64 |                 \
    \                                if col_idx < cols {\n   |                   \
    \                                                - unclosed delimiter\n...\n68\
    \ |                                                     if col_idx < cols {\n\
    \   |                                                                       -\
    \ unclosed delimiter\n...\n72 |                                              \
    \           if col_"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n\
    \        row_len += row.len();\n        col_len += row.iter().map(|x| x).sum();\n\
    \    }\n    let mut col_pos = 0;\n    for row in lst {\n        let mut col_pos\
    \ = 0;\n        for col in row.iter().map(|x| x) {\n            if col_pos ==\
    \ col_len {\n                break;\n            }\n            if x == x {\n\
    \                row.insert(col_pos, x);\n                col_pos += 1;\n    \
    \        }\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|x| x.0);\n\
    \    row.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    row\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfxt63vyi.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfxt63vyi.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfxt63vyi.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfxt63vyi.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfxt63vyi.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfxt63vyi.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfxt63vyi.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfxt63vyi.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfxt63vyi.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfxt63vyi.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfxt63vyi.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = \n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpoljq0s_m.rs:77:1\n\
    \   |\n77 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpoljq0s_m.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoljq0s_m.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoljq0s_m.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoljq0s_m.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoljq0s_m.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoljq0s_m.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoljq0s_m.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoljq0s_m.rs:86:17\n   |\n86 |     "
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut col_max = lst[0].len();\n    for row in\
    \ lst {\n        row_idx += 1;\n        if row_idx == x {\n            break;\n\
    \        }\n        let mut col_max = row.len();\n        for col in row {\n \
    \           col_idx += 1;\n            if col_idx > col_max {\n              \
    \  break;\n            }\n            row.push(col);\n        }\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| y.cmp(&-x));\n    row\n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4hb2x_0.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd4hb2x_0.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd4hb2x_0.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4hb2x_0.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd4hb2x_0.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max2 = 0;\n    let mut col_min2\
    \ = 0;\n    let mut col_max3 = 0;\n    let mut col_min3 = 0;\n    let mut col_max4\
    \ = 0;\n    let mut col_min4 = 0;\n    let mut col_max5 = 0;\n    let mut col_min5\
    \ = 0;\n    let mut col_max6 = 0;\n    let mut col_min6 = 0;\n    let mut col_max7\
    \ = 0;\n    let mut col_min7 = 0;\n    let mut col_max8 = 0;\n    let mut col_min8\
    \ = 0;\n    let mut col_max9 = 0;\n    let mut col_min9 = 0;\n    let mut col_max10\
    \ = 0;\n    let mut col_min10 = 0;\n    let mut col_max11 = 0;\n    let mut col_min11\
    \ = 0;\n    let mut col_max12 = 0;\n    let mut col_min12 = 0;\n    let mut col_max13\
    \ = 0;\n    let mut col_min13 = 0;\n    let mut col_max14 = 0;\n    let mut col_min14\
    \ = 0;\n    let mut col_max15 = 0;\n    let mut col_min15 = 0;\n    let mut col_max16\
    \ = 0;\n    let mut col_min16 = 0;\n    let mut col_max17 = 0;\n    let mut col_min17\
    \ = 0;\n    let mut col_max18 = 0;\n    let mut col_min18 = 0;\n    let mut col_max19\
    \ = 0;\n    let mut col_min19 = 0;\n    let mut col_max20 = 0;\n    let mut col_min20\
    \ = 0;\n    let mut col_max21 = 0;\n    let mut col_min21 = 0;\n    let mut col_max22\
    \ = 0;\n    let mut col_min22 = 0;\n    let mut col_max23 = 0;\n    let mut col_min23\
    \ = 0;\n    let mut col_max24 = 0;\n    let mut col_min24 = 0;\n    let mut col_max25\
    \ = 0;\n    let mut col_min25 = 0;\n    let mut col_max26 = 0;\n    let mut col_min26\
    \ = 0;\n    let mut col_max27 = 0;\n    let mut col_min27 = 0;\n    let mut col_max28\
    \ = 0;\n    let mut col_min28 = 0;\n    let mut col_max29 = 0;\n    let mut col_min29\
    \ = 0;\n    let mut col_max30 = 0;\n    let mut col_min30 = 0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2nv0xrxa.rs:81:11\n   |\n\
    81 |     let mu\n   |           ^ help: add `;` here\n82 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2nv0xrxa.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2nv0xrxa.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2nv0xrxa.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2nv0xrxa.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2nv0xrxa.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_reverse\
    \ = vec![];\n    let mut col_sort_reverse = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n    let mut col_sort_reverse_idx = vec![];\n    let mut row_sort_reverse_idx\
    \ = vec![];\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwc544k1c.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwc544k1c.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwc544k1c.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwc544k1c.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwc544k1c.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwc544k1c.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwc544k1c.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwc544k1c.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwc544k1c.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwc544k1c.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwc544k1c.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    while rows > 0 || cols > 0 {\n        if rows > 0\
    \ {\n            let row = lst[rows].iter().cloned().collect::<Vec<_>>();\n  \
    \          coords.sort_by_key(|&(_, y)| y.cmp(&x));\n            coords.sort_by_key(|&(_,\
    \ y)| -y.cmp(&x));\n            rows += 1;\n            cols -= 1;\n        }\n\
    \        if cols > 0 {\n            let col = lst[0].iter().cloned().collect::<Vec<_>>();\n\
    \            coords.sort_by_key(|&(_, y)| y.cmp(&x));\n            coords.sort_by_key(|&(_,\
    \ y)| -y.cmp(&x));\n            cols += 1;\n            rows -= 1;\n        }\n\
    \    }\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpps7vv3_a.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpps7vv3_a.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpps7vv3_a.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpps7vv3_a.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpps7vv3_a.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpps7vv3_a.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpps7vv3_a.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpps7vv3_a.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpps7vv3_a.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpps7vv3_a.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpps7vv3_a.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < rows {\n        let mut row_coord = vec![];\n        let mut col_coord =\
    \ vec![];\n        while j < cols {\n            if i == rows {\n            \
    \    row_coord.push((i, j));\n                col_coord.push((i, j));\n      \
    \          i += 1;\n                j = 0;\n            } else {\n           \
    \     row_coord.push((i, j));\n                col_coord.push((i, j));\n     \
    \           i += 1;\n                j += 1;\n            }\n        }\n     \
    \   coords.push(row_coord);\n        coords.push(col_coord);\n    }\n    coords.sort_by_key(|&(_,\
    \ y)| y.0);\n    coords.sort_by_key(|&(_, y)| y.1);\n    coords\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpreukco24.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpreukco24.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpreukco24.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpreukco24.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpreukco24.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpreukco24.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpreukco24.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpreukco24.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpreukco24.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpreukco24.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpreukco24.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n\
    \        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        col_max = row.iter().max().unwrap();\n\
    \        col_min = row.iter().min().unwrap();\n        if col_max > col_min {\n\
    \            break;\n        }\n        row_idx += 1;\n    }\n    let mut row_idx\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst\
    \ {\n        col_max = row.iter().max().unwrap();\n        col_min = row.iter().min().unwrap();\n\
    \        if col_max > col_min {\n            break;\n        }\n        row_idx\
    \ += 1;\n    }\n    let mut row_idx = 0;\n    let mut col_\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqt0n5axf.rs:96:17\n   |\n\
    96 |     let mut col_\n   |                 ^ help: add `;` here\n97 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpqt0n5axf.rs:101:17\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpqt0n5axf.rs:101:25\n    |\n101 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpqt0n5axf.rs:102:17\n    |\n102 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpqt0n5axf.rs:102:25\n    |\n102 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpqt0n5axf.rs:103:17\n    |\n103 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpqt0n5axf.rs:103:25\n    |\n103 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpqt0n5axf.rs:104:17\n    |\n104 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpqt0n5axf.rs:104:25\n    |\n104 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpqt0n5axf.rs:105:17\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpqt0n5axf.rs:105:25\n    |\n105 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this s"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut rows\
    \ = lst.len();\n        let mut cols = lst[0].len();\n        let mut coords =\
    \ vec![];\n        let mut row_coords = vec![];\n        let mut col_coords =\
    \ vec![];\n        let mut row_sort = vec![];\n        let mut col_sort = vec![];\n\
    \        let mut row_sort_idx = vec![];\n        let mut col_sort_idx = vec![];\n\
    \        let mut row_sort_idx2 = vec![];\n        let mut col_sort_idx2 = vec![];\n\
    \        let mut row_sort_idx3 = vec![];\n        let mut col_sort_idx3 = vec![];\n\
    \        let mut row_sort_idx4 = vec![];\n        let mut col_sort_idx4 = vec![];\n\
    \        let mut row_sort_idx5 = vec![];\n        let mut col_sort_idx5 = vec![];\n\
    \        let mut row_sort_idx6 = vec![];\n        let mut col_sort_idx6 = vec![];\n\
    \        let mut row_sort_idx7 = vec![];\n        let mut col_sort_idx7 = vec![];\n\
    \        let mut row_sort_idx8 = vec![];\n        let mut col_sort_idx8 = vec![];\n\
    \        let mut row_sort_idx9 = vec![];\n        let mut col_sort_idx9 = vec![];\n\
    \        let mut row_sort_idx10 = vec![];\n        let mut col_sort_idx10 = vec![];\n\
    \        let mut row_sort_idx11 = vec![];\n        let mut col_sort_idx11 = vec![];\n\
    \        let mut row_sort_idx12 = vec![];\n        let mut col_sort_idx12 = vec![];\n\
    \        let mut row_sort_idx13 = vec![];\n        let mut col_sort_idx13 = vec![];\n\
    \        let mut row_sort_idx14 = vec![];\n        let mut col_sort_idx14 = vec![];\n\
    \        let mut row_sort_idx15 = vec![];\n        let mut col_sort_idx15 = vec![];\n\
    \        let mut row_sort_idx16 = vec![];\n        let mut col_sort_idx16 = vec![];\n\
    \        let mut row_sort_idx17 = vec![];\n        let mut col_sort_idx17 = vec![];\n\
    \        let mut row_sort_idx18 = vec![];\n        let mut col_sort_idx18 = vec![];\n\
    \        let mut row_sort_idx19 = vec![];\n        let mut col_sort_idx19 = vec![];\n\
    \        let \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3_c5wffy.rs:76:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - this delimiter\
    \ might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n76 | }\n   |   ^\n\nerror: expected pattern,\
    \ found `}`\n  --> /tmp/tmp3_c5wffy.rs:66:1\n   |\n66 | }\n   | ^ expected pattern\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3_c5wffy.rs:70:17\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_c5wffy.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_c5wffy.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3_c5wffy.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3_c5wffy.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3_c5wffy.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3_c5wffy.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3_c5wffy.rs:73:25\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in t"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n\
    \        let mut row_result = Vec::<(isize, isize)>::new();\n        for (i, val)\
    \ in row.iter().enumerate() {\n            if i == x {\n                row_result.push((i,\
    \ val));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb_09gmez.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb_09gmez.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb_09gmez.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb_09gmez.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb_09gmez.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb_09gmez.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb_09gmez.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb_09gmez.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb_09gmez.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb_09gmez.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb_09gmez.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        col_len =\
    \ row.len();\n        if row_idx >= row_len {\n            break;\n        }\n\
    \        if col_idx >= col_len {\n            break;\n        }\n        if row[x]\
    \ < col[col_idx] {\n            break;\n        }\n        row.swap(0, col_idx);\n\
    \        row_idx += 1;\n        col_idx += 1;\n    }\n    row\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `col` in this scope\n  --> /tmp/tmpztugu07z.rs:31:21\n\
    \   |\n31 |         if row[x] < col[col_idx] {\n   |                     ^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpztugu07z.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpztugu07z.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpztugu07z.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpztugu07z.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpztugu07z.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpztugu07z.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpztugu07z.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpztugu07z.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpztugu07z.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpztugu07z.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_idx = 0;\n        while col_idx < col_len {\n\
    \            if row_idx == row_idx {\n                if lst[row_idx][col_idx]\
    \ == x {\n                    row.push((row_idx, col_idx));\n                }\n\
    \            }\n            col_idx += 1;\n        }\n        row_idx += 1;\n\
    \        col_idx = 0;\n        row_len = lst.len();\n        col_len = lst[0].len();\n\
    \    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n\
    \    row.sort_by_key(|&(x, y)| x.1 > y.1);\n    row.iter().map(|&(x, y)| vec![(x.0,\
    \ y.0)]).collect()\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp970b6kp0.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp970b6kp0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp970b6kp0.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp970b6kp0.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp970b6kp0.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp970b6kp0.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp970b6kp0.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp970b6kp0.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp970b6kp0.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp970b6kp0.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp970b6kp0.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max2\
    \ = 0;\n    let mut col_min2 = 0;\n    let mut col_max3 = 0;\n    let mut col_min3\
    \ = 0;\n    let mut col_max4 = 0;\n    let mut col_min4 = 0;\n    let mut col_max5\
    \ = 0;\n    let mut col_min5 = 0;\n    let mut col_max6 = 0;\n    let mut col_min6\
    \ = 0;\n    let mut col_max7 = 0;\n    let mut col_min7 = 0;\n    let mut col_max8\
    \ = 0;\n    let mut col_min8 = 0;\n    let mut col_max9 = 0;\n    let mut col_min9\
    \ = 0;\n    let mut col_max10 = 0;\n    let mut col_min10 = 0;\n    let mut col_max11\
    \ = 0;\n    let mut col_min11 = 0;\n    let mut col_max12 = 0;\n    let mut col_min12\
    \ = 0;\n    let mut col_max13 = 0;\n    let mut col_min13 = 0;\n    let mut col_max14\
    \ = 0;\n    let mut col_min14 = 0;\n    let mut col_max15 = 0;\n    let mut col_min15\
    \ = 0;\n    let mut col_max16 = 0;\n    let mut col_min16 = 0;\n    let mut col_max17\
    \ = 0;\n    let mut col_min17 = 0;\n    let mut col_max18 = 0;\n    let mut col_min18\
    \ = 0;\n    let mut col_max19 = 0;\n    let mut col_min19 = 0;\n    let mut col_max20\
    \ = 0;\n    let mut col_min20 = 0;\n    let mut col_max21 = 0;\n    let mut col_min21\
    \ = 0;\n    let mut col_max22 = 0;\n    let mut col_min22 = 0;\n    let mut col_max23\
    \ = 0;\n    let mut col_min23 = 0;\n    let mut col_max24 = 0;\n    let mut col_min24\
    \ = 0;\n    let mut col_max25 = 0;\n    let mut col_min25 = 0;\n    let mut col_max26\
    \ = 0;\n    let mut col_min26 = 0;\n    let mut col_max27 = 0;\n    let mut col_min27\
    \ = 0;\n    let mut col_max28 = 0;\n    let mut col_min28 = 0;\n    let mut col_max29\
    \ = 0;\n    let mut col_min29 = 0;\n    let mut col_max30 = 0;\n\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1bryr5ew.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1bryr5ew.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1bryr5ew.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1bryr5ew.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1bryr5ew.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1bryr5ew.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1bryr5ew.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1bryr5ew.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1bryr5ew.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1bryr5ew.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1bryr5ew.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    let mut row_idx =\
    \ 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut col_start =\
    \ 0;\n    let mut row_end = row_len;\n    let mut col_end = col_len;\n    let\
    \ mut row_mid = row_len;\n    let mut col_mid = col_len;\n    while row_idx <\
    \ row_len {\n        let mut row_end = row_len;\n        let mut col_end = col_len;\n\
    \        let mut row_mid = row_len;\n        let mut col_mid = col_len;\n    \
    \    while row_idx < row_len && col_idx < col_len {\n            if row_idx <\
    \ row_mid {\n                row_end = row_mid;\n                row_mid = row_idx;\n\
    \            }\n            if col_idx < col_mid {\n                col_end =\
    \ col_mid;\n                col_mid = col_idx;\n            }\n            if\
    \ row_idx == row_mid && col_idx == col_mid {\n                break;\n       \
    \     }\n            row_idx += 1;\n            col_idx += 1;\n        }\n   \
    \     if row_idx < row_mid {\n            row_end = row_mid;\n        }\n    \
    \    if col_idx < col_mid {\n            col_end = col_mid;\n        }\n     \
    \   let row = row_start..row_end;\n        let col = col_start..col_end;\n   \
    \     result.extend(row.iter().cloned().zip(col.iter().cloned()).collect::<Vec<_>>());\n\
    \        row_start = row_mid;\n        col_start = col_mid;\n        row_mid -=\
    \ 1;\n        col_mid -= 1;\n    }\n    result.sort();\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplukj73qb.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplukj73qb.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplukj73qb.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplukj73qb.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplukj73qb.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplukj73qb.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplukj73qb.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplukj73qb.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplukj73qb.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplukj73qb.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplukj73qb.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut result = Vec::<(isize, isize)>::new();\n    let mut row_idx = 1;\n    let\
    \ mut col_idx = 1;\n    let mut row_max = rows - 1;\n    let mut col_max = cols\
    \ - 1;\n    let mut row_min = row_max - 1;\n    let mut col_min = col_max - 1;\n\
    \    while row_idx < rows && col_idx < cols {\n        if row_idx < row_max &&\
    \ col_idx < col_max {\n            if lst[row_idx][col_idx] == x {\n         \
    \       result.push((row_idx, col_idx));\n                row_idx++;\n       \
    \         col_idx++;\n            } else if row_idx < row_max {\n            \
    \    row_idx++;\n            } else {\n                col_idx++;\n          \
    \  }\n        } else if row_idx < row_max {\n            row_idx++;\n        \
    \    row_max = row_max - 1;\n            row_min = row_min - 1;\n        } else\
    \ {\n            col_idx++;\n            col_max = col_max - 1;\n            col_min\
    \ = col_min - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpr2ci50ti.rs:30:25\n\
    \   |\n30 |                 row_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpr2ci50ti.rs:33:25\n\
    \   |\n33 |                 row_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpr2ci50ti.rs:35:25\n\
    \   |\n35 |                 col_idx++;\n   |                         ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpr2ci50ti.rs:38:21\n\
    \   |\n38 |             row_idx++;\n   |                     ^ expected expression\n\
    \nerror: expected expression, found `+`\n  --> /tmp/tmpr2ci50ti.rs:42:21\n   |\n\
    42 |             col_idx++;\n   |                     ^ expected expression\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr2ci50ti.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr2ci50ti.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr2ci50ti.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr2ci50ti.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr2ci50ti.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr2ci50ti.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr2ci50ti.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found i"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = lst.len();\n    let mut col_len_idx_min\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = lst.len();\n\
    \    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:77:17\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_wkt7wt.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3_wkt7wt.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3_wkt7wt.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_wkt7wt.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_wkt7wt.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = Vec::new();\n    for row in lst {\n        let mut coord\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                coord.push((row.len() - 1, col.len() - 1));\n            }\n\
    \        }\n        coords.insert(0, coord);\n    }\n    coords.sort_by_key(|coord|\
    \ coord[0]);\n    coords.sort_by_key(|coord| coord[1]).reverse();\n    coords\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqqy1mk4m.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqqy1mk4m.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqqy1mk4m.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqqy1mk4m.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqqy1mk4m.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row\
    \ = vec![];\n        for y in lst.iter().rev() {\n            if y.len() == x\
    \ {\n                row.push((y.iter().rev().next().unwrap(), 0));\n        \
    \    }\n        }\n        row.sort_by(|a, b| a.1.cmp(&b.1));\n        row.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n        row\n    }\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg05xbj5b.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg05xbj5b.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg05xbj5b.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg05xbj5b.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg05xbj5b.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg05xbj5b.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg05xbj5b.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg05xbj5b.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg05xbj5b.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg05xbj5b.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg05xbj5b.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst\
    \ {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n        rows.push(row.clone());\n\
    \    }\n    sort_rows(&mut rows);\n    sort_cols(&mut cols);\n    let mut result\
    \ = vec![];\n    for row in rows {\n        let mut col = cols[row.iter().cloned().collect::<Vec<_>>().len()].clone();\n\
    \        let mut found = false;\n        for row in col {\n            if *row\
    \ == x {\n                found = true;\n                break;\n            }\n\
    \        }\n        if found {\n            result.push((row.clone(), col.clone()));\n\
    \        }\n    }\n    result.sort_by(|a, b| b.1.iter().cmp(&a.1.iter()));\n \
    \   result.sort_by(|a, b| b.0.iter().cmp(&a.0.iter()));\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_rows` in this scope\n  --> /tmp/tmpk7kx80rf.rs:23:5\n\
    \   |\n23 |     sort_rows(&mut rows);\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sort_cols` in this scope\n  --> /tmp/tmpk7kx80rf.rs:24:5\n\
    \   |\n24 |     sort_cols(&mut cols);\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7kx80rf.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7kx80rf.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7kx80rf.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7kx80rf.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7kx80rf.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7kx80rf.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7kx80rf.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7kx80rf.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7kx80rf.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord\
    \ = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < rows {\n        while j < cols {\n        \
    \    if lst[i][j] == x {\n                row_coord.push((i, j));\n          \
    \      col_coord.push((i, j));\n                coords.push((i, j));\n       \
    \         i += 1;\n                j += 1;\n            } else {\n           \
    \     j += 1;\n            }\n        }\n        i += 1;\n        j = 0;\n   \
    \ }\n    row_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    col_coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    row_coords.reverse();\n\
    \    col_coords.reverse();\n    coords.reverse();\n    coords.iter().map(|&(x,\
    \ y)| {\n        (row_coords.iter().find(|&(_, y)| y == y).unwrap().0, col_coords.iter().find(|&(_,\
    \ y)| y == y).unwrap().0)\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjwd5ad1u.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjwd5ad1u.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjwd5ad1u.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjwd5ad1u.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjwd5ad1u.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row, col));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmod1bk6y.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmod1bk6y.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmod1bk6y.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmod1bk6y.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmod1bk6y.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmod1bk6y.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmod1bk6y.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmod1bk6y.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmod1bk6y.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmod1bk6y.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmod1bk6y.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row\
    \ = vec![];\n        for el in lst {\n            let mut col = vec![];\n    \
    \        for el2 in el {\n                if el2 == x {\n                    col.push((el.len(),\
    \ el2.len()));\n                }\n            }\n            row.push(col);\n\
    \        }\n        row.sort_by_key(|el| el.iter().cloned().collect::<Vec<_>>());\n\
    \        row.sort_by_key(|el| el.iter().rev().collect::<Vec<_>>());\n        row\n\
    \    }\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv1lx8nnu.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv1lx8nnu.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv1lx8nnu.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv1lx8nnu.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv1lx8nnu.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let\
    \ mut col_min_idx = 0;\n    let mut row_max = lst.len();\n    let mut row_min\
    \ = lst.len();\n    let mut col_max = lst.len();\n    let mut col_min = lst.len();\n\
    \    let mut row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n\
    \    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max\
    \ = lst.len();\n    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n\
    \    let mut col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max\
    \ = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut row_max = lst.len();\n    let mut row_min = lst.len();\n \
    \   let mut col_max = lst.len();\n    let mut col_min = lst.len();\n    let mut\
    \ row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut\
    \ col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = lst.len();\n\
    \    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n    let mut\
    \ col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n \
    \   let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut row_max = lst.len();\n    let mut row_min = lst.len();\n \
    \   let mut col_max = lst.len();\n    let mut col_min = lst.len();\n    let mut\
    \ row_idx = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut\
    \ col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut row_max = lst.len();\n\
    \    let mut row_min = lst.len();\n    let mut col_max = lst.len();\n    let mut\
    \ col_min = lst.len();\n    let mut row_idx = 0;\n    let mut col_max = 0;\n \
    \   let mu\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbuwj2n97.rs:76:11\n   |\n\
    76 |     let mu\n   |           ^ help: add `;` here\n77 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbuwj2n97.rs:81:17\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbuwj2n97.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbuwj2n97.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbuwj2n97.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbuwj2n97.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbuwj2n97.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbuwj2n97.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbuwj2n97.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbuwj2n97.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbuwj2n97.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    for row in lst {\n        let mut cols = row.len();\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols -= 1;\n        }\n        rows -= 1;\n\
    \    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphbng6b5_.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphbng6b5_.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphbng6b5_.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphbng6b5_.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphbng6b5_.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphbng6b5_.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphbng6b5_.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphbng6b5_.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphbng6b5_.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphbng6b5_.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphbng6b5_.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut col_idx2 = 0;\n    while row_idx < lst.len() {\n        let mut row_idx2\
    \ = 0;\n        while col_idx < lst[row_idx].len() {\n            let mut col_idx2\
    \ = 0;\n            while row_idx2 < lst.len() {\n                if col_idx2\
    \ < lst[row_idx2].len() {\n                    if lst[row_idx2][col_idx2] == x\
    \ {\n                        row.push((row_idx, col_idx));\n                 \
    \       row_idx2 += 1;\n                        col_idx2 += 1;\n             \
    \       } else {\n                        break;\n                    }\n    \
    \            } else {\n                    break;\n                }\n       \
    \     }\n            col_idx += 1;\n        }\n        row_idx += 1;\n    }\n\
    \    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n  \
    \  row.sort_by_key(|&(x, y)| x.1);\n    row.sort_by_key(|&(x, y)| y.1);\n    row\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3j4f9p8.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3j4f9p8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_3j4f9p8.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3j4f9p8.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3j4f9p8.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let\
    \ mut col_min_idx = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx2\
    \ = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let\
    \ mut col_max_idx4 = 0;\n    let mut col_min_idx4 = 0;\n    let mut col_max_idx5\
    \ = 0;\n    let mut col_min_idx5 = 0;\n    let mut col_max_idx6 = 0;\n    let\
    \ mut col_min_idx6 = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_min_idx7\
    \ = 0;\n    let mut col_max_idx8 = 0;\n    let mut col_min_idx8 = 0;\n    let\
    \ mut col_max_idx9 = 0;\n    let mut col_min_idx9 = 0;\n    let mut col_max_idx10\
    \ = 0;\n    let mut col_min_idx10 = 0;\n    let mut col_max_idx11 = 0;\n    let\
    \ mut col_min_idx11 = 0;\n    let mut col_max_idx12 = 0;\n    let mut col_min_idx12\
    \ = 0;\n    let mut col_max_idx13 = 0;\n    let mut col_min_idx13 = 0;\n    let\
    \ mut col_max_idx14 = 0;\n    let mut col_min_idx14 = 0;\n    let mut col_max_idx15\
    \ = 0;\n    let mut col_min_idx15 = 0;\n    let mut col_max_idx16 = 0;\n    let\
    \ mut col_min_idx16 = 0;\n    let mut col_max_idx17 = 0;\n    let mut col_min_idx17\
    \ = 0;\n    let mut col_max_idx18 = 0;\n    let mut col_min_idx18 = 0;\n    let\
    \ mut col_max_idx19 = 0;\n    let mut col_min_idx19 = 0;\n    let mut col_max_idx20\
    \ = 0;\n    let mut col_min_idx20 = 0;\n    let mut col_max_idx21 = 0;\n    let\
    \ mut col_min_idx21 = 0;\n    let mut col_max_idx22 = 0;\n    let mut col_min_idx22\
    \ = 0;\n    let mut col_max_idx23 = 0;\n    let mut col_min_idx23 = 0;\n    let\
    \ mut col_max_idx24 = 0;\n    let mut col_min_idx24 = 0;\n    let mut col_max_idx25\
    \ = 0;\n    let mut col_min_idx25 = 0;\n    let mut col_max_idx26 = 0;\n    let\
    \ mut col_min_idx26 = 0;\n}\n\nfn main() {\n    let candidate = get_row;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6ax2m98r.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6ax2m98r.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6ax2m98r.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6ax2m98r.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ax2m98r.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ax2m98r.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6ax2m98r.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6ax2m98r.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6ax2m98r.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6ax2m98r.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6ax2m98r.rs:84:17\n   |\n84 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ row_idx_sum = 0;\n    let mut row_idx_sum2 = 0;\n    let mut row_idx_sum3 =\
    \ 0;\n    let mut row_idx_sum4 = 0;\n    let mut row_idx_sum5 = 0;\n    let mut\
    \ row_idx_sum6 = 0;\n    let mut row_idx_sum7 = 0;\n    let mut row_idx_sum8 =\
    \ 0;\n    let mut row_idx_sum9 = 0;\n    let mut row_idx_sum10 = 0;\n    let mut\
    \ row_idx_sum11 = 0;\n    let mut row_idx_sum12 = 0;\n    let mut row_idx_sum13\
    \ = 0;\n    let mut row_idx_sum14 = 0;\n    let mut row_idx_sum15 = 0;\n    let\
    \ mut row_idx_sum16 = 0;\n    let mut row_idx_sum17 = 0;\n    let mut row_idx_sum18\
    \ = 0;\n    let mut row_idx_sum19 = 0;\n    let mut row_idx_sum20 = 0;\n    let\
    \ mut row_idx_sum21 = 0;\n    let mut row_idx_sum22 = 0;\n    let mut row_idx_sum23\
    \ = 0;\n    let mut row_idx_sum24 = 0;\n    let mut row_idx_sum25 = 0;\n    let\
    \ mut row_idx_sum26 = 0;\n    let mut row_idx_sum27 = 0;\n    let mut row_idx_sum28\
    \ = 0;\n    let mut row_idx_sum29 = 0;\n    let mut row_idx_sum30 = 0;\n    let\
    \ mut row_idx_sum31 = 0;\n    let mut row_idx_sum32 = 0;\n    let mut row_idx_sum33\
    \ = 0;\n    let mut row_idx_sum34 = 0;\n    let mut row_idx_sum35 = 0;\n    let\
    \ mut row_idx_sum36 = 0;\n    let mut row_idx_sum37 = 0;\n    let mut row_idx_sum38\
    \ = 0;\n    let mut row_idx_sum39 = 0;\n    let mut row_idx_sum40 = 0;\n    let\
    \ mut row_idx_sum41 = 0;\n    let mut row_idx_sum42 = 0;\n    let mut row_idx_sum43\
    \ = 0;\n    let mut row_idx_sum44 = 0;\n    let mut row_idx_sum45 = 0;\n    let\
    \ mut row_idx_sum46 = 0;\n    let mut row_idx_sum47 = 0;\n    let mut row_idx_sum48\
    \ = 0;\n    let mut row_idx_sum49 = 0;\n    let mut row_idx_sum50 = 0;\n    let\
    \ mut row_idx_sum51 = 0;\n    let mut row_idx_sum52 = 0;\n    let mut row_idx_sum53\
    \ = 0;\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl1xqtq35.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl1xqtq35.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl1xqtq35.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl1xqtq35.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl1xqtq35.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl1xqtq35.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl1xqtq35.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl1xqtq35.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl1xqtq35.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl1xqtq35.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl1xqtq35.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_\n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy9uovqpc.rs:68:22\n   |\n\
    68 |     let mut row_sort_\n   |                      ^ help: add `;` here\n69\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpy9uovqpc.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy9uovqpc.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy9uovqpc.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy9uovqpc.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy9uovqpc.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy9uovqpc.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy9uovqpc.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy9uovqpc.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy9uovqpc.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy9uovqpc.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `l"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        while col < cols {\n            if lst[row][col] == x\
    \ {\n                coords.push((row, col));\n                break;\n      \
    \      }\n            col += 1;\n        }\n        row += 1;\n        col = 0;\n\
    \    }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x, y)|\
    \ y.0);\n    coords.reverse();\n    coords\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdf303vrd.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdf303vrd.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdf303vrd.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdf303vrd.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdf303vrd.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdf303vrd.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdf303vrd.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdf303vrd.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdf303vrd.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdf303vrd.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdf303vrd.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut lst = lst.clone();\n    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n\
    \    let mut col_idx2 = 0;\n    while row_idx < lst.len() {\n        let mut row_idx2\
    \ = 0;\n        while col_idx < lst[row_idx].len() {\n            let mut col_idx2\
    \ = 0;\n            while row_idx2 < lst.len() {\n                if row_idx2\
    \ == row_idx {\n                    let mut row_idx2 = 0;\n                  \
    \  while col_idx2 < lst[row_idx2].len() {\n                        if col_idx2\
    \ == col_idx {\n                            row.push((row_idx, col_idx));\n  \
    \                          break;\n                        }\n               \
    \         col_idx2 += 1;\n                    }\n                    break;\n\
    \                }\n                row_idx2 += 1;\n            }\n          \
    \  col_idx += 1;\n        }\n        row_idx += 1;\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)|\
    \ x.1 > y.1);\n    row.sort_by_key(|&(x, y)| x.1 < y.1);\n    row\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpizwau6rf.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpizwau6rf.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpizwau6rf.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpizwau6rf.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpizwau6rf.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpizwau6rf.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpizwau6rf.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpizwau6rf.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpizwau6rf.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpizwau6rf.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpizwau6rf.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9aq8ru8g.rs:68:20\n   |\n\
    68 |     let mut row_sor\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9aq8ru8g.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9aq8ru8g.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9aq8ru8g.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut col_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut col_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut col_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut col_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut col_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut col_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut col_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut col_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut col_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut col_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut col_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut col_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut col_idx31 = 0;\n    let mut row_idx32 = 0;\n\n}\n\nfn main()\
    \ {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9j32__mc.rs:86:17\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9j32__mc.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9j32__mc.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9j32__mc.rs:87:25\n\
    \   |\n87 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9j32__mc.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9j32__mc.rs:88:25\n   |\n88 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9j32__mc.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9j32__mc.rs:89:25\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9j32__mc.rs:90:17\n  \
    \ |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9j32__mc.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9j32__mc.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row:\
    \ Vec<(isize, isize)> = vec![];\n        let mut row_idx = 0;\n        let mut\
    \ row_idx_max = 0;\n        for row in lst {\n            let mut row_idx = 0;\n\
    \            let mut row_idx_max = 0;\n            for col in row {\n        \
    \        if col == x {\n                    row_idx += 1;\n                }\n\
    \                if row_idx > row_idx_max {\n                    row_idx_max =\
    \ row_idx;\n                }\n            }\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.1);\n            row.sort_by_key(|&x|\
    \ x.0);\n            row.sort_by_key(|&x| x.\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8msy5_js.rs:78:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - unclosed delimiter\n\
    ...\n23 |         for row in lst {\n   |                        - this delimiter\
    \ might not be properly closed...\n...\n68 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n78 | }\n   |   ^\n\nerror: mismatched closing\
    \ delimiter: `}`\n  --> /tmp/tmp8msy5_js.rs:67:28\n   |\n16 | fn get_row(lst:\
    \ Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n   |                  \
    \                                                 - closing delimiter possibly\
    \ meant for this\n...\n67 |             row.sort_by_key(|&x| x.\n   |        \
    \                    ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: unexpected token: `)`\n  --> /tmp/tmp8msy5_js.rs:68:1\n   |\n68 | }\n\
    \   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8msy5_js.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8msy5_js.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8msy5_js.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8msy5_js.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8msy5_js.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8msy5_js.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   "
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = lst.len();\n    let mut col_len = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut row_len_idx_max = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut\
    \ row_len_idx_min_max = 0;\n}\n\nfn main() {\n    let candidate = get_row;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpubdtapfk.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpubdtapfk.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpubdtapfk.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpubdtapfk.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpubdtapfk.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpubdtapfk.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpubdtapfk.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpubdtapfk.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpubdtapfk.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpubdtapfk.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpubdtapfk.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::<(isize, isize)>::new();\n    for row in lst {\n\
    \        let mut row_result = Vec::<(isize, isize)>::new();\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|&(_, y)| y.0);\n    result.sort_by_key(|&(_, y)| y.1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp875x4jlm.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp875x4jlm.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp875x4jlm.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp875x4jlm.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp875x4jlm.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp875x4jlm.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp875x4jlm.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp875x4jlm.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp875x4jlm.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp875x4jlm.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp875x4jlm.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut\
    \ col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted\
    \ = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord =\
    \ Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted =\
    \ Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n\
    \    let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n\
    \    let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n  \
    \  let mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n  \
    \  let mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let\
    \ mut row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let\
    \ mut row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_coord = Vec::new();\n    let mut col_coord = Vec::new();\n    let mut row_sorted\
    \ = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut row_coord =\
    \ Vec::new();\n    let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n \
    \   let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n  \
    \  let mut col_sorted = Vec::new();\n    let mut row_coord = Vec::new();\n   \
    \ let mut col_coord = Vec::new();\n    let mut row_sorted = Vec::new();\n    let\
    \ mut col_sorted = Vec::new();\n\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:69:17\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4l2d9ka3.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4l2d9ka3.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4l2d9ka3.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4l2d9ka3.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4l2d9ka3.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        while col < cols {\n            if lst[row][col] == x\
    \ {\n                coords.push((row, col));\n                break;\n      \
    \      }\n            col += 1;\n        }\n        row += 1;\n        col = 0;\n\
    \    }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x, y)|\
    \ y.0);\n    coords.reverse();\n    coords\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq3pnjt8t.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq3pnjt8t.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq3pnjt8t.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq3pnjt8t.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq3pnjt8t.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for cell in row {\n            if cell == x {\n     \
    \           row_result.push((row, cell));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a,\
    \ b| b.1.cmp(&a.1));\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp67r17dxi.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp67r17dxi.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp67r17dxi.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp67r17dxi.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp67r17dxi.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp67r17dxi.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp67r17dxi.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp67r17dxi.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp67r17dxi.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp67r17dxi.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp67r17dxi.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n\
    \        let mut col_max = 0;\n        let mut col_min = 0;\n        for col in\
    \ row {\n            if col > col_max {\n                col_max = col;\n    \
    \        }\n            if col < col_min {\n                col_min = col;\n \
    \           }\n        }\n        if col_max > col_min {\n            row.push((row_idx,\
    \ col_max));\n            row_idx += 1;\n        }\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)|\
    \ x.1 > y.1);\n    row.iter().map(|&(x, y)| x.1).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdo7wjc4p.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdo7wjc4p.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdo7wjc4p.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdo7wjc4p.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdo7wjc4p.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    for row in lst {\n        let mut cols = row.len();\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols -= 1;\n        }\n        rows -= 1;\n\
    \    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_xzo8ny.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3_xzo8ny.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3_xzo8ny.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3_xzo8ny.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3_xzo8ny.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n \
    \   while row_idx < rows && col_idx < cols {\n        if row_idx < rows {\n  \
    \          let row_start = row_idx;\n            let row_end = row_idx + 1;\n\
    \            while row_end < rows && lst[row_end][col_idx] == x {\n          \
    \      row_end += 1;\n            }\n            let row_end = row_end == rows\
    \ ? rows : row_end;\n            for row_idx in row_start..row_end {\n       \
    \         result.push((row_idx, col_idx));\n            }\n        }\n       \
    \ if col_idx < cols {\n            let col_start = col_idx;\n            let col_end\
    \ = col_idx + 1;\n            while col_end < cols && lst[row_idx][col_end] ==\
    \ x {\n                col_end += 1;\n            }\n            let col_end =\
    \ col_end == cols ? cols : col_end;\n            for col_idx in col_start..col_end\
    \ {\n                result.push((row_idx, col_idx));\n            }\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `rows`\n\
    \  --> /tmp/tmppx5n7nsf.rs:29:45\n   |\n29 |             let row_end = row_end\
    \ == rows ? rows : row_end;\n   |                                            \
    \ ^^^^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `cols`\n  --> /tmp/tmppx5n7nsf.rs:40:45\n\
    \   |\n40 |             let col_end = col_end == cols ? cols : col_end;\n   |\
    \                                             ^^^^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppx5n7nsf.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppx5n7nsf.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppx5n7nsf.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppx5n7nsf.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppx5n7nsf.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppx5n7nsf.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppx5n7nsf.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppx5n7nsf.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerro"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    let mut col_min = 0;\n    for row in lst {\n  \
    \      let mut col_max = 0;\n        let mut col_min = 0;\n        for col in\
    \ row {\n            if col > col_max {\n                col_max = col;\n    \
    \        }\n            if col < col_min {\n                col_min = col;\n \
    \           }\n        }\n        if col_min == col_max {\n            row_idx\
    \ += 1;\n        }\n        if row_idx > 0 {\n            let mut row_max = row_idx;\n\
    \            let mut row_min = row_idx;\n            for col in row {\n      \
    \          if col > row_max {\n                    row_max = col;\n          \
    \      }\n                if col < row_min {\n                    row_min = col;\n\
    \                }\n            }\n            if row_min == row_max {\n     \
    \           col_max += 1;\n            }\n        }\n        row.push((row_idx,\
    \ col_max));\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.iter().map(|&(x, y)| x.1).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3d63s5jg.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3d63s5jg.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3d63s5jg.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3d63s5jg.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3d63s5jg.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3d63s5jg.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3d63s5jg.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3d63s5jg.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3d63s5jg.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3d63s5jg.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3d63s5jg.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_max = lst[0].len();\n    let mut col_min = col_max - 1;\n   \
    \ let mut col_sum = 0;\n    let mut row_sum = 0;\n    let mut row_idx = 0;\n \
    \   for row in lst {\n        let mut col_sum = 0;\n        let mut row_sum =\
    \ 0;\n        let mut col_max = 0;\n        let mut col_min = 0;\n        let\
    \ mut row_idx = 0;\n        for col in row {\n            if col == x {\n    \
    \            row_idx += 1;\n                col_sum += 1;\n                if\
    \ col_sum > col_max {\n                    col_max = col_sum;\n              \
    \  }\n                if col_sum < col_min {\n                    col_min = col_sum;\n\
    \                }\n            }\n        }\n        row_sum += row_idx;\n  \
    \      if row_sum > row_max {\n            row_max = row_sum;\n        }\n   \
    \     if row_sum < row_min {\n            row_min = row_sum;\n        }\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n\
    \        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n    \
    \    row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n\
    \        row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n    \
    \    row.sort_by_key(|&x| x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|\n}\n\n\
    fn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7lvu2g44.rs:85:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n24 |     for row in lst {\n   |                   \
    \ - this delimiter might not be properly closed...\n...\n75 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n85 | }\n   |   ^\n\n\
    error: mismatched closing delimiter: `}`\n  --> /tmp/tmp7lvu2g44.rs:74:24\n  \
    \ |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n\
    \   |                                                                   - closing\
    \ delimiter possibly meant for this\n...\n74 |         row.sort_by_key(|\n   |\
    \                        ^ unclosed delimiter\n75 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: expected `|`, found `)`\n  --> /tmp/tmp7lvu2g44.rs:75:1\n\
    \   |\n74 |         row.sort_by_key(|\n   |                          - expected\
    \ `|`\n75 | }\n   | ^ unexpected token\n\nerror[E0425]: cannot find value `row_max`\
    \ in this scope\n  --> /tmp/tmp7lvu2g44.rs:43:22\n   |\n43 |         if row_sum\
    \ > row_max {\n   |                      ^^^^^^^ help: a local variable with a\
    \ similar name exists: `col_max`\n\nerror[E0425]: cannot find value `row_max`\
    \ in this scope\n  --> /tmp/tmp7lvu2g44.rs:44:13\n   |\n44 |             row_max\
    \ = row_sum;\n   |             ^^^^^^^ help: a local variable with a similar name\
    \ exists: `col_max`\n\nerror[E0425]: cannot find value `row_min` in this scope\n\
    \  --> /tmp/tmp7lvu2g44.rs:46:22\n   |\n46 |         if row_sum < row_min {\n\
    \   |                      ^^^^^^^ help: a local variable with a similar name\
    \ exists: `col_min`\n\nerror[E0425]: cannot find value `row_min` in this scope\n\
    \  --> /tmp/tmp7lvu2g44.rs:47:13\n   |\n47 |             row_min = row_sum;\n\
    \   |             ^^^^^^^ help: a local variable with a similar name exists: `col_min`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7lvu2g44.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut\
    \ row_idx_max_col = 0;\n    let mut row_idx_min_col = 0;\n    let mut row_idx_max_row\
    \ = 0;\n    let mut row_idx_min_row = 0;\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    let mut col_max_row = 0;\n    let mut col_min_row = 0;\n \
    \   let mut col_max_col = 0;\n    let mut col_min_col = 0;\n    let mut col_max_idx\
    \ = 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx2 = 0;\n    let mut\
    \ col_min_idx2 = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx2_max = 0;\n\
    \    let mut row_idx2_min = 0;\n    let mut row_idx2_max_col = 0;\n    let mut\
    \ row_idx2_min_col = 0;\n    let mut row_idx2_max_row = 0;\n    let mut row_idx2_min_row\
    \ = 0;\n    let mut col_max2 = 0;\n    let mut col_min2 = 0;\n    let mut col_max_row2\
    \ = 0;\n    let mut col_min_row2 = 0;\n    let mut col_max_col2 = 0;\n    let\
    \ mut col_min_col2 = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx2\
    \ = 0;\n    let mut row_idx2_max2 = 0;\n    let mut row_idx2_min2 = 0;\n    let\
    \ mut row_idx2_max_col2 = 0;\n    let mut row_idx2_min_col2 = 0;\n    let mut\
    \ row_idx2_max_row2 = 0;\n    let mut row_idx2_min_row2 = 0;\n    let mut col_max3\
    \ = 0;\n    let mut col_min3 = 0;\n    let mut col_max_row3 = 0;\n    let mut\
    \ col_min_row3 = 0;\n    let mut col_max_col3 = 0;\n    let mut col_min_col3 =\
    \ 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let mut\
    \ row_idx2_max3 = 0;\n    let mut row_idx2_min3 = 0;\n    let mut row_idx2_max_col3\
    \ = 0;\n    let mut row_idx2_min_col3 = 0;\n    let mut row_idx2_max_row3 = 0;\n\
    \    let mut row_idx2_min_row3 = 0;\n    let mut col_max4 = 0;\n    let mut col_min4\
    \ = 0;\n    let mut col_max_row4 = 0;\n    let mut col_min_row4 = 0;\n    let\
    \ mut col_max_col4 = 0;\n    let mut col_min_col4 = 0;\n    let mut col_max_idx\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiag23hv9.rs:76:24\n   |\n\
    76 |     let mut col_max_idx\n   |                        ^ help: add `;` here\n\
    77 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiag23hv9.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiag23hv9.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiag23hv9.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiag23hv9.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiag23hv9.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiag23hv9.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiag23hv9.rs:84:17\n   |\n84 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiag23hv9.rs:84:25\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiag23hv9.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiag23hv9.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ rows;\n    let mut col_end = cols;\n    while row_idx < rows && col_idx < cols\
    \ {\n        if row_idx < rows && col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_start, col_idx));\n               \
    \ row_idx += 1;\n                col_idx += 1;\n            }\n            row_idx\
    \ += 1;\n            col_idx += 1;\n        }\n        if row_idx < rows {\n \
    \           row_start = row_idx;\n            row_end -= 1;\n        }\n     \
    \   if col_idx < cols {\n            col_start = col_idx;\n            col_end\
    \ -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpolgdp4ft.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpolgdp4ft.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpolgdp4ft.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpolgdp4ft.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpolgdp4ft.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpolgdp4ft.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpolgdp4ft.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpolgdp4ft.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpolgdp4ft.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpolgdp4ft.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpolgdp4ft.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let\
    \ mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n\
    \    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4jpy_l8h.rs:83:11\n   |\n\
    83 |     let mu\n   |           ^ help: add `;` here\n84 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:88:17\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4jpy_l8h.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:90:25\n   |\n90 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:91:25\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4jpy_l8h.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4jpy_l8h.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row = Vec::<(isize, isize)>::new();\n    let mut row_sorted =\
    \ Vec::<(isize, isize)>::new();\n    let mut col_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sort_reversed = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n\
    \    let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec::<(isize, isize)>::new();\n  \
    \  let mut col_sorted = Vec::<(isize, isize)>::new();\n    let mut col_sort_reversed\
    \ = Vec::<(isize, isize)>::new();\n    let mut row_sort_reversed = Vec::<(isize,\
    \ isize)>::new();\n    let mut row_sorted = Vec\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2lx3oxj7.rs:46:29\n   |\n\
    46 |     let mut row_sorted = Vec\n   |                             ^ help: add\
    \ `;` here\n47 | }\n   | - unexpected token\n\nerror[E0423]: expected value, found\
    \ struct `Vec`\n   --> /tmp/tmp2lx3oxj7.rs:46:26\n    |\n46  |       let mut row_sorted\
    \ = Vec\n    |                            ^^^ help: use struct literal syntax\
    \ instead: `Vec { buf: val, len: val }`\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp2lx3oxj7.rs:51:17\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2lx3oxj7.rs:51:25\n \
    \  |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2lx3oxj7.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2lx3oxj7.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2lx3oxj7.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2lx3oxj7.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2lx3oxj7.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2lx3oxj7.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2lx3oxj7.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows {\n        while col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        col_idx = 0;\n \
    \       row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsj864xk9.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsj864xk9.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsj864xk9.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsj864xk9.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsj864xk9.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsj864xk9.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsj864xk9.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsj864xk9.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsj864xk9.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsj864xk9.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsj864xk9.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    for row in lst {\n  \
    \      let mut row_sorted = vec![];\n        for col in row.iter().rev() {\n \
    \           row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n\
    \        }\n        row_sorted.sort_by_key(|&(_, count)| -count);\n        row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n        row_sorted.reverse();\n    }\n    let mut row_sorted\
    \ = vec![];\n    for col in row.iter().rev() {\n        row_sorted.push((col,\
    \ row.iter().filter(|&x| x == x).count()));\n    }\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.reverse();\n\
    \    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n       \
    \ row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n    }\n   \
    \ row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.reverse();\n    let mut row_sorted = vec![];\n\
    \    for col in row.iter().rev() {\n        row_sorted.push((col, row.iter().filter(|&x|\
    \ x == x).count()));\n    }\n    row_sorted.sort_by_key(|&(_, count)| -count);\n\
    \    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.reverse();\n\
    \    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n       \
    \ row_sorted.push((col, row.iter().filter(|&x| x == x).count()));\n    }\n   \
    \ row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.sort_by_key(|&(_,\
    \ count)| -count);\n    row_sorted.reverse();\n    let mut row_sorted = vec![];\n\
    \    for col in row.iter().rev() {\n        row_sorted.push((col, row.iter().filter(|&x|\
    \ x == x).count()));\n    }\n    row_sorted.sort_by_key(|&(_, count)| -count);\n\
    \    row_sorted.sort_by_key(|&(_, count)| -count);\n    row_sorted.reverse();\n\
    \    let mut row_sorted = vec![];\n    for col in row.iter().rev() {\n       \
    \ row_sorted.push((col, row.iter().\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpesirpxfm.rs:75:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n63 |     for col in row.iter().rev() {\n   |      \
    \                           - this delimiter might not be properly closed...\n\
    64 |         row_sorted.push((col, row.iter().\n65 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n75 | }\n   |   ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpesirpxfm.rs:64:25\n   |\n16 | fn get_row(lst:\
    \ Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n   |                  \
    \                                                 - closing delimiter possibly\
    \ meant for this\n...\n64 |         row_sorted.push((col, row.iter().\n   |  \
    \                       ^ unclosed delimiter\n65 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: unexpected token: `)`\n  --> /tmp/tmpesirpxfm.rs:65:1\n\
    \   |\n65 | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpesirpxfm.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpesirpxfm.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpesirpxfm.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpesirpxfm.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpesirpxfm.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpesirpxfm.rs:71:25\n   |\n71 |     assert_eq!({left}, {right})"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row\
    \ = row.clone();\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        for row in row.iter().rev() {\n            if row.1 == x {\n\
    \                result.push((row.0, row.1));\n                break;\n      \
    \      }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn1hpbqm2.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn1hpbqm2.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn1hpbqm2.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn1hpbqm2.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn1hpbqm2.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut col_max = lst[0].len();\n    for row\
    \ in lst {\n        let mut col_max = row.len();\n        if col_max > col_max\
    \ {\n            col_max = col_max;\n        }\n        if col_idx > col_max {\n\
    \            break;\n        }\n        if row[idx] == x {\n            row.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 0;\n        } else\
    \ {\n            col_idx += 1;\n        }\n    }\n    row.sort_by_key(|&(_, y)|\
    \ y.cmp(&x));\n    row.sort_by_key(|&(_, y)| {\n        y.cmp(&x.reverse())\n\
    \    });\n    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `idx` in this scope\n  --> /tmp/tmpqi95c6bg.rs:29:16\n\
    \   |\n29 |         if row[idx] == x {\n   |                ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqi95c6bg.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqi95c6bg.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqi95c6bg.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqi95c6bg.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqi95c6bg.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqi95c6bg.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqi95c6bg.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqi95c6bg.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqi95c6bg.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqi95c6bg.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left`"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_max = 0;\n    for row in lst {\n        let mut col_max = 0;\n\
    \        for col in row {\n            if col > col_max {\n                col_max\
    \ = col;\n            }\n        }\n        if col_max > x {\n            break;\n\
    \        }\n        row.push((row_idx, col_max));\n        row_idx += 1;\n   \
    \ }\n    row.sort_by_key(|&(_, y)| y.0);\n    row.sort_by_key(|&(_, y)| -y.1);\n\
    \    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpptkm0mt_.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpptkm0mt_.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptkm0mt_.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptkm0mt_.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptkm0mt_.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptkm0mt_.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpptkm0mt_.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpptkm0mt_.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpptkm0mt_.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpptkm0mt_.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptkm0mt_.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    for row in lst {\n        coords.push(row.iter().cloned().enumerate().map(|(i,\
    \ j)| (i, j)).collect());\n    }\n    coords.sort_by_key(|coord| coord.0);\n \
    \   coords.sort_by_key(|coord| coord.1, |a, b| b.cmp(a));\n    for coord in coords.iter().take(rows)\
    \ {\n        if coord.0 == x {\n            return coord.1.iter().cloned().enumerate().map(|(i,\
    \ j)| (i, j)).collect();\n        }\n    }\n    vec![]\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqqfkur_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqqfkur_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqqfkur_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqqfkur_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqqfkur_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqqfkur_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgqqfkur_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgqqfkur_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgqqfkur_.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqqfkur_.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqqfkur_.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut row_sort = Vec::new();\n    let mut col_sort\
    \ = Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted\
    \ = Vec::new();\n    let mut row_coord = Vec::new();\n    let mut col_coord =\
    \ Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n  \
    \  while i < rows {\n        row_sort.push(i);\n        row_coords.push((i, 0));\n\
    \        col_sort.push(j);\n        col_coords.push((j, 0));\n        i += 1;\n\
    \        j += 1;\n    }\n    while j < cols {\n        row_sort.push(j);\n   \
    \     row_coords.push((j, 0));\n        col_sort.push(i);\n        col_coords.push((i,\
    \ 0));\n        j += 1;\n    }\n    while i < rows {\n        while j < cols {\n\
    \            if row_sort[i] < row_sort[j] {\n                row_sorted.push(row_coords[i]);\n\
    \                row_sorted.push(row_coords[j]);\n                row_coords.swap(i,\
    \ j);\n                i += 1;\n                j += 1;\n            } else if\
    \ row_sort[i] > row_sort[j] {\n                row_sorted.push(row_coords[j]);\n\
    \                row_sorted.push(row_coords[i]);\n                row_coords.swap(i,\
    \ j);\n                i += 1;\n                j += 1;\n            } else {\n\
    \                row_sorted.push(row_coords[i]);\n                row_sorted.push(row_coords[j]);\n\
    \                row_coords.swap(i, j);\n                i += 1;\n           \
    \     j += 1;\n            }\n        }\n        j = 0;\n    }\n    while j <\
    \ cols {\n        while i < rows {\n            if col_sort[j] < col_sort[i] {\n\
    \                col_sorted.push(col_coords[j]);\n                col_sorted.push(col_coords[i]);\n\
    \                col_coords.swap(i, j);\n                i += 1;\n           \
    \     j += 1;\n            } else if col_sort[j] > col_sort[i] {\n           \
    \     col_sorted.push(col_coords[i]);\n                col_sorted.push(col_coords[j]);\n\
    \                col_coords.swap(i, j);\n                i += 1;\n           \
    \     j += 1;\n            } else {\n                col_sorted.push(col_coords[i]);\n\
    \                col_sorted.push(col_coords[j]);\n                col_coords.swap(i,\
    \ j);\n                i += 1;\n                j += \n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_2v07rwo.rs:100:3\n\
    \    |\n16  | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    |                                                                   -\
    \ unclosed delimiter\n...\n70  |     while j < cols {\n    |                 \
    \   - unclosed delimiter\n71  |         while i < rows {\n    |              \
    \          - unclosed delimiter\n...\n84  |             } else {\n    |      \
    \              - this delimiter might not be properly closed...\n...\n90  | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n100 | }\n\
    \    |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp_2v07rwo.rs:90:1\n\
    \   |\n90 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp_2v07rwo.rs:94:17\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp_2v07rwo.rs:94:25\n \
    \  |\n94 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_2v07rwo.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_2v07rwo.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_2v07rwo.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_2v07rwo.rs:96:25\n   |\n96 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_2v07rwo.rs:97:17\n  \
    \ |\n97 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` i"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    if lst.is_empty() {\n        vec![]\n    } else {\n        let mut row\
    \ = vec![];\n        let mut row_idx = 1;\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut row_len = lst.len();\n\
    \        let mut row_len = lst.len();\n        let mut \n}\n\nfn main() {\n  \
    \  let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0xxui7k8.rs:81:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n19 |     } else {\n   |            - this delimiter\
    \ might not be properly closed...\n...\n71 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n81 | }\n   |   ^\n\nerror: expected identifier,\
    \ found `}`\n  --> /tmp/tmp0xxui7k8.rs:71:1\n   |\n71 | }\n   | ^ expected identifier\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0xxui7k8.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xxui7k8.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xxui7k8.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0xxui7k8.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0xxui7k8.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xxui7k8.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0xxui7k8.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0xxui7k8.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    for row in lst {\n        let mut cols = row.len();\n\
    \        for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols -= 1;\n        }\n        rows -= 1;\n\
    \    }\n    coords.sort_by_key(|&(_, col)| col);\n    coords.sort_by_key(|&(_,\
    \ col)| -col);\n    coords\n}\n\nfn main() {\n    let candidate = get_row;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkx0xeuhf.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkx0xeuhf.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkx0xeuhf.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkx0xeuhf.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkx0xeuhf.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    for row in lst {\n        let mut row =\
    \ row.clone();\n        row.sort_by_key(|&x| x.0);\n        row.sort_by_key(|&x|\
    \ x.1);\n        for (i, &x) in row.iter().enumerate() {\n            if x ==\
    \ x {\n                result.push((i, x));\n            }\n        }\n    }\n\
    \    result.sort_by_key(|&(_, y)| y.1);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpws0plfnh.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpws0plfnh.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpws0plfnh.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpws0plfnh.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpws0plfnh.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpws0plfnh.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpws0plfnh.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpws0plfnh.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpws0plfnh.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpws0plfnh.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpws0plfnh.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx = 0;\n    let mut row_pos = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_pos = 0;\n    let mut col_pos_idx = 0;\n    let mut row_len_idx = 0;\n \
    \   let mut col_len_idx = 0;\n    let mut row_len = 0;\n    let mut col_len =\
    \ 0;\n    let mut row_idx = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut row_\n}\n\nfn main() {\n    let candidate = get_row;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpala8evgt.rs:84:17\n   |\n\
    84 |     let mut row_\n   |                 ^ help: add `;` here\n85 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpala8evgt.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpala8evgt.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpala8evgt.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpala8evgt.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpala8evgt.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpala8evgt.rs:91:25\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpala8evgt.rs:92:17\n   |\n92 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpala8evgt.rs:92:25\n\
    \   |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpala8evgt.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpala8evgt.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfg8h69k4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfg8h69k4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfg8h69k4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfg8h69k4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut row_\n}\n\nfn main() {\n    let\
    \ candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd_sw5tnh.rs:80:17\n   |\n\
    80 |     let mut row_\n   |                 ^ help: add `;` here\n81 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd_sw5tnh.rs:87:25\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:17\n   |\n88 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:88:25\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_sw5tnh.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_sw5tnh.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in th"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coord\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptc1pmmnu.rs:68:22\n   |\n\
    68 |     let mut row_coord\n   |                      ^ help: add `;` here\n69\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmptc1pmmnu.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptc1pmmnu.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptc1pmmnu.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptc1pmmnu.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptc1pmmnu.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptc1pmmnu.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `l"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    for row in lst {\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                coords.push((row, col));\n   \
    \         }\n        }\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n   \
    \ coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.reverse();\n    coords\n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_z3v5ur.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8_z3v5ur.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8_z3v5ur.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_z3v5ur.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_z3v5ur.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3:\
    \ Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut\
    \ row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n\
    \    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize>\
    \ = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10:\
    \ Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut\
    \ row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n\
    \    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize>\
    \ = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17:\
    \ Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut\
    \ row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n\
    \    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize>\
    \ = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24:\
    \ Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut\
    \ row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n\
    \    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize>\
    \ = vec![];\n    let mut row_idx30: \n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmp32fjlobh.rs:48:1\n   |\n\
    47 |     let mut row_idx30: \n   |         ------------- while parsing the type\
    \ for `mut row_idx30`\n48 | }\n   | ^ expected type\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:52:17\n   |\n52 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp32fjlobh.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp32fjlobh.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp32fjlobh.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp32fjlobh.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp32fjlobh.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34\
    \ = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37\
    \ = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40\
    \ = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43\
    \ = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46\
    \ = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49\
    \ = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52\
    \ = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55\
    \ = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58\
    \ = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61\
    \ = 0;\n    let mut row_idx62 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp71x4nqn4.rs:81:1\n\
    \   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp71x4nqn4.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp71x4nqn4.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp71x4nqn4.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp71x4nqn4.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp71x4nqn4.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp71x4nqn4.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp71x4nqn4.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp71x4nqn4.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp71x4nqn4.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp71x4nqn4.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp71x4nqn4.rs:90:17\n   |\n90 |     "
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_end = row_idx;\n        while row_end < row_len && row_idx\
    \ == row_end {\n            row_end++;\n        }\n        let mut col_end = col_idx;\n\
    \        while col_end < col_len && col_idx == col_end {\n            col_end++;\n\
    \        }\n        if row_end == row_idx {\n            result.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 1;\n        } else\
    \ {\n            if col_end == col_idx {\n                result.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                col_idx = 1;\n  \
    \          } else {\n                let mut row_end = row_idx;\n            \
    \    while row_end < row_len && row_idx == row_end {\n                    row_end++;\n\
    \                }\n                let mut col_end = col_idx;\n             \
    \   while col_end < col_len && col_idx == col_end {\n                    col_end++;\n\
    \                }\n                let mut row_start = row_idx;\n           \
    \     while row_start < row_len && row_idx == row_start {\n                  \
    \  row_start++;\n                }\n                let mut col_start = col_idx;\n\
    \                while col_start < col_len && col_idx == col_start {\n       \
    \             col_start++;\n                }\n                let mut row_end\
    \ = row_idx;\n                while row_end < row_len && row_idx == row_end {\n\
    \                    row_end++;\n                }\n                let mut col_end\
    \ = col_idx;\n                while col_end < col_len && col_idx == col_end {\n\
    \                    col_end++;\n                }\n                let mut row_start\
    \ = row_idx;\n                while row_start < row_len && row_idx == row_start\
    \ {\n                    row_start++;\n                }\n                let\
    \ mut col_start = col_idx;\n                while col_start < col_len && col_idx\
    \ == col_start {\n                    col_start++;\n                }\n      \
    \          let mut row_end = row_idx;\n                while row_end < row_len\
    \ && row_idx == row_end {\n                    row_end++;\n                }\n\
    \                let mut col_end = col_idx;\n                while col_end < col_len\
    \ && col_idx == col_end {\n                    col_end++;\n                }\n\
    \                let mut row_start = row_idx;\n                while row_start\
    \ < row_len && \n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcnvzosdk.rs:95:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n24 |     while row_idx < row_len {\n   |          \
    \                   - unclosed delimiter\n...\n37 |         } else {\n   |   \
    \             - unclosed delimiter\n...\n42 |             } else {\n   |     \
    \               - this delimiter might not be properly closed...\n...\n85 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n95 | }\n\
    \   |   ^\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:27:21\n\
    \   |\n27 |             row_end++;\n   |                     ^ expected expression\n\
    \nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:31:21\n   |\n\
    31 |             col_end++;\n   |                     ^ expected expression\n\n\
    error: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:45:29\n   |\n\
    45 |                     row_end++;\n   |                             ^ expected\
    \ expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:49:29\n\
    \   |\n49 |                     col_end++;\n   |                             ^\
    \ expected expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:53:31\n\
    \   |\n53 |                     row_start++;\n   |                           \
    \    ^ expected expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:57:31\n\
    \   |\n57 |                     col_start++;\n   |                           \
    \    ^ expected expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:61:29\n\
    \   |\n61 |                     row_end++;\n   |                             ^\
    \ expected expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:65:29\n\
    \   |\n65 |                     col_end++;\n   |                             ^\
    \ expected expression\n\nerror: expected expression, found `+`\n  --> /tmp/tmpcnvzosdk.rs:69:31\n\
    \   |\n69 |                     row_start++;\n   |             "
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < rows {\n        if col < cols {\n            if lst[row][col] == x {\n\
    \                coords.push((row, col));\n            }\n            col += 1;\n\
    \        } else {\n            row += 1;\n            col = 0;\n        }\n  \
    \  }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x, y)|\
    \ y.0);\n    coords.reverse();\n    coords\n}\n\nfn main() {\n    let candidate\
    \ = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgq5pe_b9.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgq5pe_b9.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgq5pe_b9.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgq5pe_b9.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgq5pe_b9.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut row_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        if row_len > x {\n            break;\n        }\n        rows.push(row.iter().cloned().skip(x).collect::<Vec<_>>());\n\
    \        row_idx += 1;\n    }\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    rows\n}\n\nfn\
    \ main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp31o7w0_p.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31o7w0_p.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp31o7w0_p.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp31o7w0_p.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp31o7w0_p.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp31o7w0_p.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp31o7w0_p.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp31o7w0_p.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp31o7w0_p.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31o7w0_p.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp31o7w0_p.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coord\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptc1pmmnu.rs:68:22\n   |\n\
    68 |     let mut row_coord\n   |                      ^ help: add `;` here\n69\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmptc1pmmnu.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptc1pmmnu.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptc1pmmnu.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptc1pmmnu.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptc1pmmnu.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptc1pmmnu.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptc1pmmnu.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `l"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_sorted =\
    \ vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_sorted = vec![];\n    let mut col_sorted =\
    \ vec![];\n    while row_idx < row_len {\n        row_sorted.push(row_idx);\n\
    \        col_sorted.push(col_idx);\n        if row_idx < row_len - 1 {\n     \
    \       for col in 0..col_len - 1 {\n                if col < col_len - 1 && lst[row_idx][col]\
    \ > lst[row_idx + 1][col] {\n                    col_idx -= 1;\n             \
    \       col_sorted.push(col_idx);\n                }\n            }\n        }\n\
    \        row_idx += 1;\n        col_idx = 0;\n        row_sorted = vec![];\n \
    \       col_sorted = vec![];\n    }\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n \
    \   while row_idx < row_len {\n        row_sorted.push(row_idx);\n        col_sorted.push(col_idx);\n\
    \        if row_idx < row_len - 1 {\n            for col in 0..col_len - 1 {\n\
    \                if col < col_len - 1 && lst[row_idx][col] > lst[row_idx + 1][col]\
    \ {\n                    col_idx -= 1;\n                    col_sorted.push(col_idx);\n\
    \                }\n            }\n        }\n        row_idx += 1;\n        col_idx\
    \ = 0;\n        row_sorted = vec![];\n        col_sorted = vec![];\n    }\n  \
    \  let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    while row_idx < row_len {\n        row_sorted.push(row_idx);\n\
    \        col_sorted.push(col_idx);\n        if row_idx < row_len - 1 {\n     \
    \       for col in 0..col_len - 1 {\n                if col < col_len - 1 && lst[row_idx][col]\
    \ > lst[row_idx + 1][col] {\n                    col_idx -= 1;\n             \
    \       col_sorted.push(col_idx);\n                }\n            }\n        }\n\
    \        row_\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpg60kabg9.rs:94:3\n\
    \   |\n16 | fn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n   |                                                                   -\
    \ unclosed delimiter\n...\n72 |     while row_idx < row_len {\n   |          \
    \                   - this delimiter might not be properly closed...\n...\n84\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n94\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `row_` in this scope\n  -->\
    \ /tmp/tmpg60kabg9.rs:83:9\n   |\n83 |         row_\n   |         ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg60kabg9.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg60kabg9.rs:88:25\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg60kabg9.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg60kabg9.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg60kabg9.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg60kabg9.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg60kabg9.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg60kabg9.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                  "
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    for row in lst {\n\
    \        col_num += row.len();\n        if col_num == x {\n            break;\n\
    \        }\n        row_idx += 1;\n        col_num_idx = 0;\n    }\n    for row\
    \ in lst {\n        row.sort_by_key(|&x| {\n            col_num_idx += 1;\n  \
    \          col_num_idx - x;\n        });\n        row.sort_by_key(|&x| {\n   \
    \         col_num_idx - x;\n        });\n        row.sort_by_key(|&x| {\n    \
    \        col_num_idx + 1;\n        });\n    }\n    row\n}\n\nfn main() {\n   \
    \ let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp83203e9u.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp83203e9u.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp83203e9u.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp83203e9u.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp83203e9u.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp83203e9u.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp83203e9u.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp83203e9u.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp83203e9u.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp83203e9u.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp83203e9u.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = Vec::new();\n    let mut row_coords = Vec::new();\n    let mut\
    \ col_coords = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < rows {\n        let mut row_coord = Vec::new();\n        let mut col_coord\
    \ = Vec::new();\n        let mut row_i = 0;\n        let mut col_i = 0;\n    \
    \    while row_i < rows && col_i < cols {\n            if row_i == i {\n     \
    \           row_coord.push((i, row_i));\n                row_i += 1;\n       \
    \         col_coord.push((col_i, col_i));\n                col_i += 1;\n     \
    \       } else {\n                row_coord.push((row_i, row_i));\n          \
    \      row_i += 1;\n                col_coord.push((col_i, col_i));\n        \
    \        col_i += 1;\n            }\n        }\n        coords.push(row_coord);\n\
    \        coords.push(col_coord);\n        i += 1;\n        j += 1;\n    }\n  \
    \  coords.sort_by_key(|&(_, y)| y);\n    coords.sort_by_key(|&(_, y)| y, |&(_,\
    \ y)| -y);\n    coords.iter().map(|&(_, y)| y).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplys4l3eq.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplys4l3eq.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplys4l3eq.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplys4l3eq.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplys4l3eq.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplys4l3eq.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplys4l3eq.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplys4l3eq.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplys4l3eq.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplys4l3eq.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplys4l3eq.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    for row in lst {\n        row_len += row.len();\n        if row_len == x\
    \ {\n            rows.push((row_idx, col_idx));\n            row_idx += 1;\n \
    \           row_len -= 1;\n        }\n        for col in row {\n            col_len\
    \ += 1;\n            if col_len == x {\n                col_idx -= 1;\n      \
    \          col_len -= 1;\n            }\n        }\n    }\n    rows\n        .iter()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    rows\n        .iter()\n        .map(|(_, col)| col.iter().cloned().collect::<Vec<_>>())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptv8ql4f3.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptv8ql4f3.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptv8ql4f3.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptv8ql4f3.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptv8ql4f3.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptv8ql4f3.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptv8ql4f3.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptv8ql4f3.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptv8ql4f3.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptv8ql4f3.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptv8ql4f3.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos\
    \ = 0;\n    let mut col_pos_idx = 0;\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    for row_idx in 0..lst.len() {\n        row_len = lst[row_idx].len();\n\
    \        for col_pos_idx in 0..row_len {\n            col_len = lst[row_idx][col_pos_idx];\n\
    \            if col_len == x {\n                row.push((row_idx, col_pos_idx));\n\
    \            }\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row.sort_by_key(|&(x, y)| x.1);\n    row.sort_by_key(|&(x, y)|\
    \ y.1);\n    row\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpijb4iwqm.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpijb4iwqm.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpijb4iwqm.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpijb4iwqm.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpijb4iwqm.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpijb4iwqm.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpijb4iwqm.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpijb4iwqm.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpijb4iwqm.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpijb4iwqm.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpijb4iwqm.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    for row in lst {\n        let mut row_result\
    \ = Vec::new();\n        for col in row.iter().rev() {\n            if col ==\
    \ x {\n                row_result.push((row.len(), col.len()));\n            }\n\
    \        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|x|\
    \ x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    result\n\
    }\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk4iy_i3_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk4iy_i3_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk4iy_i3_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk4iy_i3_.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk4iy_i3_.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let\
    \ mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuy_1pca_.rs:51:24\n   |\n\
    51 |     let mut col_sorted_\n   |                        ^ help: add `;` here\n\
    52 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpuy_1pca_.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuy_1pca_.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuy_1pca_.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuy_1pca_.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuy_1pca_.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuy_1pca_.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuy_1pca_.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuy_1pca_.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuy_1pca_.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuy_1pca_.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find valu"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n\
    \        row_len += row.len();\n    }\n    for row in lst {\n        col_len +=\
    \ row.iter().map(|x| x).sum();\n    }\n    for row in lst {\n        for col in\
    \ row.iter().map(|x| x) {\n            if col == x {\n                row.push(row_idx);\n\
    \                row_idx += 1;\n            }\n        }\n    }\n    row.sort_by_key(|x|\
    \ x.0);\n    row.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    row.iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmply4lxbuk.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply4lxbuk.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply4lxbuk.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmply4lxbuk.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmply4lxbuk.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmply4lxbuk.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmply4lxbuk.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmply4lxbuk.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmply4lxbuk.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply4lxbuk.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply4lxbuk.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((row, col));\n            }\n        }\n    \
    \    result.push(row_result);\n    }\n    result.sort_by_key(|row| row.iter().rev());\n\
    \    result.sort_by_key(|row| row.iter().rev());\n    result\n}\n\nfn main() {\n\
    \    let candidate = get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyxntr57p.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyxntr57p.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyxntr57p.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyxntr57p.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyxntr57p.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyxntr57p.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyxntr57p.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyxntr57p.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyxntr57p.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyxntr57p.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyxntr57p.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    for row in lst {\n        let mut coord\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                coord.push((row.len(), col.len()));\n            }\n        }\n\
    \        coords.push_back(coord);\n    }\n    coords.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    coords.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    coords\n}\n\
    \nfn main() {\n    let candidate = get_row;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2g8gqe6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2g8gqe6a.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2g8gqe6a.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659749730
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx <\
    \ rows && col_idx < cols {\n        if lst[row_idx][col_idx] == x {\n        \
    \    result.push((row_idx, col_idx));\n            row_idx++;\n            col_idx++;\n\
    \        } else if row_idx < rows {\n            row_idx++;\n            row_max\
    \ = rows;\n        } else {\n            col_idx++;\n            col_max = cols;\n\
    \        }\n    }\n    if row_idx < rows {\n        result.push((row_idx, col_idx));\n\
    \    }\n    if col_idx < cols {\n        result.push((row_idx, col_idx));\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmp7li6lb1t.rs:27:21\n\
    \   |\n27 |             row_idx++;\n   |                     ^ expected expression\n\
    \nerror: expected expression, found `+`\n  --> /tmp/tmp7li6lb1t.rs:30:21\n   |\n\
    30 |             row_idx++;\n   |                     ^ expected expression\n\n\
    error: expected expression, found `+`\n  --> /tmp/tmp7li6lb1t.rs:33:21\n   |\n\
    33 |             col_idx++;\n   |                     ^ expected expression\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7li6lb1t.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7li6lb1t.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7li6lb1t.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7li6lb1t.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7li6lb1t.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7li6lb1t.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7li6lb1t.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7li6lb1t.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7li6lb1t.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {righ"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx =\
    \ 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_start\
    \ = 0;\n    let mut col_end = 0;\n    let mut col_start2 = 0;\n    let mut col_end2\
    \ = 0;\n    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_start3\
    \ = 0;\n    let mut col_end3 = 0;\n    let mut row_start2 = 0;\n    let mut row_end2\
    \ = 0;\n    let mut col_start4 = 0;\n    let mut col_end4 = 0;\n    let mut row_start3\
    \ = 0;\n    let mut row_end3 = 0;\n    let mut col_start5 = 0;\n    let mut col_end5\
    \ = 0;\n    let mut row_start4 = 0;\n    let mut row_end4 = 0;\n    let mut col_start6\
    \ = 0;\n    let mut col_end6 = 0;\n    let mut row_start5 = 0;\n    let mut row_end5\
    \ = 0;\n    let mut col_start7 = 0;\n    let mut col_end7 = 0;\n    let mut row_start6\
    \ = 0;\n    let mut row_end6 = 0;\n    let mut col_start8 = 0;\n    let mut col_end8\
    \ = 0;\n    let mut row_start7 = 0;\n    let mut row_end7 = 0;\n    let mut col_start9\
    \ = 0;\n    let mut col_end9 = 0;\n    let mut row_start8 = 0;\n    let mut row_end8\
    \ = 0;\n    let mut col_start10 = 0;\n    let mut col_end10 = 0;\n    let mut\
    \ row_start9 = 0;\n    let mut row_end9 = 0;\n    let mut col_start11 = 0;\n \
    \   let mut col_end11 = 0;\n    let mut row_start10 = 0;\n    let mut row_end10\
    \ = 0;\n    let mut col_start12 = 0;\n    let mut col_end12 = 0;\n    let mut\
    \ row_start11 = 0;\n    let mut row_end11 = 0;\n    let mut col_start13 = 0;\n\
    \    let mut col_end13 = 0;\n    let mut row_start12 = 0;\n    let mut row_end12\
    \ = 0;\n    let mut col_start14 = 0;\n    let mut col_end14 = 0;\n    let mut\
    \ row_start13 = 0;\n    let mut row_end13 = 0;\n    let mut col_start15 = 0;\n\
    \    let mut col_end15 = 0;\n    let mut row_start14 = 0;\n    let mut row_end14\
    \ = 0;\n    let mut col_start16 = 0;\n    let mut col_end16 = 0;\n    let mut\
    \ row_start15 = 0;\n    let mut row_end\n}\n\nfn main() {\n    let candidate =\
    \ get_row;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpddkdbl0i.rs:82:20\n   |\n\
    82 |     let mut row_end\n   |                    ^ help: add `;` here\n83 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpddkdbl0i.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpddkdbl0i.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpddkdbl0i.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpddkdbl0i.rs:88:25\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpddkdbl0i.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpddkdbl0i.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpddkdbl0i.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpddkdbl0i.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpddkdbl0i.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpddkdbl0i.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left`"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n   \
    \ let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmb1u1wlh.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmb1u1wlh.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmb1u1wlh.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmb1u1wlh.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmb1u1wlh.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "/// You are given a 2 dimensional data, as a nested lists,\n/// which\
    \ is similar to matrix, however, unlike matrices,\n/// each row may contain a\
    \ different number of columns.\n/// Given lst, and integer x, find integers x\
    \ in the list,\n/// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    /// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates\
    \ initially by rows in ascending order.\n/// Also, sort coordinates of the row\
    \ by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1,\
    \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize,\
    \ isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n///\
    \ vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)>\
    \ {\n    let mut rows: Vec<(isize, isize)> = vec![];\n    for row in lst {\n \
    \       let mut cols: Vec<isize> = vec![];\n        for col in row {\n       \
    \     if col == x {\n                cols.push(x);\n            } else {\n   \
    \             cols.push(col);\n            }\n        }\n        rows.push((row,\
    \ cols));\n    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    rows\n}\n\nfn main() {\n    let candidate = get_row;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpofta9tsy.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpofta9tsy.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpofta9tsy.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpofta9tsy.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpofta9tsy.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpofta9tsy.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpofta9tsy.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpofta9tsy.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpofta9tsy.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpofta9tsy.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpofta9tsy.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823121
