language: rs
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut open_parens = 0;\n    let mut closed_parens = 0;\n    let mut closed_braces\
    \ = 0;\n    let mut open_brace_chars = String::new();\n    let mut closed_brace_chars\
    \ = String::new();\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let mut open_brace_chars_index = -1;\n    let mut closed_brace_chars_index\
    \ = -1;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp_j6j95r_.rs:56:1\n  \
    \ |\n56 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp_j6j95r_.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp_j6j95r_.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_j6j95r_.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_j6j95r_.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_j6j95r_.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_j6j95r_.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_j6j95r_.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_j6j95r_.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut spaces = Vec::new();\n  \
    \  let mut open_brace_pos = 0;\n    let mut close_brace_pos = 0;\n    let mut\
    \ space_pos = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n\
    \    let mut paren_pos = 0;\n    let mut paren_len = paren_string.len();\n   \
    \ while i < paren_len {\n        if paren_string[i] == ' ' {\n            spaces.push(paren_string.as_bytes()[space_pos..i\
    \ + 1]);\n            space_pos = i + 1;\n        }\n        if paren_string[i]\
    \ == '(' {\n            open_braces.push(paren_string.as_bytes()[paren_pos..i\
    \ + 1]);\n            paren_pos = i + 1;\n        }\n        if paren_string[i]\
    \ == ')' {\n            close_braces.push(paren_string.as_bytes()[paren_pos..i\
    \ + 1]);\n            paren_pos = i + 1;\n        }\n        if paren_string[i]\
    \ == '{' {\n            open_braces.push(paren_string.as_bytes()[paren_pos..i\
    \ + 1]);\n            paren_pos = i + 1;\n        }\n        if paren_string[i]\
    \ == '}' {\n            close_braces.push(paren_string.as_bytes()[paren_pos..i\
    \ + 1]);\n            paren_pos = i + 1;\n        }\n        i += 1;\n    }\n\
    \    paren_groups.push(paren_string.as_bytes()[paren_pos..]);\n    for paren_group\
    \ in paren_groups {\n        if paren_group == b'(' {\n            open_brace_pos\
    \ = paren_group;\n        }\n        if paren_group == b'{' {\n            open_brace_pos\
    \ = paren_group;\n        }\n        if paren_group == b'}' {\n            close_brace_pos\
    \ = paren_group;\n        }\n        if paren_group == b' ' {\n            space_pos\
    \ = paren_group;\n        }\n    }\n    let mut i = 0;\n    let mut j = 0;\n \
    \   let mut k = 0;\n    let mut paren_pos = 0;\n    let mut paren_len = paren_string.len();\n\
    \    while i < paren_len {\n        if paren_string[i] == ' ' {\n            spaces.push(paren_string.as_bytes()[space_pos..i\
    \ + 1]);\n            space_pos = i + 1;\n        }\n        if paren_string[i]\
    \ == '(' {\n            open_braces.push(paren_string.\n}\n\nfn main() {\n   \
    \ let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpg7qtl26o.rs:78:3\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n63 |     while i < paren_len {\n   |                       \
    \  - unclosed delimiter\n...\n68 |         if paren_string[i] == '(' {\n   | \
    \                                  - this delimiter might not be properly closed...\n\
    69 |             open_braces.push(paren_string.\n70 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n78 | }\n   |   ^\n\nerror: unexpected\
    \ token: `)`\n  --> /tmp/tmpg7qtl26o.rs:70:1\n   |\n70 | }\n   | ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpg7qtl26o.rs:69:29\n   |\n7  | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n   |                                             \
    \                  - closing delimiter possibly meant for this\n...\n69 |    \
    \         open_braces.push(paren_string.\n   |                             ^ unclosed\
    \ delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg7qtl26o.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg7qtl26o.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg7qtl26o.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg7qtl26o.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg7qtl26o.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this "
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open\
    \ = false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_paren\
    \ = false;\n    let mut paren_group_closed_brace_or_paren = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space = false;\n    let mut paren_group_closed_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma_or_semicolon_or_colon_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma_or_semicolon_or_colon_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_\n}\n\nfn\
    \ main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp121kgfqi.rs:31:57\n   |\n\
    31 |     let mut paren_group_open_brace_or_paren_or_space_or_\n   |          \
    \                                               ^ help: add `;` here\n32 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp121kgfqi.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp121kgfqi.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp121kgfqi.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp121kgfqi.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp121kgfqi.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp121kgfqi.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp121kgfqi.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp121kgfqi.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp121kgfqi.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ' ').collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != '(').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp4gy51ftp.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ *\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmp4gy51ftp.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4gy51ftp.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4gy51ftp.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4gy51ftp.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4gy51ftp.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4gy51ftp.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4gy51ftp.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4gy51ftp.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4gy51ftp.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_groups_stack = Vec::new();\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = paren_string.chars();\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.end();\n    let mut paren_groups_ptr_current\
    \ = paren_groups_ptr.next();\n    while paren_groups_ptr_current != paren_groups_ptr_end\
    \ {\n        let mut paren_groups_ptr_next = paren_groups_ptr_current.next();\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end {\n            paren_groups_ptr_next\
    \ = paren_groups_ptr.next();\n        }\n        if paren_groups_ptr_next == paren_groups_ptr_end\
    \ {\n            paren_groups_ptr_next = paren_groups_ptr.next();\n        }\n\
    \        if paren_groups_ptr_next == paren_groups_ptr_end \n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfdo93kmi.rs:61:3\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n14 |     while paren_groups_ptr_current != paren_groups_ptr_end\
    \ {\n   |                                                            - this delimiter\
    \ might not be properly closed...\n...\n53 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n61 | }\n   |   ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmpfdo93kmi.rs:53:1\n   |\n52 |         if paren_groups_ptr_next\
    \ == paren_groups_ptr_end \n   |         -- this `if` expression has a condition,\
    \ but no block\n53 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpfdo93kmi.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfdo93kmi.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdo93kmi.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdo93kmi.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfdo93kmi.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfdo93kmi.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdo93kmi.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot f"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_groups_stack = Vec::new();\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = paren_string.chars();\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr = paren_groups_ptr.end();\n    let\
    \ mut paren_groups_ptr_end_ptr_end_ptr_end = paren_groups_ptr.end();\n    let\
    \ mut paren_groups_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr.end();\n   \
    \ let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr.end();\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr.end();\n    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptb1td35a.rs:28:58\n   |\n\
    28 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_\n   |         \
    \                                                 ^ help: add `;` here\n29 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptb1td35a.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptb1td35a.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptb1td35a.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptb1td35a.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptb1td35a.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptb1td35a.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptb1td35a.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptb1td35a.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `end` found for struct\
    \ `Chars` in the current scope\n  --> /tmp/tmptb1td35a.rs:12:53\n   |\n12 |  \
    \   let mut paren_groups_ptr_end = paren_groups_ptr.end();\n   |             \
    \                                        ^^^ method not found in `Chars<'_>`\n\
    \nerror[E0599]: no method named `end` found for struct "
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_braces\
    \ = 0;\n    let mut paren_group_closed_braces = 0;\n    let mut paren_group_open_braces_after_last_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_open_brace = 0;\n   \
    \ let mut paren_group_open_braces_after_last_closed_brace = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_closed_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let mut paren_group_open_braces_after_last_closed_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace_or_open_brace\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpy_jnksrq.rs:31:1\n  \
    \ |\n31 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpy_jnksrq.rs:35:17\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpy_jnksrq.rs:35:25\n \
    \  |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy_jnksrq.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy_jnksrq.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy_jnksrq.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy_jnksrq.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy_jnksrq.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy_jnksrq.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut current_group = String::new();\n    let mut current_group_is_open = false;\n\
    \    let mut current_group_is_closed = false;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            open_braces += 1;\n            current_group_is_open\
    \ = true;\n            current_group.clear();\n            current_group_is_closed\
    \ = false;\n        } else if c == ')' {\n            open_braces -= 1;\n    \
    \        current_group_is_closed = true;\n            current_group.clear();\n\
    \            current_group_is_open = false;\n        } else if c == ' ' {\n  \
    \          if open_braces == 0 {\n                current_group_is_open = false;\n\
    \                current_group_is_closed = false;\n            }\n           \
    \ current_group.clear();\n        } else {\n            current_group += c.to_string();\n\
    \        }\n        if open_braces == 0 {\n            if current_group_is_open\
    \ {\n                paren_groups.push(current_group);\n            }\n      \
    \      current_group_is_open = false;\n            current_group_is_closed = false;\n\
    \            current_group.clear();\n        }\n    }\n    if open_braces == 0\
    \ {\n        if current_group_is_open {\n            paren_groups.push(current_group);\n\
    \        }\n    }\n    paren_groups\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1l2v8pix.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1l2v8pix.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1l2v8pix.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1l2v8pix.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1l2v8pix.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1l2v8pix.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1l2v8pix.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1l2v8pix.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1l2v8pix.rs:31:30\n   |\n31 |             current_group\
    \ += c.to_string();\n   |                              ^^^^^^^^^^^^^\n   |   \
    \                           |\n   |                              expected `&str`,\
    \ found struct `String`\n   |                              help: consider borrowing\
    \ here: `&c.to_string()`\n\nerror: aborting due to 9 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut current_open_brace = false;\n\
    \    let mut current_close_brace = false;\n    let mut current_paren_group = false;\n\
    \    let mut current_closed_paren_group = false;\n    let mut current_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_group = false;\n  \
    \  let mut current_open_brace_or_closed_paren = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren\
    \ = false;\n    let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphn2duxni.rs:27:138\n   |\n\
    27 |     let mut current_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_or_open_brace_or_closed_paren_\n\
    \   |                                                                        \
    \                                                                  ^ help: add\
    \ `;` here\n28 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmphn2duxni.rs:32:17\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphn2duxni.rs:32:25\n \
    \  |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphn2duxni.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphn2duxni.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphn2duxni.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphn2duxni.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphn2duxni.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphn2duxni.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphn2duxni.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------        "
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '{').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ' ').collect::<String>();\n    paren_string.into_iter().collect()\n}\n\
    \nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp560pr8fu.rs:19:17\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp560pr8fu.rs:19:25\n   |\n19 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp560pr8fu.rs:20:17\n   |\n20 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp560pr8fu.rs:20:25\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp560pr8fu.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp560pr8fu.rs:21:25\n   |\n21 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp560pr8fu.rs:22:17\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp560pr8fu.rs:22:25\n   |\n22 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp560pr8fu.rs:14:18\n    |\n14  |       paren_string.into_iter().collect()\n\
    \    |                    ^^^^^^^^^\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            "
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut open_brace_counts = Vec::new();\n\
    \    let mut close_brace_counts = Vec::new();\n    let mut open_brace_counts_iter\
    \ = open_brace_counts.iter();\n    let mut close_brace_counts_iter = close_brace_counts.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_string = paren_string.chars();\n    let mut paren_string =\
    \ paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_whitespace();\n    let mut paren_string\
    \ = paren_string.collect::<String>();\n    let mut paren_string = paren_string.trim();\n\
    \    let mut paren_string = paren_string.split_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8jm_q2o5.rs:45:47\n   |\n\
    45 |     let mut paren_string = paren_string.split_\n   |                    \
    \                           ^ help: add `;` here\n46 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8jm_q2o5.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8jm_q2o5.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8jm_q2o5.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8jm_q2o5.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8jm_q2o5.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8jm_q2o5.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8jm_q2o5.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8jm_q2o5.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0609]:\
    \ no field `split_` on type `&str`\n  --> /tmp/tmp8jm_q2o5.rs:45:41\n   |\n45\
    \ |     let mut paren_string = paren_string.split_\n   |                     \
    \                    ^^^^^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8jm_q2o5.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------  "
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp14qlrvp_.rs:30:95\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    \   |                                                                        \
    \                       ^ help: add `;` here\n31 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp14qlrvp_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp14qlrvp_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implici"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_open_braces = 0;\n\
    \    let mut paren_group_close_braces = 0;\n    let mut paren_group_open_parens\
    \ = 0;\n    let mut paren_group_close_parens = 0;\n    let mut paren_group_spaces\
    \ = 0;\n    let mut paren_group_non_spaces = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let mut paren_group_non_spaces_length = 0;\n    let mut paren_group_non_spaces_length\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpbjphpczb.rs:53:1\n  \
    \ |\n53 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpbjphpczb.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpbjphpczb.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbjphpczb.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbjphpczb.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbjphpczb.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbjphpczb.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbjphpczb.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbjphpczb.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_groups = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_braces = String::new();\n    let mut\
    \ paren_group_closed_braces = String::new();\n    let mut paren_group_open_braces_count\
    \ = String::new();\n    let mut paren_group_closed_braces_count = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens = String::new();\n    let\
    \ mut paren_group_closed_braces_count_in_parens = String::new();\n    let mut\
    \ paren_group_open_braces_count_in_parens_after_comma = String::new();\n    let\
    \ mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_open_braces_count_in_parens_after_comma = String::new();\n\
    \    let mut paren_group_closed_braces_count_in_parens_after_comma\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0ny5h2wi.rs:35:66\n   |\n\
    35 |     let mut paren_group_closed_braces_count_in_parens_after_comma\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp0ny5h2wi.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0ny5h2wi.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0ny5h2wi.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0ny5h2wi.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0ny5h2wi.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0ny5h2wi.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0ny5h2wi.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0ny5h2wi.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0ny5h2wi.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expre"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n  \
    \  let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon =\
    \ false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpi99w3mnp.rs:35:1\n  \
    \ |\n35 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpi99w3mnp.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpi99w3mnp.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi99w3mnp.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi99w3mnp.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi99w3mnp.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi99w3mnp.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi99w3mnp.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi99w3mnp.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:18:17\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:18:25\n   |\n18 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:17\n   |\n19 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:25\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9_dfpee3.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:20:25\n   |\n20 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:21:25\n   |\n21 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp9_dfpee3.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().collect::<Vec<String>>();\n    |   \
    \                                        ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n           "
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_\n}\n\n\
    fn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2d36lr0o.rs:30:61\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_space_\n   |      \
    \                                                       ^ help: add `;` here\n\
    31 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp2d36lr0o.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2d36lr0o.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2d36lr0o.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2d36lr0o.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2d36lr0o.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2d36lr0o.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2d36lr0o.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2d36lr0o.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2d36lr0o.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_groups = Vec::new();\n    let mut open_brace_groups = Vec::new();\n\
    \    let mut closed_brace_groups = Vec::new();\n    let mut open_brace_group =\
    \ false;\n    let mut closed_brace_group = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut closed_brace_group_start = false;\n    let mut open_brace_group_end\
    \ = false;\n    let mut closed_brace_group_end = false;\n    let mut open_brace_group_start\
    \ = false;\n    let mut \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpelwu8ihc.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpelwu8ihc.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpelwu8ihc.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpelwu8ihc.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpelwu8ihc.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpelwu8ihc.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpelwu8ihc.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpelwu8ihc.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpelwu8ihc.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut close_braces = 0;\n    let mut paren_group_string = paren_string;\n    let\
    \ mut paren_group_start = paren_string.chars().nth(0).unwrap();\n    let mut paren_group_end\
    \ = paren_string.chars().nth(paren_string.len()).unwrap();\n    while !paren_group_start.is_none()\
    \ {\n        if paren_group_start == paren_group_end {\n            paren_group_string\
    \ = paren_group_string.split_off(paren_group_start);\n            paren_groups.push(paren_group_string);\n\
    \            paren_group_start = paren_string.chars().nth(1).unwrap();\n     \
    \       paren_group_end = paren_string.chars().nth(paren_string.len()).unwrap();\n\
    \        } else {\n            paren_group_string = paren_group_string.split_off(paren_group_start);\n\
    \            paren_group_string.push(paren_group_end);\n            paren_groups.push(paren_group_string);\n\
    \            paren_group_start = paren_string.chars().nth(1).unwrap();\n     \
    \       paren_group_end = paren_string.chars().nth(paren_string.len()).unwrap();\n\
    \        }\n    }\n    paren_group_string.push(paren_group_end);\n    paren_groups.push(paren_group_string);\n\
    \    paren_groups\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4qivsqv2.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4qivsqv2.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4qivsqv2.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4qivsqv2.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4qivsqv2.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4qivsqv2.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4qivsqv2.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4qivsqv2.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `is_none` found for type `char` in the current scope\n  -->\
    \ /tmp/tmp4qivsqv2.rs:14:30\n   |\n14 |     while !paren_group_start.is_none()\
    \ {\n   |                              ^^^^^^^ method not found in `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4qivsqv2.rs:16:63\n   |\n16 |  \
    \           paren_group_string = paren_group_string.split_off(paren_group_start);\n\
    \   |                                                               ^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4qivsqv2.rs:21:63\n\
    \   |\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect();\n \
    \   let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect();\n \
    \   let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect();\n \
    \   let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect();\n \
    \   let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string\n}\n\nfn\
    \ main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkmc7y5_a.rs:37:40\n   |\n\
    37 |     let mut paren_string = paren_string\n   |                           \
    \             ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkmc7y5_a.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkmc7y5_a.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkmc7y5_a.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkmc7y5_a.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkmc7y5_a.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkmc7y5_a.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkmc7y5_a.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkmc7y5_a.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmpkmc7y5_a.rs:11:28\n   |\n10 |     let\
    \ mut paren_string = paren_string.collect();\n   |         ---------------- consider\
    \ giving `paren_string` a type\n11 |     let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n   |                            ^^^^^^^^^^^^ cannot infer\
    \ type\n   |\n   = note"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut open_brace_groups = Vec::new();\n   \
    \ let mut open_brace_group = false;\n    let mut closed_brace_group = false;\n\
    \    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n    let mut closed_brace_group_open\
    \ = false;\n    let mut open_brace_group_closed = false;\n    let mut closed_brace_group_closed\
    \ = false;\n    let mut open_brace_group_open = false;\n}\n\nfn main() {\n   \
    \ let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr1wjy35e.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr1wjy35e.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr1wjy35e.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr1wjy35e.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr1wjy35e.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr1wjy35e.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr1wjy35e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr1wjy35e.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpr1wjy35e.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp9yy0x1_v.rs:28:1\n   |\n27 |     let mut paren_string\
    \ = paren_string.chars().filter(|c| !c.is_ascii_letter()).collect::<String\n \
    \  |                                                                         \
    \                         - expected one of 9 possible tokens\n28 | }\n   | ^\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp9yy0x1_v.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmp9yy0x1_v.rs:11:63\n\
    \   |\n11 |     let mut paren_string = paren_string.chars("
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String\n}\n\nfn main() {\n    let candidate =\
    \ separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp0r2r2pdw.rs:27:1\n   |\n26 |     let mut paren_string\
    \ = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<String\n\
    \   |                                                                        \
    \                            - expected one of 9 possible tokens\n27 | }\n   |\
    \ ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0r2r2pdw.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0r2r2pdw.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0r2r2pdw.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: the method `into_iter` exists for struct\
    \ `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp0r2r2pdw.rs:10:41\n\
    \    |\n10  |       let mut paren_string = pa"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_6cn6a.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpai_6cn6a.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpai_6cn6a.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_open = false;\n    let\
    \ mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1yjnv23x.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1yjnv23x.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1yjnv23x.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1yjnv23x.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1yjnv23x.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1yjnv23x.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1yjnv23x.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1yjnv23x.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1yjnv23x.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1yjnv23x.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_closed = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzj1dehdw.rs:30:90\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_\n\
    \   |                                                                        \
    \                  ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzj1dehdw.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzj1dehdw.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzj1dehdw.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzj1dehdw.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzj1dehdw.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzj1dehdw.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzj1dehdw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzj1dehdw.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpzj1dehdw.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ return"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_parens = 0;\n    let mut open_brace_groups = Vec::new();\n    let\
    \ mut closed_brace_groups = Vec::new();\n    let mut current_group = String::new();\n\
    \    let mut current_group_open = false;\n    let mut current_group_closed = false;\n\
    \    for c in paren_string.chars() {\n        if c == '(' {\n            open_braces\
    \ += 1;\n            current_group_open = true;\n            current_group.push_str(c);\n\
    \        } else if c == ')' {\n            open_braces -= 1;\n            current_group_open\
    \ = false;\n            current_group.push_str(c);\n        } else if c == ' '\
    \ {\n            current_group.push_str(c);\n        } else if open_braces ==\
    \ 0 {\n            current_group.push_str(c);\n        } else {\n            if\
    \ current_group_open {\n                current_group.push_str(c);\n         \
    \   } else {\n                current_group_closed = true;\n                open_brace_groups.push(current_group);\n\
    \                current_group = String::new();\n                current_group_open\
    \ = true;\n                current_group_closed = false;\n            }\n    \
    \    }\n    }\n    if open_braces > 0 {\n        current_group_closed = true;\n\
    \        open_brace_groups.push(current_group);\n    }\n    for group in open_brace_groups\
    \ {\n        paren_groups.push(group);\n    }\n    for group in closed_brace_groups\
    \ {\n        paren_groups.push(group);\n    }\n    paren_groups\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4_rsz6ma.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4_rsz6ma.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4_rsz6ma.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4_rsz6ma.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4_rsz6ma.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4_rsz6ma.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4_rsz6ma.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4_rsz6ma.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4_rsz6ma.rs:20:36\n   |\n20 |             current_group.push_str(c);\n\
    \   |                                    ^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4_rsz6ma.rs:24:36\n   |\n24 |             current_group.push_str(c);\n\
    \   |                                    ^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4_rsz6ma.rs:26:36\n   |\n26 |             current_group.push_str(c);\n\
    \   |                                    ^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatc"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_groups = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5jkgldfr.rs:31:52\n   |\n\
    31 |     let mut paren_group_open_brace_or_closed_brace_\n   |               \
    \                                     ^ help: add `;` here\n32 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5jkgldfr.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5jkgldfr.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5jkgldfr.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5jkgldfr.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5jkgldfr.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5jkgldfr.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5jkgldfr.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5jkgldfr.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp5jkgldfr.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiqdtrpuk.rs:27:25\n   |\n\
    27 |     let mut paren_string\n   |                         ^ help: add `;` here\n\
    28 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpiqdtrpuk.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiqdtrpuk.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiqdtrpuk.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiqdtrpuk.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiqdtrpuk.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiqdtrpuk.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiqdtrpuk.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiqdtrpuk.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \ --> /tmp/tmpiqdtrpuk.rs:9:75\n  |\n9 |     let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n  |                           \
    \                                                ^^ no implementation for `&char\
    \ == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n\nerror[E0277]: "
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_bra\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8mxm03j8.rs:30:49\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_bra\n   |                  \
    \                               ^ help: add `;` here\n31 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8mxm03j8.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8mxm03j8.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8mxm03j8.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8mxm03j8.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8mxm03j8.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8mxm03j8.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struc"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n\n    for paren in paren_string.chars()\
    \ {\n        if paren == char::parenthesis_open_brace {\n            open_braces.push(paren);\n\
    \        } else if paren == char::parenthesis_close_brace {\n            close_braces.push(paren);\n\
    \        } else if paren == char::space {\n            continue;\n        } else\
    \ {\n            paren_groups.push(paren_string.chars().filter(|c| c != paren).collect::<String>());\n\
    \        }\n    }\n\n    paren_groups.push(paren_string.chars().filter(|c| c !=\
    \ char::parenthesis_open_brace &&\n                                          \
    \        c != char::parenthesis_close_brace &&\n                             \
    \                     c != char::space).collect::<String>());\n\n    paren_groups\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvvsdtdo5.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvvsdtdo5.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvvsdtdo5.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvvsdtdo5.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvvsdtdo5.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvvsdtdo5.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvvsdtdo5.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvvsdtdo5.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no function or associated item named `parenthesis_open_brace` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpvvsdtdo5.rs:13:27\n   |\n13 |   \
    \      if paren == char::parenthesis_open_brace {\n   |                      \
    \     ^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `char`\n\
    \nerror[E0599]: no function or associated item named `parenthesis_close_brace`\
    \ found for type `char` in the current scope\n  --> /tmp/tmpvvsdtdo5.rs:15:34\n\
    \   |\n15 |         } else if paren == char::parenthesis_close_brace {\n   | \
    \                                 ^^"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_level =\
    \ String::new();\n    let mut paren_group_open = String::new();\n    let mut paren_group_closed\
    \ = String::new();\n    let mut paren_group_level = String::new();\n    let mut\
    \ paren_group_open = String::new();\n    let mut paren_group_closed = String::new();\n\
    \    let mut paren_group_level = String::new();\n    let mut paren_group_open\
    \ = String::new();\n    let mut paren_group_closed = String::new();\n    let mut\
    \ paren_group_level = String::new();\n    let mut paren_group_open = String::new();\n\
    \    let mut paren_group_closed = String::new();\n    let mut paren_group_level\
    \ = String::new();\n    let mut paren_group_open = String::new();\n    let mut\
    \ paren_group_closed = String::new();\n    let mut paren_group_level = String::new();\n\
    \    let mut paren_group_open = String::new();\n    let mut paren_group_closed\
    \ = String::new();\n    let mut paren_group_level = String::new();\n    let mut\
    \ paren_group_open = String::new();\n    let mut paren_group_closed = String::new();\n\
    \    let mut paren_group_level = String::new();\n    let mut paren_group_open\
    \ = String::new();\n    let mut paren_group_closed = String::new();\n    let mut\
    \ paren_group_level = String::new();\n    let mut paren_group_open = String::new();\n\
    \    let mut paren_group_closed = String::new();\n    let mut paren_group_level\
    \ = String::new();\n    let mut paren_group_open = String::new();\n    let mut\
    \ paren_group_closed = String::new();\n    let mut paren_group_level = String::new();\n\
    \    let mut paren_group_open = String::new();\n    let mut paren_group_closed\
    \ = String::new();\n    let mut paren_group_level = String::new();\n    let mut\
    \ paren_group_open = String::new();\n    let mut paren_group_closed = String::new();\n\
    \    let mut paren_group_level = String::new();\n    let mut paren_group_open\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpsh21cyr5.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpsh21cyr5.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsh21cyr5.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsh21cyr5.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsh21cyr5.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsh21cyr5.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsh21cyr5.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsh21cyr5.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsh21cyr5.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = \n}\n\
    \nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpv6x0k6d9.rs:26:1\n\
    \   |\n26 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpv6x0k6d9.rs:30:17\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpv6x0k6d9.rs:30:25\n \
    \  |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv6x0k6d9.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv6x0k6d9.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv6x0k6d9.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv6x0k6d9.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv6x0k6d9.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv6x0k6d9.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n --> /tmp/tmpv6x0k6d9.rs:9:62\n  |\n9 |     let\
    \ mut paren_string = paren_string.chars().filter(|c| c != '(' && c != ')').collect::<String>();\n\
    \  |                                                              ^^ no implementation\
    \ for `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpv6x0k6d9.rs:9:74\n\
    \  |\n9 |     let mut p"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\n}\n\n\
    fn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzgggp1mi.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpzgggp1mi.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '[' && c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{' && c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    paren_string.trim()\n        .split_whitespace()\n\
    \        .filter(|c| !c.is_empty())\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpj4myp7ck.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj4myp7ck.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj4myp7ck.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj4myp7ck.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj4myp7ck.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj4myp7ck.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj4myp7ck.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj4myp7ck.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n --> /tmp/tmpj4myp7ck.rs:9:62\n  |\n9 | \
    \    let mut paren_string = paren_string.chars().filter(|c| c != '(' && c != ')').collect::<String>();\n\
    \  |                                                              ^^ no implementation\
    \ for `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpj4myp7ck.rs:9:74\n\
    \  |\n9 |     let mut paren_string = paren_string.chars().filter(|c| c != '('\
    \ && c != ')').collect::<String>();\n  |                 "
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf6swyns5.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf6swyns5.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf6swyns5.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6swyns5.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf6swyns5.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf6swyns5.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpf6swyns5.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_bra\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8mxm03j8.rs:30:49\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_bra\n   |                  \
    \                               ^ help: add `;` here\n31 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8mxm03j8.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8mxm03j8.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8mxm03j8.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8mxm03j8.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8mxm03j8.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8mxm03j8.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8mxm03j8.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struc"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string.clone();\n\
    \    let mut paren_group_start = 0;\n    let mut paren_group_end = 0;\n    let\
    \ mut paren_group_open_braces = 0;\n    let mut paren_group_close_braces = 0;\n\
    \    let mut paren_group_open_parentheses = 0;\n    let mut paren_group_close_parentheses\
    \ = 0;\n    let mut paren_group_open_brace_count = 1;\n    let mut paren_group_close_brace_count\
    \ = 1;\n    let mut paren_group_open_parentheses_count = 1;\n    let mut paren_group_close_parentheses_count\
    \ = 1;\n    while !paren_group_string.is_empty() {\n        let mut paren_group_end\
    \ = paren_group_string.find(')');\n        if paren_group_end == String::npos\
    \ {\n            paren_group_string.push_str(&paren_group_string[..paren_group_start]);\n\
    \            paren_groups.push(paren_group_string);\n            paren_group_string\
    \ = paren_string.clone();\n            paren_group_start = 0;\n            paren_group_end\
    \ = 0;\n            paren_group_open_braces = 0;\n            paren_group_close_braces\
    \ = 0;\n            paren_group_open_parentheses = 0;\n            paren_group_close_parentheses\
    \ = 0;\n            paren_group_open_brace_count = 1;\n            paren_group_close_brace_count\
    \ = 1;\n            paren_group_open_parentheses_count = 1;\n            paren_group_close_parentheses_count\
    \ = 1;\n        } else {\n            paren_group_string.push_str(&paren_group_string[..paren_group_start]);\n\
    \            paren_groups.push(paren_group_string);\n            paren_group_string\
    \ = paren_string.clone();\n            paren_group_start = paren_group_end + 1;\n\
    \            paren_group_end = 0;\n            paren_group_open_braces = 0;\n\
    \            paren_group_close_braces = 0;\n            paren_group_open_parentheses\
    \ = 0;\n            paren_group_close_parentheses = 0;\n            paren_group_open_brace_count\
    \ = 1;\n            paren_group_close_brace_count = 1;\n            paren_group_open_parentheses_count\
    \ = 1;\n            paren_group_close_parentheses_count = 1;\n        }\n    \
    \    while !paren_group_string.is_empty() {\n            let mut paren_group_end\
    \ = paren_group_string.find(')');\n            if paren_group_end == String::npos\
    \ {\n                paren_group_string.push_str(&paren_group_string[..paren_group_start]);\n\
    \                paren_groups.push(paren_group_string);\n\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuoan9snp.rs:65:3\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n20 |     while !paren_group_string.is_empty() {\n   |      \
    \                                    - unclosed delimiter\n...\n51 |         while\
    \ !paren_group_string.is_empty() {\n   |                                     \
    \         - unclosed delimiter\n52 |             let mut paren_group_end = paren_group_string.find(')');\n\
    53 |             if paren_group_end == String::npos {\n   |                  \
    \                              - this delimiter might not be properly closed...\n\
    ...\n57 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    65 | }\n   |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuoan9snp.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuoan9snp.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuoan9snp.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuoan9snp.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuoan9snp.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuoan9snp.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuoan9snp.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |   "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_level\
    \ = 0;\n    let mut paren_group_contents = String::new();\n    let mut paren_group_contents_start\
    \ = String::new();\n    let mut paren_group_contents_end = String::new();\n  \
    \  let mut paren_group_contents_open = false;\n    let mut paren_group_contents_closed\
    \ = false;\n    let mut paren_group_contents_level = 0;\n    let mut paren_group_contents_contents\
    \ = String::new();\n    let mut paren_group_contents_contents_start = String::new();\n\
    \    let mut paren_group_contents_contents_end = String::new();\n    let mut paren_group_contents_contents_open\
    \ = false;\n    let mut paren_group_contents_contents_closed = false;\n    let\
    \ mut paren_group_contents_contents_level = 0;\n    let mut paren_group_contents_contents_contents\
    \ = String::new();\n    let mut paren_group_contents_contents_contents_start =\
    \ String::new();\n    let mut paren_group_contents_contents_contents_end = String::new();\n\
    \    let mut paren_group_contents_contents_contents_open = false;\n    let mut\
    \ paren_group_contents_contents_contents_closed = false;\n    let mut paren_group_contents_contents_contents_level\
    \ = 0;\n    let mut paren_group_contents_contents_contents_contents = String::new();\n\
    \    let mut paren_group_contents_contents_contents_contents_start = String::new();\n\
    \    let mut paren_group_contents_contents_contents_contents_end = String::new();\n\
    \    let mut paren_group_contents_contents_contents_contents_open = false;\n \
    \   let mut paren_group_contents_contents_contents_contents_closed = false;\n\
    \    let mut paren_group_contents_contents_contents_contents_level = 0;\n    let\
    \ mut paren_group_contents_contents_contents_contents_contents = String::new();\n\
    \    let mut paren_group_contents_contents_contents_contents_contents_start =\
    \ String::new();\n    let mut paren_group_contents_contents_contents_contents_contents_end\
    \ = String::new();\n    let mut paren_group_contents_contents_contents_contents_contents_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpecigepd1.rs:41:70\n   |\n\
    41 |     let mut paren_group_contents_contents_contents_contents_contents_\n \
    \  |                                                                      ^ help:\
    \ add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpecigepd1.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpecigepd1.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpecigepd1.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpecigepd1.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpecigepd1.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpecigepd1.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpecigepd1.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpecigepd1.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpecigepd1.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `retur"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_groups_stack = Vec::new();\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = paren_groups_stack.as_mut_ptr();\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \    let mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsaxcgr6n.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsaxcgr6n.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsaxcgr6n.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsaxcgr6n.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsaxcgr6n.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsaxcgr6n.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsaxcgr6n.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsaxcgr6n.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nwarning:\
    \ type annotations needed\n  --> /tmp/tmpsaxcgr6n.rs:12:53\n   |\n12 |     let\
    \ mut paren_groups_ptr_end = paren_groups_ptr.offset(paren_groups_stack.len());\n\
    \   |                                                     ^^^^^^\n   |\n   = note:\
    \ `#[warn(tyvar_behind_raw_pointer)]` on by default\n   = warning: this is accepted\
    \ in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note:\
    \ for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsaxcgr6n.rs:12:60\n   |\n12 |\
    \     let mut "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n  \
    \  let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon =\
    \ false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_or_semicolon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuvk8clnr.rs:32:85\n   |\n\
    32 |     let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_comma_\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuvk8clnr.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuvk8clnr.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuvk8clnr.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuvk8clnr.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuvk8clnr.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuvk8clnr.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuvk8clnr.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuvk8clnr.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpuvk8clnr.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.in\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `in`\n  --> /tmp/tmpdburvxf5.rs:26:41\n\
    \   |\n26 |     let mut paren_string = paren_string.in\n   |                 \
    \                        ^^ expected identifier, found keyword\n   |\nhelp: you\
    \ can escape reserved keywords to use them as identifiers\n   |\n26 |     let\
    \ mut paren_string = paren_string.r#in\n   |                                 \
    \        ~~~~\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpdburvxf5.rs:26:43\n\
    \   |\n26 |     let mut paren_string = paren_string.in\n   |                 \
    \                          ^ help: add `;` here\n27 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdburvxf5.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdburvxf5.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdburvxf5.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdburvxf5.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdburvxf5.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                        "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut open_brace_counts = Vec::new();\n\
    \    let mut close_brace_counts = Vec::new();\n    let mut open_brace_counts_iter\
    \ = open_brace_counts.iter();\n    let mut close_brace_counts_iter = close_brace_counts.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.iter();\n    let mut close_braces_iter = close_braces.iter();\n\
    \    let mut paren_groups_iter = paren_groups.iter();\n    let mut open_braces_iter\
    \ = open_braces.\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp8odw90uw.rs:44:1\n   |\n44\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp8odw90uw.rs:43:44\n\
    \   |\n43 |     let mut open_braces_iter = open_braces.\n   |                \
    \                            ^ help: add `;` here\n44 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8odw90uw.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8odw90uw.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8odw90uw.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8odw90uw.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8odw90uw.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8odw90uw.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8odw90uw.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8odw90uw.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8odw90uw.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as it"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open\
    \ = false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg56jcuco.rs:30:18\n   |\n\
    30 |     let mut paren\n   |                  ^ help: add `;` here\n31 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg56jcuco.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg56jcuco.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg56jcuco.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg56jcuco.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg56jcuco.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg56jcuco.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg56jcuco.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg56jcuco.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg56jcuco.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: abortin"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_stack = vec![];\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_b\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8udeqfmf.rs:27:31\n   |\n\
    27 |     let mut paren_group_open_b\n   |                               ^ help:\
    \ add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp8udeqfmf.rs:32:17\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8udeqfmf.rs:32:25\n \
    \  |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8udeqfmf.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8udeqfmf.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8udeqfmf.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8udeqfmf.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8udeqfmf.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8udeqfmf.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8udeqfmf.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_6cn6a.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpai_6cn6a.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpai_6cn6a.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_braces\
    \ = String::new();\n    let mut paren_group_closed_braces = String::new();\n \
    \   let mut paren_group_open_braces_index = -1;\n    let mut paren_group_closed_braces_index\
    \ = -1;\n    let mut paren_group_open_braces_index_end = -1;\n    let mut paren_group_closed_braces_index_end\
    \ = -1;\n    let mut paren_group_open_braces_index_start = -1;\n    let mut paren_group_closed_braces_index_start\
    \ = -1;\n    let mut paren_group_open_braces_index_start_end = -1;\n    let mut\
    \ paren_group_closed_braces_index_start_end = -1;\n    let mut paren_group_open_braces_index_start_end_end\
    \ = -1;\n    let mut paren_group_closed_braces_index_start_end_end = -1;\n   \
    \ let mut paren_group_open_braces_index_start_end_end_end = -1;\n    let mut paren_group_closed_braces_index_start_end_end_end\
    \ = -1;\n    let mut paren_group_open_braces_index_start_end_end_end_end = -1;\n\
    \    let mut paren_group_closed_braces_index_start_end_end_end_end = -1;\n   \
    \ let mut paren_group_open_braces_index_start_end_end_end_end_end = -1;\n    let\
    \ mut paren_group_closed_braces_index_start_end_end_end_end_end = -1;\n    let\
    \ mut paren_group_open_braces_index_start_end_end_end_end_end_end = -1;\n    let\
    \ mut paren_group_closed_braces_index_start_end_end_end_end_end_end = -1;\n  \
    \  let mut paren_group_open_braces_index_start_end_end_end_end_end_end_end = -1;\n\
    \    let mut paren_group_closed_braces_index_start_end_end_end_end_end_end_end\
    \ = -1;\n    let mut paren_group_open_braces_index_start_end_end_end_end_end_end_end_end_end\
    \ = -1;\n    let mut paren_group_closed_braces_index_start_end_end_end_end_end_end_end_end_end\
    \ = -1;\n    let mut paren_group_open_braces_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = -1;\n    let mut paren_group_closed_braces_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = -1;\n\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwdkkrewp.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwdkkrewp.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwdkkrewp.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwdkkrewp.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwdkkrewp.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwdkkrewp.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwdkkrewp.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwdkkrewp.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwdkkrewp.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open\
    \ = false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwg2hy02h.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwg2hy02h.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwg2hy02h.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwg2hy02h.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwg2hy02h.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwg2hy02h.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwg2hy02h.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwg2hy02h.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwg2hy02h.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwg2hy02h.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_braces\
    \ = 0;\n    let mut paren_group_closed_braces = 0;\n    let mut paren_group_open_braces_after_comma\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma = 0;\n    let mut paren_group_open_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces = 0;\n    let\
    \ mut paren_group_open_braces_after_comma_braces_after_comma = 0;\n    let mut\
    \ paren_group_closed_braces_after_comma_braces_after_comma = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces_after_comma\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma\
    \ = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma\
    \ = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma\
    \ = 0;\n    let mut paren_group_open_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces\
    \ = 0;\n    let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsdqmlo9z.rs:32:145\n   |\n\
    32 |     let mut paren_group_closed_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma_braces_after_comma\n\
    \   |                                                                        \
    \                                                                         ^ help:\
    \ add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpsdqmlo9z.rs:37:17\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsdqmlo9z.rs:37:25\n \
    \  |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsdqmlo9z.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsdqmlo9z.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsdqmlo9z.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsdqmlo9z.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsdqmlo9z.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsdqmlo9z.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpsdqmlo9z.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\r').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\f').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\a').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unknown character escape: `v`\n  --> /tmp/tmpo0bgspd0.rs:15:68\n\
    \   |\n15 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\\
    v').collect::<String>();\n   |                                               \
    \                     ^ unknown character escape\n   |\n   = help: for more information,\
    \ visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\n\
    error: unknown character escape: `f`\n  --> /tmp/tmpo0bgspd0.rs:16:68\n   |\n\
    16 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\f').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `a`\n  --> /tmp/tmpo0bgspd0.rs:17:68\n   |\n\
    17 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\a').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `e`\n  --> /tmp/tmpo0bgspd0.rs:18:68\n   |\n\
    18 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\e').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `v`\n  --> /tmp/tmpo0bgspd0.rs:19:68\n   |\n\
    19 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\v').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `e`\n  --> /tmp/tmpo0bgspd0.rs:20:68\n   |\n\
    20 |     let mut paren_string = paren_string.chars().filter(|c| *c !="
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut open_braces = 0;\n    let mut\
    \ closed_group = false;\n    let mut current_group = String::from(\"\");\n   \
    \ for c in paren_string.chars() {\n        if c == '(' {\n            open_braces\
    \ += 1;\n            current_group.push_str(&c);\n        } else if c == ')' {\n\
    \            open_braces -= 1;\n            if open_braces == 0 {\n          \
    \      paren_groups.push(current_group);\n                current_group = String::from(\"\
    \");\n            } else {\n                current_group.push_str(&c);\n    \
    \        }\n        } else if c == ' ' {\n            if open_braces == 0 {\n\
    \                current_group.push_str(&c);\n            } else {\n         \
    \       current_group.push_str(&c);\n            }\n        } else {\n       \
    \     current_group.push_str(&c);\n        }\n    }\n    if open_braces != 0 {\n\
    \        paren_groups.push(current_group);\n    }\n    paren_groups\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5meq4hxj.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5meq4hxj.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5meq4hxj.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5meq4hxj.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5meq4hxj.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5meq4hxj.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5meq4hxj.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5meq4hxj.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5meq4hxj.rs:15:36\n   |\n15 |             current_group.push_str(&c);\n\
    \   |                                    ^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5meq4hxj.rs:22:40\n   |\n22 |\
    \                 current_group.push_str(&c);\n   |                          \
    \              ^^ expected `str`, found `char`\n   |\n   = note: expected reference\
    \ `&str`\n              found reference `&char`\n\nerror[E0308]: mismatched types\n\
    \  -->"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open_braces\
    \ = String::new();\n    let mut paren_group_close_braces = String::new();\n  \
    \  let mut paren_group_open_brace_count = String::new();\n    let mut paren_group_close_brace_count\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens = String::new();\n\
    \    let mut paren_group_close_brace_count_in_parens = String::new();\n    let\
    \ mut paren_group_open_brace_count_in_parens_after_last_close_brace = String::new();\n\
    \    let mut paren_group_close_brace_count_in_parens_after_last_close_brace =\
    \ String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_close_brace_or_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_close_brace_or_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace_or_close_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_open_brace_or_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_close_brace_or_open_brace_or_close_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_close_brace_or_open_brace_or_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace_or_close_brace_or_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_open_brace_or_close_brace_or_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm6sm7pi6.rs:29:63\n   |\n\
    29 |     let mut paren_group_open_brace_count_in_parens_after_last_\n   |    \
    \                                                           ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpm6sm7pi6.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm6sm7pi6.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm6sm7pi6.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm6sm7pi6.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm6sm7pi6.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm6sm7pi6.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm6sm7pi6.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm6sm7pi6.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm6sm7pi6.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed = false;\n    let mut\
    \ paren_group_open_brace_or_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9yfa436f.rs:28:92\n   |\n\
    28 |     let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_close\n\
    \   |                                                                        \
    \                    ^ help: add `;` here\n29 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9yfa436f.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yfa436f.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yfa436f.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9yfa436f.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yfa436f.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9yfa436f.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ re"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_groups_stack = vec![];\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = 0;\n\
    \    let mut paren_groups_ptr_end = paren_string.len();\n    let mut paren_groups_ptr_end_ptr\
    \ = paren_groups_ptr_end;\n    let mut paren_groups_ptr_end_ptr_end = paren_groups_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let\
    \ mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe20w20ko.rs:25:37\n   |\n\
    25 |     let mut paren_groups_ptr_end_ptr\n   |                              \
    \       ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr` in this scope\n\
    \  --> /tmp/tmpe20w20ko.rs:17:56\n   |\n17 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n   |                          \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpe20w20ko.rs:18:60\n   |\n18 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                      \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpe20w20ko.rs:19:64\n   |\n19 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |                  \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpe20w20ko.rs:20:68\n   |\n20 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |              \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_braces = 0;\n    let mut paren_open = false;\n    let mut paren_closed\
    \ = false;\n    let mut paren_group_string = String::new();\n    let mut paren_group_start\
    \ = String::new();\n    let mut paren_group_end = String::new();\n    let mut\
    \ paren_group_end = String::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_start =\
    \ String::new();\n    let mut paren_group_end = String::new();\n    let mut paren_group_start\
    \ = String::new();\n    let mut paren_group_end = String::new();\n    let mut\
    \ paren_group_start = String::new();\n    let mut paren_group_end = String::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_start = String::new();\n    let mut\
    \ paren_group_end = String::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_start =\
    \ String::new();\n    let mut paren_group_end = String::new();\n    let mut paren_group_start\
    \ = String::new();\n    let mut paren_group_end = String::new();\n    let mut\
    \ paren_group_start = String::new();\n    let mut paren_group_end = String::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_start = String::new();\n    let mut\
    \ paren_group_end = String::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_start =\
    \ String::new();\n    let mut paren_group_end = String::new();\n    let mut paren_group_start\
    \ = String::new();\n    let mut paren_group_end = String::new();\n    let mut\
    \ paren_group_start = String::new();\n    let mut paren_group_end = String::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_start = String::new();\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9hhkh4lw.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9hhkh4lw.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9hhkh4lw.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9hhkh4lw.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9hhkh4lw.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9hhkh4lw.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9hhkh4lw.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9hhkh4lw.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9hhkh4lw.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{' && c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '[' && c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\r').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\0').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp0ld97t9v.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmp0ld97t9v.rs:29:1\n   |\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                         - expected `|`\n\
    29 | }\n   | ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp0ld97t9v.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0ld97t9v.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0ld97t9v.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0ld97t9v.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0ld97t9v.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0ld97t9v.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0ld97t9v.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0ld97t9v.rs:"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp93gxa6zt.rs:29:130\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                                          ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp93gxa6zt.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp93gxa6zt.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                        "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprd44gg7e.rs:38:50\n   |\n\
    38 |     let mut paren_string = paren_string.into_iter\n   |                 \
    \                                 ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprd44gg7e.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0615]:\
    \ attempted to take value of method `into_iter` on type `Vec<char>`\n  --> /tmp/tmprd44gg7e.rs:38:41\n\
    \   |\n38 |     let mut paren_string = paren_string.into_iter\n   |          \
    \                               ^^^^^^^^^ method, not a field\n   |\nhelp: use\
    \ parentheses to call the method\n   |\n38 |     let mut paren_string = paren_string.int"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprd44gg7e.rs:38:50\n   |\n\
    38 |     let mut paren_string = paren_string.into_iter\n   |                 \
    \                                 ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprd44gg7e.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0615]:\
    \ attempted to take value of method `into_iter` on type `Vec<char>`\n  --> /tmp/tmprd44gg7e.rs:38:41\n\
    \   |\n38 |     let mut paren_string = paren_string.into_iter\n   |          \
    \                               ^^^^^^^^^ method, not a field\n   |\nhelp: use\
    \ parentheses to call the method\n   |\n38 |     let mut paren_string = paren_string.int"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_6cn6a.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpai_6cn6a.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpai_6cn6a.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_closed = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz460m5cp.rs:30:88\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz460m5cp.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz460m5cp.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz460m5cp.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz460m5cp.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz460m5cp.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz460m5cp.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz460m5cp.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz460m5cp.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz460m5cp.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `("
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp14qlrvp_.rs:30:95\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    \   |                                                                        \
    \                       ^ help: add `;` here\n31 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp14qlrvp_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp14qlrvp_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implici"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_length = 0;\n    let\
    \ mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_count = 0;\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpe7eh22g9.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpe7eh22g9.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpe7eh22g9.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7eh22g9.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7eh22g9.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe7eh22g9.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe7eh22g9.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7eh22g9.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7eh22g9.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_paren\
    \ = false;\n    let mut paren_group_closed_brace_or_paren = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space = false;\n    let mut paren_group_closed_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_\n}\n\nfn main() {\n    let\
    \ candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy6yuzhce.rs:32:41\n   |\n\
    32 |     let mut paren_group_closed_brace_or_\n   |                          \
    \               ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy6yuzhce.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy6yuzhce.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy6yuzhce.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy6yuzhce.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy6yuzhce.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy6yuzhce.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy6yuzhce.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy6yuzhce.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpy6yuzhce.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp14qlrvp_.rs:30:95\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_\n\
    \   |                                                                        \
    \                       ^ help: add `;` here\n31 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp14qlrvp_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp14qlrvp_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp14qlrvp_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp14qlrvp_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implici"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpi48gdl0f.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_\n   |                                                       ^ unclosed\
    \ delimiter\n29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected one\
    \ of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpi48gdl0f.rs:29:1\n\
    \   |\n29 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi48gdl0f.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi48gdl0f.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi48gdl0f.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi48gdl0f.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi48gdl0f.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi48gdl0f.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi48gdl0f.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi48gdl0f.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_level =\
    \ String::new();\n    let mut paren_group_open_braces = String::new();\n    let\
    \ mut paren_group_close_braces = String::new();\n    let mut paren_group_open_braces_level\
    \ = String::new();\n    let mut paren_group_close_braces_level = String::new();\n\
    \    let mut paren_group_open_braces_level_count = String::new();\n    let mut\
    \ paren_group_close_braces_level_count = String::new();\n    let mut paren_group_open_braces_level_count_max\
    \ = String::new();\n    let mut paren_group_close_braces_level_count_max = String::new();\n\
    \    let mut paren_group_open_braces_level_count_min = String::new();\n    let\
    \ mut paren_group_close_braces_level_count_min = String::new();\n    let mut paren_group_open_braces_level_count_min\
    \ = String::new();\n    let mut paren_group_close_braces_level_count_min = String::new();\n\
    \    let mut paren_group_open_braces_level_count_max = String::new();\n    let\
    \ mut paren_group_close_braces_level_count_max = String::new();\n    let mut paren_group_open_braces_level_count_min\
    \ = String::new();\n    let mut paren_group_close_braces_level_count_min = String::new();\n\
    \    let mut paren_group_open_braces_level_count_max = String::new();\n    let\
    \ mut paren_group_close_braces_level_count_max = String::new();\n    let mut paren_group_open_braces_level_count_min\
    \ = String::new();\n    let mut paren_group_close_braces_level_count_min = String::new();\n\
    \    let mut paren_group_open_braces_level_count_max = String::new();\n    let\
    \ mut paren_group_close_braces_level_count_max = String::new();\n    let mut paren_group_open_braces_level_count_min\
    \ = String::new();\n    let mut paren_group_close_braces_level_count_min = String::new();\n\
    \    let mut paren_group_open_braces_level_count_max = String::new();\n    let\
    \ mut paren_group_close_braces_level_count_max = String::new();\n    let mut paren_group_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptgswsqm9.rs:38:25\n   |\n\
    38 |     let mut paren_group_\n   |                         ^ help: add `;` here\n\
    39 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmptgswsqm9.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptgswsqm9.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptgswsqm9.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptgswsqm9.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptgswsqm9.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptgswsqm9.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptgswsqm9.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptgswsqm9.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmptgswsqm9.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp93gxa6zt.rs:29:130\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                                          ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp93gxa6zt.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp93gxa6zt.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                        "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\n}\n\n\
    fn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzgggp1mi.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpzgggp1mi.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp9yy0x1_v.rs:28:1\n   |\n27 |     let mut paren_string\
    \ = paren_string.chars().filter(|c| !c.is_ascii_letter()).collect::<String\n \
    \  |                                                                         \
    \                         - expected one of 9 possible tokens\n28 | }\n   | ^\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp9yy0x1_v.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmp9yy0x1_v.rs:11:63\n\
    \   |\n11 |     let mut paren_string = paren_string.chars("
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_open_braces = 0;\n\
    \    let mut paren_group_close_braces = 0;\n    let mut paren_group_open_parens\
    \ = 0;\n    let mut paren_group_close_parens = 0;\n    let mut paren_group_spaces\
    \ = 0;\n    let mut paren_group_non_spaces = 0;\n    let mut paren_group_non_spaces_end\
    \ = 0;\n    let mut paren_group_non_spaces_start = 0;\n    let mut paren_group_non_spaces_start_index\
    \ = 0;\n    let mut paren_group_non_spaces_end_index = 0;\n    let mut paren_group_non_spaces_start_index2\
    \ = 0;\n    let mut paren_group_non_spaces_end_index2 = 0;\n    let mut paren_group_non_spaces_start_index3\
    \ = 0;\n    let mut paren_group_non_spaces_end_index3 = 0;\n    let mut paren_group_non_spaces_start_index4\
    \ = 0;\n    let mut paren_group_non_spaces_end_index4 = 0;\n    let mut paren_group_non_spaces_start_index5\
    \ = 0;\n    let mut paren_group_non_spaces_end_index5 = 0;\n    let mut paren_group_non_spaces_start_index6\
    \ = 0;\n    let mut paren_group_non_spaces_end_index6 = 0;\n    let mut paren_group_non_spaces_start_index7\
    \ = 0;\n    let mut paren_group_non_spaces_end_index7 = 0;\n    let mut paren_group_non_spaces_start_index8\
    \ = 0;\n    let mut paren_group_non_spaces_end_index8 = 0;\n    let mut paren_group_non_spaces_start_index9\
    \ = 0;\n    let mut paren_group_non_spaces_end_index9 = 0;\n    let mut paren_group_non_spaces_start_index10\
    \ = 0;\n    let mut paren_group_non_spaces_end_index10 = 0;\n    let mut paren_group_non_spaces_start_index11\
    \ = 0;\n    let mut paren_group_non_spaces_end_index11 = 0;\n    let mut paren_group_non_spaces_start_index12\
    \ = 0;\n    let mut paren_group_non_spaces_end_index12 = 0;\n    let mut paren_group_non_spaces_start_index13\
    \ = 0;\n    let mut paren_group_non_spaces_end_index13 = 0;\n    let mut paren_group_non_spaces_start_index14\
    \ = 0;\n    let mut paren_group_non_spaces_end_index14 = 0;\n    let mut paren_group_non_spaces_start_index15\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp70d4485_.rs:49:1\n  \
    \ |\n49 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp70d4485_.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp70d4485_.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp70d4485_.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp70d4485_.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp70d4485_.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp70d4485_.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp70d4485_.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp70d4485_.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string;\n\
    \    let mut paren_group_open_braces = Vec::new();\n    let mut paren_group_close_braces\
    \ = Vec::new();\n    let mut paren_group_open_brace_count = Vec::new();\n    let\
    \ mut paren_group_close_brace_count = Vec::new();\n    let mut paren_group_open_brace_strings\
    \ = Vec::new();\n    let mut paren_group_close_brace_strings = Vec::new();\n \
    \   let mut paren_group_open_brace_strings_count = Vec::new();\n    let mut paren_group_close_brace_strings_count\
    \ = Vec::new();\n    let mut paren_group_open_brace_strings_index = Vec::new();\n\
    \    let mut paren_group_close_brace_strings_index = Vec::new();\n    let mut\
    \ paren_group_open_brace_strings_index_count = Vec::new();\n    let mut paren_group_close_brace_strings_index_count\
    \ = Vec::new();\n    let mut paren_group_open_brace_strings_index_count = Vec::new();\n\
    \    let mut paren_group_close_brace_strings_index_count = Vec::new();\n    let\
    \ mut paren_group_open_brace_strings_index_count = Vec::new();\n    let mut paren_group_close_brace_strings_index_count\
    \ = Vec::new();\n    let mut paren_group_open_brace_strings_index_count = Vec::new();\n\
    \    let mut paren_group_close_brace_strings_index_count = Vec::new();\n    let\
    \ mut paren_group_open_brace_strings_index_count = Vec::new();\n    let mut paren_group_close_brace_strings_index_count\
    \ = Vec::new();\n    let mut paren_group_open_brace_strings_index_count = Vec::new();\n\
    \    let mut paren_group_close_brace_strings_index_count = Vec::new();\n    let\
    \ mut paren_group_open_brace_strings_index_count = Vec::new();\n    let mut paren_group_close_brace_strings_index_count\
    \ = Vec::new();\n    let mut paren_group_open_brace_strings_index_count = Vec::new();\n\
    \    let mut paren_group_close_brace_strings_index_count = Vec::new();\n    let\
    \ mut paren_group_open_brace_strings_index_count = Vec::\n}\n\nfn main() {\n \
    \   let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp3y7px8ro.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp3y7px8ro.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3y7px8ro.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3y7px8ro.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3y7px8ro.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3y7px8ro.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3y7px8ro.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3y7px8ro.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3y7px8ro.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmphg5gzcmb.rs:28:66\n\
    \   |\n28 |     let mut paren_string = paren_string.chars().filter(|c| *c == ')\n\
    \   |                                                                  ^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    paren_string.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:17:17\n\
    \   |\n17 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:17:25\n   |\n17 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:17\n   |\n18 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:25\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7hitlqs7.rs:19:17\n   |\n19 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:19:25\n   |\n19 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:20:25\n   |\n20 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n  --> /tmp/tmp7hitlqs7.rs:12:37\n   |\n12 |     paren_string.split_whitespace().collect()\n\
    \   |                                     ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the\
    \ trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open\
    \ = false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1g0z5ft_.rs:30:100\n   |\n\
    30 |     let mut paren_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma\n\
    \   |                                                                        \
    \                            ^ help: add `;` here\n31 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1g0z5ft_.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1g0z5ft_.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1g0z5ft_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1g0z5ft_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1g0z5ft_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1g0z5ft_.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1g0z5ft_.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1g0z5ft_.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1g0z5ft_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.peekable();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n    let mut paren_string = paren_string.peek();\n\
    \    let mut paren_string = paren_string.peek();\n\n}\n\nfn main() {\n    let\
    \ candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1w5bhkeh.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1w5bhkeh.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1w5bhkeh.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1w5bhkeh.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1w5bhkeh.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1w5bhkeh.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1w5bhkeh.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1w5bhkeh.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `peek` found for enum `Option` in the current scope\n  --> /tmp/tmp1w5bhkeh.rs:14:41\n\
    \   |\n14 |     let mut paren_string = paren_string.peek();\n   |            \
    \                             ^^^^ method not found in `Option<&char>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1w5bhkeh.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expressi"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.filter(|&c| !c.is_whitespace());\n    let mut paren_string =\
    \ paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.filter(|&c| !c.is_whitespace());\n  \
    \  let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmprd44gg7e.rs:38:50\n   |\n\
    38 |     let mut paren_string = paren_string.into_iter\n   |                 \
    \                                 ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprd44gg7e.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprd44gg7e.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprd44gg7e.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0615]:\
    \ attempted to take value of method `into_iter` on type `Vec<char>`\n  --> /tmp/tmprd44gg7e.rs:38:41\n\
    \   |\n38 |     let mut paren_string = paren_string.into_iter\n   |          \
    \                               ^^^^^^^^^ method, not a field\n   |\nhelp: use\
    \ parentheses to call the method\n   |\n38 |     let mut paren_string = paren_string.int"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ String::new();\n    let mut paren_group_closed = String::new();\n    let mut\
    \ paren_group_open_brace = String::new();\n    let mut paren_group_closed_brace\
    \ = String::new();\n    let mut paren_group_open_brace_start = String::new();\n\
    \    let mut paren_group_open_brace_end = String::new();\n    let mut paren_group_closed_brace_start\
    \ = String::new();\n    let mut paren_group_closed_brace_end = String::new();\n\
    \    let mut paren_group_open_brace_open = String::new();\n    let mut paren_group_open_brace_closed\
    \ = String::new();\n    let mut paren_group_closed_brace_open = String::new();\n\
    \    let mut paren_group_closed_brace_closed = String::new();\n    let mut paren_group_open_brace_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_closed_brace = String::new();\n\
    \    let mut paren_group_closed_brace_open_brace = String::new();\n    let mut\
    \ paren_group_closed_brace_closed_brace = String::new();\n    let mut paren_group_open_brace_open_brace_start\
    \ = String::new();\n    let mut paren_group_open_brace_open_brace_end = String::new();\n\
    \    let mut paren_group_open_brace_closed_brace_start = String::new();\n    let\
    \ mut paren_group_open_brace_closed_brace_end = String::new();\n    let mut paren_group_closed_brace_open_brace_start\
    \ = String::new();\n    let mut paren_group_closed_brace_open_brace_end = String::new();\n\
    \    let mut paren_group_closed_brace_closed_brace_start = String::new();\n  \
    \  let mut paren_group_closed_brace_closed_brace_end = String::new();\n    let\
    \ mut paren_group_open_brace_open_brace_open = String::new();\n    let mut paren_group_open_brace_open_brace_closed\
    \ = String::new();\n    let mut paren_group_open_brace_\n}\n\nfn main() {\n  \
    \  let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpurhl6adl.rs:37:36\n   |\n\
    37 |     let mut paren_group_open_brace_\n   |                               \
    \     ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpurhl6adl.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpurhl6adl.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpurhl6adl.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpurhl6adl.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpurhl6adl.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpurhl6adl.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpurhl6adl.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpurhl6adl.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpurhl6adl.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsqs1gzt_.rs:29:109\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n30 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsqs1gzt_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsqs1gzt_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsqs1gzt_.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsqs1gzt_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n  \
    \  let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon =\
    \ false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpeh0fidk5.rs:32:124\n   |\n\
    32 |     let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_equal_or_comma_or_semicolon_or_equal_or_comma\n\
    \   |                                                                        \
    \                                                    ^ help: add `;` here\n33\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpeh0fidk5.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeh0fidk5.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeh0fidk5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeh0fidk5.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpeh0fidk5.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeh0fidk5.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeh0fidk5.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpeh0fidk5.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeh0fidk5.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    paren_string.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:17:17\n\
    \   |\n17 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:17:25\n   |\n17 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:17\n   |\n18 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:25\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7hitlqs7.rs:19:17\n   |\n19 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:19:25\n   |\n19 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:20:25\n   |\n20 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n  --> /tmp/tmp7hitlqs7.rs:12:37\n   |\n12 |     paren_string.split_whitespace().collect()\n\
    \   |                                     ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the\
    \ trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '[' && c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{' && c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ',').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ',').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ',').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpl2zks1hh.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmpl2zks1hh.rs:29:1\n   |\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                         - expected `|`\n\
    29 | }\n   | ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpl2zks1hh.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl2zks1hh.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl2zks1hh.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl2zks1hh.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl2zks1hh.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl2zks1hh.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl2zks1hh.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl2zks1hh.rs:"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ' ').collect::<String>();\n    let mut paren_string = paren_string.split_whitespace();\n\
    \    let mut paren_string = paren_string.collect::<Vec<String>>();\n    let mut\
    \ paren_string = paren_string.into_iter().filter(|c| *c != '(').collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| *c != ')').collect::<Vec<String>>();\n\
    \    paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg5bf9in9.rs:19:17\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg5bf9in9.rs:19:25\n   |\n19 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg5bf9in9.rs:20:17\n   |\n20 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg5bf9in9.rs:20:25\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg5bf9in9.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg5bf9in9.rs:21:25\n   |\n21 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg5bf9in9.rs:22:17\n   |\n22 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg5bf9in9.rs:22:25\n   |\n22 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n  --> /tmp/tmpg5bf9in9.rs:11:41\n   |\n11 |     let mut paren_string\
    \ = paren_string.collect::<Vec<String>>();\n   |                             \
    \            ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \   |\n   = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror[E0277]: can't compare `String` with `char`\n  --> /tmp/tmpg5bf9in9.rs:12:67\n\
    \   |\n12 |     let mut paren_string = paren_string.into_iter()"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open_braces\
    \ = String::from(\"\");\n    let mut paren_group_close_braces = String::from(\"\
    \");\n    let mut paren_group_open_brace_count = String::from(\"\");\n    let\
    \ mut paren_group_close_brace_count = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens =\
    \ String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_open_braces\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_open_braces\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_close_braces\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_close_braces\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_open_braces_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_open_braces_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_close_braces_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_close_braces_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_open_braces_in_parens_after_close_braces\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_open_braces_in_parens_after_close_braces\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_close_braces_in_parens_after_open_braces\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_close_braces_in_parens_after_open_braces\
    \ = String::from(\"\");\n    let mut paren_group_open_brace_count_in_parens_after_open_braces_in_parens_after_close_braces_in_parens\
    \ = String::from(\"\");\n    let mut paren_group_close_brace_count_in_parens_after_open_braces_in_paren\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp85ljad9i.rs:30:79\n   |\n\
    30 |     let mut paren_group_close_brace_count_in_parens_after_open_braces_in_paren\n\
    \   |                                                                        \
    \       ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp85ljad9i.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp85ljad9i.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp85ljad9i.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp85ljad9i.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp85ljad9i.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp85ljad9i.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp85ljad9i.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp85ljad9i.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp85ljad9i.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj9expfsi.rs:30:18\n   |\n\
    30 |     let mut paren\n   |                  ^ help: add `;` here\n31 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj9expfsi.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj9expfsi.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj9expfsi.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj9expfsi.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj9expfsi.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj9expfsi.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: abortin"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut open_paren = 0;\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            open_braces += 1;\n            open_paren\
    \ += 1;\n        } else if c == ')' {\n            open_braces -= 1;\n       \
    \     closed_group = true;\n        } else if c == ')' && open_braces == 0 {\n\
    \            paren_groups.push(paren_string.split_at(open_paren).collect::<Vec<_>>());\n\
    \            open_paren = 0;\n            closed_group = false;\n        }\n \
    \   }\n    if closed_group {\n        paren_groups.push(paren_string.split_at(open_paren).collect::<Vec<_>>());\n\
    \    }\n    paren_groups\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz3g5gntl.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz3g5gntl.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz3g5gntl.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz3g5gntl.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz3g5gntl.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz3g5gntl.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz3g5gntl.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz3g5gntl.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `collect` exists for tuple `(&str, &str)`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpz3g5gntl.rs:20:65\n   |\n20 |             paren_groups.push(paren_string.split_at(open_paren).collect::<Vec<_>>());\n\
    \   |                                                                 ^^^^^^^\
    \ method cannot be called on `(&str, &str)` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `(&str,\
    \ &str): Iterator`\n           which is required by `&mut (&str, &str): Iterator`\n\
    \nerror[E0599]: the method `c"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_groups_stack = Vec::new();\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = 0;\n\
    \    let mut paren_groups_ptr_end = paren_string.len();\n    let mut paren_groups_ptr_end_ptr\
    \ = paren_groups_ptr_end;\n    let mut paren_groups_ptr_end_ptr_end = paren_groups_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let\
    \ mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfzu5r_l6.rs:25:34\n   |\n\
    25 |     let mut paren_groups_ptr_end_\n   |                                 \
    \ ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr` in this scope\n  --> /tmp/tmpfzu5r_l6.rs:17:56\n\
    \   |\n17 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n\
    \   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfzu5r_l6.rs:18:60\n   |\n18 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                      \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpfzu5r_l6.rs:19:64\n   |\n19 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |                  \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfzu5r_l6.rs:20:68\n   |\n20 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |              \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1onfu6rm.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1onfu6rm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1onfu6rm.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_groups_stack = Vec::new();\n\
    \    let mut paren_groups_buffer = Vec::new();\n    let mut paren_groups_buffer_len\
    \ = 0;\n    let mut paren_groups_buffer_len2 = 0;\n    let mut paren_groups_buffer_len3\
    \ = 0;\n    let mut paren_groups_buffer_len4 = 0;\n    let mut paren_groups_buffer_len5\
    \ = 0;\n    let mut paren_groups_buffer_len6 = 0;\n    let mut paren_groups_buffer_len7\
    \ = 0;\n    let mut paren_groups_buffer_len8 = 0;\n    let mut paren_groups_buffer_len9\
    \ = 0;\n    let mut paren_groups_buffer_len10 = 0;\n    let mut paren_groups_buffer_len11\
    \ = 0;\n    let mut paren_groups_buffer_len12 = 0;\n    let mut paren_groups_buffer_len13\
    \ = 0;\n    let mut paren_groups_buffer_len14 = 0;\n    let mut paren_groups_buffer_len15\
    \ = 0;\n    let mut paren_groups_buffer_len16 = 0;\n    let mut paren_groups_buffer_len17\
    \ = 0;\n    let mut paren_groups_buffer_len18 = 0;\n    let mut paren_groups_buffer_len19\
    \ = 0;\n    let mut paren_groups_buffer_len20 = 0;\n    let mut paren_groups_buffer_len21\
    \ = 0;\n    let mut paren_groups_buffer_len22 = 0;\n    let mut paren_groups_buffer_len23\
    \ = 0;\n    let mut paren_groups_buffer_len24 = 0;\n    let mut paren_groups_buffer_len25\
    \ = 0;\n    let mut paren_groups_buffer_len26 = 0;\n    let mut paren_groups_buffer_len27\
    \ = 0;\n    let mut paren_groups_buffer_len28 = 0;\n    let mut paren_groups_buffer_len29\
    \ = 0;\n    let mut paren_groups_buffer_len30 = 0;\n    let mut paren_groups_buffer_len31\
    \ = 0;\n    let mut paren_groups_buffer_len32 = 0;\n    let mut paren_groups_buffer_len33\
    \ = 0;\n    let mut paren_groups_buffer_len34 = 0;\n    let mut paren_groups_buffer_len35\
    \ = 0;\n    let mut paren_groups_buffer_len36 = 0;\n    let mut paren_groups_buffer_len37\
    \ = 0;\n    let mut paren_groups_buffer_len38 = 0;\n    let mut paren_groups_buffer_len39\
    \ = 0;\n    let mut paren_groups_buffer_len40 = 0;\n    let mut paren_groups_buffer_len41\
    \ = 0;\n    let mut paren_groups_buffer_len42 = 0;\n    let mut paren_groups_buffer_len43\
    \ = 0;\n    let mut paren_groups_buffer_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptk9ucieh.rs:54:33\n   |\n\
    54 |     let mut paren_groups_buffer_\n   |                                 ^\
    \ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptk9ucieh.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptk9ucieh.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptk9ucieh.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptk9ucieh.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptk9ucieh.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptk9ucieh.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptk9ucieh.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptk9ucieh.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptk9ucieh.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphccubn3g.rs:35:46\n   |\n\
    35 |     let mut paren_group_open_brace_or_closed_\n   |                     \
    \                         ^ help: add `;` here\n36 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphccubn3g.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphccubn3g.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphccubn3g.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphccubn3g.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphccubn3g.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphccubn3g.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphccubn3g.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphccubn3g.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphccubn3g.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open_braces\
    \ = String::new();\n    let mut paren_group_close_braces = String::new();\n  \
    \  let mut paren_group_open_brace_count = String::new();\n    let mut paren_group_close_brace_count\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens = String::new();\n\
    \    let mut paren_group_close_brace_count_in_parens = String::new();\n    let\
    \ mut paren_group_open_brace_count_in_parens_after_last_close_brace = String::new();\n\
    \    let mut paren_group_close_brace_count_in_parens_after_last_close_brace =\
    \ String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_close_brace_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_close_brace_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace_after_last_close_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_open_brace_after_last_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_close_brace_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_close_brace_after_last_open_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_open_brace_after_last_close_brace_after_last_close_brace\
    \ = String::new();\n    let mut paren_group_close_brace_count_in_parens_after_last_close_brace_after_last_open_brace_after_last_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count_in_parens_after_last_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph5iqyuge.rs:29:63\n   |\n\
    29 |     let mut paren_group_open_brace_count_in_parens_after_last_\n   |    \
    \                                                           ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmph5iqyuge.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph5iqyuge.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph5iqyuge.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph5iqyuge.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph5iqyuge.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph5iqyuge.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph5iqyuge.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph5iqyuge.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmph5iqyuge.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n  \
    \  let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon =\
    \ false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9yhxelye.rs:33:78\n   |\n\
    33 |     let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n34 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9yhxelye.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yhxelye.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yhxelye.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yhxelye.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9yhxelye.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yhxelye.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yhxelye.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yhxelye.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9yhxelye.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon = false;\n  \
    \  let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon =\
    \ false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon_or_comma_or_semicolon\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma_or_semicolon_or_colon_or_semicolon_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd9p2ca7o.rs:32:76\n   |\n\
    32 |     let mut paren_group_open_brace_or_paren_or_space_or_comma_or_semicolon_\n\
    \   |                                                                        \
    \    ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd9p2ca7o.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd9p2ca7o.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd9p2ca7o.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd9p2ca7o.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd9p2ca7o.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd9p2ca7o.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd9p2ca7o.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd9p2ca7o.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd9p2ca7o.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no ta"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9a3e2bq8.rs:47:40\n   |\n\
    47 |     let mut paren_string = paren_string\n   |                           \
    \             ^ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9a3e2bq8.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9a3e2bq8.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9a3e2bq8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmp9a3e2bq8.rs:11:28\n   |\n10 |     let\
    \ mut paren_string = paren_string.collect();\n   |         ---------------- consider\
    \ giving `paren_string` a type\n11 |     let mut paren_string = paren_string.into_iter();\n\
    \   |                            ^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this poi"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.in\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `in`\n  --> /tmp/tmpdburvxf5.rs:26:41\n\
    \   |\n26 |     let mut paren_string = paren_string.in\n   |                 \
    \                        ^^ expected identifier, found keyword\n   |\nhelp: you\
    \ can escape reserved keywords to use them as identifiers\n   |\n26 |     let\
    \ mut paren_string = paren_string.r#in\n   |                                 \
    \        ~~~~\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpdburvxf5.rs:26:43\n\
    \   |\n26 |     let mut paren_string = paren_string.in\n   |                 \
    \                          ^ help: add `;` here\n27 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdburvxf5.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdburvxf5.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdburvxf5.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdburvxf5.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdburvxf5.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdburvxf5.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                        "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut open_brace_groups = Vec::new();\n    let mut close_braces = 0;\n    let\
    \ mut close_brace_groups = Vec::new();\n    let mut current_group = String::new();\n\
    \    let mut current_group_open = false;\n    let mut current_group_close = false;\n\
    \    let mut current_group_open_brace = false;\n    let mut current_group_close_brace\
    \ = false;\n    let mut current_group_open_brace_group = false;\n    let mut current_group_close_brace_group\
    \ = false;\n    let mut current_group_open_brace_group_open = false;\n    let\
    \ mut current_group_close_brace_group_open = false;\n    let mut current_group_open_brace_group_close\
    \ = false;\n    let mut current_group_close_brace_group_close = false;\n    let\
    \ mut current_group_open_brace_group_open_brace = false;\n    let mut current_group_close_brace_group_open_brace\
    \ = false;\n    let mut current_group_open_brace_group_close_brace = false;\n\
    \    let mut current_group_close_brace_group_close_brace = false;\n    let mut\
    \ current_group_open_brace_group_open_brace_group = false;\n    let mut current_group_close_brace_group_open_brace_group\
    \ = false;\n    let mut current_group_open_brace_group_close_brace_group = false;\n\
    \    let mut current_group_close_brace_group_close_brace_group = false;\n    let\
    \ mut current_group_open_brace_group_open_brace_group_open = false;\n    let mut\
    \ current_group_close_brace_group_open_brace_group_open = false;\n    let mut\
    \ current_group_open_brace_group_close_brace_group_open = false;\n    let mut\
    \ current_group_close_brace_group_close_brace_group_open = false;\n    let mut\
    \ current_group_open_brace_group_open_brace_group_close = false;\n    let mut\
    \ current_group_close_brace_group_open_brace_group_close = false;\n    let mut\
    \ current_group_open_brace_group_close_brace_group_close = false;\n    let mut\
    \ current_group_close_brace_group_close_brace_group_close = false;\n    let mut\
    \ current_group_open_brace_group_open_brace_group_open_brace = false;\n    let\
    \ mut current_group_close_brace_group_open_brace_group_open_brace = false;\n \
    \   let mut current_group_open_brace_group_close_brace_group_open_brace = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppifbida8.rs:43:11\n   |\n\
    43 |     let mu\n   |           ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppifbida8.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppifbida8.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppifbida8.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppifbida8.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppifbida8.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppifbida8.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppifbida8.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppifbida8.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmppifbida8.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_whitespace()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_letter()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_letter()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_digit()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_digit()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_upper()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_upper()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_lower()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_lower()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_letter()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_letter()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_digit()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| c.is_ascii_digit()).collect::<String>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_ascii_upper()).collect::<String>();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkyzx61g6.rs:27:11\n   |\n\
    27 |     let mu\n   |           ^ help: add `;` here\n28 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkyzx61g6.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkyzx61g6.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkyzx61g6.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkyzx61g6.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkyzx61g6.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkyzx61g6.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkyzx61g6.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkyzx61g6.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpkyzx61g6.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<String>();\n\
    \    |                                           ^^^^^^^^^\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            wh"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj9expfsi.rs:30:18\n   |\n\
    30 |     let mut paren\n   |                  ^ help: add `;` here\n31 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj9expfsi.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj9expfsi.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj9expfsi.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj9expfsi.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj9expfsi.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj9expfsi.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpj9expfsi.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: abortin"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_6cn6a.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpai_6cn6a.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpai_6cn6a.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_length = 0;\n    let\
    \ mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_chars_len = 0;\n    let mut paren_group_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_len = 0;\n    let mut paren_group_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_len = 0;\n    let\
    \ mut paren_group_chars_chars_chars_chars_chars_chars_len = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren_group_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len\
    \ = 0;\n    let mut paren\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp413a40m0.rs:36:18\n   |\n\
    36 |     let mut paren\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp413a40m0.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp413a40m0.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp413a40m0.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp413a40m0.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp413a40m0.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp413a40m0.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp413a40m0.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp413a40m0.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp413a40m0.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\nerror: abortin"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1onfu6rm.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1onfu6rm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1onfu6rm.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_paren = false;\n    let mut\
    \ paren_group_closed_brace_or_paren = false;\n    let mut paren_group_open_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_closed_brace_or_paren_or_space = false;\n\
    \    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\n}\n\n\
    fn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzgggp1mi.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzgggp1mi.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzgggp1mi.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpzgggp1mi.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_6cn6a.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpai_6cn6a.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpai_6cn6a.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpai_6cn6a.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpai_6cn6a.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.\n}\n\nfn\
    \ main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpt_1nzz74.rs:33:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n33 |     let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.\n   |                                                           ^ unclosed\
    \ delimiter\n34 | }\n   | ^ mismatched closing delimiter\n\nerror: unexpected\
    \ token: `)`\n  --> /tmp/tmpt_1nzz74.rs:34:1\n   |\n34 | }\n   | ^\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpt_1nzz74.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_1nzz74.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_1nzz74.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_1nzz74.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_1nzz74.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_1nzz74.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_1nzz74.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_1nzz74.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in th"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == '(').collect\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpu6l7i79d.rs:27:78\n   |\n\
    27 |     let mut paren_string = paren_string.chars().filter(|c| *c == '(').collect\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n28 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu6l7i79d.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu6l7i79d.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu6l7i79d.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu6l7i79d.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu6l7i79d.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu6l7i79d.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu6l7i79d.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu6l7i79d.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n --> /tmp/tmpu6l7i79d.rs:9:75\n  |\n9 | \
    \    let mut paren_string = paren_string.chars().filter(|c| *c != '(' && c !=\
    \ ')').collect::<String>();\n  |                                             \
    \                              ^^ no implementation fo"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed =\
    \ false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp93gxa6zt.rs:29:130\n   |\n\
    29 |     let mut paren_group_open_brace_or_closed_brace_or_closed_closed_closed_closed_closed_closed_closed_closed_closed_closed_close\n\
    \   |                                                                        \
    \                                                          ^ help: add `;` here\n\
    30 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp93gxa6zt.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp93gxa6zt.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp93gxa6zt.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp93gxa6zt.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                        "
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace());\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.is_whitespace());\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.\n}\n\nfn\
    \ main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpt_1nzz74.rs:33:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n33 |     let mut paren_string = paren_string.into_iter().filter(|&c|\
    \ !c.\n   |                                                           ^ unclosed\
    \ delimiter\n34 | }\n   | ^ mismatched closing delimiter\n\nerror: unexpected\
    \ token: `)`\n  --> /tmp/tmpt_1nzz74.rs:34:1\n   |\n34 | }\n   | ^\n\nerror: expected\
    \ one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpt_1nzz74.rs:34:1\n\
    \   |\n34 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_1nzz74.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_1nzz74.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_1nzz74.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_1nzz74.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_1nzz74.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_1nzz74.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_1nzz74.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in th"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '[' && c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{' && c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    paren_string.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdte5ka0f.rs:18:17\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdte5ka0f.rs:18:25\n   |\n18 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdte5ka0f.rs:19:17\n   |\n19 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdte5ka0f.rs:19:25\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdte5ka0f.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdte5ka0f.rs:20:25\n   |\n20 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdte5ka0f.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdte5ka0f.rs:21:25\n   |\n21 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n --> /tmp/tmpdte5ka0f.rs:9:62\n  |\n9 | \
    \    let mut paren_string = paren_string.chars().filter(|c| c != '(' && c != ')').collect::<String>();\n\
    \  |                                                              ^^ no implementation\
    \ for `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpdte5ka0f.rs:9:74\n\
    \  |\n9 |     let mut paren_string = paren_string.chars().filter(|c| c != '('\
    \ && c != ')').collect::<String>();\n  |                 "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut open_brace_groups = Vec::new();\n   \
    \ let mut open_brace_groups_len = 0;\n    let mut closed_group_len = 0;\n    let\
    \ mut open_paren_groups = Vec::new();\n    let mut open_paren_groups_len = 0;\n\
    \    let mut open_paren_groups_len2 = 0;\n    let mut open_paren_groups_len3 =\
    \ 0;\n    let mut open_paren_groups_len4 = 0;\n    let mut open_paren_groups_len5\
    \ = 0;\n    let mut open_paren_groups_len6 = 0;\n    let mut open_paren_groups_len7\
    \ = 0;\n    let mut open_paren_groups_len8 = 0;\n    let mut open_paren_groups_len9\
    \ = 0;\n    let mut open_paren_groups_len10 = 0;\n    let mut open_paren_groups_len11\
    \ = 0;\n    let mut open_paren_groups_len12 = 0;\n    let mut open_paren_groups_len13\
    \ = 0;\n    let mut open_paren_groups_len14 = 0;\n    let mut open_paren_groups_len15\
    \ = 0;\n    let mut open_paren_groups_len16 = 0;\n    let mut open_paren_groups_len17\
    \ = 0;\n    let mut open_paren_groups_len18 = 0;\n    let mut open_paren_groups_len19\
    \ = 0;\n    let mut open_paren_groups_len20 = 0;\n    let mut open_paren_groups_len21\
    \ = 0;\n    let mut open_paren_groups_len22 = 0;\n    let mut open_paren_groups_len23\
    \ = 0;\n    let mut open_paren_groups_len24 = 0;\n    let mut open_paren_groups_len25\
    \ = 0;\n    let mut open_paren_groups_len26 = 0;\n    let mut open_paren_groups_len27\
    \ = 0;\n    let mut open_paren_groups_len28 = 0;\n    let mut open_paren_groups_len29\
    \ = 0;\n    let mut open_paren_groups_len30 = 0;\n    let mut open_paren_groups_len31\
    \ = 0;\n    let mut open_paren_groups_len32 = 0;\n    let mut open_paren_groups_len33\
    \ = 0;\n    let mut open_paren_groups_len34 = 0;\n    let mut open_paren_groups_len35\
    \ = 0;\n    let mut open_paren_groups_len36 = 0;\n    let mut open_paren_groups_len37\
    \ = 0;\n    let mut open_paren_groups_len38 = 0;\n    let mut open_paren_groups_len39\
    \ = 0;\n    let mut open_paren_groups_len40 = 0;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpefrd1m97.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpefrd1m97.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpefrd1m97.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpefrd1m97.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpefrd1m97.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpefrd1m97.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpefrd1m97.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpefrd1m97.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpefrd1m97.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpefrd1m97.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ String::new();\n    let mut paren_group_close = String::new();\n    let mut\
    \ paren_group_open_brace = String::new();\n    let mut paren_group_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_end = String::new();\n\
    \    let mut paren_group_close_brace_end = String::new();\n    let mut paren_group_open_brace_start\
    \ = String::new();\n    let mut paren_group_close_brace_start = String::new();\n\
    \    let mut paren_group_open_brace_start_end = String::new();\n    let mut paren_group_close_brace_start_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end = String::new();\n\
    \    let mut paren_group_close_brace_start_end_end = String::new();\n    let mut\
    \ paren_group_open_brace_start_end_end_end = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp3t9amjts.rs:36:1\n  \
    \ |\n36 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp3t9amjts.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3t9amjts.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3t9amjts.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3t9amjts.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3t9amjts.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3t9amjts.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3t9amjts.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3t9amjts.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open_braces\
    \ = String::new();\n    let mut paren_group_close_braces = String::new();\n  \
    \  let mut paren_group_open_parens = String::new();\n    let mut paren_group_close_parens\
    \ = String::new();\n    let mut paren_group_open_brackets = String::new();\n \
    \   let mut paren_group_close_brackets = String::new();\n    let mut paren_group_open_curly_braces\
    \ = String::new();\n    let mut paren_group_close_curly_braces = String::new();\n\
    \    let mut paren_group_open_curly_brackets = String::new();\n    let mut paren_group_close_curly_brackets\
    \ = String::new();\n    let mut paren_group_open_parens = String::new();\n   \
    \ let mut paren_group_close_parens = String::new();\n    let mut paren_group_open_curly_braces\
    \ = String::new();\n    let mut paren_group_close_curly_braces = String::new();\n\
    \    let mut paren_group_open_curly_brackets = String::new();\n    let mut paren_group_close_curly_brackets\
    \ = String::new();\n    let mut paren_group_open_parens = String::new();\n   \
    \ let mut paren_group_close_parens = String::new();\n    let mut paren_group_open_curly_braces\
    \ = String::new();\n    let mut paren_group_close_curly_braces = String::new();\n\
    \    let mut paren_group_open_curly_brackets = String::new();\n    let mut paren_group_close_curly_brackets\
    \ = String::new();\n    let mut paren_group_open_parens = String::new();\n   \
    \ let mut paren_group_close_parens = String::new();\n    let mut paren_group_open_curly_braces\
    \ = String::new();\n    let mut paren_group_close_curly_braces = String::new();\n\
    \    let mut paren_group_open_curly_brackets = String::new();\n    let mut paren_group_close_curly_brackets\
    \ = String::new();\n    let mut paren_group_open_parens = String::new();\n   \
    \ let mut paren_group_close_parens = String::new();\n    let mut paren_group_open_curly_braces\
    \ = String::new();\n    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8f4pm4vb.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8f4pm4vb.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8f4pm4vb.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8f4pm4vb.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8f4pm4vb.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8f4pm4vb.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8f4pm4vb.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8f4pm4vb.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8f4pm4vb.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8f4pm4vb.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_groups = 0;\n    let mut in_group = false;\n    let mut in_group_brace\
    \ = false;\n    let mut in_group_paren = false;\n    let mut in_group_paren_brace\
    \ = false;\n    let mut in_group_paren_comma = false;\n    let mut in_group_paren_comma_brace\
    \ = false;\n    let mut in_group_paren_comma_brace_space = false;\n    let mut\
    \ in_group_paren_comma_brace_space_closed = false;\n    let mut in_group_paren_comma_brace_space_open\
    \ = false;\n    let mut in_group_paren_comma_brace_space_closed_space = false;\n\
    \    let mut in_group_paren_comma_brace_space_open_brace = false;\n    let mut\
    \ in_group_paren_comma_brace_space_open_brace_space = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_closed\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_closed\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_open\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_closed_space\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_closed_space_open\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_closed_space_open_brace\
    \ = false;\n    let mut in_group_paren_comma_brace_space_open_brace_space_closed_space_open_brace_space_closed_space_open_brace_space\
    \ = false;\n    let mut in_group_paren\n}\n\nfn main() {\n    let candidate =\
    \ separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy1p8je6h.rs:35:27\n   |\n\
    35 |     let mut in_group_paren\n   |                           ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpy1p8je6h.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpy1p8je6h.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy1p8je6h.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy1p8je6h.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy1p8je6h.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy1p8je6h.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy1p8je6h.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy1p8je6h.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpy1p8je6h.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `("
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string;\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    while !paren_group_string.is_empty() {\n        if paren_group_open {\n \
    \           if paren_group_string.chars().all(|c| c == '(') {\n              \
    \  paren_groups.push(paren_group_string);\n                paren_group_string\
    \ = String::new();\n                paren_group_open = false;\n            } else\
    \ {\n                paren_group_string += &paren_group_string.chars().next().unwrap();\n\
    \            }\n        } else if paren_group_closed {\n            if paren_group_string.chars().all(|c|\
    \ c == ')') {\n                paren_groups.push(paren_group_string);\n      \
    \          paren_group_string = String::new();\n                paren_group_closed\
    \ = false;\n            } else {\n                paren_group_string += &paren_group_string.chars().next().unwrap();\n\
    \            }\n        } else {\n            if paren_group_string.chars().all(|c|\
    \ c == '(') {\n                paren_group_open = true;\n            } else {\n\
    \                paren_group_closed = true;\n            }\n            paren_group_string\
    \ += &paren_group_string.chars().next().unwrap();\n        }\n    }\n    paren_groups\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi_qb3oc9.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi_qb3oc9.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi_qb3oc9.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi_qb3oc9.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi_qb3oc9.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi_qb3oc9.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi_qb3oc9.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi_qb3oc9.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi_qb3oc9.rs:19:39\n   |\n19 |              \
    \   paren_group_string += &paren_group_string.chars().next().unwrap();\n   | \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `str`, found `char`\n   |\n   = note: expected reference `&str`\n \
    \             found reference `&char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpi_qb3oc9.rs:27:39\n   |\n27 |                 paren_group_string +=\
    \ &paren_group_string.chars().next().unwrap();\n   |                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_whitespace()).collect::<String\n}\n\nfn main() {\n    let candidate =\
    \ separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp0r2r2pdw.rs:27:1\n   |\n26 |     let mut paren_string\
    \ = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<String\n\
    \   |                                                                        \
    \                            - expected one of 9 possible tokens\n27 | }\n   |\
    \ ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0r2r2pdw.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0r2r2pdw.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0r2r2pdw.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0r2r2pdw.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: the method `into_iter` exists for struct\
    \ `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp0r2r2pdw.rs:10:41\n\
    \    |\n10  |       let mut paren_string = pa"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_groups = Vec::new();\n    let mut open_brace_groups = Vec::new();\n\
    \    let mut closed_brace_groups = Vec::new();\n    let mut open_brace_group =\
    \ false;\n    let mut closed_brace_group = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut closed_brace_group_closed = false;\n    let mut open_brace_group_open\
    \ = false;\n    let mut closed_brace_group_open = false;\n    let mut open_brace_group_closed\
    \ = false;\n    let mut \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpjug8m6qx.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpjug8m6qx.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpjug8m6qx.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjug8m6qx.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjug8m6qx.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjug8m6qx.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjug8m6qx.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjug8m6qx.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjug8m6qx.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string.clone();\n\
    \    let mut paren_group_open_brace = false;\n    while paren_group_string.len()\
    \ > 0 {\n        let mut paren_group_end = paren_group_string.len();\n       \
    \ while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ' '\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_group_end).collect();\n\
    \        }\n        let mut paren_group_end = paren_group_string.len();\n    \
    \    while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ')'\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_group_end).collect();\n\
    \        }\n        let mut paren_group_end = paren_group_string.len();\n    \
    \    while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ')'\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_group_end).collect();\n\
    \        }\n        let mut paren_group_end = paren_group_string.len();\n    \
    \    while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ')'\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_group_end).collect();\n\
    \        }\n        let mut paren_group_end = paren_group_string.len();\n    \
    \    while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ')'\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_group_end).collect();\n\
    \        }\n        let mut paren_group_end = paren_group_string.len();\n    \
    \    while paren_group_end > 0 && paren_group_string[paren_group_end - 1] == ')'\
    \ {\n            paren_group_end -= 1;\n        }\n        if paren_group_end\
    \ > 0 {\n            paren_group_string = paren_group_string.split_off(paren_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmptf_10y53.rs:61:3\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n11 |     while paren_group_string.len() > 0 {\n   |        \
    \                                - unclosed delimiter\n...\n51 |         if paren_group_end\
    \ > 0 {\n   |                                - this delimiter might not be properly\
    \ closed...\n52 |             paren_group_string = paren_group_string.split_off(paren_\n\
    53 | }\n   | - ...as it matches this but it has different indentation\n...\n61\
    \ | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmptf_10y53.rs:52:62\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n52 |             paren_group_string\
    \ = paren_group_string.split_off(paren_\n   |                                \
    \                              ^ unclosed delimiter\n53 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `paren_` in this scope\n\
    \  --> /tmp/tmptf_10y53.rs:52:63\n   |\n52 |             paren_group_string =\
    \ paren_group_string.split_off(paren_\n   |                                  \
    \                             ^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptf_10y53.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptf_10y53.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptf_10y53.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptf_10y53.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {ri"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_closed_\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphccubn3g.rs:35:46\n   |\n\
    35 |     let mut paren_group_open_brace_or_closed_\n   |                     \
    \                         ^ help: add `;` here\n36 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphccubn3g.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphccubn3g.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphccubn3g.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphccubn3g.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphccubn3g.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphccubn3g.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphccubn3g.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphccubn3g.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphccubn3g.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let\
    \ mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf6swyns5.rs:38:11\n   |\n\
    38 |     let mu\n   |           ^ help: add `;` here\n39 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf6swyns5.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf6swyns5.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6swyns5.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf6swyns5.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf6swyns5.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf6swyns5.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpf6swyns5.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_length = 0;\n    let\
    \ mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_chars_len = paren_group_chars.len();\n    let mut paren_group_chars_pos\
    \ = 0;\n    let mut paren_group_chars_end = paren_group_chars_len;\n    let mut\
    \ paren_group_chars_start = paren_group_chars_len;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n    let mut paren_group_chars_start_pos\
    \ = 0;\n    let mut paren_group_chars_end_pos = 0;\n\n}\n\nfn main() {\n    let\
    \ candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpuizyuabz.rs:59:17\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuizyuabz.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuizyuabz.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuizyuabz.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuizyuabz.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuizyuabz.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuizyuabz.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuizyuabz.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpuizyuabz.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut closed_braces = Vec::new();\n    let mut open_brace_level = 0;\n\
    \    let mut closed_brace_level = 0;\n    let mut paren_level = 0;\n    let mut\
    \ paren_levels = Vec::new();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mut paren_levels_iter = paren_levels.iter();\n    let mut paren_levels_iter\
    \ = paren_levels.iter();\n    let mut paren_levels_iter = paren_levels.iter();\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1d5lgbcg.rs:46:11\n   |\n\
    46 |     let mu\n   |           ^ help: add `;` here\n47 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1d5lgbcg.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1d5lgbcg.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1d5lgbcg.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1d5lgbcg.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1d5lgbcg.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1d5lgbcg.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1d5lgbcg.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1d5lgbcg.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1d5lgbcg.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_open_braces = 0;\n\
    \    let mut paren_group_close_braces = 0;\n    let mut paren_group_open_parens\
    \ = 0;\n    let mut paren_group_close_parens = 0;\n    let mut paren_group_spaces\
    \ = 0;\n    let mut paren_group_non_spaces = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let mut paren_group_non_spaces_end = 0;\n    let mut paren_group_non_spaces_start\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp5l0vjq9p.rs:53:1\n  \
    \ |\n53 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp5l0vjq9p.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5l0vjq9p.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5l0vjq9p.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5l0vjq9p.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5l0vjq9p.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5l0vjq9p.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5l0vjq9p.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5l0vjq9p.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_groups = Vec::new();\n\
    \    let mut open_braces = 0;\n    let mut closed_group = false;\n    let mut\
    \ open_group = false;\n    let mut open_paren = false;\n    let mut open_curly_brace\
    \ = false;\n    let mut open_curly_brace_group = false;\n    let mut open_curly_brace_group_inner\
    \ = false;\n    let mut open_curly_brace_group_outer = false;\n    let mut open_curly_brace_group_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_inner = false;\n    let mut\
    \ open_curly_brace_group_outer_outer_inner = false;\n    let mut open_curly_brace_group_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_inner = false;\n\
    \    let mut open_curly_brace_group_outer_outer_outer_inner = false;\n    let\
    \ mut open_curly_brace_group_outer_outer_outer_outer_inner = false;\n    let mut\
    \ open_curly_brace_group_outer_outer_outer_outer_inner = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_group_outer_outer_outer_outer_outer_outer_outer_outer_outer_inner\
    \ = false;\n    let mut open_curly_brace_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpadoyffb8.rs:40:30\n   |\n\
    40 |     let mut open_curly_brace_\n   |                              ^ help:\
    \ add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpadoyffb8.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpadoyffb8.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpadoyffb8.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpadoyffb8.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpadoyffb8.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpadoyffb8.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpadoyffb8.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpadoyffb8.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpadoyffb8.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit t"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:18:17\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:18:25\n   |\n18 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:17\n   |\n19 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:25\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9_dfpee3.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:20:25\n   |\n20 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:21:25\n   |\n21 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp9_dfpee3.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().collect::<Vec<String>>();\n    |   \
    \                                        ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n           "
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_string = paren_string;\n\
    \    let mut paren_group_open_braces = vec![];\n    let mut paren_group_close_braces\
    \ = vec![];\n    let mut paren_group_open_brace_count = vec![];\n    let mut paren_group_close_brace_count\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups = vec![];\n\
    \    let mut paren_group_close_brace_count_in_paren_groups = vec![];\n    let\
    \ mut paren_group_open_brace_count_in_paren_groups_last_group = vec![];\n    let\
    \ mut paren_group_close_brace_count_in_paren_groups_last_group = vec![];\n   \
    \ let mut paren_group_open_brace_count_in_paren_groups_last_group_is_open = vec![];\n\
    \    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_open\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_closed\
    \ = vec![];\n    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_closed\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_open_in_brace_group\
    \ = vec![];\n    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_open_in_brace_group\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_closed_in_brace_group\
    \ = vec![];\n    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_closed_in_brace_group\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_open_in_brace_group_last_group\
    \ = vec![];\n    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_open_in_brace_group_last_group\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_closed_in_brace_group_last_group\
    \ = vec![];\n    let mut paren_group_close_brace_count_in_paren_groups_last_group_is_closed_in_brace_group_last_group\
    \ = vec![];\n    let mut paren_group_open_brace_count_in_paren_groups_last_group_is_open_in_b\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpksnm33eh.rs:30:81\n   |\n\
    30 |     let mut paren_group_open_brace_count_in_paren_groups_last_group_is_open_in_b\n\
    \   |                                                                        \
    \         ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpksnm33eh.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpksnm33eh.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpksnm33eh.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpksnm33eh.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpksnm33eh.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpksnm33eh.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpksnm33eh.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpksnm33eh.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpksnm33eh.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\r').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\f').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\v').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\a').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\e').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '\\z').collect::\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unknown character escape: `f`\n  --> /tmp/tmp02_ivisa.rs:15:68\n\
    \   |\n15 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\\
    f').collect::<String>();\n   |                                               \
    \                     ^ unknown character escape\n   |\n   = help: for more information,\
    \ visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\n\
    error: unknown character escape: `v`\n  --> /tmp/tmp02_ivisa.rs:16:68\n   |\n\
    16 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\v').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `a`\n  --> /tmp/tmp02_ivisa.rs:17:68\n   |\n\
    17 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\a').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `e`\n  --> /tmp/tmp02_ivisa.rs:18:68\n   |\n\
    18 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\e').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `z`\n  --> /tmp/tmp02_ivisa.rs:19:68\n   |\n\
    19 |     let mut paren_string = paren_string.chars().filter(|c| *c != '\\z').collect::<String>();\n\
    \   |                                                                    ^ unknown\
    \ character escape\n   |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    \nerror: unknown character escape: `z`\n  --> /tmp/tmp02_ivisa.rs:20:68\n   |\n\
    20 |     let mut paren_string = paren_string.chars().filter(|c| *c !="
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ String::new();\n    let mut paren_group_close = String::new();\n    let mut\
    \ paren_group_open_brace = String::new();\n    let mut paren_group_close_brace\
    \ = String::new();\n    let mut paren_group_open_brace_end = String::new();\n\
    \    let mut paren_group_close_brace_end = String::new();\n    let mut paren_group_open_brace_start\
    \ = String::new();\n    let mut paren_group_close_brace_start = String::new();\n\
    \    let mut paren_group_open_brace_start_end = String::new();\n    let mut paren_group_close_brace_start_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end = String::new();\n\
    \    let mut paren_group_close_brace_start_end_end = String::new();\n    let mut\
    \ paren_group_open_brace_start_end_end_end = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4j24uv2a.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4j24uv2a.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4j24uv2a.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4j24uv2a.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4j24uv2a.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4j24uv2a.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4j24uv2a.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4j24uv2a.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp4j24uv2a.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_paren\
    \ = false;\n    let mut paren_group_closed_brace_or_paren = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space = false;\n    let mut paren_group_closed_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3zaax7sn.rs:38:47\n   |\n\
    38 |     let mut paren_group_closed_brace_or_paren_\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3zaax7sn.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3zaax7sn.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3zaax7sn.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3zaax7sn.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3zaax7sn.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3zaax7sn.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `V"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ String::new();\n    let mut paren_group_closed = String::new();\n    let mut\
    \ paren_group_open_brace = String::new();\n    let mut paren_group_closed_brace\
    \ = String::new();\n    let mut paren_group_open_brace_count = String::new();\n\
    \    let mut paren_group_closed_brace_count = String::new();\n    let mut paren_group_open_brace_count_end\
    \ = String::new();\n    let mut paren_group_closed_brace_count_end = String::new();\n\
    \    let mut paren_group_open_brace_count_start = String::new();\n    let mut\
    \ paren_group_closed_brace_count_start = String::new();\n    let mut paren_group_open_brace_count_start_end\
    \ = String::new();\n    let mut paren_group_closed_brace_count_start_end = String::new();\n\
    \    let mut paren_group_open_brace_count_start_end_end = String::new();\n   \
    \ let mut paren_group_closed_brace_count_start_end_end = String::new();\n    let\
    \ mut paren_group_open_brace_count_start_end_end_end = String::new();\n    let\
    \ mut paren_group_open_brace_count_start_end_end_end_end = String::new();\n  \
    \  let mut paren_group_open_brace_count_start_end_end_end_end_end = String::new();\n\
    \    let mut paren_group_open_brace_count_start_end_end_end_end_end_end = String::new();\n\
    \    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end =\
    \ String::new();\n    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_count_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = String::new();\n    let mut \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpmcieovwz.rs:36:1\n\
    \   |\n36 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpmcieovwz.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmcieovwz.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmcieovwz.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmcieovwz.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmcieovwz.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmcieovwz.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmcieovwz.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmcieovwz.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1onfu6rm.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1onfu6rm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1onfu6rm.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_group_start = String::from(\"\
    \");\n    let mut paren_group_end = String::from(\"\");\n    let mut paren_group_open\
    \ = false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpz_rj7c1p.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz_rj7c1p.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz_rj7c1p.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz_rj7c1p.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz_rj7c1p.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz_rj7c1p.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz_rj7c1p.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz_rj7c1p.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz_rj7c1p.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.iter().cloned().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyxjqe67q.rs:31:46\n   |\n\
    31 |     let mut paren_string = paren_string.into_\n   |                     \
    \                         ^ help: add `;` here\n32 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyxjqe67q.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyxjqe67q.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyxjqe67q.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyxjqe67q.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyxjqe67q.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyxjqe67q.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyxjqe67q.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyxjqe67q.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpyxjqe67q.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().collect::<Vec<String>>();\n    |   \
    \                                        ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mut paren_group_open_brace_or_closed_brace_or_space_or_comma = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1onfu6rm.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1onfu6rm.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1onfu6rm.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1onfu6rm.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp1onfu6rm.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_groups = Vec::new();\n\
    \    let mut open_braces = 0;\n    let mut closed_group = false;\n    let mut\
    \ current_group: Vec<String> = Vec::new();\n    for c in paren_string.chars()\
    \ {\n        if c == '(' {\n            open_braces += 1;\n            current_group.push(c);\n\
    \        } else if c == ')' {\n            open_braces -= 1;\n            if open_braces\
    \ == 0 {\n                closed_group = true;\n            }\n            current_group.push(c);\n\
    \        } else if c == ' ' {\n            if closed_group {\n               \
    \ paren_groups.push(current_group);\n                current_group = Vec::new();\n\
    \            }\n        } else {\n            current_group.push(c);\n       \
    \ }\n    }\n    if closed_group {\n        paren_groups.push(current_group);\n\
    \    }\n    paren_groups\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5_5g2ck3.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5_5g2ck3.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5_5g2ck3.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5_5g2ck3.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5_5g2ck3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5_5g2ck3.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5_5g2ck3.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5_5g2ck3.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5_5g2ck3.rs:16:32\n   |\n16 |             current_group.push(c);\n\
    \   |                                ^- help: try using a conversion method: `.to_string()`\n\
    \   |                                |\n   |                                expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5_5g2ck3.rs:22:32\n\
    \   |\n22 |             current_group.push(c);\n   |                         \
    \       ^- help: try using a conversion method: `.to_string()`\n   |         \
    \                       |\n   |                      "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpa605rykt.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|c|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression, found\
    \ `)`\n  --> /tmp/tmpa605rykt.rs:29:1\n   |\n29 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa605rykt.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa605rykt.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa605rykt.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa605rykt.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa605rykt.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa605rykt.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa605rykt.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa605rykt.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror:\
    \ aborting d"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut open_brace_depth = 0;\n \
    \   let mut close_brace_depth = 0;\n    let mut depth = 0;\n    let mut current_open_brace\
    \ = false;\n    let mut current_close_brace = false;\n    let mut current_open_brace_depth\
    \ = 0;\n    let mut current_close_brace_depth = 0;\n    let mut current_depth\
    \ = 0;\n    let mut current_open_brace_string = false;\n    let mut current_close_brace_string\
    \ = false;\n    let mut current_open_brace_string_depth = 0;\n    let mut current_close_brace_string_depth\
    \ = 0;\n    let mut current_string = false;\n    let mut current_string_depth\
    \ = 0;\n    let mut current_string_string = false;\n    let mut current_string_string_depth\
    \ = 0;\n    let mut current_string_string_string = false;\n    let mut current_string_string_string_depth\
    \ = 0;\n    let mut current_string_string_string_string = false;\n    let mut\
    \ current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string_string_string\
    \ = false;\n    let mut current_string_string_string_depth = 0;\n    let mut current_string_string\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5jm8ndp8.rs:59:34\n   |\n\
    59 |     let mut current_string_string\n   |                                 \
    \ ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5jm8ndp8.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5jm8ndp8.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5jm8ndp8.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5jm8ndp8.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5jm8ndp8.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5jm8ndp8.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5jm8ndp8.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5jm8ndp8.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5jm8ndp8.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          foun"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.into_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphy691ic4.rs:26:46\n   |\n\
    26 |     let mut paren_string = paren_string.into_\n   |                     \
    \                         ^ help: add `;` here\n27 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphy691ic4.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphy691ic4.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphy691ic4.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphy691ic4.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphy691ic4.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphy691ic4.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphy691ic4.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphy691ic4.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmphy691ic4.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().filter(|c| !c.is_ascii()).collect::<String>();\n\
    \    |                                           ^^^^^^^^^\n    |\n    = note:\
    \ the following trait bounds "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9a3e2bq8.rs:47:40\n   |\n\
    47 |     let mut paren_string = paren_string\n   |                           \
    \             ^ help: add `;` here\n48 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9a3e2bq8.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9a3e2bq8.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9a3e2bq8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9a3e2bq8.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmp9a3e2bq8.rs:11:28\n   |\n10 |     let\
    \ mut paren_string = paren_string.collect();\n   |         ---------------- consider\
    \ giving `paren_string` a type\n11 |     let mut paren_string = paren_string.into_iter();\n\
    \   |                            ^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this poi"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut open_brace_level = 0;\n \
    \   let mut close_brace_level = 0;\n    let mut open_brace_char = None;\n    let\
    \ mut close_brace_char = None;\n    let mut current_paren_group = None;\n    let\
    \ mut current_paren_group_char = None;\n    let mut current_open_brace = None;\n\
    \    let mut current_close_brace = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\
    \ = None;\n    let mut current_close_brace_char = None;\n    let mut current_open_brace_level\
    \ = None;\n    let mut current_close_brace_level = None;\n    let mut current_open_brace_char\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpns6_tqkt.rs:51:36\n   |\n\
    51 |     let mut current_open_brace_char\n   |                               \
    \     ^ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpns6_tqkt.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpns6_tqkt.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpns6_tqkt.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpns6_tqkt.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpns6_tqkt.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpns6_tqkt.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpns6_tqkt.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpns6_tqkt.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpns6_tqkt.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut current_group = \"\";\n    let mut current_group_len\
    \ = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n         \
    \   open_braces += 1;\n            current_group_len += 1;\n            current_group\
    \ += c;\n        } else if c == ')' {\n            open_braces -= 1;\n       \
    \     current_group_len -= 1;\n            if open_braces == 0 {\n           \
    \     paren_groups.push(current_group);\n                current_group = \"\"\
    ;\n                current_group_len = 0;\n            }\n        } else if c\
    \ == ' ' {\n            if open_braces == 0 {\n                paren_groups.push(current_group);\n\
    \                current_group = \"\";\n                current_group_len = 0;\n\
    \            }\n        } else {\n            current_group += c;\n          \
    \  current_group_len += 1;\n        }\n    }\n    if open_braces != 0 {\n    \
    \    paren_groups.push(current_group);\n    }\n    paren_groups\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcwy3wc22.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcwy3wc22.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcwy3wc22.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcwy3wc22.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcwy3wc22.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcwy3wc22.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcwy3wc22.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcwy3wc22.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpcwy3wc22.rs:17:13\n\
    \   |\n17 |             current_group += c;\n   |             -------------^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpcwy3wc22.rs:33:13\n\
    \   |\n33 |             current_group += c;\n   |             -------------^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcwy3wc22.rs:40:"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut open_group = false;\n    let mut open_paren\
    \ = false;\n    let mut closed_paren = false;\n    let mut open_curly_brace =\
    \ false;\n    let mut closed_curly_brace = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_brace_group\
    \ = false;\n    let mut closed_curly_brace_group = false;\n    let mut open_curly_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzivayl64.rs:54:24\n   |\n\
    54 |     let mut open_curly_\n   |                        ^ help: add `;` here\n\
    55 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpzivayl64.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzivayl64.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzivayl64.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzivayl64.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzivayl64.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzivayl64.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzivayl64.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzivayl64.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzivayl64.rs:7:51\n\
    \  |\n7 | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n  |\
    \    ---------------------                          ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<String>`\n\
    \          found unit type `()`\n\ner"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string;\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    while !paren_group_string.is_empty() {\n        let mut paren_group_start\
    \ = paren_group_string.find('(');\n        let mut paren_group_end = paren_group_string.find(')');\n\
    \        if paren_group_start == Some(paren_group_string.len()) {\n          \
    \  paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \            break;\n        }\n        if paren_group_end == Some(paren_group_string.len())\
    \ {\n            paren_group_string = paren_group_string.clone();\n          \
    \  paren_group_open = false;\n            paren_group_closed = false;\n      \
    \      paren_groups.push(paren_group_string);\n            break;\n        }\n\
    \        if paren_group_start != Some(paren_group_string.len()) {\n          \
    \  paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \        }\n        if paren_group_end != Some(paren_group_string.len()) {\n \
    \           paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \        }\n        if paren_group_start != Some(paren_group_string.len()) {\n\
    \            paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \        }\n        if paren_group_end != Some(paren_group_string.len()) {\n \
    \           paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \        }\n        if paren_group_start != Some(paren_group_string.len()) {\n\
    \            paren_group_string = paren_group_string.clone();\n            paren_group_open\
    \ = false;\n            paren_group_closed = false;\n            paren_groups.push(paren_group_string);\n\
    \        }\n        if paren_group_end != Some(paren_group_string.len()) {\n \
    \           paren_group_string = paren_group_string.clone();\n            paren_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpp9t4ip2_.rs:70:3\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - unclosed\
    \ delimiter\n...\n12 |     while !paren_group_string.is_empty() {\n   |      \
    \                                    - unclosed delimiter\n...\n59 |         if\
    \ paren_group_end != Some(paren_group_string.len()) {\n   |                  \
    \                                            - this delimiter might not be properly\
    \ closed...\n...\n62 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n70 | }\n   |   ^\n\nerror[E0425]: cannot find value `paren_` in this scope\n\
    \  --> /tmp/tmpp9t4ip2_.rs:61:13\n   |\n61 |             paren_\n   |        \
    \     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpp9t4ip2_.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpp9t4ip2_.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp9t4ip2_.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp9t4ip2_.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp9t4ip2_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp9t4ip2_.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp9t4ip2_.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect();\n    let mut paren_string\
    \ = paren_string.into_iter().filter(|&c| !c.is_whitespace()).collect();\n    let\
    \ mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_letter()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| !c.is_ascii_digit()).collect();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|&c| \n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmps1l7k2vp.rs:29:1\n\
    \   |\n29 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmps1l7k2vp.rs:28:59\n   |\n7  | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n   |                                             \
    \                  - closing delimiter possibly meant for this\n...\n28 |    \
    \ let mut paren_string = paren_string.into_iter().filter(|&c| \n   |         \
    \                                                  ^ unclosed delimiter\n29 |\
    \ }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmps1l7k2vp.rs:33:17\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmps1l7k2vp.rs:33:25\n \
    \  |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps1l7k2vp.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps1l7k2vp.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps1l7k2vp.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps1l7k2vp.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps1l7k2vp.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps1l7k2vp.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ false;\n    let mut paren_group_closed = false;\n    let mut paren_group_open_brace\
    \ = false;\n    let mut paren_group_closed_brace = false;\n    let mut paren_group_open_brace_or_paren\
    \ = false;\n    let mut paren_group_closed_brace_or_paren = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space = false;\n    let mut paren_group_closed_brace_or_paren_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n  \
    \  let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let\
    \ mut paren_group_closed_brace_or_paren_or_space_or_comma = false;\n    let mut\
    \ paren_group_open_brace_or_paren_or_space_or_comma = false;\n    let mut paren_group_closed_brace_or_paren_or_space_or_comma\
    \ = false;\n    let mut paren_group_open_brace_or_paren_or_space_or_comma = false;\n\
    \    let mut paren_group_closed_brace_or_paren_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3zaax7sn.rs:38:47\n   |\n\
    38 |     let mut paren_group_closed_brace_or_paren_\n   |                    \
    \                           ^ help: add `;` here\n39 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3zaax7sn.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3zaax7sn.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3zaax7sn.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3zaax7sn.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3zaax7sn.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3zaax7sn.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3zaax7sn.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `V"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = 0;\n\
    \    let mut paren_group_end = 0;\n    let mut paren_group_length = 0;\n    let\
    \ mut paren_group_char_count = 0;\n    let mut paren_group_chars = String::new();\n\
    \    let mut paren_group_char_index = 0;\n    let mut paren_group_char_length\
    \ = 0;\n    let mut paren_group_char_offset = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mut paren_group_char_end_length\
    \ = 0;\n    let mut paren_group_char_end_offset = 0;\n    let mut paren_group_char_end_index\
    \ = 0;\n    let mut paren_group_char_end_length = 0;\n    let mut paren_group_char_end_offset\
    \ = 0;\n    let mut paren_group_char_end_index = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiopc02k_.rs:55:11\n   |\n\
    55 |     let mu\n   |           ^ help: add `;` here\n56 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiopc02k_.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiopc02k_.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiopc02k_.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiopc02k_.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiopc02k_.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiopc02k_.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiopc02k_.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiopc02k_.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpiopc02k_.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 10 pr"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = 0;\n    let\
    \ mut closed_group = false;\n    let mut open_brace_group = false;\n    let mut\
    \ open_paren_group = false;\n    let mut open_paren_group_depth = 0;\n    let\
    \ mut open_paren_group_open_brace = false;\n    let mut open_paren_group_closed_group\
    \ = false;\n    let mut open_paren_group_open_brace_group = false;\n    let mut\
    \ open_paren_group_closed_group_depth = 0;\n    let mut open_paren_group_open_brace_group_closed_group\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_depth =\
    \ 0;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace =\
    \ false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_depth\
    \ = 0;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_depth\
    \ = 0;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace_group\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace_group_depth\
    \ = 0;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace_group_open_brace\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace_group_open_brace_group\
    \ = false;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_group_open_brace_group_open_brace_group_open_brace_group_depth\
    \ = 0;\n    let mut open_paren_group_open_brace_group_closed_group_open_brace_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj3qmwqd5.rs:32:71\n   |\n\
    32 |     let mut open_paren_group_open_brace_group_closed_group_open_brace_\n\
    \   |                                                                       ^\
    \ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj3qmwqd5.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj3qmwqd5.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj3qmwqd5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj3qmwqd5.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj3qmwqd5.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj3qmwqd5.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj3qmwqd5.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj3qmwqd5.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj3qmwqd5.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `ret"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_start = String::new();\n\
    \    let mut paren_group_end = String::new();\n    let mut paren_group_open =\
    \ String::new();\n    let mut paren_group_close = String::new();\n    let mut\
    \ paren_group_open_braces = String::new();\n    let mut paren_group_close_braces\
    \ = String::new();\n    let mut paren_group_open_brace = String::new();\n    let\
    \ mut paren_group_close_brace = String::new();\n    let mut paren_group_open_brace_end\
    \ = String::new();\n    let mut paren_group_close_brace_end = String::new();\n\
    \    let mut paren_group_open_brace_start = String::new();\n    let mut paren_group_close_brace_start\
    \ = String::new();\n    let mut paren_group_open_brace_start_end = String::new();\n\
    \    let mut paren_group_close_brace_start_end = String::new();\n    let mut paren_group_open_brace_start_start_end\
    \ = String::new();\n    let mut paren_group_close_brace_start_start_end = String::new();\n\
    \    let mut paren_group_open_brace_start_start_start_end = String::new();\n \
    \   let mut paren_group_close_brace_start_start_start_end = String::new();\n \
    \   let mut paren_group_open_brace_start_start_start_end_end = String::new();\n\
    \    let mut paren_group_close_brace_start_start_start_end_end = String::new();\n\
    \    let mut paren_group_open_brace_start_start_start_end_end_end = String::new();\n\
    \    let mut paren_group_close_brace_start_start_start_end_end_end = String::new();\n\
    \    let mut paren_group_open_brace_start_start_start_end_end_end_end = String::new();\n\
    \    let mut paren_group_close_brace_start_start_start_end_end_end_end = String::new();\n\
    \    let mut paren_group_open_brace_start_start_start_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_close_brace_start_start_start_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_open_brace_start_start_start_end_end_end_end_end_end\
    \ = String::new();\n    let mut paren_group_close_brace_start_start_start_end_end_end_end_end_end\
    \ = String::\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp7rcxvagt.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp7rcxvagt.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp7rcxvagt.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7rcxvagt.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7rcxvagt.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7rcxvagt.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7rcxvagt.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7rcxvagt.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7rcxvagt.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut current_group = String::new();\n\
    \    let mut current_group_open = false;\n    let mut current_group_close = false;\n\
    \    let mut current_group_open_brace = false;\n    let mut current_group_close_brace\
    \ = false;\n    let mut current_group_open_brace_or_close_brace = false;\n   \
    \ let mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut\
    \ current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let mut current_group_open_brace_or_close_brace_or_open = false;\n\
    \    let mut current_group_open_brace_or_close_brace_or_open = false;\n    let\
    \ mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let mut current_group_open_brace_or_close_brace_or_open = false;\n\
    \    let mut current_group_open_brace_or_close_brace_or_open = false;\n    let\
    \ mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let mut current_group_open_brace_or_close_brace_or_open = false;\n\
    \    let mut current_group_open_brace_or_close_brace_or_open = false;\n    let\
    \ mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let mut current_group_open_brace_or_close_brace_or_open = false;\n\
    \    let mut current_group_open_brace_or_close_brace_or_open = false;\n    let\
    \ mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let mut current_group_open_brace_or_close_brace_or_open = false;\n\
    \    let mut current_group_open_brace_or_close_brace_or_open = false;\n    let\
    \ mut current_group_open_brace_or_close_brace_or_open = false;\n    let mut current_group_open_brace_or_close_brace_or_open\
    \ = false;\n    let \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpkwz06dug.rs:41:1\n  \
    \ |\n41 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpkwz06dug.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpkwz06dug.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkwz06dug.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkwz06dug.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkwz06dug.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkwz06dug.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkwz06dug.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkwz06dug.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_open = false;\n    let mut paren_group_closed = false;\n\
    \    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed = false;\n    let mut\
    \ paren_group_open_brace_or_closed_brace = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_close\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9yfa436f.rs:28:92\n   |\n\
    28 |     let mut paren_group_open_brace_or_closed_brace_or_closed_brace_or_closed_brace_or_close\n\
    \   |                                                                        \
    \                    ^ help: add `;` here\n29 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9yfa436f.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yfa436f.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yfa436f.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9yfa436f.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yfa436f.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yfa436f.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9yfa436f.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ re"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = paren_string.into_iter();\n    let mut paren_string = paren_string.collect::<Vec<_>>();\n\
    \    let mut paren_string = paren_string.into_iter();\n    let mut paren_string\
    \ = paren_string.collect::<Vec<_>>();\n    let mut paren_string = paren_string.into_iter();\n\
    \    let mut paren_string = paren_string.collect::<Vec<_>>();\n    let mut paren_string\
    \ = \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpo0c6mvm0.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo0c6mvm0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo0c6mvm0.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo0c6mvm0.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_letter()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c.is_ascii_digit()).collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_ascii_letter()).collect::<String\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmp9yy0x1_v.rs:28:1\n   |\n27 |     let mut paren_string\
    \ = paren_string.chars().filter(|c| !c.is_ascii_letter()).collect::<String\n \
    \  |                                                                         \
    \                         - expected one of 9 possible tokens\n28 | }\n   | ^\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp9yy0x1_v.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9yy0x1_v.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9yy0x1_v.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmp9yy0x1_v.rs:11:63\n\
    \   |\n11 |     let mut paren_string = paren_string.chars("
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut open_braces = Vec::new();\n\
    \    let mut close_braces = Vec::new();\n    let mut open_parens = Vec::new();\n\
    \    let mut close_parens = Vec::new();\n    let mut current_parens = Vec::new();\n\
    \    let mut current_braces = Vec::new();\n    let mut current_open_braces = Vec::new();\n\
    \    let mut current_close_braces = Vec::new();\n    let mut current_open_parens\
    \ = Vec::new();\n    let mut current_close_parens = Vec::new();\n    let mut current_current_parens\
    \ = Vec::new();\n    let mut current_current_braces = Vec::new();\n    let mut\
    \ current_current_open_braces = Vec::new();\n    let mut current_current_close_braces\
    \ = Vec::new();\n    let mut current_current_open_parens = Vec::new();\n    let\
    \ mut current_current_close_parens = Vec::new();\n    let mut current_current_current_parens\
    \ = Vec::new();\n    let mut current_current_current_braces = Vec::new();\n  \
    \  let mut current_current_current_open_braces = Vec::new();\n    let mut current_current_current_close_braces\
    \ = Vec::new();\n    let mut current_current_current_open_parens = Vec::new();\n\
    \    let mut current_current_current_close_parens = Vec::new();\n    let mut current_current_current_current_parens\
    \ = Vec::new();\n    let mut current_current_current_current_braces = Vec::new();\n\
    \    let mut current_current_current_current_open_braces = Vec::new();\n    let\
    \ mut current_current_current_current_close_braces = Vec::new();\n    let mut\
    \ current_current_current_current_open_parens = Vec::new();\n    let mut current_current_current_current_close_parens\
    \ = Vec::new();\n    let mut current_current_current_current_current_parens =\
    \ Vec::new();\n    let mut current_current_current_current_current_braces = Vec::new();\n\
    \    let mut current_current_current_current_current_open_braces = Vec::new();\n\
    \    let mut current_current_current_current_close_braces = Vec::new();\n    let\
    \ mut current_current_current_current_open_parens = Vec::new();\n    let mut current_current_current_current_close_parens\
    \ = Vec::new();\n    let mut current_current_current_current_current_parens =\
    \ Vec::new();\n    let mut current_current_current_current_current_braces = Vec::new();\n\
    \    let mut current_current_current_current_\n}\n\nfn main() {\n    let candidate\
    \ = separate_paren_groups;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9o36y5_x.rs:45:45\n   |\n\
    45 |     let mut current_current_current_current_\n   |                      \
    \                       ^ help: add `;` here\n46 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9o36y5_x.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9o36y5_x.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9o36y5_x.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9o36y5_x.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9o36y5_x.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9o36y5_x.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9o36y5_x.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9o36y5_x.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9o36y5_x.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<S"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_stack = Vec::new();\n\
    \    let mut paren_group_start = String::new();\n    let mut paren_group_end =\
    \ String::new();\n    let mut paren_group_open = false;\n    let mut paren_group_closed\
    \ = false;\n    let mut paren_group_open_brace = false;\n    let mut paren_group_closed_brace\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace = false;\n    let\
    \ mut paren_group_open_brace_or_closed_brace_or_space = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_space_or_space\
    \ = false;\n    let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcu7gzamj.rs:32:82\n   |\n\
    32 |     let mut paren_group_open_brace_or_closed_brace_or_space_or_space_or_space_or_\n\
    \   |                                                                        \
    \          ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcu7gzamj.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcu7gzamj.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcu7gzamj.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcu7gzamj.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcu7gzamj.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcu7gzamj.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcu7gzamj.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcu7gzamj.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcu7gzamj.rs:7:51\n  |\n7 | fn separate_paren_groups(paren_string:\
    \ String) -> Vec<String> {\n  |    ---------------------                     \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its bo"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '(' && c != ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '{' && c != '}').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '[' && c != ']').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ' ').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != ';').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\n').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ c != '\\t').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpwkvnh_9t.rs:28:55\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                       ^ unclosed delimiter\n\
    29 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmpwkvnh_9t.rs:29:1\n   |\n28 |     let mut paren_string = paren_string.chars().filter(|\n\
    \   |                                                         - expected `|`\n\
    29 | }\n   | ^ unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpwkvnh_9t.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwkvnh_9t.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwkvnh_9t.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwkvnh_9t.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwkvnh_9t.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwkvnh_9t.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwkvnh_9t.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwkvnh_9t.rs:"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpfybl_b9e.rs:25:59\n\
    \   |\n7  | fn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n25 |     let mut paren_string = paren_string.into_iter().filter(|c|\
    \ !\n   |                                                           ^ unclosed\
    \ delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmpfybl_b9e.rs:26:1\n   |\n26 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfybl_b9e.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfybl_b9e.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfybl_b9e.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659748048
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = vec![];\n    let mut paren_groups_stack = vec![];\n\
    \    let mut paren_groups_stack_ptr = 0;\n    let mut paren_groups_ptr = 0;\n\
    \    let mut paren_groups_ptr_end = paren_string.len();\n    let mut paren_groups_ptr_end_ptr\
    \ = paren_groups_ptr_end;\n    let mut paren_groups_ptr_end_ptr_end = paren_groups_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n    let\
    \ mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n\
    \    let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_\n}\n\nfn main() {\n\
    \    let candidate = separate_paren_groups;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfzb2mf3m.rs:25:58\n   |\n\
    25 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_\n   |         \
    \                                                 ^ help: add `;` here\n26 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpfzb2mf3m.rs:17:56\n   |\n17 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr;\n   |                          \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfzb2mf3m.rs:18:60\n   |\n18 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end;\n   |                      \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr`\
    \ in this scope\n  --> /tmp/tmpfzb2mf3m.rs:19:64\n   |\n19 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr;\n   |                  \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end`\n\
    \nerror[E0425]: cannot find value `paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end`\
    \ in this scope\n  --> /tmp/tmpfzb2mf3m.rs:20:68\n   |\n20 |     let mut paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_groups_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end;\n   |              \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `paren_groups_ptr_end_ptr_end_"
  stdout: ''
  timestamp: 1659821419
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<String>();\n    let mut paren_string = paren_string.into_iter().collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_empty()).collect::<Vec<String>>();\n\
    \    let mut paren_string = paren_string.into_iter().filter(|c| !c.is_whitespace()).collect::<Vec<String>>();\n\
    \    paren_string\n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:18:17\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:18:25\n   |\n18 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:17\n   |\n19 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:19:25\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9_dfpee3.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:20:25\n   |\n20 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9_dfpee3.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9_dfpee3.rs:21:25\n   |\n21 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for struct `String`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp9_dfpee3.rs:10:41\n    |\n10  |       let mut\
    \ paren_string = paren_string.into_iter().collect::<Vec<String>>();\n    |   \
    \                                        ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n           "
  stdout: ''
  timestamp: 1659795131
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_string = paren_string.trim();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c != '(').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ')').collect::<String>();\n    let mut paren_string = paren_string.chars().filter(|c|\
    \ *c == ' ').collect::<String>();\n    paren_string.split_whitespace().collect()\n\
    }\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:17:17\n\
    \   |\n17 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:17:25\n   |\n17 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:17\n   |\n18 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:18:25\n\
    \   |\n18 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7hitlqs7.rs:19:17\n   |\n19 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:19:25\n   |\n19 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7hitlqs7.rs:20:17\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7hitlqs7.rs:20:25\n   |\n20 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n  --> /tmp/tmp7hitlqs7.rs:12:37\n   |\n12 |     paren_string.split_whitespace().collect()\n\
    \   |                                     ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the\
    \ trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 9 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821418
- exit_code: 1
  program: "/// Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n/// separate those group into separate strings\
    \ and return the list of those.\n/// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n/// Ignore any spaces\
    \ in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( ))\
    \ (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"\
    (()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n\
    \    let mut paren_groups = Vec::new();\n    let mut paren_group_string = paren_string;\n\
    \    let mut paren_group_open_braces = Vec::new();\n    let mut paren_group_close_braces\
    \ = Vec::new();\n    let mut paren_group_open_brace_count = Vec::new();\n    let\
    \ mut paren_group_close_brace_count = Vec::new();\n    let mut paren_group_open_brace_string\
    \ = String::new();\n    let mut paren_group_close_brace_string = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut paren_group_close_brace_string_length = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut paren_group_close_brace_string_length = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut paren_group_close_brace_string_length = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut paren_group_close_brace_string_length = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut paren_group_close_brace_string_length = String::new();\n\
    \    let mut paren_group_open_brace_string_length = String::new();\n    let mut\
    \ paren_group_close_brace_string_length = String::new();\n    let mut paren_group_open_brace_string_length\
    \ = String::new();\n    let mut \n}\n\nfn main() {\n    let candidate = separate_paren_groups;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpuitxzbda.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpuitxzbda.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpuitxzbda.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuitxzbda.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuitxzbda.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuitxzbda.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuitxzbda.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuitxzbda.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuitxzbda.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 9 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821419
