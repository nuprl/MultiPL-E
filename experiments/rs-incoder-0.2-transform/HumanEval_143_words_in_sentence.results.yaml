language: rs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_counter\
    \ = 1;\n    let mut prime_counter2 = 1;\n    let mut prime_counter3 = 1;\n   \
    \ let mut prime_counter4 = 1;\n    let mut prime_counter5 = 1;\n    let mut prime_counter6\
    \ = 1;\n    let mut prime_counter7 = 1;\n    let mut prime_counter8 = 1;\n   \
    \ let mut prime_counter9 = 1;\n    let mut prime_counter10 = 1;\n    let mut prime_counter11\
    \ = 1;\n    let mut prime_counter12 = 1;\n    let mut prime_counter13 = 1;\n \
    \   let mut prime_counter14 = 1;\n    let mut prime_counter15 = 1;\n    let mut\
    \ prime_counter16 = 1;\n    let mut prime_counter17 = 1;\n    let mut prime_counter18\
    \ = 1;\n    let mut prime_counter19 = 1;\n    let mut prime_counter20 = 1;\n \
    \   let mut prime_counter21 = 1;\n    let mut prime_counter22 = 1;\n    let mut\
    \ prime_counter23 = 1;\n    let mut prime_counter24 = 1;\n    let mut prime_counter25\
    \ = 1;\n    let mut prime_counter26 = 1;\n    let mut prime_counter27 = 1;\n \
    \   let mut prime_counter28 = 1;\n    let mut prime_counter29 = 1;\n    let mut\
    \ prime_counter30 = 1;\n    let mut prime_counter31 = 1;\n    let mut prime_counter32\
    \ = 1;\n    let mut prime_counter33 = 1;\n    let mut prime_counter34 = 1;\n \
    \   let mut prime_counter35 = 1;\n    let mut prime_counter36 = 1;\n    let mut\
    \ prime_counter37 = 1;\n    let mut prime_counter38 = 1;\n    let mut prime_counter39\
    \ = 1;\n    let mut prime_counter40 = 1;\n    let mut prime_counter41 = 1;\n \
    \   let mut prime_counter42 = 1;\n    let mut prime_counter43 = 1;\n    let mut\
    \ prime_counter44 = 1;\n    let mut prime_counter45 = 1;\n    let mut prime_counter46\
    \ = 1;\n    let mut prime_counter47 = 1;\n    let mut prime_counter48 = 1;\n \
    \   let mut prime_counter49 = 1;\n    let mut prime_counter50 = 1;\n    let mut\
    \ prime_counter51 = 1;\n    let mut prime_counter52 = 1;\n    let mut prime_counter53\
    \ = 1;\n    let mut prime_counter54 = 1;\n    let mut prime_counter55 = 1;\n \
    \   let mut prime_counter5\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi4klehuy.rs:72:27\n   |\n\
    72 |     let mut prime_counter5\n   |                           ^ help: add `;`\
    \ here\n73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpi4klehuy.rs:77:17\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpi4klehuy.rs:77:25\n \
    \  |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi4klehuy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi4klehuy.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi4klehuy.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi4klehuy.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi4klehuy.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi4klehuy.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi4klehuy.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi4klehuy.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot fin"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor()\
    \ as usize);\n    primes_len.cmp(&primes_len.min()).unwrap();\n    let mut primes_len\
    \ = primes_len.saturating_\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph1oha7eo.rs:43:48\n   |\n\
    43 |     let mut primes_len = primes_len.saturating_\n   |                   \
    \                             ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmph1oha7eo.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph1oha7eo.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph1oha7eo.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph1oha7eo.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph1oha7eo.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph1oha7eo.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph1oha7eo.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph1oha7eo.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph1oha7eo.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this sco"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3];\n    let mut primes_set\
    \ = HashSet::new();\n    let mut new_sentence = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    for word in words {\n        if primes_set.contains(&word.len())\
    \ {\n            new_sentence.push_str(&word);\n        } else {\n           \
    \ primes_set.insert(word.len());\n            primes.push(word.len());\n     \
    \   }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpi63cvn2_.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi63cvn2_.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi63cvn2_.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi63cvn2_.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi63cvn2_.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi63cvn2_.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi63cvn2_.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi63cvn2_.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi63cvn2_.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi63cvn2_.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi63cvn2_.rs:37:25\n   |\n37 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut primes_iter = primes.iter().cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let mut primes_iter\
    \ = primes_iter.skip(1).cloned();\n    let mut primes_iter = primes_iter.skip(1).cloned();\n\
    \    let mut primes_iter = primes_iter.skip(1).cloned();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpah1741yw.rs:48:1\n  \
    \ |\n48 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpah1741yw.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpah1741yw.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpah1741yw.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpah1741yw.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpah1741yw.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpah1741yw.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpah1741yw.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpah1741yw.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpah1741yw.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpah1741yw.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpah1741yw.rs:57:17\n   |\n57 |     assert"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(\", \")\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:16:47\n\
    \   |\n16 |     sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \   |                                               ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmu9_i_k_.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmu9_i_k_.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmu9_i_k_.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmu9_i_k_.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmu9_i_k_.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \         "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_primes = String::new();\n    let mut primes_string_len_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes = String::new();\n\
    \    let mut primes_string_len_primes_primes_primes_primes = String::new();\n\
    \    let mut primes_string_len_primes_primes_primes_primes_primes = String::new();\n\
    \    let mut primes_string_len_primes_primes_primes_primes_primes_primes = String::new();\n\
    \    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5_dkvric.rs:35:71\n   |\n\
    35 |     let mut primes_string_len_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                       ^\
    \ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5_dkvric.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5_dkvric.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5_dkvric.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5_dkvric.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5_dkvric.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5_dkvric.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5_dkvric.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5_dkvric.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5_dkvric.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5_dkvric.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<usize> = vec![];\n    let\
    \ mut prime_words_len: Vec<usize> = vec![];\n    let mut prime_words_len_count:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count2: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count3: Vec<usize> = vec![];\n    let mut prime_words_len_count4:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count5: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count6: Vec<usize> = vec![];\n    let mut prime_words_len_count7:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count8: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count9: Vec<usize> = vec![];\n    let mut prime_words_len_count10:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count11: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count12: Vec<usize> = vec![];\n    let mut prime_words_len_count13:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count14: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count15: Vec<usize> = vec![];\n    let mut prime_words_len_count16:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count17: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count18: Vec<usize> = vec![];\n    let mut prime_words_len_count19:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count20: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count21: Vec<usize> = vec![];\n    let mut prime_words_len_count22:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count23: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count24: Vec<usize> = vec![];\n    let mu\n}\n\n\
    fn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpahesb4fu.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpahesb4fu.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahesb4fu.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpahesb4fu.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpahesb4fu.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpahesb4fu.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpahesb4fu.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpahesb4fu.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpahesb4fu.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpahesb4fu.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpahesb4fu.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpd4151ix_.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|w| is_prime(w.len()))\n  \
    \ |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd4151ix_.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4151ix_.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd4151ix_.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd4151ix_.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd4151ix_.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd4151ix_.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd4151ix_.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd4151ix_.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd4151ix_.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4151ix_.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_len2: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len3: Vec<i32> = vec![];\n    let mut prime_words_len4:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len5: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len6: Vec<i32> = vec![];\n    let mut prime_words_len7: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len8: Vec<i32> = vec![];\n    let mut prime_words_len9:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len10: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len11: Vec<i32> = vec![];\n    let mut prime_words_len12: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len13: Vec<i32> = vec![];\n    let mut prime_words_len14:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len15: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len16: Vec<i32> = vec![];\n    let mut prime_words_len17: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len18: Vec<i32> = vec![];\n    let mut prime_words_len19:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len20: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len21: Vec<i32> = vec![];\n    let mut prime_words_len22: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len23: Vec<i32> = vec![];\n    let mut prime_words_len24:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len25: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len26: Vec<i32> = vec![];\n    let mut prime_words_len27: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len28: Vec<i32> = vec\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk3srjqx2.rs:44:46\n   |\n\
    44 |     let mut prime_words_len28: Vec<i32> = vec\n   |                     \
    \                         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\
    \nerror[E0423]: expected value, found macro `vec`\n  --> /tmp/tmpk3srjqx2.rs:44:43\n\
    \   |\n44 |     let mut prime_words_len28: Vec<i32> = vec\n   |              \
    \                             ^^^ not a value\n   |\nhelp: use `!` to invoke the\
    \ macro\n   |\n44 |     let mut prime_words_len28: Vec<i32> = vec!\n   |     \
    \                                         +\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk3srjqx2.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_str = String::new();\n    let mut primes_string_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str = String::new();\n\
    \    let mut primes_string_len_str_len_str_len = String::new();\n    let mut primes_string_len_str_len_str_len_str\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str_len = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str_len_str = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str = String::new();\n\
    \    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str\
    \ = String::new();\n    let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi7d8o65o.rs:39:99\n   |\n\
    39 |     let mut primes_string_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_\n\
    \   |                                                                        \
    \                           ^ help: add `;` here\n40 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi7d8o65o.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi7d8o65o.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi7d8o65o.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi7d8o65o.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi7d8o65o.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi7d8o65o.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi7d8o65o.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi7d8o65o.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi7d8o65o.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = String::new();\n    let mut primes_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string = String::new();\n \
    \   let mut primes_string_set_string_set = HashSet::new();\n    let mut primes_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string = String::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string = String::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvz9bkd2t.rs:40:31\n   |\n\
    40 |     let mut primes_string_set_\n   |                               ^ help:\
    \ add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:19:33\n   |\n19\
    \ |     let mut primes_string_set = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:21:44\n\
    \   |\n21 |     let mut primes_string_set_string_set = HashSet::new();\n   | \
    \                                           ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpvz9bkd2t.rs:23:55\n   |\n23 |     let mut primes_string_set_string_set_string_set\
    \ = HashSet::new();\n   |                                                    \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:25:66\n   |\n25\
    \ |     let mut primes_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \   |                                                                  ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:27:77\n   |\n27\
    \ |     let mut primes_string_set_string_set_string_set_string_s"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz0ohsu1v.rs:56:20\n   |\n\
    56 |     let mut primes_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpz0ohsu1v.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz0ohsu1v.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz0ohsu1v.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz0ohsu1v.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:65:17\n  \
    \ |\n65 |     assert_"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add((sentence.len() / 3).ceil() as usize);\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 4).ceil()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 5).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 6).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 7).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 8).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 9).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 10).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 11).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 12).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 13).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 14).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 15).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 16).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 17).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 18).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 19).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 20).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 21).ceil() as usize);\n    let mu\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgg70ixd7.rs:39:11\n   |\n\
    39 |     let mu\n   |           ^ help: add `;` here\n40 | }\n   | - unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpgg70ixd7.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgg70ixd7.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgg70ixd7.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgg70ixd7.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_prime = String::new();\n    let mut primes_string_len_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mu\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqw6c9794.rs:36:11\n   |\n\
    36 |     let mu\n   |           ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqw6c9794.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqw6c9794.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqw6c9794.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqw6c9794.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqw6c9794.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqw6c9794.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqw6c9794.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqw6c9794.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqw6c9794.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqw6c9794.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_primes = String::new();\n    let mut primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes = String::new();\n   \
    \ let mut primes_string_len_primes_string_len_primes_string = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8wvaqmeo.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8wvaqmeo.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8wvaqmeo.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8wvaqmeo.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8wvaqmeo.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    primes.resize(primes_len,\
    \ false);\n    primes.sort_unstable();\n    let mut primes_len = primes.len();\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 2).ceil()\
    \ as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as usize);\n    primes.resize(primes_len, false);\n    primes.sort_unstable();\n\
    \    let mut primes_len = primes.len();\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as u\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp7rkxw3f4.rs:55:51\n\
    \   |\n15 | fn words_in_sentence(sentence: String) -> String {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n55 |     let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 2).ceil() as u\n   |                                                   ^ unclosed\
    \ delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror: expected one\
    \ of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmp7rkxw3f4.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\n\
    error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp7rkxw3f4.rs:17:26\n\
    \   |\n17 |     let mut primes_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmp7rkxw3f4.rs:60:17\n   |\n60 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7rkxw3f4.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7rkxw3f4.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7rkxw3f4.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7rkxw3f4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7rkxw3f4.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot f"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_lens: Vec<i32>\
    \ = vec![];\n    let mut prime_words_lens_len: Vec<i32> = vec![];\n    let mut\
    \ prime_words_lens_lens: Vec<i32> = vec![];\n    let mut prime_words_lens_lens_len:\
    \ Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens: Vec<i32> = vec![];\n\
    \    let mut prime_words_lens_lens_lens_len: Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens_lens:\
    \ Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens_lens_len: Vec<i32>\
    \ = vec![];\n    let mut prime_words_lens_lens_lens_lens_lens: Vec<i32> = vec![];\n\
    \    let mut prime_words_lens_lens_lens_lens_lens_len: Vec<i32> = vec![];\n  \
    \  let mut prime_words_lens_lens_lens_lens_lens_lens: Vec<i32> = vec![];\n   \
    \ let mut prime_words_lens_lens_lens_lens_lens_lens_len: Vec<i32> = vec![];\n\
    \    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_len: Vec<i32> = vec![];\n\
    \    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_: Vec<i32> =\
    \ vec![];\n    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ Vec<i32> = vec![];\n    let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ Vec\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp16h2tiqo.rs:35:90\n   |\n\
    35 |     let mut prime_words_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ Vec\n   |                                                                  \
    \                        ^ help: add `;` here\n36 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp16h2tiqo.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp16h2tiqo.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp16h2tiqo.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp16h2tiqo.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp16h2tiqo.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp16h2tiqo.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp16h2tiqo.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp16h2tiqo.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp16h2tiqo.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp16h2tiqo.rs:44:25\n "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<usize> = vec![];\n    let\
    \ mut prime_words_len: usize = 0;\n    let mut prime_words_string: String = String::new();\n\
    \    let mut prime_words_string_len: usize = 0;\n    let mut prime_words_string_len:\
    \ usize = 0;\n    let mut prime_words_string_len2: usize = 0;\n    let mut prime_words_string_len3:\
    \ usize = 0;\n    let mut prime_words_string_len4: usize = 0;\n    let mut prime_words_string_len5:\
    \ usize = 0;\n    let mut prime_words_string_len6: usize = 0;\n    let mut prime_words_string_len7:\
    \ usize = 0;\n    let mut prime_words_string_len8: usize = 0;\n    let mut prime_words_string_len9:\
    \ usize = 0;\n    let mut prime_words_string_len10: usize = 0;\n    let mut prime_words_string_len11:\
    \ usize = 0;\n    let mut prime_words_string_len12: usize = 0;\n    let mut prime_words_string_len13:\
    \ usize = 0;\n    let mut prime_words_string_len14: usize = 0;\n    let mut prime_words_string_len15:\
    \ usize = 0;\n    let mut prime_words_string_len16: usize = 0;\n    let mut prime_words_string_len17:\
    \ usize = 0;\n    let mut prime_words_string_len18: usize = 0;\n    let mut prime_words_string_len19:\
    \ usize = 0;\n    let mut prime_words_string_len20: usize = 0;\n    let mut prime_words_string_len21:\
    \ usize = 0;\n    let mut prime_words_string_len22: usize = 0;\n    let mut prime_words_string_len23:\
    \ usize = 0;\n    let mut prime_words_string_len24: usize = 0;\n    let mut prime_words_string_len25:\
    \ usize = 0;\n    let mut prime_words_string_len26: usize = 0;\n    let mut prime_words_string_len27:\
    \ usize = 0;\n    let mut prime_words_string_len28: usize = 0;\n    let mut prime_words_string_len29:\
    \ usize = 0;\n    let mut prime_words_string_len30: usize = 0;\n    let mut prime_words_string_len31:\
    \ usize = 0;\n    let mut prime_words_string_len32: usize = 0;\n    let mut prime_words_string_len33:\
    \ usize = 0;\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiczji2b5.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiczji2b5.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiczji2b5.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiczji2b5.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiczji2b5.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiczji2b5.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiczji2b5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiczji2b5.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiczji2b5.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiczji2b5.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiczji2b5.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add((sentence.len() / 3).ceil() as usize);\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 4).ceil()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 5).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 6).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 7).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 8).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 9).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 10).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 11).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 12).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 13).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 14).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 15).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 16).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 17).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 18).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 19).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 20).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 21).ceil() as usize);\n    let mu\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgg70ixd7.rs:39:11\n   |\n\
    39 |     let mu\n   |           ^ help: add `;` here\n40 | }\n   | - unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpgg70ixd7.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgg70ixd7.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgg70ixd7.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgg70ixd7.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgg70ixd7.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgg70ixd7.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut result = String::new();\n    for word\
    \ in sentence.split_whitespace() {\n        if primes_set.contains(&word) {\n\
    \            result.push_str(&word);\n        } else {\n            let mut prime_found\
    \ = false;\n            for prime in &primes {\n                if word.len()\
    \ == prime {\n                    primes_set.insert(word);\n                 \
    \   result.push_str(&word);\n                    prime_found = true;\n       \
    \             break;\n                }\n            }\n            if !prime_found\
    \ {\n                result.push_str(&word);\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp34rw2iqr.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp34rw2iqr.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp34rw2iqr.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp34rw2iqr.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp34rw2iqr.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp34rw2iqr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp34rw2iqr.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp34rw2iqr.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp34rw2iqr.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp34rw2iqr.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp34rw2iqr.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add((sentence.len() / 3).ceil() as usize);\n\
    \    let mut primes_len = primes_len.saturating_add((sentence.len() / 4).ceil()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 5).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 6).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 7).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 8).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 9).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 10).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 11).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 12).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 13).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 14).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 15).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 16).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 17).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 18).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 19).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 20).ceil() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / 21).ceil() as usize);\n    let mut \n}\n\nfn main() {\n    let candidate =\
    \ words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpvc39kmlp.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected identifier\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvc39kmlp.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpvc39kmlp.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpvc39kmlp.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvc39kmlp.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvc39kmlp.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvc39kmlp.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvc39kmlp.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvc39kmlp.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvc39kmlp.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvc39kmlp.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_len_count:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count3: Vec<i32> = Vec::new();\n    let mut prime_words_len_count4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count6: Vec<i32> = Vec::new();\n    let mut prime_words_len_count7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count9: Vec<i32> = Vec::new();\n    let mut prime_words_len_count10:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count11: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count12: Vec<i32> = Vec::new();\n    let mut prime_words_len_count13:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count14: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count15: Vec<i32> = Vec::new();\n    let mut prime_words_len_count16:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count17: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count18: Vec<i32> = Vec::new();\n    let mut prime_words_len_count19:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count20: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count21: Vec<i32> = Vec::new();\n    let mut prime_words_len_count22:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count23: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count24: Vec<i32> = Vec::new();\n    let mu\n}\n\n\
    fn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp825fvhdc.rs:42:11\n   |\n\
    42 |     let mu\n   |           ^ help: add `;` here\n43 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp825fvhdc.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp825fvhdc.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp825fvhdc.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp825fvhdc.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp825fvhdc.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp825fvhdc.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp825fvhdc.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp825fvhdc.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp825fvhdc.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp825fvhdc.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![true; 100];\n    let mut new_sentence\
    \ = String::new();\n    let mut words = sentence.split_whitespace();\n    for\
    \ word in words {\n        if primes[word.len()] {\n            new_sentence.push_str(word);\n\
    \        }\n        primes[word.len()] = false;\n    }\n    new_sentence\n}\n\n\
    fn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeh9wo1d7.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpeh9wo1d7.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeh9wo1d7.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeh9wo1d7.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeh9wo1d7.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dxhio8z.rs:16:47\n\
    \   |\n16 |     sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \   |                                               ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6dxhio8z.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_len = String::new();\n    let mut primes_string_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len = String::new();\n\
    \    let mut primes_string_len_len_len_len_len = String::new();\n    let mut primes_string_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len = String::new();\n\
    \    let mut primes_string_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut primes_string_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut primes_string_len_len_len_\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo7d0wtfe.rs:39:39\n   |\n\
    39 |     let mut primes_string_len_len_len_\n   |                            \
    \           ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7d0wtfe.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo7d0wtfe.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo7d0wtfe.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo7d0wtfe.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7d0wtfe.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\n"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_len2: Vec<i32>\
    \ = Vec::new();\n    let mut prime_words_len3: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len4: Vec<i32> = Vec::new();\n    let mut prime_words_len5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<i32> = Vec::new();\n    let mut prime_words_len8:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len9: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<i32> = Vec::new();\n    let mut prime_words_len11:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len12: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<i32> = Vec::new();\n    let mut prime_words_len14:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len15: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len16: Vec<i32> = Vec::new();\n    let mut prime_words_len17:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len18: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len19: Vec<i32> = Vec::new();\n    let mut prime_words_len20:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len21: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len22: Vec<i32> = Vec::new();\n    let mut prime_words_len23:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len24: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len25: Vec<i32> = Vec::new();\n    let mut prime_words_len26:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzy02fkwi.rs:43:25\n   |\n\
    43 |     let mut prime_words_\n   |                         ^ help: add `;` here\n\
    44 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpzy02fkwi.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzy02fkwi.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzy02fkwi.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzy02fkwi.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzy02fkwi.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzy02fkwi.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut primes_iter = primes.iter();\n    let mut\
    \ primes_iter = primes_iter.enumerate().filter(|&(_, x)| x % 2 == 0);\n    let\
    \ mut primes_iter = primes_iter.filter(|&(_, x)| x % 3 == 0);\n    let mut primes_iter\
    \ = primes_iter.filter(|&(_, x)| x % 5 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_,\
    \ x)| x % 7 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x %\
    \ 11 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 13 ==\
    \ 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 17 == 0);\n\
    \    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 19 == 0);\n    let\
    \ mut primes_iter = primes_iter.filter(|&(_, x)| x % 23 == 0);\n    let mut primes_iter\
    \ = primes_iter.filter(|&(_, x)| x % 29 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_,\
    \ x)| x % 31 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x\
    \ % 37 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 41 ==\
    \ 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 43 == 0);\n\
    \    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 47 == 0);\n    let\
    \ mut primes_iter = primes_iter.filter(|&(_, x)| x % 53 == 0);\n    let mut primes_iter\
    \ = primes_iter.filter(|&(_, x)| x % 59 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_,\
    \ x)| x % 61 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x\
    \ % 67 == 0);\n    let mut primes_iter = primes_iter.filter(|&(_, x)| x % 71 ==\
    \ 0);\n    let mut primes_iter = primes_iter.filter(|&\n}\n\nfn main() {\n   \
    \ let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected parameter name, found `)`\n  --> /tmp/tmpg1gaagzx.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected parameter name\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpg1gaagzx.rs:39:45\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n39 |     let mut primes_iter\
    \ = primes_iter.filter(|&\n   |                                             ^\
    \ unclosed delimiter\n40 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg1gaagzx.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg1gaagzx.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg1gaagzx.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg1gaagzx.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg1gaagzx.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg1gaagzx.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg1gaagzx.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg1gaagzx.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(\", \")\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpalf688ro.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|w| is_prime(w.len()))\n  \
    \ |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpalf688ro.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpalf688ro.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpalf688ro.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpalf688ro.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                  "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_word_length: usize = 2;\n    let mut prime_word_index: usize\
    \ = 0;\n    let mut prime_word_length_index: usize = 0;\n    let mut prime_word_lengths:\
    \ Vec<usize> = vec![];\n    let mut prime_word_lengths_index: usize = 0;\n   \
    \ let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_index:\
    \ usize = 0;\n    let mut prime_word_lengths_index: usize = 0;\n    let mut prime_word_lengths_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo36dh0dr.rs:55:32\n   |\n\
    55 |     let mut prime_word_lengths_\n   |                                ^ help:\
    \ add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpo36dh0dr.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpo36dh0dr.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo36dh0dr.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo36dh0dr.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo36dh0dr.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo36dh0dr.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo36dh0dr.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo36dh0dr.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo36dh0dr.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo36dh0dr.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = \"\";\n    let mut words = sentence.split_whitespace();\n\
    \    for word in words {\n        if primes_set.contains(&word) {\n          \
    \  primes_string += &word + \" \";\n        } else {\n            primes.push_back(word.len());\n\
    \            primes_set.insert(word);\n        }\n    }\n    if primes.len() ==\
    \ 1 {\n        return String::from(\"\");\n    }\n    primes_string += &primes[primes.len()\
    \ - 1] + \" \";\n    primes_string\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp1uj9zhe1.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uj9zhe1.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1uj9zhe1.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1uj9zhe1.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1uj9zhe1.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1uj9zhe1.rs:41:25\n   |\n41 |  "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    primes_len.checked_add(1).unwrap();\n\
    \    primes_len.checked_add(2).unwrap();\n    primes_len.checked_add(3).unwrap();\n\
    \    primes_len.checked_add(4).unwrap();\n    primes_len.checked_add(5).unwrap();\n\
    \    primes_len.checked_add(6).unwrap();\n    primes_len.checked_add(7).unwrap();\n\
    \    primes_len.checked_add(8).unwrap();\n    primes_len.checked_add(9).unwrap();\n\
    \    primes_len.checked_add(10).unwrap();\n    primes_len.checked_add(11).unwrap();\n\
    \    primes_len.checked_add(12).unwrap();\n    primes_len.checked_add(13).unwrap();\n\
    \    primes_len.checked_add(14).unwrap();\n    primes_len.checked_add(15).unwrap();\n\
    \    primes_len.checked_add(16).unwrap();\n    primes_len.checked_add(17).unwrap();\n\
    \    primes_len.checked_add(18).unwrap();\n    primes_len.checked_add(19).unwrap();\n\
    \    primes_len.checked_add(20).unwrap();\n    primes_len.checked_add(21).unwrap();\n\
    \    primes_len.checked_add(22).unwrap();\n    primes_len.checked_add(23).unwrap();\n\
    \    primes_len.checked_add(24).unwrap();\n    primes_len.checked_add(25).unwrap();\n\
    \    primes_len.checked_add(26).unwrap();\n    primes_len.checked_add(27).unwrap();\n\
    \    primes_len.checked_add(28).unwrap();\n    primes_len.checked_add(29).unwrap();\n\
    \    primes_len.checked_add(30).unwrap();\n    primes_len.checked_add(31).unwrap();\n\
    \    primes_len.checked_add(32).unwrap();\n    primes_len.checked_add(33).unwrap();\n\
    \    primes_len.checked_add(34).unwrap();\n    primes_len.checked_add(35).unwrap();\n\
    \    primes_len.\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp117ztnbv.rs:56:1\n   |\n56\
    \ | }\n   | ^\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmp117ztnbv.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp117ztnbv.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp117ztnbv.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp117ztnbv.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp117ztnbv.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp117ztnbv.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp117ztnbv.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp117ztnbv.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp117ztnbv.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp117ztnbv.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: can"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|&x| x.chars().all(|c|\
    \ c.is_alphabetic())).collect()\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_siscbf0.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_siscbf0.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_siscbf0.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_siscbf0.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_siscbf0.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_siscbf0.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_siscbf0.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_siscbf0.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_siscbf0.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_siscbf0.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_siscbf0.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = \"\";\n    let mut primes_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string = HashSet::new();\n\
    \    let mut primes_string_set_string_string = HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut \n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpvl17y4ge.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvl17y4ge.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvl17y4ge.rs:19:33\n   |\n19\
    \ |     let mut primes_string_set = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpvl17y4ge.rs:20:40\n\
    \   |\n20 |     let mut primes_string_set_string = HashSet::new();\n   |     \
    \                                   ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpvl17y4ge.rs:21:47\n   |\n21 |     let mut primes_string_set_string_string\
    \ = HashSet::new();\n   |                                               ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvl17y4ge.rs:23:9\n   |\n23 |\
    \         HashSet::new();\n   |         ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpvl17y4ge.rs:25:9\n   |\n25 |         HashSet::new();\n   |     \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvl17y4ge.rs:27:9\n   |\n27 |\
    \         HashSet::n"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![true; 100];\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_string = \"\";\n    let mut primes_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string = HashSet::new();\n\
    \    let mut primes_string_set_string_string = HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n    let mut primes_string_set_string_string_string\
    \ =\n        HashSet::new();\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpdil17rxp.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpdil17rxp.rs:19:33\n\
    \   |\n19 |     let mut primes_string_set = HashSet::new();\n   |            \
    \                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpdil17rxp.rs:20:40\n\
    \   |\n20 |     let mut primes_string_set_string = HashSet::new();\n   |     \
    \                                   ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpdil17rxp.rs:21:47\n   |\n21 |     let mut primes_string_set_string_string\
    \ = HashSet::new();\n   |                                               ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpdil17rxp.rs:23:9\n   |\n23 |\
    \         HashSet::new();\n   |         ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpdil17rxp.rs:25:9\n   |\n25 |         HashSet::new();\n   |     \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpdil17rxp.rs:27:9\n   |\n27 |\
    \         HashSet::new();\n   |         ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use st"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut words\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string_len = String::new();\n    let mut prime_numbers_string_len_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n   \
    \ let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq9pzlev7.rs:35:97\n   |\n\
    35 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \                         ^ help: add `;` here\n36 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq9pzlev7.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9pzlev7.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq9pzlev7.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq9pzlev7.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq9pzlev7.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq9pzlev7.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq9pzlev7.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq9pzlev7.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq9pzlev7.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq9pzl"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_words_len: usize = 0;\n    let mut prime_words_len2: usize =\
    \ 0;\n    let mut prime_words_len3: usize = 0;\n    let mut prime_words_len4:\
    \ usize = 0;\n    let mut prime_words_len5: usize = 0;\n    let mut prime_words_len6:\
    \ usize = 0;\n    let mut prime_words_len7: usize = 0;\n    let mut prime_words_len8:\
    \ usize = 0;\n    let mut prime_words_len9: usize = 0;\n    let mut prime_words_len10:\
    \ usize = 0;\n    let mut prime_words_len11: usize = 0;\n    let mut prime_words_len12:\
    \ usize = 0;\n    let mut prime_words_len13: usize = 0;\n    let mut prime_words_len14:\
    \ usize = 0;\n    let mut prime_words_len15: usize = 0;\n    let mut prime_words_len16:\
    \ usize = 0;\n    let mut prime_words_len17: usize = 0;\n    let mut prime_words_len18:\
    \ usize = 0;\n    let mut prime_words_len19: usize = 0;\n    let mut prime_words_len20:\
    \ usize = 0;\n    let mut prime_words_len21: usize = 0;\n    let mut prime_words_len22:\
    \ usize = 0;\n    let mut prime_words_len23: usize = 0;\n    let mut prime_words_len24:\
    \ usize = 0;\n    let mut prime_words_len25: usize = 0;\n    let mut prime_words_len26:\
    \ usize = 0;\n    let mut prime_words_len27: usize = 0;\n    let mut prime_words_len28:\
    \ usize = 0;\n    let mut prime_words_len29: usize = 0;\n    let mut prime_words_len30:\
    \ usize = 0;\n    let mut prime_words_len31: usize = 0;\n    let mut prime_words_len32:\
    \ usize = 0;\n    let mut prime_words_len33: usize = 0;\n    let mut prime_words_len34:\
    \ usize = 0;\n    let mut prime_words_len35: usize = 0;\n    let mut prime_words_len36:\
    \ usize = 0;\n    let mut prime_words_len37: usize = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiqb0p8q7.rs:56:11\n   |\n\
    56 |     let mu\n   |           ^ help: add `;` here\n57 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiqb0p8q7.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_words: Vec<String> = vec![];\n  \
    \  let mut prime_words_len: usize = 0;\n    let mut prime_words_len2: usize =\
    \ 0;\n    let mut prime_words_len3: usize = 0;\n    let mut prime_words_len4:\
    \ usize = 0;\n    let mut prime_words_len5: usize = 0;\n    let mut prime_words_len6:\
    \ usize = 0;\n    let mut prime_words_len7: usize = 0;\n    let mut prime_words_len8:\
    \ usize = 0;\n    let mut prime_words_len9: usize = 0;\n    let mut prime_words_len10:\
    \ usize = 0;\n    let mut prime_words_len11: usize = 0;\n    let mut prime_words_len12:\
    \ usize = 0;\n    let mut prime_words_len13: usize = 0;\n    let mut prime_words_len14:\
    \ usize = 0;\n    let mut prime_words_len15: usize = 0;\n    let mut prime_words_len16:\
    \ usize = 0;\n    let mut prime_words_len17: usize = 0;\n    let mut prime_words_len18:\
    \ usize = 0;\n    let mut prime_words_len19: usize = 0;\n    let mut prime_words_len20:\
    \ usize = 0;\n    let mut prime_words_len21: usize = 0;\n    let mut prime_words_len22:\
    \ usize = 0;\n    let mut prime_words_len23: usize = 0;\n    let mut prime_words_len24:\
    \ usize = 0;\n    let mut prime_words_len25: usize = 0;\n    let mut prime_words_len26:\
    \ usize = 0;\n    let mut prime_words_len27: usize = 0;\n    let mut prime_words_len28:\
    \ usize = 0;\n    let mut prime_words_len29: usize = 0;\n    let mut prime_words_len30:\
    \ usize = 0;\n    let mut prime_words_len31: usize = 0;\n    let mut prime_words_len32:\
    \ usize = 0;\n    let mut prime_words_len33: usize = 0;\n    let mut prime_words_len34:\
    \ usize = 0;\n    let mut prime_words_len35: u\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphot1ywk1.rs:53:33\n   |\n\
    53 |     let mut prime_words_len35: u\n   |                                 ^\
    \ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `u` in this scope\n  --> /tmp/tmphot1ywk1.rs:53:32\n   |\n53 |   \
    \  let mut prime_words_len35: u\n   |                                ^ help: a\
    \ builtin type with a similar name exists: `u8`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmphot1ywk1.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphot1ywk1.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphot1ywk1.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphot1ywk1.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphot1ywk1.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphot1ywk1.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphot1ywk1.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphot1ywk1.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphot1ywk1.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_words_len: usize = 0;\n    let mut prime_words_len2: usize =\
    \ 0;\n    let mut prime_words_len3: usize = 0;\n    let mut prime_words_len4:\
    \ usize = 0;\n    let mut prime_words_len5: usize = 0;\n    let mut prime_words_len6:\
    \ usize = 0;\n    let mut prime_words_len7: usize = 0;\n    let mut prime_words_len8:\
    \ usize = 0;\n    let mut prime_words_len9: usize = 0;\n    let mut prime_words_len10:\
    \ usize = 0;\n    let mut prime_words_len11: usize = 0;\n    let mut prime_words_len12:\
    \ usize = 0;\n    let mut prime_words_len13: usize = 0;\n    let mut prime_words_len14:\
    \ usize = 0;\n    let mut prime_words_len15: usize = 0;\n    let mut prime_words_len16:\
    \ usize = 0;\n    let mut prime_words_len17: usize = 0;\n    let mut prime_words_len18:\
    \ usize = 0;\n    let mut prime_words_len19: usize = 0;\n    let mut prime_words_len20:\
    \ usize = 0;\n    let mut prime_words_len21: usize = 0;\n    let mut prime_words_len22:\
    \ usize = 0;\n    let mut prime_words_len23: usize = 0;\n    let mut prime_words_len24:\
    \ usize = 0;\n    let mut prime_words_len25: usize = 0;\n    let mut prime_words_len26:\
    \ usize = 0;\n    let mut prime_words_len27: usize = 0;\n    let mut prime_words_len28:\
    \ usize = 0;\n    let mut prime_words_len29: usize = 0;\n    let mut prime_words_len30:\
    \ usize = 0;\n    let mut prime_words_len31: usize = 0;\n    let mut prime_words_len32:\
    \ usize = 0;\n    let mut prime_words_len33: usize = 0;\n    let mut prime_words_len34:\
    \ usize = 0;\n    let mut prime_words_len35: usize = 0;\n    let mut prime_words_len36:\
    \ usize = 0;\n    let mut prime_words_len37: usize = 0;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiqb0p8q7.rs:56:11\n   |\n\
    56 |     let mu\n   |           ^ help: add `;` here\n57 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiqb0p8q7.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiqb0p8q7.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiqb0p8q7.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut primes_iter = primes.iter().cloned();\n\
    \    let mut primes_iter = primes_iter.into_iter().take(sentence.len());\n   \
    \ let mut primes_iter = primes_iter.into_iter().skip(1);\n    let mut primes_iter\
    \ = primes_iter.into_iter().take_while(|&x| {\n        primes_iter.any(|&y| y\
    \ % x == 0)\n    });\n    for prime in primes_iter {\n        let mut prime_str\
    \ = String::new();\n        for &c in sentence.chars() {\n            if prime\
    \ % c == 0 {\n                prime_str.push(c);\n            }\n        }\n \
    \       result.push_str(&prime_str);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0xroixa7.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xroixa7.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xroixa7.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0xroixa7.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0xroixa7.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0xroixa7.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0xroixa7.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0xroixa7.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0xroixa7.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0xroixa7.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0xroixa7.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dxhio8z.rs:16:47\n\
    \   |\n16 |     sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \   |                                               ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6dxhio8z.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_len_count: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len_count2: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len_count3: Vec<i32> = vec![];\n    let mut prime_words_len_count4:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count5: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count6: Vec<i32> = vec![];\n    let mut prime_words_len_count7:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count8: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count9: Vec<i32> = vec![];\n    let mut prime_words_len_count10:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count11: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count12: Vec<i32> = vec![];\n    let mut prime_words_len_count13:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count14: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count15: Vec<i32> = vec![];\n    let mut prime_words_len_count16:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count17: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count18: Vec<i32> = vec![];\n    let mut prime_words_len_count19:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count20: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count21: Vec<i32> = vec![];\n    let mut prime_words_len_count22:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count23: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count24: Vec<i32> = vec![];\n    let mut prime_words_len_count25:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count26\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmput6s5f2b.rs:43:36\n   |\n\
    43 |     let mut prime_words_len_count26\n   |                               \
    \     ^ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmput6s5f2b.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmput6s5f2b.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmput6s5f2b.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp84jfyyt2.rs:58:38\n   |\n\
    58 |     let mut primes_set = HashSet::new\n   |                             \
    \         ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:58:26\n\
    \   |\n58 |     let mut primes_set = HashSet::new\n   |                      \
    \    ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:18:26\n   |\n18\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:19:26\n   |\n19\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:20:26\n   |\n20\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:21:26\n   |\n21\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:22:26\n   |\n22\
    \ |     let mut prim"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_prime = String::new();\n    let mut primes_string_len_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx6ggkcj_.rs:35:78\n   |\n\
    35 |     let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \      ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx6ggkcj_.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx6ggkcj_.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx6ggkcj_.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx6ggkcj_.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx6ggkcj_.rs:44:25\n   |\n44 |     assert_eq!("
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_set2 = HashSet::new();\n    let mut primes_set3\
    \ = HashSet::new();\n    let mut primes_set4 = HashSet::new();\n    let mut primes_set5\
    \ = HashSet::new();\n    let mut primes_set6 = HashSet::new();\n    let mut primes_set7\
    \ = HashSet::new();\n    let mut primes_set8 = HashSet::new();\n    let mut primes_set9\
    \ = HashSet::new();\n    let mut primes_set10 = HashSet::new();\n    let mut primes_set11\
    \ = HashSet::new();\n    let mut primes_set12 = HashSet::new();\n    let mut primes_set13\
    \ = HashSet::new();\n    let mut primes_set14 = HashSet::new();\n    let mut primes_set15\
    \ = HashSet::new();\n    let mut primes_set16 = HashSet::new();\n    let mut primes_set17\
    \ = HashSet::new();\n    let mut primes_set18 = HashSet::new();\n    let mut primes_set19\
    \ = HashSet::new();\n    let mut primes_set20 = HashSet::new();\n    let mut primes_set21\
    \ = HashSet::new();\n    let mut primes_set22 = HashSet::new();\n    let mut primes_set23\
    \ = HashSet::new();\n    let mut primes_set24 = HashSet::new();\n    let mut primes_set25\
    \ = HashSet::new();\n    let mut primes_set26 = HashSet::new();\n    let mut primes_set27\
    \ = HashSet::new();\n    let mut primes_set28 = HashSet::new();\n    let mut primes_set29\
    \ = HashSet::new();\n    let mut primes_set30 = HashSet::new();\n    let mut primes_set31\
    \ = HashSet::new();\n    let mut primes_set32 = HashSet::new();\n    let mut primes_set33\
    \ = HashSet::new();\n    let mut primes_set34 = HashSet::new();\n    let mut primes_set35\
    \ = HashSet::new();\n    let mut primes_set36 = HashSet::new();\n    let mut primes_set37\
    \ = HashSet::new\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgy4jmosu.rs:53:40\n   |\n\
    53 |     let mut primes_set37 = HashSet::new\n   |                           \
    \             ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:53:28\n\
    \   |\n53 |     let mut primes_set37 = HashSet::new\n   |                    \
    \        ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:18:27\n   |\n18\
    \ |     let mut primes_set2 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:19:27\n   |\n19\
    \ |     let mut primes_set3 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:20:27\n   |\n20\
    \ |     let mut primes_set4 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:21:27\n   |\n21\
    \ |     let mut primes_set5 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:22:27\n   |\n22\
    \ | "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<String> = Vec::new();\n  \
    \  let mut prime_words_len: Vec<usize> = Vec::new();\n    let mut prime_words_len2:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len3: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len4: Vec<usize> = Vec::new();\n    let mut prime_words_len5:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len6: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<usize> = Vec::new();\n    let mut prime_words_len8:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len9: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<usize> = Vec::new();\n    let mut prime_words_len11:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len12: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<usize> = Vec::new();\n    let mut prime_words_len14:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len15: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len16: Vec<usize> = Vec::new();\n    let mut prime_words_len17:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len18: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len19: Vec<usize> = Vec::new();\n    let mut prime_words_len20:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len21: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len22: Vec<usize> = Vec::new();\n    let mut prime_words_len23:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len24: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len25: Vec<usize> = Vec::new();\n\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpx1v324vv.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx1v324vv.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx1v324vv.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx1v324vv.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx1v324vv.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx1v324vv.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx1v324vv.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx1v324vv.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx1v324vv.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx1v324vv.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx1v324vv.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptefpw08h.rs:35:1\n\
    \   |\n35 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptefpw08h.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptefpw08h.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:44:17\n   |\n44 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_word_len: usize = 0;\n    let mut prime_word_lens: Vec<usize>\
    \ = vec![];\n    let mut prime_word_lens_len: usize = 0;\n    let mut prime_word_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut prime_word_lens_lens_len: usize = 0;\n   \
    \ let mut prime_word_lens_lens_lens: Vec<usize> = vec![];\n    let mut prime_word_lens_lens_lens_len:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens: Vec<usize> = vec![];\n\
    \    let mut prime_word_lens_lens_lens_lens_len: usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens:\
    \ Vec<usize> = vec![];\n    let mut prime_word_lens_lens_lens_lens_lens_len: usize\
    \ = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_lens_len: usize = 0;\n\
    \    let mut prime_word_lens_lens_lens_lens_lens_lens_len: usize = 0;\n    let\
    \ mut prime_word_lens_lens_lens_lens_lens_lens_lens_len: usize = 0;\n    let mut\
    \ prime_word_lens_lens_lens_lens_lens_lens_lens_lens_len: usize = 0;\n    let\
    \ mut prime_word_lens_lens_lens_lens_lens_lens_lens_lens_lens_: usize = 0;\n \
    \   let mut prime_word_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_: usize\
    \ = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_:\
    \ usize = 0;\n    let \n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpzdd6hzd1.rs:40:1\n  \
    \ |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpzdd6hzd1.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzdd6hzd1.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzdd6hzd1.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzdd6hzd1.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzdd6hzd1.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzdd6hzd1.rs:49:17\n   |\n49 |     assert"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_string_length\
    \ = String::new();\n    let mut primes_string_length = String::new();\n    let\
    \ mut primes_string_length = String::new();\n    let mut primes_\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz0ohsu1v.rs:56:20\n   |\n\
    56 |     let mut primes_\n   |                    ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpz0ohsu1v.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz0ohsu1v.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz0ohsu1v.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz0ohsu1v.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz0ohsu1v.rs:65:17\n  \
    \ |\n65 |     assert_"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpstjqtvtz.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpstjqtvtz.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpstjqtvtz.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpstjqtvtz.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpstjqtvtz.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpstjqtvtz.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpstjqtvtz.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpstjqtvtz.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpstjqtvtz.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpstjqtvtz.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = String::new();\n    let mut primes_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string = String::new();\n \
    \   let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string = String::new();\n  \
    \  let mut primes_string_set_string = String::new();\n    let mut primes_string_set_string\
    \ = String::new();\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpy1xd1p4k.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpy1xd1p4k.rs:19:33\n\
    \   |\n19 |     let mut primes_string_set = HashSet::new();\n   |            \
    \                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy1xd1p4k.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy1xd1p4k.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy1xd1p4k.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy1xd1p4k.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy1xd1p4k.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy1xd1p4k.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy1xd1p4k.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy1xd1p4k.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_order: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len_count: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len_order: Vec<i32> = vec![];\n    let mut prime_words_len_count2:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_order2: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count3: Vec<i32> = vec![];\n    let mut prime_words_len_order3:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count4: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_order4: Vec<i32> = vec![];\n    let mut prime_words_len_count5:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_order5: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count6: Vec<i32> = vec![];\n    let mut prime_words_len_order6:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count7: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_order7: Vec<i32> = vec![];\n    let mut prime_words_len_count8:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_order8: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count9: Vec<i32> = vec![];\n    let mut prime_words_len_order9:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count10: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_order10: Vec<i32> = vec![];\n    let mut prime_words_len_count11:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_order11: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count12: Vec<i32> = vec![];\n    let mut prime_words_len_order12:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count13: Vec<i32> = vec![];\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg2rkntzc.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2rkntzc.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2rkntzc.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg2rkntzc.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg2rkntzc.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg2rkntzc.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg2rkntzc.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg2rkntzc.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg2rkntzc.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg2rkntzc.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg2rkntzc.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3];\n    let mut result =\
    \ String::new();\n    for word in sentence.split_whitespace() {\n        let len\
    \ = word.len();\n        if len == 0 {\n            continue;\n        }\n   \
    \     if len == 1 {\n            result.push_str(&word);\n            continue;\n\
    \        }\n        if primes.iter().any(|&x| x == len) {\n            result.push_str(&word);\n\
    \            continue;\n        }\n        let mut prime = true;\n        for\
    \ &p in &primes {\n            if len % p == 0 {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if prime {\n      \
    \      result.push_str(&word);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv2fs2a24.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv2fs2a24.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv2fs2a24.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv2fs2a24.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv2fs2a24.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv2fs2a24.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv2fs2a24.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv2fs2a24.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv2fs2a24.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv2fs2a24.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv2fs2a24.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_string = String::new();\n    for prime in primes.iter() {\n        if\
    \ sentence.chars().filter(|c| c % prime == 0).count() == 0 {\n            primes_string.push_str(&format!(\"\
    {}\", prime));\n        }\n    }\n    primes_string\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvud4vba0.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvud4vba0.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvud4vba0.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvud4vba0.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvud4vba0.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvud4vba0.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvud4vba0.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvud4vba0.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvud4vba0.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvud4vba0.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvud4vba0.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_string: String = String::new();\n    let mut prime_words_string_len:\
    \ usize = 0;\n    let mut prime_words_string_len2: usize = 0;\n    let mut prime_words_string_len3:\
    \ usize = 0;\n    let mut prime_words_string_len4: usize = 0;\n    let mut prime_words_string_len5:\
    \ usize = 0;\n    let mut prime_words_string_len6: usize = 0;\n    let mut prime_words_string_len7:\
    \ usize = 0;\n    let mut prime_words_string_len8: usize = 0;\n    let mut prime_words_string_len9:\
    \ usize = 0;\n    let mut prime_words_string_len10: usize = 0;\n    let mut prime_words_string_len11:\
    \ usize = 0;\n    let mut prime_words_string_len12: usize = 0;\n    let mut prime_words_string_len13:\
    \ usize = 0;\n    let mut prime_words_string_len14: usize = 0;\n    let mut prime_words_string_len15:\
    \ usize = 0;\n    let mut prime_words_string_len16: usize = 0;\n    let mut prime_words_string_len17:\
    \ usize = 0;\n    let mut prime_words_string_len18: usize = 0;\n    let mut prime_words_string_len19:\
    \ usize = 0;\n    let mut prime_words_string_len20: usize = 0;\n    let mut prime_words_string_len21:\
    \ usize = 0;\n    let mut prime_words_string_len22: usize = 0;\n    let mut prime_words_string_len23:\
    \ usize = 0;\n    let mut prime_words_string_len24: usize = 0;\n    let mut prime_words_string_len25:\
    \ usize = 0;\n    let mut prime_words_string_len26: usize = 0;\n    let mut prime_words_string_len27:\
    \ usize = 0;\n    let mut prime_words_string_len28: usize = 0;\n    let mut prime_words_string_len29:\
    \ usize = 0;\n    let mut prime_words_string_len30: usize = 0;\n    let mut prime_words_string_len31:\
    \ usize = 0;\n    let mut prime_words_string_len32: usize = 0;\n    let mut prime_words_string_len33:\
    \ usize = 0;\n    let mut prime_words_string_len34: usize = 0;\n    let mut prime_words_string_len35:\
    \ \n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmpb3q9l_b7.rs:53:1\n   |\n\
    52 |     let mut prime_words_string_len35: \n   |         ----------------------------\
    \ while parsing the type for `mut prime_words_string_len35`\n53 | }\n   | ^ expected\
    \ type\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb3q9l_b7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                       "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i64> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i64> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_len2: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_order2: Vec<i64> = Vec::new();\n    let mut prime_words_len3:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_order3: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_len4: Vec<i64> = Vec::new();\n    let mut prime_words_order4:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_len5: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_order5: Vec<i64> = Vec::new();\n    let mut prime_words_len6:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_order6: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<i64> = Vec::new();\n    let mut prime_words_order7:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_len8: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_order8: Vec<i64> = Vec::new();\n    let mut prime_words_len9:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_order9: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<i64> = Vec::new();\n    let mut prime_words_order10:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_len11: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_order11: Vec<i64> = Vec::new();\n    let mut prime_words_len12:\
    \ Vec<i64> = Vec::new();\n    let mut prime_words_order12: Vec<i64> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<i64> = Vec::new();\n    let mut prime_\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn3ddgbfi.rs:42:19\n   |\n\
    42 |     let mut prime_\n   |                   ^ help: add `;` here\n43 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3ddgbfi.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn3ddgbfi.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3ddgbfi.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3ddgbfi.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3ddgbfi.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(\",\")\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpg8n4kabu.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|w| is_prime(w.len()))\n  \
    \ |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg8n4kabu.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg8n4kabu.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg8n4kabu.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg8n4kabu.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg8n4kabu.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg8n4kabu.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg8n4kabu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg8n4kabu.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg8n4kabu.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg8n4kabu.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add((sentence.len() / 2).floor() as usize);\n\
    \    primes_set.insert(2);\n    primes_set.insert(3);\n    primes_set.insert(5);\n\
    \    primes_set.insert(7);\n    primes_set.insert(11);\n    primes_set.insert(13);\n\
    \    primes_set.insert(17);\n    primes_set.insert(19);\n    primes_set.insert(23);\n\
    \    primes_set.insert(29);\n    primes_set.insert(31);\n    primes_set.insert(37);\n\
    \    primes_set.insert(41);\n    primes_set.insert(43);\n    primes_set.insert(47);\n\
    \    primes_set.insert(53);\n    primes_set.insert(59);\n    primes_set.insert(61);\n\
    \    primes_set.insert(67);\n    primes_set.insert(71);\n    primes_set.insert(73);\n\
    \    primes_set.insert(79);\n    primes_set.insert(83);\n    primes_set.insert(89);\n\
    \    primes_set.insert(97);\n    primes_set.insert(103);\n    primes_set.insert(109);\n\
    \    primes_set.insert(113);\n    primes_set.insert(127);\n    primes_set.insert(131);\n\
    \    primes_set.insert(137);\n    primes_set.insert(139);\n    primes_set.insert(143);\n\
    \    primes_set.insert(147);\n    primes_set.insert(151);\n    primes_set.insert(157);\n\
    \    primes_set.insert(163);\n    primes_set.insert(167);\n    primes_set.insert(173);\n\
    \    primes_set.insert(179);\n    primes_set.insert(181);\n    primes_set.insert(191);\n\
    \    primes_set.insert(193);\n    primes_set.insert(197);\n    primes_set.insert(199);\n\
    \    primes_set.insert(203);\n    primes_set.insert(207);\n    primes_set.insert(211);\n\
    \    primes_set.insert(223);\n    primes_set.insert(227);\n    primes_set.insert(229);\n\
    \    primes_set.insert(233);\n    primes_set.insert(239);\n    primes_set.insert(241);\n\
    \    primes_set.insert(243);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpstdjhr0i.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpstdjhr0i.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpstdjhr0i.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpstdjhr0i.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpstdjhr0i.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpstdjhr0i.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpstdjhr0i.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpstdjhr0i.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpstdjhr0i.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpstdjhr0i.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpstdjhr0i.rs:85:25\n   |\n85 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_primes = String::new();\n    let mut primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes = String::new();\n   \
    \ let mut primes_string_len_primes_string_len_primes_string = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb8w1z9d5.rs:35:351\n   |\n\
    35 |     let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_\n\
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   ^ help: add `;` here\n36 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpb8w1z9d5.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb8w1z9d5.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb8w1z9d5.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb8w1z9d5.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb8w1z9d5.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb8w1z9d5.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb8w1z9d5.rs:43:17\n   |\n43 |\
    \     assert_eq!({"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_len_count: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len_count2: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len_count3: Vec<i32> = vec![];\n    let mut prime_words_len_count4:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count5: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count6: Vec<i32> = vec![];\n    let mut prime_words_len_count7:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count8: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count9: Vec<i32> = vec![];\n    let mut prime_words_len_count10:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count11: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count12: Vec<i32> = vec![];\n    let mut prime_words_len_count13:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count14: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count15: Vec<i32> = vec![];\n    let mut prime_words_len_count16:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count17: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count18: Vec<i32> = vec![];\n    let mut prime_words_len_count19:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count20: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count21: Vec<i32> = vec![];\n    let mut prime_words_len_count22:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count23: Vec<i32> = vec![];\n\
    \    let mut prime_words_len_count24: Vec<i32> = vec![];\n    let mut prime_words_len_count25:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len_count26\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmput6s5f2b.rs:43:36\n   |\n\
    43 |     let mut prime_words_len_count26\n   |                               \
    \     ^ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmput6s5f2b.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmput6s5f2b.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmput6s5f2b.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmput6s5f2b.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmput6s5f2b.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n\
    \    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let\
    \ mut primes_len = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len\
    \ = primes.len();\n    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n\
    \    let mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_index = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index\
    \ = 0;\n    let mut primes_len = primes.len();\n    let mut primes_index = 0;\n\
    \    let mut prime\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2hu2u0cz.rs:66:18\n   |\n\
    66 |     let mut prime\n   |                  ^ help: add `;` here\n67 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmp2hu2u0cz.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2hu2u0cz.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2hu2u0cz.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2hu2u0cz.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2hu2u0cz.rs:75:17\n  \
    \ |\n75 |     assert_eq!("
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    words_in_sentence_aux(sentence, \"\")\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `words_in_sentence_aux` in this scope\n\
    \  --> /tmp/tmpd4hm8w4q.rs:16:5\n   |\n16 |     words_in_sentence_aux(sentence,\
    \ \"\")\n   |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:21:17\n  \
    \ |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4hm8w4q.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd4hm8w4q.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd4hm8w4q.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd4hm8w4q.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd4hm8w4q.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    primes.resize(primes_len,\
    \ true);\n    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n    primes_set.insert(true);\n    primes_set.insert(false);\n\
    \    primes_set.insert(true);\n    primes_set.insert(false);\n    primes_set.insert(true);\n\
    \    primes_set.insert(false);\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpbbdg78f3.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbbdg78f3.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbbdg78f3.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbbdg78f3.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbbdg78f3.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbbdg78f3.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbbdg78f3.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbbdg78f3.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbbdg78f3.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbbdg78f3.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbbdg78f3.rs:93:25\n   |\n93 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptefpw08h.rs:35:1\n\
    \   |\n35 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptefpw08h.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptefpw08h.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:44:17\n   |\n44 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len2 = String::new();\n    let mut primes_string_len3 = String::new();\n\
    \    let mut primes_string_len4 = String::new();\n    let mut primes_string_len5\
    \ = String::new();\n    let mut primes_string_len6 = String::new();\n    let mut\
    \ primes_string_len7 = String::new();\n    let mut primes_string_len8 = String::new();\n\
    \    let mut primes_string_len9 = String::new();\n    let mut primes_string_len10\
    \ = String::new();\n    let mut primes_string_len11 = String::new();\n    let\
    \ mut primes_string_len12 = String::new();\n    let mut primes_string_len13 =\
    \ String::new();\n    let mut primes_string_len14 = String::new();\n    let mut\
    \ primes_string_len15 = String::new();\n    let mut primes_string_len16 = String::new();\n\
    \    let mut primes_string_len17 = String::new();\n    let mut primes_string_len18\
    \ = String::new();\n    let mut primes_string_len19 = String::new();\n    let\
    \ mut primes_string_len20 = String::new();\n    let mut primes_string_len21 =\
    \ String::new();\n    let mut primes_string_len22 = String::new();\n    let mut\
    \ primes_string_len23 = String::new();\n    let mut primes_string_len24 = String::new();\n\
    \    let mut primes_string_len25 = String::new();\n    let mut primes_string_len26\
    \ = String::new();\n    let mut primes_string_len27 = String::new();\n    let\
    \ mut primes_string_len28 = String::new();\n    let mut primes_string_len29 =\
    \ String::new();\n    let mut primes_string_len30 = String::new();\n    let mut\
    \ primes_string_len31 = String::new();\n    let mut primes_string_len32 = String::new();\n\
    \    let mut primes_string_len33 = String::new();\n    let mut primes_string_len34\
    \ = String::new();\n    let mut primes_string_len35 = String::new();\n    let\
    \ mut primes_string_len36 = String::new();\n    let \n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmphjvjben8.rs:55:1\n  \
    \ |\n55 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphjvjben8.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphjvjben8.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphjvjben8.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphjvjben8.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphjvjben8.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphjvjben8.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphjvjben8.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphjvjben8.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphjvjben8.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphjvjben8.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphjvjben8.rs:64:17\n   |\n64 |     assert"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_set = HashSet::new\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp84jfyyt2.rs:58:38\n   |\n\
    58 |     let mut primes_set = HashSet::new\n   |                             \
    \         ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:58:26\n\
    \   |\n58 |     let mut primes_set = HashSet::new\n   |                      \
    \    ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:18:26\n   |\n18\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:19:26\n   |\n19\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:20:26\n   |\n20\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:21:26\n   |\n21\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp84jfyyt2.rs:22:26\n   |\n22\
    \ |     let mut prim"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_length: usize = 0;\n    let mut prime_word: String;\n    let\
    \ mut prime_word_length: usize = 0;\n    let mut prime_word_index: usize = 0;\n\
    \    let mut prime_word_index_2: usize = 0;\n    let mut prime_word_index_3: usize\
    \ = 0;\n    let mut prime_word_index_4: usize = 0;\n    let mut prime_word_index_5:\
    \ usize = 0;\n    let mut prime_word_index_6: usize = 0;\n    let mut prime_word_index_7:\
    \ usize = 0;\n    let mut prime_word_index_8: usize = 0;\n    let mut prime_word_index_9:\
    \ usize = 0;\n    let mut prime_word_index_10: usize = 0;\n    let mut prime_word_index_11:\
    \ usize = 0;\n    let mut prime_word_index_12: usize = 0;\n    let mut prime_word_index_13:\
    \ usize = 0;\n    let mut prime_word_index_14: usize = 0;\n    let mut prime_word_index_15:\
    \ usize = 0;\n    let mut prime_word_index_16: usize = 0;\n    let mut prime_word_index_17:\
    \ usize = 0;\n    let mut prime_word_index_18: usize = 0;\n    let mut prime_word_index_19:\
    \ usize = 0;\n    let mut prime_word_index_20: usize = 0;\n    let mut prime_word_index_21:\
    \ usize = 0;\n    let mut prime_word_index_22: usize = 0;\n    let mut prime_word_index_23:\
    \ usize = 0;\n    let mut prime_word_index_24: usize = 0;\n    let mut prime_word_index_25:\
    \ usize = 0;\n    let mut prime_word_index_26: usize = 0;\n    let mut prime_word_index_27:\
    \ usize = 0;\n    let mut prime_word_index_28: usize = 0;\n    let mut prime_word_index_29:\
    \ usize = 0;\n    let mut prime_word_index_30: usize = 0;\n    let mut prime_word_index_31:\
    \ usize = 0;\n    let mut prime_word_index_32: usize = 0;\n    let mut prime_word_index_33:\
    \ usize = 0;\n    let mut prime_word_index_34: usize = 0;\n    let mut prime_word_index_35:\
    \ u\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuj9wyupp.rs:56:35\n   |\n\
    56 |     let mut prime_word_index_35: u\n   |                                \
    \   ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `u` in this scope\n  --> /tmp/tmpuj9wyupp.rs:56:34\n   |\n56 |   \
    \  let mut prime_word_index_35: u\n   |                                  ^ help:\
    \ a builtin type with a similar name exists: `u8`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpuj9wyupp.rs:61:17\n   |\n61 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuj9wyupp.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuj9wyupp.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuj9wyupp.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuj9wyupp.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuj9wyupp.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuj9wyupp.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuj9wyupp.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuj9wyupp.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ n"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n    let mut primes_len\
    \ = primes_len + 2;\n    let mut primes_len = primes_len + 2;\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprxhu4x3c.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxhu4x3c.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxhu4x3c.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxhu4x3c.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxhu4x3c.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxhu4x3c.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxhu4x3c.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxhu4x3c.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxhu4x3c.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxhu4x3c.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxhu4x3c.rs:67:25\n   |\n67 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|w| is_prime(w.len())).collect()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|w| is_prime(w.len())).collect()\n\
    \   |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyuhc6vz2.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyuhc6vz2.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyuhc6vz2.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyuhc6vz2.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyuhc6vz2.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \        "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut new_sentence = String::new();\n  \
    \  let mut current_word = String::new();\n    let mut current_word_len = 0;\n\
    \    let mut current_word_index = 0;\n    for c in sentence.chars() {\n      \
    \  if c.is_whitespace() {\n            if current_word_len == 0 {\n          \
    \      continue;\n            }\n            new_sentence.push_str(&current_word);\n\
    \            current_word = String::new();\n            current_word_len = 0;\n\
    \            current_word_index = 0;\n        } else {\n            current_word.push_str(&c.to_string());\n\
    \            current_word_len += 1;\n        }\n        if primes_set.contains(&current_word_len)\
    \ {\n            primes_set.insert(current_word_len);\n        }\n    }\n    new_sentence.push_str(&current_word);\n\
    \    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpwkm5ua05.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwkm5ua05.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwkm5ua05.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwkm5ua05.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwkm5ua05.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwkm5ua05.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwkm5ua05.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwkm5ua05.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwkm5ua05.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwkm5ua05.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwkm5ua05.rs:49:25\n   |\n49 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ new_sentence = String::new();\n    let mut prime_words: Vec<String> = vec![];\n\
    \    let mut words = sentence.split_whitespace();\n    for word in words {\n \
    \       if primes.iter().any(|&x| x == word.len()) {\n            prime_words.push(word);\n\
    \        }\n    }\n    for word in prime_words {\n        new_sentence.push_str(&word);\n\
    \    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr8oj5zpt.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr8oj5zpt.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr8oj5zpt.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr8oj5zpt.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr8oj5zpt.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order: Vec<i32> = Vec::new();\n    let mut prime_words_order_count:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order2: Vec<i32> = Vec::new();\n    let mut prime_words_order_count2:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count3: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order3: Vec<i32> = Vec::new();\n    let mut prime_words_order_count3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count4: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order4: Vec<i32> = Vec::new();\n    let mut prime_words_order_count4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order5: Vec<i32> = Vec::new();\n    let mut prime_words_order_count5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order6: Vec<i32> = Vec::new();\n    let mut prime_words_order_count6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count7: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order7: Vec<i32> = Vec::new();\n    let mut prime_words_order_count7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order8: Vec<i32> = Vec::new();\n    let mut prime_words_order_count8:\
    \ Vec<i32> = Vec::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptsilv66v.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptsilv66v.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptsilv66v.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:52:17\n   |\n52 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = vec![];\n    let mut words\
    \ = sentence.split_whitespace();\n    let mut new_sentence = String::new();\n\
    \    for word in words {\n        let mut prime = true;\n        for &c in word.chars()\
    \ {\n            if !prime_numbers.contains(&c.to_string()) {\n              \
    \  prime = false;\n                break;\n            }\n        }\n        if\
    \ prime {\n            prime_numbers.push(word.len());\n            new_sentence.push_str(&word);\n\
    \        }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2ahmrb32.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2ahmrb32.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2ahmrb32.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2ahmrb32.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2ahmrb32.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2ahmrb32.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2ahmrb32.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2ahmrb32.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2ahmrb32.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2ahmrb32.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2ahmrb32.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_word: i32 = 0;\n    let mut prime_word_len: i32 = 0;\n    let mut\
    \ new_sentence: String = String::new();\n    let mut word_len: i32 = 0;\n    let\
    \ mut word: String;\n    for word in sentence.split_whitespace() {\n        word_len\
    \ += 1;\n        prime_words.push(word_len);\n    }\n    for word in sentence.split_whitespace()\
    \ {\n        if prime_words[prime_word_len - 1] == word_len {\n            prime_word_len\
    \ += 1;\n        } else {\n            prime_word_len = 0;\n        }\n    }\n\
    \    for word in sentence.split_whitespace() {\n        if prime_words[prime_word_len\
    \ - 1] == word_len {\n            new_sentence.push_str(&word);\n        }\n \
    \   }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6evjfqr_.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6evjfqr_.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6evjfqr_.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6evjfqr_.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6evjfqr_.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6evjfqr_.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6evjfqr_.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6evjfqr_.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6evjfqr_.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6evjfqr_.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6evjfqr_.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<String> = Vec::new();\n  \
    \  let mut prime_word: String;\n    let mut prime_word_len: usize = 0;\n    let\
    \ mut prime_word_index: usize = 0;\n    let mut prime_word_len_index: usize =\
    \ 0;\n    let mut prime_word_lens: Vec<usize> = Vec::new();\n    let mut prime_word_lens_index:\
    \ usize = 0;\n    let mut prime_word_lens_len: usize = 0;\n    let mut prime_word_lens_len_index:\
    \ usize = 0;\n    let mut prime_word_lens_lens: Vec<usize> = Vec::new();\n   \
    \ let mut prime_word_lens_lens_index: usize = 0;\n    let mut prime_word_lens_lens_len:\
    \ usize = 0;\n    let mut prime_word_lens_lens_len_index: usize = 0;\n    let\
    \ mut prime_word_lens_lens_lens: Vec<usize> = Vec::new();\n    let mut prime_word_lens_lens_lens_index:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_len: usize = 0;\n    let mut\
    \ prime_word_lens_lens_lens_len_index: usize = 0;\n    let mut prime_word_lens_lens_lens_lens:\
    \ Vec<usize> = Vec::new();\n    let mut prime_word_lens_lens_lens_lens_index:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens_len: usize = 0;\n   \
    \ let mut prime_word_lens_lens_lens_lens_len_index: usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens:\
    \ Vec<usize> = Vec::new();\n    let mut prime_word_lens_lens_lens_lens_lens_index:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_len: usize = 0;\n\
    \    let mut prime_word_lens_lens_lens_lens_lens_len_index: usize = 0;\n    let\
    \ mut prime_word_lens_lens_lens_lens_lens_lens_len: usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_lens_len_index:\
    \ usize = 0;\n    let mut prime_word_lens_lens_lens_lens_lens_\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjccasmyb.rs:43:49\n   |\n\
    43 |     let mut prime_word_lens_lens_lens_lens_lens_\n   |                  \
    \                               ^ help: add `;` here\n44 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjccasmyb.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjccasmyb.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjccasmyb.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjccasmyb.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjccasmyb.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjccasmyb.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjccasmyb.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjccasmyb.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjccasmyb.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjccasmyb.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not f"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_set = HashSet::new();\n    let mut primes_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string = String::new();\n    let mut\
    \ primes_string_set_string_set_string_set = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpda2cxd3x.rs:39:42\n   |\n\
    39 |     let mut primes_string_set_string_set_\n   |                         \
    \                 ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpda2cxd3x.rs:17:26\n\
    \   |\n17 |     let mut primes_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpda2cxd3x.rs:19:33\n   |\n19\
    \ |     let mut primes_string_set = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpda2cxd3x.rs:21:44\n\
    \   |\n21 |     let mut primes_string_set_string_set = HashSet::new();\n   | \
    \                                           ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpda2cxd3x.rs:23:55\n   |\n23 |     let mut primes_string_set_string_set_string_set\
    \ = HashSet::new();\n   |                                                    \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpda2cxd3x.rs:25:66\n   |\n25\
    \ |     let mut primes_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \   |                                                                  ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpda2cxd3x.rs:27:77\n   |\n27\
    \ |     let mut primes_string_set_string_s"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / \n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpom_yna7x.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror: expected one of `.`, `;`,\
    \ `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpom_yna7x.rs:42:1\n   |\n\
    42 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror:\
    \ mismatched closing delimiter: `}`\n  --> /tmp/tmpom_yna7x.rs:41:52\n   |\n15\
    \ | fn words_in_sentence(sentence: String) -> String {\n   |                 \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n41 |     let mut primes_len = primes_len.saturating_add((sentence.len() /\
    \ \n   |                                                    ^ unclosed delimiter\n\
    42 | }\n   | ^ mismatched closing delimiter\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpom_yna7x.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpom_yna7x.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpom_yna7x.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpom_yna7x.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:48:25\n   |\n48 |     assert_eq!({lef"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_iter = primes.iter().cloned();\n\
    \    let mut prime_num = prime_iter.next().unwrap();\n    let mut prime_num_iter\
    \ = prime_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.next().unwrap();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_next = prime_num_iter.clone().peekable();\n    let mut prime_num_next\
    \ = prime_num_iter.clone().peekable();\n    let mut prime_num_next = prime_num_iter.clone().peekable();\n\
    \    let mut prime_num_next = prime_num_iter.clone().peekable();\n    let mut\
    \ prime_num_\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy7c95bj8.rs:47:23\n   |\n\
    47 |     let mut prime_num_\n   |                       ^ help: add `;` here\n\
    48 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpy7c95bj8.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy7c95bj8.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy7c95bj8.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy7c95bj8.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy7c95bj8.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy7c95bj8.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy7c95bj8.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy7c95bj8.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy7c95bj8.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy7c95bj8.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order2: Vec<i32> = Vec::new();\n    let mut prime_words_len3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order3: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len4: Vec<i32> = Vec::new();\n    let mut prime_words_order4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order5: Vec<i32> = Vec::new();\n    let mut prime_words_len6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<i32> = Vec::new();\n    let mut prime_words_order7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order8: Vec<i32> = Vec::new();\n    let mut prime_words_len9:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order9: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<i32> = Vec::new();\n    let mut prime_words_order10:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len11: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order11: Vec<i32> = Vec::new();\n    let mut prime_words_len12:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order12: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<i32> = Vec::new();\n    let mut prime_words_order13:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len14: Vec<i32\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmppdqsc1th.rs:44:1\n   |\n43 |     let mut prime_words_len14:\
    \ Vec<i32\n   |         ----------------------        - expected one of 9 possible\
    \ tokens\n   |         |                    |\n   |         |                \
    \    help: use `=` if you meant to assign\n   |         while parsing the type\
    \ for `mut prime_words_len14`\n44 | }\n   | ^ unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmppdqsc1th.rs:43:39\n   |\n43 |     let mut prime_words_len14:\
    \ Vec<i32\n   |                                       ^ help: add `;` here\n44\
    \ | }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n\
    \   --> /tmp/tmppdqsc1th.rs:43:32\n    |\n43  |       let mut prime_words_len14:\
    \ Vec<i32\n    |                                  ^^^ help: use struct literal\
    \ syntax instead: `Vec { buf: val, len: val }`\n\nerror[E0423]: expected value,\
    \ found builtin type `i32`\n  --> /tmp/tmppdqsc1th.rs:43:36\n   |\n43 |     let\
    \ mut prime_words_len14: Vec<i32\n   |                                    ^^^\
    \ not a value\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppdqsc1th.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppdqsc1th.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppdqsc1th.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppdqsc1th.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppdqsc1th.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right`"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_len2: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len3: Vec<i32> = vec![];\n    let mut prime_words_len4:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len5: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len6: Vec<i32> = vec![];\n    let mut prime_words_len7: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len8: Vec<i32> = vec![];\n    let mut prime_words_len9:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len10: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len11: Vec<i32> = vec![];\n    let mut prime_words_len12: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len13: Vec<i32> = vec![];\n    let mut prime_words_len14:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len15: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len16: Vec<i32> = vec![];\n    let mut prime_words_len17: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len18: Vec<i32> = vec![];\n    let mut prime_words_len19:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len20: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len21: Vec<i32> = vec![];\n    let mut prime_words_len22: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len23: Vec<i32> = vec![];\n    let mut prime_words_len24:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len25: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len26: Vec<i32> = vec![];\n    let mut prime_words_len27: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len28: Vec<i32> = vec\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk3srjqx2.rs:44:46\n   |\n\
    44 |     let mut prime_words_len28: Vec<i32> = vec\n   |                     \
    \                         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\
    \nerror[E0423]: expected value, found macro `vec`\n  --> /tmp/tmpk3srjqx2.rs:44:43\n\
    \   |\n44 |     let mut prime_words_len28: Vec<i32> = vec\n   |              \
    \                             ^^^ not a value\n   |\nhelp: use `!` to invoke the\
    \ macro\n   |\n44 |     let mut prime_words_len28: Vec<i32> = vec!\n   |     \
    \                                         +\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk3srjqx2.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]; // Prime numbers\
    \ from 2 to 100\n    let mut primes_set = HashSet::new();\n    for prime in primes.iter()\
    \ {\n        primes_set.insert(prime);\n    }\n    let mut new_sentence = String::new();\n\
    \    let mut words = sentence.split_whitespace();\n    for word in words {\n \
    \       if primes_set.contains(word.len()) {\n            new_sentence.push_str(word);\n\
    \        }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp1jmvbq14.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1jmvbq14.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1jmvbq14.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1jmvbq14.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1jmvbq14.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1jmvbq14.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1jmvbq14.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1jmvbq14.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1jmvbq14.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1jmvbq14.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1jmvbq14.rs:37:25\n   |\n37 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string_len = String::new();\n    let mut\
    \ primes_string_len_prime = String::new();\n    let mut primes_string_len_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime = String::new();\n    let\
    \ mut primes_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw3l3159v.rs:35:102\n   |\n\
    35 |     let mut primes_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \                              ^ help: add `;` here\n36 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw3l3159v.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw3l3159v.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw3l3159v.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw3l3159v.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw3l3159v.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw3l3159v.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw3l3159v.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw3l3159v.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw3l3159v.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /t"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    \   |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjmv2_5dd.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \              "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length_prime = String::new();\n    let mut prime_numbers_string_length_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpltl2l23v.rs:34:107\n   |\n\
    34 |     let mut prime_numbers_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                   ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpltl2l23v.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpltl2l23v.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpltl2l23v.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpltl2l23v.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpltl2l23v.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpltl2l23v.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpltl2l23v.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpltl2l23v.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpltl2l23v.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scop"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_word_length: usize = 2;\n    let mut prime_word_index = 0;\n\
    \    let mut prime_word_length_index = 0;\n    let mut prime_word_length_index2\
    \ = 0;\n    let mut prime_word_length_index3 = 0;\n    let mut prime_word_length_index4\
    \ = 0;\n    let mut prime_word_length_index5 = 0;\n    let mut prime_word_length_index6\
    \ = 0;\n    let mut prime_word_length_index7 = 0;\n    let mut prime_word_length_index8\
    \ = 0;\n    let mut prime_word_length_index9 = 0;\n    let mut prime_word_length_index10\
    \ = 0;\n    let mut prime_word_length_index11 = 0;\n    let mut prime_word_length_index12\
    \ = 0;\n    let mut prime_word_length_index13 = 0;\n    let mut prime_word_length_index14\
    \ = 0;\n    let mut prime_word_length_index15 = 0;\n    let mut prime_word_length_index16\
    \ = 0;\n    let mut prime_word_length_index17 = 0;\n    let mut prime_word_length_index18\
    \ = 0;\n    let mut prime_word_length_index19 = 0;\n    let mut prime_word_length_index20\
    \ = 0;\n    let mut prime_word_length_index21 = 0;\n    let mut prime_word_length_index22\
    \ = 0;\n    let mut prime_word_length_index23 = 0;\n    let mut prime_word_length_index24\
    \ = 0;\n    let mut prime_word_length_index25 = 0;\n    let mut prime_word_length_index26\
    \ = 0;\n    let mut prime_word_length_index27 = 0;\n    let mut prime_word_length_index28\
    \ = 0;\n    let mut prime_word_length_index29 = 0;\n    let mut prime_word_length_index30\
    \ = 0;\n    let mut prime_word_length_index31 = 0;\n    let mut prime_word_length_index32\
    \ = 0;\n    let mut prime_word_length_index33 = 0;\n    let mut prime_word_length_index34\
    \ = 0;\n    let mut prime_word_length_index35 = 0;\n    let mut prime_word_length_index36\
    \ = 0;\n    let mut prime_word_length_index37 = 0;\n    let mut prime_word_length_index38\
    \ = 0;\n    let mut prime_word_length_index39 = 0;\n    let mut prime_word_length_index40\
    \ = 0;\n    let mut prime_word_length_index41 = 0;\n    let mut prime_word_length_index42\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg561u7gb.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg561u7gb.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg561u7gb.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg561u7gb.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg561u7gb.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg561u7gb.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg561u7gb.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg561u7gb.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg561u7gb.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg561u7gb.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg561u7gb.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_word: i32 = 0;\n    let mut prime_word_string: String = String::new();\n\
    \    let mut prime_word_string_len: usize = 0;\n    let mut prime_word_string_cap:\
    \ usize = 0;\n    let mut prime_word_string_len_cap: usize = 0;\n    let mut prime_word_string_len_cap_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime: usize = 0;\n\
    \    let mut prime_word_string_len_cap_prime_prime_prime: usize = 0;\n    let\
    \ mut prime_word_string_len_cap_prime_prime_prime_prime: usize = 0;\n    let mut\
    \ prime_word_string_len_cap_prime_prime_prime_prime_prime: usize = 0;\n    let\
    \ mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime: usize = 0;\n\
    \    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpv99bjep5.rs:35:147\n   |\n\
    35 |     let mut prime_word_string_len_cap_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize\n   |                                                                \
    \                                                                            \
    \       ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv99bjep5.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv99bjep5.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv99bjep5.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv99bjep5.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv99bjep5.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv99bjep5.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv99bjep5.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv99bjep5.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv99bjep5.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter_map(|x| x.chars().filter(|c|\
    \ c.is_alphabetic()).collect()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpszxdjs_p.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpszxdjs_p.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpszxdjs_p.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpszxdjs_p.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpszxdjs_p.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpszxdjs_p.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpszxdjs_p.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpszxdjs_p.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpszxdjs_p.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpszxdjs_p.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpszxdjs_p.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_words: Vec<String> = vec![];\n  \
    \  let mut prime_word_len: usize = 0;\n    let mut prime_word_index = 0;\n   \
    \ let mut current_word: String;\n    let mut current_word_len: usize = 0;\n  \
    \  let mut current_word_index = 0;\n    let mut current_word_prime: usize = 0;\n\
    \    let mut current_word_prime_index = 0;\n    let mut current_word_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_index = 0;\n    let mut current_word_prime_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_prime_index = 0;\n    let mut\
    \ current_word_prime_prime_prime_prime: usize = 0;\n    let mut current_word_prime_prime_prime_prime_index\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime: usize = 0;\n \
    \   let mut current_word_prime_prime_prime_prime_prime_index = 0;\n    let mut\
    \ current_word_prime_prime_prime_prime_prime_prime: usize = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_index\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime: usize\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime: usize\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime: usize\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime: usize\
    \ = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize = 0;\n    let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpies9mfgz.rs:44:86\n   |\n\
    44 |     let mut current_word_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ usize\n   |                                                                \
    \                      ^ help: add `;` here\n45 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpies9mfgz.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpies9mfgz.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpies9mfgz.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpies9mfgz.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpies9mfgz.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpies9mfgz.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpies9mfgz.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpies9mfgz.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpies9mfgz.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpies9mfgz.rs:53:25\n   |\n53 |"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<usize> = Vec::new();\n   \
    \ let mut prime_words_len: Vec<usize> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order: Vec<usize> = Vec::new();\n    let mut prime_words_order_count:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count2: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order2: Vec<usize> = Vec::new();\n    let mut prime_words_order_count2:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count3: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order3: Vec<usize> = Vec::new();\n    let mut prime_words_order_count3:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count4: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order4: Vec<usize> = Vec::new();\n    let mut prime_words_order_count4:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count5: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order5: Vec<usize> = Vec::new();\n    let mut prime_words_order_count5:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count6: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order6: Vec<usize> = Vec::new();\n    let mut prime_words_order_count6:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count7: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order7: Vec<usize> = Vec::new();\n    let mut prime_words_order_count7:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count8: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_order8: Vec<\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `>`, a const expression, lifetime, or type, found\
    \ `}`\n  --> /tmp/tmpgx34l4_w.rs:42:1\n   |\n41 |     let mut prime_words_len_order8:\
    \ Vec<\n   |         --------------------------      - expected one of `>`, a\
    \ const expression, lifetime, or type\n   |         |\n   |         while parsing\
    \ the type for `mut prime_words_len_order8`\n42 | }\n   | ^ unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgx34l4_w.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgx34l4_w.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgx34l4_w.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgx34l4_w.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgx34l4_w.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgx34l4_w.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgx34l4_w.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgx34l4_w.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgx34l4_w.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: ca"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3];\n    let mut primes_set\
    \ = HashSet::new();\n    let mut new_sentence = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    for word in words {\n        if primes_set.contains(&word.len())\
    \ {\n            new_sentence.push_str(&word);\n        } else {\n           \
    \ primes.iter().for_each(|&p| {\n                if word.len() % p == 0 {\n  \
    \                  primes_set.insert(p);\n                }\n            });\n\
    \        }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpadzpl_yy.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpadzpl_yy.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpadzpl_yy.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpadzpl_yy.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpadzpl_yy.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpadzpl_yy.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpadzpl_yy.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpadzpl_yy.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpadzpl_yy.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpadzpl_yy.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpadzpl_yy.rs:40:25\n   |\n40 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|x| x.len() > 1).collect()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi10xyb4c.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi10xyb4c.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi10xyb4c.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi10xyb4c.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi10xyb4c.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi10xyb4c.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi10xyb4c.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi10xyb4c.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi10xyb4c.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi10xyb4c.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi10xyb4c.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ new_sentence = String::new();\n    let mut prime_words: Vec<String> = vec![];\n\
    \    let mut prime_words_len: Vec<usize> = vec![];\n    let mut prime_words_count:\
    \ usize = 0;\n    let mut prime_words_len_count: usize = 0;\n    let mut prime_words_len_count_2:\
    \ usize = 0;\n    let mut prime_words_len_count_3: usize = 0;\n    let mut prime_words_len_count_4:\
    \ usize = 0;\n    let mut prime_words_len_count_5: usize = 0;\n    let mut prime_words_len_count_6:\
    \ usize = 0;\n    let mut prime_words_len_count_7: usize = 0;\n    let mut prime_words_len_count_8:\
    \ usize = 0;\n    let mut prime_words_len_count_9: usize = 0;\n    let mut prime_words_len_count_10:\
    \ usize = 0;\n    let mut prime_words_len_count_11: usize = 0;\n    let mut prime_words_len_count_12:\
    \ usize = 0;\n    let mut prime_words_len_count_13: usize = 0;\n    let mut prime_words_len_count_14:\
    \ usize = 0;\n    let mut prime_words_len_count_15: usize = 0;\n    let mut prime_words_len_count_16:\
    \ usize = 0;\n    let mut prime_words_len_count_17: usize = 0;\n    let mut prime_words_len_count_18:\
    \ usize = 0;\n    let mut prime_words_len_count_19: usize = 0;\n    let mut prime_words_len_count_20:\
    \ usize = 0;\n    let mut prime_words_len_count_21: usize = 0;\n    let mut prime_words_len_count_22:\
    \ usize = 0;\n    let mut prime_words_len_count_23: usize = 0;\n    let mut prime_words_len_count_24:\
    \ usize = 0;\n    let mut prime_words_len_count_25: usize = 0;\n    let mut prime_words_len_count_26:\
    \ usize = 0;\n    let mut prime_words_len_count_27: usize = 0;\n    let mut prime_words_len_count_28:\
    \ usize = 0;\n    let mut prime_words_len_count_29: usize = 0;\n    let mut prime_words_len_count_30:\
    \ usize = 0;\n    let \n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpgqlne201.rs:52:1\n  \
    \ |\n52 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgqlne201.rs:56:17\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgqlne201.rs:56:25\n \
    \  |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqlne201.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqlne201.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgqlne201.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgqlne201.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgqlne201.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqlne201.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqlne201.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqlne201.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqlne201.rs:61:17\n   |\n61 |     assert"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6dxhio8z.rs:16:47\n\
    \   |\n16 |     sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \   |                                               ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6dxhio8z.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6dxhio8z.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6dxhio8z.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6dxhio8z.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<usize> = Vec::new();\n   \
    \ let mut prime_words_len: usize = 0;\n    let mut prime_words_len2: usize = 0;\n\
    \    let mut prime_words_len3: usize = 0;\n    let mut prime_words_len4: usize\
    \ = 0;\n    let mut prime_words_len5: usize = 0;\n    let mut prime_words_len6:\
    \ usize = 0;\n    let mut prime_words_len7: usize = 0;\n    let mut prime_words_len8:\
    \ usize = 0;\n    let mut prime_words_len9: usize = 0;\n    let mut prime_words_len10:\
    \ usize = 0;\n    let mut prime_words_len11: usize = 0;\n    let mut prime_words_len12:\
    \ usize = 0;\n    let mut prime_words_len13: usize = 0;\n    let mut prime_words_len14:\
    \ usize = 0;\n    let mut prime_words_len15: usize = 0;\n    let mut prime_words_len16:\
    \ usize = 0;\n    let mut prime_words_len17: usize = 0;\n    let mut prime_words_len18:\
    \ usize = 0;\n    let mut prime_words_len19: usize = 0;\n    let mut prime_words_len20:\
    \ usize = 0;\n    let mut prime_words_len21: usize = 0;\n    let mut prime_words_len22:\
    \ usize = 0;\n    let mut prime_words_len23: usize = 0;\n    let mut prime_words_len24:\
    \ usize = 0;\n    let mut prime_words_len25: usize = 0;\n    let mut prime_words_len26:\
    \ usize = 0;\n    let mut prime_words_len27: usize = 0;\n    let mut prime_words_len28:\
    \ usize = 0;\n    let mut prime_words_len29: usize = 0;\n    let mut prime_words_len30:\
    \ usize = 0;\n    let mut prime_words_len31: usize = 0;\n    let mut prime_words_len32:\
    \ usize = 0;\n    let mut prime_words_len33: usize = 0;\n    let mut prime_words_len34:\
    \ usize = 0;\n    let mut prime_words_len35: usize = 0;\n    let mut prime_words_len36:\
    \ usize = 0;\n    let mut prime_words_len37: usize = 0;\n    let mut prime_words_len38:\
    \ usize = 0;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxxt33jba.rs:55:19\n   |\n\
    55 |     let mut prime_\n   |                   ^ help: add `;` here\n56 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxxt33jba.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxxt33jba.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxxt33jba.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxxt33jba.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxxt33jba.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxxt33jba.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxxt33jba.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxxt33jba.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxxt33jba.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxxt33jba.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_set = HashSet::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut primes_string_list\
    \ = Vec::new();\n    let mut primes_string_list = Vec::new();\n    let mut prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxue23ixp.rs:56:18\n   |\n\
    56 |     let mut prime\n   |                  ^ help: add `;` here\n57 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpxue23ixp.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpxue23ixp.rs:19:33\n   |\n19 |     let mut primes_string_set = HashSet::new();\n\
    \   |                                 ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxue23ixp.rs:61:17\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxue23ixp.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxue23ixp.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxue23ixp.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxue23ixp.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxue23ixp.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxue23ixp.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order2: Vec<i32> = Vec::new();\n    let mut prime_words_len3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order3: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len4: Vec<i32> = Vec::new();\n    let mut prime_words_order4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order5: Vec<i32> = Vec::new();\n    let mut prime_words_len6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<i32> = Vec::new();\n    let mut prime_words_order7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order8: Vec<i32> = Vec::new();\n    let mut prime_words_len9:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order9: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<i32> = Vec::new();\n    let mut prime_words_order10:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len11: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_order11: Vec<i32> = Vec::new();\n    let mut prime_words_len12:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_order12: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<i32> = Vec::new();\n    let mut prime_words_order13:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len14: Vec<i32\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmppdqsc1th.rs:44:1\n   |\n43 |     let mut prime_words_len14:\
    \ Vec<i32\n   |         ----------------------        - expected one of 9 possible\
    \ tokens\n   |         |                    |\n   |         |                \
    \    help: use `=` if you meant to assign\n   |         while parsing the type\
    \ for `mut prime_words_len14`\n44 | }\n   | ^ unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmppdqsc1th.rs:43:39\n   |\n43 |     let mut prime_words_len14:\
    \ Vec<i32\n   |                                       ^ help: add `;` here\n44\
    \ | }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n\
    \   --> /tmp/tmppdqsc1th.rs:43:32\n    |\n43  |       let mut prime_words_len14:\
    \ Vec<i32\n    |                                  ^^^ help: use struct literal\
    \ syntax instead: `Vec { buf: val, len: val }`\n\nerror[E0423]: expected value,\
    \ found builtin type `i32`\n  --> /tmp/tmppdqsc1th.rs:43:36\n   |\n43 |     let\
    \ mut prime_words_len14: Vec<i32\n   |                                    ^^^\
    \ not a value\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppdqsc1th.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppdqsc1th.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppdqsc1th.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppdqsc1th.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppdqsc1th.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right`"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / \n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpom_yna7x.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected expression\n\nerror: expected one of `.`, `;`,\
    \ `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpom_yna7x.rs:42:1\n   |\n\
    42 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror:\
    \ mismatched closing delimiter: `}`\n  --> /tmp/tmpom_yna7x.rs:41:52\n   |\n15\
    \ | fn words_in_sentence(sentence: String) -> String {\n   |                 \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n41 |     let mut primes_len = primes_len.saturating_add((sentence.len() /\
    \ \n   |                                                    ^ unclosed delimiter\n\
    42 | }\n   | ^ mismatched closing delimiter\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpom_yna7x.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpom_yna7x.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpom_yna7x.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpom_yna7x.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpom_yna7x.rs:48:25\n   |\n48 |     assert_eq!({lef"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_set2 = HashSet::new();\n    let mut primes_set3\
    \ = HashSet::new();\n    let mut primes_set4 = HashSet::new();\n    let mut primes_set5\
    \ = HashSet::new();\n    let mut primes_set6 = HashSet::new();\n    let mut primes_set7\
    \ = HashSet::new();\n    let mut primes_set8 = HashSet::new();\n    let mut primes_set9\
    \ = HashSet::new();\n    let mut primes_set10 = HashSet::new();\n    let mut primes_set11\
    \ = HashSet::new();\n    let mut primes_set12 = HashSet::new();\n    let mut primes_set13\
    \ = HashSet::new();\n    let mut primes_set14 = HashSet::new();\n    let mut primes_set15\
    \ = HashSet::new();\n    let mut primes_set16 = HashSet::new();\n    let mut primes_set17\
    \ = HashSet::new();\n    let mut primes_set18 = HashSet::new();\n    let mut primes_set19\
    \ = HashSet::new();\n    let mut primes_set20 = HashSet::new();\n    let mut primes_set21\
    \ = HashSet::new();\n    let mut primes_set22 = HashSet::new();\n    let mut primes_set23\
    \ = HashSet::new();\n    let mut primes_set24 = HashSet::new();\n    let mut primes_set25\
    \ = HashSet::new();\n    let mut primes_set26 = HashSet::new();\n    let mut primes_set27\
    \ = HashSet::new();\n    let mut primes_set28 = HashSet::new();\n    let mut primes_set29\
    \ = HashSet::new();\n    let mut primes_set30 = HashSet::new();\n    let mut primes_set31\
    \ = HashSet::new();\n    let mut primes_set32 = HashSet::new();\n    let mut primes_set33\
    \ = HashSet::new();\n    let mut primes_set34 = HashSet::new();\n    let mut primes_set35\
    \ = HashSet::new();\n    let mut primes_set36 = HashSet::new();\n    let mut primes_set37\
    \ = HashSet::new\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgy4jmosu.rs:53:40\n   |\n\
    53 |     let mut primes_set37 = HashSet::new\n   |                           \
    \             ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:53:28\n\
    \   |\n53 |     let mut primes_set37 = HashSet::new\n   |                    \
    \        ^^^^^^^ use of undeclared type `HashSet`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:18:27\n   |\n18\
    \ |     let mut primes_set2 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:19:27\n   |\n19\
    \ |     let mut primes_set3 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:20:27\n   |\n20\
    \ |     let mut primes_set4 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:21:27\n   |\n21\
    \ |     let mut primes_set5 = HashSet::new();\n   |                          \
    \ ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpgy4jmosu.rs:22:27\n   |\n22\
    \ | "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len_set\
    \ = HashSet::new();\n    let mut primes_len_set = primes_len.clone();\n    let\
    \ mut primes_len_set = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n\
    \    let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set\
    \ = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n  \
    \  let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set =\
    \ primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n    let\
    \ mut primes_len_set = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n\
    \    let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set\
    \ = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n  \
    \  let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set =\
    \ primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n    let\
    \ mut primes_len_set = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n\
    \    let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set\
    \ = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n  \
    \  let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set =\
    \ primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n    let\
    \ mut primes_len_set = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n\
    \    let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set\
    \ = primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n  \
    \  let mut primes_len_set = primes_len.clone();\n    let mut primes_len_set =\
    \ primes_len.clone();\n    let mut primes_len_set = primes_len.clone();\n    let\
    \ mut prime\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpppnrl0ji.rs:53:18\n   |\n\
    53 |     let mut prime\n   |                  ^ help: add `;` here\n54 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmpppnrl0ji.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpppnrl0ji.rs:19:30\n   |\n19 |     let mut primes_len_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpppnrl0ji.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpppnrl0ji.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpppnrl0ji.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpppnrl0ji.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpppnrl0ji.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpppnrl0ji.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpppnrl0ji.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in thi"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = vec![];\n    let mut words\
    \ = sentence.split_whitespace();\n    let mut result = String::new();\n    let\
    \ mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut prime_numbers_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkrc_f1mg.rs:53:27\n   |\n\
    53 |     let mut prime_numbers_\n   |                           ^ help: add `;`\
    \ here\n54 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpkrc_f1mg.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkrc_f1mg.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkrc_f1mg.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkrc_f1mg.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkrc_f1mg.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot fin"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter_map(|s| s.chars().filter(|c|\
    \ c.is_alphabetic()).collect::<Vec<_>>()).collect::<Vec<_>>()\n        .iter().filter_map(|s|\
    \ s.filter(|c| c.is_alphabetic()).collect::<Vec<_>>()).collect::<Vec<_>>()\n \
    \       .iter().filter_map(|s| s.filter(|c| c.is_prime()).collect::<Vec<_>>()).collect::<Vec<_>>()\n\
    \        .iter().collect::<String>()\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpooerwblk.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpooerwblk.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpooerwblk.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpooerwblk.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpooerwblk.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpooerwblk.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpooerwblk.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpooerwblk.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpooerwblk.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpooerwblk.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpooerwblk.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_len = String::new();\n    let mut prime_numbers_string_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len = String::new();\n\
    \    let mut prime_numbers_string_len_len_len_len_len = String::new();\n    let\
    \ mut prime_numbers_string_len_len_len_len_len_len = String::new();\n    let mut\
    \ prime_numbers_string_len_len_len_len_len_len_len_len = String::new();\n    let\
    \ mut prime_numbers_string_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len = String::new();\n\
    \    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = String::new();\n    let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp85weexdh.rs:37:94\n   |\n\
    37 |     let mut prime_numbers_string_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\n\
    \   |                                                                        \
    \                      ^ help: add `;` here\n38 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp85weexdh.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp85weexdh.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp85weexdh.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp85weexdh.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp85weexdh.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp85weexdh.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp85weexdh.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp85weexdh.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp85weexdh.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp85weexdh.rs"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_len = primes.len();\n    let\
    \ mut primes_len = primes_len.saturating_add((sentence.len() / primes_len).ceil()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = primes_len.saturating_add((sentence.len()\
    \ / primes_len).floor() as usize);\n    let mut primes_len = prime\n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8a_oyqua.rs:36:31\n   |\n\
    36 |     let mut primes_len = prime\n   |                               ^ help:\
    \ add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp8a_oyqua.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `prime`\
    \ in this scope\n  --> /tmp/tmp8a_oyqua.rs:36:26\n   |\n36 |     let mut primes_len\
    \ = prime\n   |                          ^^^^^ help: a local variable with a similar\
    \ name exists: `primes`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8a_oyqua.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8a_oyqua.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8a_oyqua.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8a_oyqua.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8a_oyqua.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8a_oyqua.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8a_oyqua.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this s"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    words_in_sentence(sentence.split_whitespace())\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd498w5j5.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_set\
    \ = HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    primes.resize(primes_len,\
    \ true);\n    primes_set.insert(0);\n    primes_set.insert(1);\n    primes_set.insert(2);\n\
    \    primes_set.insert(3);\n    primes_set.insert(4);\n    primes_set.insert(5);\n\
    \    primes_set.insert(6);\n    primes_set.insert(7);\n    primes_set.insert(8);\n\
    \    primes_set.insert(9);\n    primes_set.insert(10);\n    primes_set.insert(11);\n\
    \    primes_set.insert(12);\n    primes_set.insert(13);\n    primes_set.insert(14);\n\
    \    primes_set.insert(15);\n    primes_set.insert(16);\n    primes_set.insert(17);\n\
    \    primes_set.insert(18);\n    primes_set.insert(19);\n    primes_set.insert(20);\n\
    \    primes_set.insert(21);\n    primes_set.insert(22);\n    primes_set.insert(23);\n\
    \    primes_set.insert(24);\n    primes_set.insert(25);\n    primes_set.insert(26);\n\
    \    primes_set.insert(27);\n    primes_set.insert(28);\n    primes_set.insert(29);\n\
    \    primes_set.insert(30);\n    primes_set.insert(31);\n    primes_set.insert(32);\n\
    \    primes_set.insert(33);\n    primes_set.insert(34);\n    primes_set.insert(35);\n\
    \    primes_set.insert(36);\n    primes_set.insert(37);\n    primes_set.insert(38);\n\
    \    primes_set.insert(39);\n    primes_set.insert(40);\n    primes_set.insert(41);\n\
    \    primes_set.insert(42);\n    primes_set.insert(43);\n    primes_set.insert(44);\n\
    \    primes_set.insert(45);\n    primes_set.insert(46);\n    primes_set.insert(47);\n\
    \    primes_set.insert(48);\n    primes_set.insert(49);\n    primes_set.insert(50);\n\
    \    primes_set.insert(51);\n    primes_set.insert(52);\n    primes_set.insert(53);\n\
    \    primes_set.insert(54);\n    primes_set.insert(55);\n    primes_set.insert(56);\n\
    \    primes_set.insert(57);\n    primes_set.insert(\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpi24ffykd.rs:79:22\n\
    \   |\n15 | fn words_in_sentence(sentence: String) -> String {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n79 |     primes_set.insert(\n   |                      ^ unclosed\
    \ delimiter\n80 | }\n   | ^ mismatched closing delimiter\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpi24ffykd.rs:17:26\n\
    \   |\n17 |     let mut primes_set = HashSet::new();\n   |                   \
    \       ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpi24ffykd.rs:84:17\n   |\n84 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi24ffykd.rs:84:25\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi24ffykd.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi24ffykd.rs:85:25\n   |\n85 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi24ffykd.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi24ffykd.rs:86:25\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi24ffykd.rs:87:17\n  \
    \ |\n87 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi24ffykd.rs:87:25\n   |\n87 |     assert_eq!"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_len2: Vec<i32>\
    \ = Vec::new();\n    let mut prime_words_len3: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len4: Vec<i32> = Vec::new();\n    let mut prime_words_len5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len7: Vec<i32> = Vec::new();\n    let mut prime_words_len8:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len9: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len10: Vec<i32> = Vec::new();\n    let mut prime_words_len11:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len12: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len13: Vec<i32> = Vec::new();\n    let mut prime_words_len14:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len15: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len16: Vec<i32> = Vec::new();\n    let mut prime_words_len17:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len18: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len19: Vec<i32> = Vec::new();\n    let mut prime_words_len20:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len21: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len22: Vec<i32> = Vec::new();\n    let mut prime_words_len23:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len24: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len25: Vec<i32> = Vec::new();\n    let mut prime_words_len26:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzy02fkwi.rs:43:25\n   |\n\
    43 |     let mut prime_words_\n   |                         ^ help: add `;` here\n\
    44 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpzy02fkwi.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzy02fkwi.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzy02fkwi.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzy02fkwi.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzy02fkwi.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzy02fkwi.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzy02fkwi.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order: Vec<i32> = Vec::new();\n    let mut prime_words_len_count2:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_order2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count3: Vec<i32> = Vec::new();\n    let mut prime_words_len_order3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count4: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order4: Vec<i32> = Vec::new();\n    let mut prime_words_len_count5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_order5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count6: Vec<i32> = Vec::new();\n    let mut prime_words_len_order6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count7: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order7: Vec<i32> = Vec::new();\n    let mut prime_words_len_count8:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_order8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count9: Vec<i32> = Vec::new();\n    let mut prime_words_len_order9:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count10: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order10: Vec<i32> = Vec::new();\n    let mut prime_words_len_count11:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_order11: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_count12: Vec<i32> = Vec::new();\n    let mut prime_words_len_order12:\
    \ Vec\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwua541xv.rs:42:41\n   |\n\
    42 |     let mut prime_words_len_order12: Vec\n   |                          \
    \               ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwua541xv.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwua541xv.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwua541xv.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwua541xv.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwua541xv.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwua541xv.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwua541xv.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwua541xv.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwua541xv.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwua541xv.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this sco"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = Vec::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String::new();\n    let mut primes_string\
    \ = String::new();\n    let mut primes_string = String\n}\n\nfn main() {\n   \
    \ let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg6gcyr7i.rs:62:35\n   |\n\
    62 |     let mut primes_string = String\n   |                                \
    \   ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0423]: expected\
    \ value, found struct `String`\n   --> /tmp/tmpg6gcyr7i.rs:62:29\n    |\n62  |\
    \       let mut primes_string = String\n    |                               ^^^^^^\
    \ help: use struct literal syntax instead: `String { vec: val }`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg6gcyr7i.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg6gcyr7i.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg6gcyr7i.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg6gcyr7i.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |   "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut prime_words_len: usize = 0;\n    let mut\
    \ prime_words_len2: usize = 0;\n    let mut prime_words_len3: usize = 0;\n   \
    \ let mut prime_words_len4: usize = 0;\n    let mut prime_words_len5: usize =\
    \ 0;\n    let mut prime_words_len6: usize = 0;\n    let mut prime_words_len7:\
    \ usize = 0;\n    let mut prime_words_len8: usize = 0;\n    let mut prime_words_len9:\
    \ usize = 0;\n    let mut prime_words_len10: usize = 0;\n    let mut prime_words_len11:\
    \ usize = 0;\n    let mut prime_words_len12: usize = 0;\n    let mut prime_words_len13:\
    \ usize = 0;\n    let mut prime_words_len14: usize = 0;\n    let mut prime_words_len15:\
    \ usize = 0;\n    let mut prime_words_len16: usize = 0;\n    let mut prime_words_len17:\
    \ usize = 0;\n    let mut prime_words_len18: usize = 0;\n    let mut prime_words_len19:\
    \ usize = 0;\n    let mut prime_words_len20: usize = 0;\n    let mut prime_words_len21:\
    \ usize = 0;\n    let mut prime_words_len22: usize = 0;\n    let mut prime_words_len23:\
    \ usize = 0;\n    let mut prime_words_len24: usize = 0;\n    let mut prime_words_len25:\
    \ usize = 0;\n    let mut prime_words_len26: usize = 0;\n    let mut prime_words_len27:\
    \ usize = 0;\n    let mut prime_words_len28: usize = 0;\n    let mut prime_words_len29:\
    \ usize = 0;\n    let mut prime_words_len30: usize = 0;\n    let mut prime_words_len31:\
    \ usize = 0;\n    let mut prime_words_len32: usize = 0;\n    let mut prime_words_len33:\
    \ usize = 0;\n    let mut prime_words_len34: usize = 0;\n    let mut prime_words_len35:\
    \ usize = 0;\n    let mut prime_words_len36: usize = 0;\n    let mut prime_words_len37:\
    \ usize = 0;\n    let mut prime_words_len38: usize\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdf5m5ne7.rs:55:37\n   |\n\
    55 |     let mut prime_words_len38: usize\n   |                              \
    \       ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdf5m5ne7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdf5m5ne7.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdf5m5ne7.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdf5m5ne7.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdf5m5ne7.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerro"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptefpw08h.rs:35:1\n\
    \   |\n35 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptefpw08h.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptefpw08h.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:44:17\n   |\n44 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = vec![];\n    let mut words\
    \ = sentence.split_whitespace();\n    let mut new_sentence = String::new();\n\
    \    for word in words {\n        if prime_numbers.contains(&word.len()) {\n \
    \           new_sentence.push_str(&word);\n        } else {\n            prime_numbers.push(word.len());\n\
    \        }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsgyq_0n2.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsgyq_0n2.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsgyq_0n2.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsgyq_0n2.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsgyq_0n2.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut prime_words_len: Vec<usize> = vec![];\n \
    \   let mut prime_words_len_count: Vec<usize> = vec![];\n    let mut prime_words_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count: Vec<usize>\
    \ = vec![];\n    let mut prime_words_len_count_len_count_len: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count_len_count_len_count_len: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count_len_count_len_count_len_count_len: Vec<usize>\
    \ = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1948gyt0.rs:34:109\n   |\n\
    34 |     let mut prime_words_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_count_len_\n\
    \   |                                                                        \
    \                                     ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1948gyt0.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1948gyt0.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1948gyt0.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1948gyt0.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1948gyt0.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1948gyt0.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1948gyt0.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1948gyt0.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1948gyt0.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = String::new();\n    let mut primes_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string = String::new();\n \
    \   let mut primes_string_set_string_set = HashSet::new();\n    let mut primes_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string = String::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string = String::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \    let mut primes_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string\
    \ = String::new();\n    let mut primes_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set_string_set\
    \ = HashSet::new();\n    let mut primes_string_set_\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvz9bkd2t.rs:40:31\n   |\n\
    40 |     let mut primes_string_set_\n   |                               ^ help:\
    \ add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:17:26\n   |\n17\
    \ |     let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:19:33\n   |\n19\
    \ |     let mut primes_string_set = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:21:44\n\
    \   |\n21 |     let mut primes_string_set_string_set = HashSet::new();\n   | \
    \                                           ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpvz9bkd2t.rs:23:55\n   |\n23 |     let mut primes_string_set_string_set_string_set\
    \ = HashSet::new();\n   |                                                    \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:25:66\n   |\n25\
    \ |     let mut primes_string_set_string_set_string_set_string_set = HashSet::new();\n\
    \   |                                                                  ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpvz9bkd2t.rs:27:77\n   |\n27\
    \ |     let mut primes_string_set_string_set_string_set_string_s"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order: Vec<i32> = Vec::new();\n    let mut prime_words_order_count:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order2: Vec<i32> = Vec::new();\n    let mut prime_words_order_count2:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count3: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order3: Vec<i32> = Vec::new();\n    let mut prime_words_order_count3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count4: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order4: Vec<i32> = Vec::new();\n    let mut prime_words_order_count4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order5: Vec<i32> = Vec::new();\n    let mut prime_words_order_count5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order6: Vec<i32> = Vec::new();\n    let mut prime_words_order_count6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count7: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order7: Vec<i32> = Vec::new();\n    let mut prime_words_order_count7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order8: Vec<i32> = Vec::new();\n    let mut prime_words_order_count8:\
    \ Vec<i32> = Vec::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptsilv66v.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptsilv66v.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptsilv66v.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:52:17\n   |\n52 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    let\
    \ mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(2).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(3).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(5).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(7).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(11).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(13).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(17).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(19).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(23).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(29).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(31).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(37).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(41).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(43).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(47).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(53).floor()\
    \ as usize);\n    let mut primes_len = primes_len.saturating_add(primes_len.saturating_mul(59).floor()\
    \ as usize);\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj5figeac.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj5figeac.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj5figeac.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj5figeac.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj5figeac.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj5figeac.rs:46:25\n   |\n46 |  "
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut words = sentence.split_whitespace();\n  \
    \  let mut prime_words_len: Vec<usize> = vec![];\n    let mut prime_words_len_count:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count2: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count3: Vec<usize> = vec![];\n    let mut prime_words_len_count4:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count5: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count6: Vec<usize> = vec![];\n    let mut prime_words_len_count7:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count8: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count9: Vec<usize> = vec![];\n    let mut prime_words_len_count10:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count11: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count12: Vec<usize> = vec![];\n    let mut prime_words_len_count13:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count14: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count15: Vec<usize> = vec![];\n    let mut prime_words_len_count16:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count17: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count18: Vec<usize> = vec![];\n    let mut prime_words_len_count19:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count20: Vec<usize> = vec![];\n\
    \    let mut prime_words_len_count21: Vec<usize> = vec![];\n    let mut prime_words_len_count22:\
    \ Vec<usize> = vec![];\n    let mut prime_words_len_count23: Vec<usize> = vec![];\n\
    \    let mut prime_\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4nicqizd.rs:43:19\n   |\n\
    43 |     let mut prime_\n   |                   ^ help: add `;` here\n44 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4nicqizd.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4nicqizd.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4nicqizd.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4nicqizd.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4nicqizd.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4nicqizd.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4nicqizd.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4nicqizd.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4nicqizd.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4nicqizd.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` i"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut prime_lengths: Vec<usize> = vec![];\n   \
    \ let mut prime_lengths_len: usize = 0;\n    let mut prime_lengths_len2: usize\
    \ = 0;\n    let mut prime_lengths_len3: usize = 0;\n    let mut prime_lengths_len4:\
    \ usize = 0;\n    let mut prime_lengths_len5: usize = 0;\n    let mut prime_lengths_len6:\
    \ usize = 0;\n    let mut prime_lengths_len7: usize = 0;\n    let mut prime_lengths_len8:\
    \ usize = 0;\n    let mut prime_lengths_len9: usize = 0;\n    let mut prime_lengths_len10:\
    \ usize = 0;\n    let mut prime_lengths_len11: usize = 0;\n    let mut prime_lengths_len12:\
    \ usize = 0;\n    let mut prime_lengths_len13: usize = 0;\n    let mut prime_lengths_len14:\
    \ usize = 0;\n    let mut prime_lengths_len15: usize = 0;\n    let mut prime_lengths_len16:\
    \ usize = 0;\n    let mut prime_lengths_len17: usize = 0;\n    let mut prime_lengths_len18:\
    \ usize = 0;\n    let mut prime_lengths_len19: usize = 0;\n    let mut prime_lengths_len20:\
    \ usize = 0;\n    let mut prime_lengths_len21: usize = 0;\n    let mut prime_lengths_len22:\
    \ usize = 0;\n    let mut prime_lengths_len23: usize = 0;\n    let mut prime_lengths_len24:\
    \ usize = 0;\n    let mut prime_lengths_len25: usize = 0;\n    let mut prime_lengths_len26:\
    \ usize = 0;\n    let mut prime_lengths_len27: usize = 0;\n    let mut prime_lengths_len28:\
    \ usize = 0;\n    let mut prime_lengths_len29: usize = 0;\n    let mut prime_lengths_len30:\
    \ usize = 0;\n    let mut prime_lengths_len31: usize = 0;\n    let mut prime_lengths_len32:\
    \ usize = 0;\n    let mut prime_lengths_len33: usize = 0;\n    let mut prime_lengths_len34:\
    \ usize = 0;\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp5afbpwc.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp5afbpwc.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp5afbpwc.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp5afbpwc.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp5afbpwc.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp5afbpwc.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp5afbpwc.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp5afbpwc.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp5afbpwc.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp5afbpwc.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp5afbpwc.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_len = String::new();\n    let mut primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_set = HashSet::new();\n\
    \    let mut primes_string_len_primes_string = String::new();\n    let mut primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_set = HashSet::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut prime\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5g0un6f0.rs:39:18\n   |\n\
    39 |     let mut prime\n   |                  ^ help: add `;` here\n40 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5g0un6f0.rs:21:44\n   |\n21 |     let mut primes_string_len_primes_set\
    \ = HashSet::new();\n   |                                            ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:25:62\n   |\n25 |  \
    \   let mut primes_string_len_primes_string_len_primes_set = HashSet::new();\n\
    \   |                                                              ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:29:80\n   |\n29 |  \
    \   let mut primes_string_len_primes_string_len_primes_string_len_primes_set =\
    \ HashSet::new();\n   |                                                      \
    \                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:33:98\n\
    \   |\n33 |     let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n   |                                                    \
    \                                              ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed t"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_numbers\
    \ = vec![];\n    let mut words = sentence.split_whitespace();\n    let mut prime_numbers_iter\
    \ = prime_numbers.iter();\n    let mut words_iter = words.iter();\n    let mut\
    \ prime_number_iter = primes.iter();\n    while prime_numbers_iter.any() || words_iter.any()\
    \ {\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_iter.next();\n        }\n        if prime_numbers_iter.any()\
    \ {\n            prime_numbers_iter.next();\n        }\n        if words_iter.any()\
    \ {\n            prime_numbers_iter.next();\n            words_iter.next();\n\
    \        }\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_iter.next();\n        }\n        if prime_numbers_iter.any()\
    \ {\n            prime_numbers_iter.next();\n        }\n        if words_iter.any()\
    \ {\n            prime_numbers_iter.next();\n            words_iter.next();\n\
    \        }\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_iter.next();\n        }\n        if prime_numbers_iter.any()\
    \ {\n            prime_numbers_iter.next();\n        }\n        if words_iter.any()\
    \ {\n            prime_numbers_iter.next();\n            words_iter.next();\n\
    \        }\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_iter.next();\n        }\n        if prime_numbers_iter.any()\
    \ {\n            prime_numbers_iter.next();\n        }\n        if words_iter.any()\
    \ {\n            prime_numbers_iter.next();\n            words_iter.next();\n\
    \        }\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_iter.next();\n        }\n        if prime_numbers_iter.any()\
    \ {\n            prime_numbers_iter.next();\n        }\n        if words_iter.any()\
    \ {\n            prime_numbers_iter.next();\n            words_iter.next();\n\
    \        }\n        if prime_numbers_iter.any() {\n            prime_numbers_iter.next();\n\
    \        }\n        if words_iter.any() {\n            prime_numbers_iter.next();\n\
    \            words_\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpf8nv2nus.rs:110:3\n\
    \    |\n15  | fn words_in_sentence(sentence: String) -> String {\n    |      \
    \                                            - unclosed delimiter\n...\n22  |\
    \     while prime_numbers_iter.any() || words_iter.any() {\n    |            \
    \                                            - unclosed delimiter\n...\n96  |\
    \         if words_iter.any() {\n    |                             - this delimiter\
    \ might not be properly closed...\n...\n99  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n110 | }\n    |   ^\n\nerror[E0425]: cannot\
    \ find value `words_` in this scope\n  --> /tmp/tmpf8nv2nus.rs:98:13\n   |\n98\
    \ |             words_\n   |             ^^^^^^ help: a local variable with a\
    \ similar name exists: `words`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf8nv2nus.rs:103:17\n    |\n103 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpf8nv2nus.rs:103:25\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf8nv2nus.rs:104:17\n    |\n104 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpf8nv2nus.rs:104:25\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf8nv2nus.rs:105:17\n    |\n105 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpf8nv2nus.rs:105:25\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpf8nv2nus.rs:106:17\n    |\n106 |     assert_eq!({left},\
    \ {r"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_set\
    \ = HashSet::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string_set = HashSet::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_set_string\
    \ = String::new();\n    let mut prime_numbers_string_set_string = String::new();\n\
    \    let mut prime_numbers_string_set_string = String::new();\n    let mut prime_numbers_string_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfwvkj2ih.rs:50:34\n   |\n\
    50 |     let mut prime_numbers_string_\n   |                                 \
    \ ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpfwvkj2ih.rs:17:33\n\
    \   |\n17 |     let mut prime_numbers_set = HashSet::new();\n   |            \
    \                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpfwvkj2ih.rs:19:40\n\
    \   |\n19 |     let mut prime_numbers_string_set = HashSet::new();\n   |     \
    \                                   ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfwvkj2ih.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfwvkj2ih.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfwvkj2ih.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfwvkj2ih.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfwvkj2ih.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfwvkj2ih.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfwvkj2ih.rs:58:17\n   |\n58 |     asser"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![true; 100];\n    let mut primes_set\
    \ = HashSet::new();\n    let mut new_sentence = String::new();\n    let mut words\
    \ = sentence.split_whitespace();\n    for word in words {\n        if primes[word.chars().count()]\
    \ {\n            primes_set.insert(word.chars().count());\n        }\n    }\n\
    \    for prime in primes_set {\n        if prime > 1 {\n            new_sentence.push_str(&sentence[prime\
    \ - 1]);\n        }\n    }\n    new_sentence\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpwer0tum0.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwer0tum0.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwer0tum0.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwer0tum0.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwer0tum0.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwer0tum0.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwer0tum0.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwer0tum0.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwer0tum0.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwer0tum0.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwer0tum0.rs:39:25\n   |\n39 |  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptefpw08h.rs:35:1\n\
    \   |\n35 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptefpw08h.rs:39:17\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:39:25\n \
    \  |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptefpw08h.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptefpw08h.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptefpw08h.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptefpw08h.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptefpw08h.rs:44:17\n   |\n44 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ primes_set = HashSet::new();\n    let mut primes_string = String::new();\n \
    \   let mut primes_string_len = String::new();\n    let mut primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_set = HashSet::new();\n\
    \    let mut primes_string_len_primes_string = String::new();\n    let mut primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_set = HashSet::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes = String::new();\n\
    \    let mut primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes\
    \ = String::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n    let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_string\
    \ = String::new();\n    let mut prime\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5g0un6f0.rs:39:18\n   |\n\
    39 |     let mut prime\n   |                  ^ help: add `;` here\n40 | }\n \
    \  | - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmp5g0un6f0.rs:21:44\n   |\n21 |     let mut primes_string_len_primes_set\
    \ = HashSet::new();\n   |                                            ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:25:62\n   |\n25 |  \
    \   let mut primes_string_len_primes_string_len_primes_set = HashSet::new();\n\
    \   |                                                              ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:29:80\n   |\n29 |  \
    \   let mut primes_string_len_primes_string_len_primes_string_len_primes_set =\
    \ HashSet::new();\n   |                                                      \
    \                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp5g0un6f0.rs:33:98\n\
    \   |\n33 |     let mut primes_string_len_primes_string_len_primes_string_len_primes_string_len_primes_set\
    \ = HashSet::new();\n   |                                                    \
    \                                              ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed t"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_words: Vec<String> = Vec::new();\n\
    \    let mut words = sentence.split_whitespace();\n    let mut current_prime:\
    \ usize = 2;\n    for word in words {\n        if primes.contains(&current_prime)\
    \ {\n            prime_words.push(word);\n        }\n        current_prime +=\
    \ 2;\n    }\n    for word in prime_words {\n        result.push_str(&word);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpm8snwcx2.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm8snwcx2.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm8snwcx2.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm8snwcx2.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm8snwcx2.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm8snwcx2.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm8snwcx2.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm8snwcx2.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm8snwcx2.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm8snwcx2.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm8snwcx2.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_words: Vec<String> = vec![];\n  \
    \  let mut prime_words_len: usize = 0;\n    let mut prime_words_index = 0;\n \
    \   let mut prime_words_len_index = 0;\n    let mut prime_words_len_index2 = 0;\n\
    \    let mut prime_words_len_index3 = 0;\n    let mut prime_words_len_index4 =\
    \ 0;\n    let mut prime_words_len_index5 = 0;\n    let mut prime_words_len_index6\
    \ = 0;\n    let mut prime_words_len_index7 = 0;\n    let mut prime_words_len_index8\
    \ = 0;\n    let mut prime_words_len_index9 = 0;\n    let mut prime_words_len_index10\
    \ = 0;\n    let mut prime_words_len_index11 = 0;\n    let mut prime_words_len_index12\
    \ = 0;\n    let mut prime_words_len_index13 = 0;\n    let mut prime_words_len_index14\
    \ = 0;\n    let mut prime_words_len_index15 = 0;\n    let mut prime_words_len_index16\
    \ = 0;\n    let mut prime_words_len_index17 = 0;\n    let mut prime_words_len_index18\
    \ = 0;\n    let mut prime_words_len_index19 = 0;\n    let mut prime_words_len_index20\
    \ = 0;\n    let mut prime_words_len_index21 = 0;\n    let mut prime_words_len_index22\
    \ = 0;\n    let mut prime_words_len_index23 = 0;\n    let mut prime_words_len_index24\
    \ = 0;\n    let mut prime_words_len_index25 = 0;\n    let mut prime_words_len_index26\
    \ = 0;\n    let mut prime_words_len_index27 = 0;\n    let mut prime_words_len_index28\
    \ = 0;\n    let mut prime_words_len_index29 = 0;\n    let mut prime_words_len_index30\
    \ = 0;\n    let mut prime_words_len_index31 = 0;\n    let mut prime_words_len_index32\
    \ = 0;\n    let mut prime_words_len_index33 = 0;\n    let mut prime_words_len_index34\
    \ = 0;\n    let mut prime_words_len_index35 = 0;\n    let mut prime_words_len_index36\
    \ = 0;\n    let mut prime_words_len_index37 = 0;\n    let mut prime_words_len_index38\
    \ = 0;\n    let mut prime_words_len_index39 = 0;\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_qi0sn7r.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_qi0sn7r.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_qi0sn7r.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_qi0sn7r.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_qi0sn7r.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_qi0sn7r.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    words_in_sentence(sentence.split_whitespace())\n}\n\
    \nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd498w5j5.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd498w5j5.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd498w5j5.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd498w5j5.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_iter = primes.into_iter();\n    let\
    \ mut prime_iter2 = prime_iter.clone();\n    let mut prime_iter3 = prime_iter2.clone();\n\
    \    let mut prime_iter4 = prime_iter3.clone();\n    let mut prime_iter5 = prime_iter4.clone();\n\
    \    let mut prime_iter6 = prime_iter5.clone();\n    let mut prime_iter7 = prime_iter6.clone();\n\
    \    let mut prime_iter8 = prime_iter7.clone();\n    let mut prime_iter9 = prime_iter8.clone();\n\
    \    let mut prime_iter10 = prime_iter9.clone();\n    let mut prime_iter11 = prime_iter10.clone();\n\
    \    let mut prime_iter12 = prime_iter11.clone();\n    let mut prime_iter13 =\
    \ prime_iter12.clone();\n    let mut prime_iter14 = prime_iter13.clone();\n  \
    \  let mut prime_iter15 = prime_iter14.clone();\n    let mut prime_iter16 = prime_iter15.clone();\n\
    \    let mut prime_iter17 = prime_iter16.clone();\n    let mut prime_iter18 =\
    \ prime_iter17.clone();\n    let mut prime_iter19 = prime_iter18.clone();\n  \
    \  let mut prime_iter20 = prime_iter19.clone();\n    let mut prime_iter21 = prime_iter20.clone();\n\
    \    let mut prime_iter22 = prime_iter21.clone();\n    let mut prime_iter23 =\
    \ prime_iter22.clone();\n    let mut prime_iter24 = prime_iter23.clone();\n  \
    \  let mut prime_iter25 = prime_iter24.clone();\n    let mut prime_iter26 = prime_iter25.clone();\n\
    \    let mut prime_iter27 = prime_iter26.clone();\n    let mut prime_iter28 =\
    \ prime_iter27.clone();\n    let mut prime_iter29 = prime_iter28.clone();\n  \
    \  let mut prime_iter30 = prime_iter29.clone();\n    let mut prime_iter31 = prime_iter30.clone();\n\
    \    let mut prime_iter32 = prime_iter31.clone();\n    let mut prime_iter33 =\
    \ prime_iter32.clone();\n    let mut prime_iter34 = prime_iter33.clone();\n\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp22_sv2ap.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp22_sv2ap.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp22_sv2ap.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp22_sv2ap.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp22_sv2ap.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp22_sv2ap.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp22_sv2ap.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp22_sv2ap.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp22_sv2ap.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp22_sv2ap.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp22_sv2ap.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = String::new();\n    let mut primes_string_len\
    \ = String::new();\n    let mut primes_string_len_primes = String::new();\n  \
    \  let mut primes_string_len_primes_primes = String::new();\n    let mut primes_string_len_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = String::new();\n    let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp47n889cm.rs:35:134\n   |\n\
    35 |     let mut primes_string_len_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    \   |                                                                        \
    \                                                              ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n  --> /tmp/tmp47n889cm.rs:17:26\n   |\n17 |  \
    \   let mut primes_set = HashSet::new();\n   |                          ^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::HashSet;\n   |\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp47n889cm.rs:40:17\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp47n889cm.rs:40:25\n \
    \  |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp47n889cm.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp47n889cm.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp47n889cm.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp47n889cm.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp47n889cm.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/t"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = vec![];\n    let mut\
    \ prime_words_len: Vec<i32> = vec![];\n    let mut prime_words_len2: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len3: Vec<i32> = vec![];\n    let mut prime_words_len4:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len5: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len6: Vec<i32> = vec![];\n    let mut prime_words_len7: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len8: Vec<i32> = vec![];\n    let mut prime_words_len9:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len10: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len11: Vec<i32> = vec![];\n    let mut prime_words_len12: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len13: Vec<i32> = vec![];\n    let mut prime_words_len14:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len15: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len16: Vec<i32> = vec![];\n    let mut prime_words_len17: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len18: Vec<i32> = vec![];\n    let mut prime_words_len19:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len20: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len21: Vec<i32> = vec![];\n    let mut prime_words_len22: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len23: Vec<i32> = vec![];\n    let mut prime_words_len24:\
    \ Vec<i32> = vec![];\n    let mut prime_words_len25: Vec<i32> = vec![];\n    let\
    \ mut prime_words_len26: Vec<i32> = vec![];\n    let mut prime_words_len27: Vec<i32>\
    \ = vec![];\n    let mut prime_words_len28: Vec<i32> = vec\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk3srjqx2.rs:44:46\n   |\n\
    44 |     let mut prime_words_len28: Vec<i32> = vec\n   |                     \
    \                         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\
    \nerror[E0423]: expected value, found macro `vec`\n  --> /tmp/tmpk3srjqx2.rs:44:43\n\
    \   |\n44 |     let mut prime_words_len28: Vec<i32> = vec\n   |              \
    \                             ^^^ not a value\n   |\nhelp: use `!` to invoke the\
    \ macro\n   |\n44 |     let mut prime_words_len28: Vec<i32> = vec!\n   |     \
    \                                         +\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:17\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:49:25\n \
    \  |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk3srjqx2.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk3srjqx2.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk3srjqx2.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk3srjqx2.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_len: Vec<i32> = Vec::new();\n    let mut prime_words_order:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order: Vec<i32> = Vec::new();\n    let mut prime_words_order_count:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count2: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order2: Vec<i32> = Vec::new();\n    let mut prime_words_order_count2:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count3: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order3: Vec<i32> = Vec::new();\n    let mut prime_words_order_count3:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count4: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order4: Vec<i32> = Vec::new();\n    let mut prime_words_order_count4:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count5: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order5: Vec<i32> = Vec::new();\n    let mut prime_words_order_count5:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count6: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order6: Vec<i32> = Vec::new();\n    let mut prime_words_order_count6:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count7: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order7: Vec<i32> = Vec::new();\n    let mut prime_words_order_count7:\
    \ Vec<i32> = Vec::new();\n    let mut prime_words_len_count8: Vec<i32> = Vec::new();\n\
    \    let mut prime_words_len_order8: Vec<i32> = Vec::new();\n    let mut prime_words_order_count8:\
    \ Vec<i32> = Vec::\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmptsilv66v.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmptsilv66v.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptsilv66v.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptsilv66v.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptsilv66v.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptsilv66v.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptsilv66v.rs:52:17\n   |\n52 |     "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut prime_words:\
    \ Vec<String> = vec![];\n    let mut prime_length: usize = 1;\n    let mut prime_counter:\
    \ usize = 1;\n    let mut prime_counter2: usize = 1;\n    let mut prime_counter3:\
    \ usize = 1;\n    let mut prime_counter4: usize = 1;\n    let mut prime_counter5:\
    \ usize = 1;\n    let mut prime_counter6: usize = 1;\n    let mut prime_counter7:\
    \ usize = 1;\n    let mut prime_counter8: usize = 1;\n    let mut prime_counter9:\
    \ usize = 1;\n    let mut prime_counter10: usize = 1;\n    let mut prime_counter11:\
    \ usize = 1;\n    let mut prime_counter12: usize = 1;\n    let mut prime_counter13:\
    \ usize = 1;\n    let mut prime_counter14: usize = 1;\n    let mut prime_counter15:\
    \ usize = 1;\n    let mut prime_counter16: usize = 1;\n    let mut prime_counter17:\
    \ usize = 1;\n    let mut prime_counter18: usize = 1;\n    let mut prime_counter19:\
    \ usize = 1;\n    let mut prime_counter20: usize = 1;\n    let mut prime_counter21:\
    \ usize = 1;\n    let mut prime_counter22: usize = 1;\n    let mut prime_counter23:\
    \ usize = 1;\n    let mut prime_counter24: usize = 1;\n    let mut prime_counter25:\
    \ usize = 1;\n    let mut prime_counter26: usize = 1;\n    let mut prime_counter27:\
    \ usize = 1;\n    let mut prime_counter28: usize = 1;\n    let mut prime_counter29:\
    \ usize = 1;\n    let mut prime_counter30: usize = 1;\n    let mut prime_counter31:\
    \ usize = 1;\n    let mut prime_counter32: usize = 1;\n    let mut prime_counter33:\
    \ usize = 1;\n    let mut prime_counter34: usize = 1;\n    let mut prime_counter35:\
    \ usize = 1;\n    let mut prime_counter36: usize = 1;\n    let mut prime_counter37:\
    \ usize = 1;\n    let mut prime_counter38: usize = 1;\n    let mut prime_counter39:\
    \ usize = 1;\n    let mut prime_counter40: usize = 1;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpwvfsjl4f.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpwvfsjl4f.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwvfsjl4f.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwvfsjl4f.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwvfsjl4f.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwvfsjl4f.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwvfsjl4f.rs:69:17\n   |\n69 |     assert"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|w| is_prime(w.len()))\n\
    \        .collect::<Vec<_>>()\n        .join(\", \")\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpalf688ro.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|w| is_prime(w.len()))\n  \
    \ |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpalf688ro.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpalf688ro.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpalf688ro.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpalf688ro.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpalf688ro.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpalf688ro.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                  "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    \   |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjmv2_5dd.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \              "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3];\n    let mut result =\
    \ String::new();\n    let mut words = sentence.split_whitespace();\n    let mut\
    \ i = 0;\n    while i < words.len() {\n        if primes.contains(&words[i].len())\
    \ {\n            result.push_str(&words[i]);\n        }\n        i += 1;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmn5t86yo.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmn5t86yo.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmn5t86yo.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmn5t86yo.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmn5t86yo.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmn5t86yo.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmn5t86yo.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmn5t86yo.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmn5t86yo.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmn5t86yo.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmn5t86yo.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter_map(|x| x.chars().filter(|c|\
    \ c.is_alphabetic())).collect()\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpewp650tf.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpewp650tf.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpewp650tf.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpewp650tf.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpewp650tf.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpewp650tf.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpewp650tf.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpewp650tf.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpewp650tf.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpewp650tf.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpewp650tf.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).floor());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42\
    \ | }\n   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpgqf2d7u6.rs:42:1\n   |\n42 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpgqf2d7u6.rs:41:51\n   |\n15 | fn words_in_sentence(sentence:\
    \ String) -> String {\n   |                                                  -\
    \ closing delimiter possibly meant for this\n...\n41 |     let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).\n   |                    \
    \                               ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `HashSet`\n  --> /tmp/tmpgqf2d7u6.rs:17:26\n   |\n17 |     let mut primes_set\
    \ = HashSet::new();\n   |                          ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgqf2d7u6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgqf2d7u6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgqf2d7u6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |         "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_len = String::new();\n  \
    \  let mut prime_numbers_string_len_prime = String::new();\n    let mut prime_numbers_string_len_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime = String::new();\n\
    \    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = String::new();\n    let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpto1vwcv3.rs:34:104\n   |\n\
    34 |     let mut prime_numbers_string_len_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_\n\
    \   |                                                                        \
    \                                ^ help: add `;` here\n35 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpto1vwcv3.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpto1vwcv3.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpto1vwcv3.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpto1vwcv3.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_string = String::new();\n    let mut primes_string_len\
    \ = String::new();\n    let mut primes_string_len_set = HashSet::new();\n    let\
    \ mut primes_string_len_set2 = HashSet::new();\n    let mut primes_string_len_set3\
    \ = HashSet::new();\n    let mut primes_string_len_set4 = HashSet::new();\n  \
    \  let mut primes_string_len_set5 = HashSet::new();\n    let mut primes_string_len_set6\
    \ = HashSet::new();\n    let mut primes_string_len_set7 = HashSet::new();\n  \
    \  let mut primes_string_len_set8 = HashSet::new();\n    let mut primes_string_len_set9\
    \ = HashSet::new();\n    let mut primes_string_len_set10 = HashSet::new();\n \
    \   let mut primes_string_len_set11 = HashSet::new();\n    let mut primes_string_len_set12\
    \ = HashSet::new();\n    let mut primes_string_len_set13 = HashSet::new();\n \
    \   let mut primes_string_len_set14 = HashSet::new();\n    let mut primes_string_len_set15\
    \ = HashSet::new();\n    let mut primes_string_len_set16 = HashSet::new();\n \
    \   let mut primes_string_len_set17 = HashSet::new();\n    let mut primes_string_len_set18\
    \ = HashSet::new();\n    let mut primes_string_len_set19 = HashSet::new();\n \
    \   let mut primes_string_len_set20 = HashSet::new();\n    let mut primes_string_len_set21\
    \ = HashSet::new();\n    let mut primes_string_len_set22 = HashSet::new();\n \
    \   let mut primes_string_len_set23 = HashSet::new();\n    let mut primes_string_len_set24\
    \ = HashSet::new();\n    let mut primes_string_len_set25 = HashSet::new();\n \
    \   let mut primes_string_len_set26 = HashSet::new();\n    let mut primes_string_len_set27\
    \ = HashSet::new();\n    let mut primes_string_len_set28 = HashSet::new();\n \
    \   let mut primes_string_len_set29 = HashSet::new();\n    let mut primes_string_len_set30\
    \ = HashSet::new();\n\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmppf2mnno9.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:20:37\n\
    \   |\n20 |     let mut primes_string_len_set = HashSet::new();\n   |        \
    \                             ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:21:38\n\
    \   |\n21 |     let mut primes_string_len_set2 = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:22:38\n\
    \   |\n22 |     let mut primes_string_len_set3 = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:23:38\n\
    \   |\n23 |     let mut primes_string_len_set4 = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:24:38\n\
    \   |\n24 |     let mut primes_string_len_set5 = HashSet::new();\n   |       \
    \                               ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmppf2mnno9.rs:25:38\n\
    \   |\n25 |     let mut primes_str"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:16:44\n\
    \   |\n16 |     sentence.split_whitespace().filter(|x| is_prime(x)).collect()\n\
    \   |                                            ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:21:17\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:21:25\n   |\n21 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:17\n   |\n22 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:22:25\n\
    \   |\n22 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjmv2_5dd.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjmv2_5dd.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjmv2_5dd.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \              "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 3).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 4).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 5).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 6).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 7).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 8).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 9).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 10).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 11).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 12).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 13).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 14).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 15).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 16).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 17).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 18).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 19).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 20).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 21).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 22).ceil());\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 23).ceil());\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpisad__b3.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpisad__b3.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpisad__b3.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpisad__b3.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpisad__b3.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpisad__b3.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpisad__b3.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpisad__b3.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpisad__b3.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpisad__b3.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpisad__b3.rs:49:25\n   |\n49 |  "
  stdout: ''
  timestamp: 1659823182
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \        .collect::<Vec<String>>()\n        .join(\", \")\n}\n\nfn main() {\n\
    \    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp7rja1g7u.rs:16:47\n\
    \   |\n16 |     sentence.split_whitespace().filter(|word| is_prime(word.len()))\n\
    \   |                                               ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7rja1g7u.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7rja1g7u.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7rja1g7u.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7rja1g7u.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7rja1g7u.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7rja1g7u.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7rja1g7u.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7rja1g7u.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7rja1g7u.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7rja1g7u.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \         "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_numbers_string = String::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string = String::new();\n    let\
    \ mut prime_number\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz9tashl5.rs:55:25\n   |\n\
    55 |     let mut prime_number\n   |                         ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpz9tashl5.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz9tashl5.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz9tashl5.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz9tashl5.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659747399
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<String> = Vec::new();\n  \
    \  let mut prime_words_len: Vec<usize> = Vec::new();\n    let mut prime_words_len_count:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count2: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count3: Vec<usize> = Vec::new();\n    let mut prime_words_len_count4:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count5: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count6: Vec<usize> = Vec::new();\n    let mut prime_words_len_count7:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count8: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count9: Vec<usize> = Vec::new();\n    let mut prime_words_len_count10:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count11: Vec<usize> =\
    \ Vec::new();\n    let mut prime_words_len_count12: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count13: Vec<usize> = Vec::new();\n    let mut prime_words_len_count14:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count15: Vec<usize> =\
    \ Vec::new();\n    let mut prime_words_len_count16: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count17: Vec<usize> = Vec::new();\n    let mut prime_words_len_count18:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count19: Vec<usize> =\
    \ Vec::new();\n    let mut prime_words_len_count20: Vec<usize> = Vec::new();\n\
    \    let mut prime_words_len_count21: Vec<usize> = Vec::new();\n    let mut prime_words_len_count22:\
    \ Vec<usize> = Vec::new();\n    let mut prime_words_len_count23: Vec<usize> =\
    \ Vec::new\n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppe0rvltv.rs:40:59\n   |\n\
    40 |     let mut prime_words_len_count23: Vec<usize> = Vec::new\n   |        \
    \                                                   ^ help: add `;` here\n41 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmppe0rvltv.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppe0rvltv.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppe0rvltv.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppe0rvltv.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppe0rvltv.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppe0rvltv.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppe0rvltv.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppe0rvltv.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppe0rvltv.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppe0rvltv.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_iter = primes.iter().cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let mut prime_iter\
    \ = prime_iter.skip(1).cloned();\n    let mut prime_iter = prime_iter.skip(1).cloned();\n\
    \    let mut prime_iter = prime_iter.skip(1).cloned();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp7mj85qjq.rs:48:1\n  \
    \ |\n48 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp7mj85qjq.rs:52:17\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp7mj85qjq.rs:52:25\n \
    \  |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7mj85qjq.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7mj85qjq.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7mj85qjq.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7mj85qjq.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7mj85qjq.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7mj85qjq.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7mj85qjq.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7mj85qjq.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7mj85qjq.rs:57:17\n   |\n57 |     assert"
  stdout: ''
  timestamp: 1659823182
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ result = String::new();\n    let mut prime_iter = primes.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_iter2 = primes.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_iter3 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter4\
    \ = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter5 = primes.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_iter6 = primes.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_iter7 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter8\
    \ = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter9 = primes.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_iter10 = primes.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_iter11 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ prime_iter12 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter13\
    \ = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter14 = primes.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_iter15 = primes.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_iter16 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ prime_iter17 = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter18\
    \ = primes.iter().cloned().collect::<Vec<_>>();\n    let mut prime_iter19 = primes.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime_iter20 = primes.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime_iter21 = primes.iter().cloned().collect\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqykan34s.rs:38:58\n   |\n\
    38 |     let mut prime_iter21 = primes.iter().cloned().collect\n   |         \
    \                                                 ^ help: add `;` here\n39 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqykan34s.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqykan34s.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqykan34s.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqykan34s.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqykan34s.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqykan34s.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqykan34s.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqykan34s.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqykan34s.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqykan34s.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                  "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_string\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::new();\n    let mut prime_numbers_string_length\
    \ = String::new();\n    let mut prime_numbers_string_length = String::new();\n\
    \    let mut prime_numbers_string_length = String::\n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphyn3n69s.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphyn3n69s.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyn3n69s.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyn3n69s.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyn3n69s.rs:62:17\n   |\n62 |     "
  stdout: ''
  timestamp: 1659793809
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut prime_words: Vec<i32> = Vec::new();\n    let\
    \ mut prime_words_string: String = String::new();\n    let mut prime_words_string_len:\
    \ usize = 0;\n    let mut prime_words_string_len2: usize = 0;\n    let mut prime_words_string_len3:\
    \ usize = 0;\n    let mut prime_words_string_len4: usize = 0;\n    let mut prime_words_string_len5:\
    \ usize = 0;\n    let mut prime_words_string_len6: usize = 0;\n    let mut prime_words_string_len7:\
    \ usize = 0;\n    let mut prime_words_string_len8: usize = 0;\n    let mut prime_words_string_len9:\
    \ usize = 0;\n    let mut prime_words_string_len10: usize = 0;\n    let mut prime_words_string_len11:\
    \ usize = 0;\n    let mut prime_words_string_len12: usize = 0;\n    let mut prime_words_string_len13:\
    \ usize = 0;\n    let mut prime_words_string_len14: usize = 0;\n    let mut prime_words_string_len15:\
    \ usize = 0;\n    let mut prime_words_string_len16: usize = 0;\n    let mut prime_words_string_len17:\
    \ usize = 0;\n    let mut prime_words_string_len18: usize = 0;\n    let mut prime_words_string_len19:\
    \ usize = 0;\n    let mut prime_words_string_len20: usize = 0;\n    let mut prime_words_string_len21:\
    \ usize = 0;\n    let mut prime_words_string_len22: usize = 0;\n    let mut prime_words_string_len23:\
    \ usize = 0;\n    let mut prime_words_string_len24: usize = 0;\n    let mut prime_words_string_len25:\
    \ usize = 0;\n    let mut prime_words_string_len26: usize = 0;\n    let mut prime_words_string_len27:\
    \ usize = 0;\n    let mut prime_words_string_len28: usize = 0;\n    let mut prime_words_string_len29:\
    \ usize = 0;\n    let mut prime_words_string_len30: usize = 0;\n    let mut prime_words_string_len31:\
    \ usize = 0;\n    let mut prime_words_string_len32: usize = 0;\n    let mut prime_words_string_len33:\
    \ usize = 0;\n    let mut prime_words_string_len34: usize = 0;\n    let mut prime_words_string_len35:\
    \ \n}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmpb3q9l_b7.rs:53:1\n   |\n\
    52 |     let mut prime_words_string_len35: \n   |         ----------------------------\
    \ while parsing the type for `mut prime_words_string_len35`\n53 | }\n   | ^ expected\
    \ type\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb3q9l_b7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb3q9l_b7.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb3q9l_b7.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                       "
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ new_sentence = String::new();\n    let mut prime_words: Vec<String> = Vec::new();\n\
    \    let mut prime_words_len: usize = 0;\n    let mut prime_words_index = 0;\n\
    \    let mut prime_words_len_index = 0;\n    let mut prime_words_index2 = 0;\n\
    \    let mut prime_words_len_index2 = 0;\n    let mut prime_words_index3 = 0;\n\
    \    let mut prime_words_len_index3 = 0;\n    let mut prime_words_index4 = 0;\n\
    \    let mut prime_words_len_index4 = 0;\n    let mut prime_words_index5 = 0;\n\
    \    let mut prime_words_len_index5 = 0;\n    let mut prime_words_index6 = 0;\n\
    \    let mut prime_words_len_index6 = 0;\n    let mut prime_words_index7 = 0;\n\
    \    let mut prime_words_len_index7 = 0;\n    let mut prime_words_index8 = 0;\n\
    \    let mut prime_words_len_index8 = 0;\n    let mut prime_words_index9 = 0;\n\
    \    let mut prime_words_len_index9 = 0;\n    let mut prime_words_index10 = 0;\n\
    \    let mut prime_words_len_index10 = 0;\n    let mut prime_words_index11 = 0;\n\
    \    let mut prime_words_len_index11 = 0;\n    let mut prime_words_index12 = 0;\n\
    \    let mut prime_words_len_index12 = 0;\n    let mut prime_words_index13 = 0;\n\
    \    let mut prime_words_len_index13 = 0;\n    let mut prime_words_index14 = 0;\n\
    \    let mut prime_words_len_index14 = 0;\n    let mut prime_words_index15 = 0;\n\
    \    let mut prime_words_len_index15 = 0;\n    let mut prime_words_index16 = 0;\n\
    \    let mut prime_words_len_index16 = 0;\n    let mut prime_words_index17 = 0;\n\
    \    let mut prime_words_len_index17 = 0;\n    let mut prime_words_index18 = 0;\n\
    \    let mut prime_words_len_index18 = 0;\n    let mut prime_words_index19 = 0;\n\
    \    let mut prime_words_len_index19 = 0;\n    let mut prime_words_index20 = 0;\n\
    \    let mut prime_words_len_index20 = 0;\n    let mut prime_words_index21 = 0;\n\
    \    let mut prime_words_len_index21 = 0;\n    let \n}\n\nfn main() {\n    let\
    \ candidate = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmph3cvlx55.rs:63:1\n  \
    \ |\n63 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmph3cvlx55.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmph3cvlx55.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph3cvlx55.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph3cvlx55.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph3cvlx55.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph3cvlx55.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph3cvlx55.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph3cvlx55.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph3cvlx55.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph3cvlx55.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph3cvlx55.rs:72:17\n   |\n72 |     assert"
  stdout: ''
  timestamp: 1659823181
- exit_code: 1
  program: "/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"\
    This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"\
    lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n///\
    \ * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence:\
    \ String) -> String {\n    let mut primes = vec![];\n    let mut primes_set =\
    \ HashSet::new();\n    let mut primes_len = primes.len();\n    let mut primes_len\
    \ = primes_len.saturating_add((sentence.len() / 2).ceil() as usize);\n    primes_set.insert(primes_len);\n\
    \    primes_set.insert(primes_len + 1);\n    primes_set.insert(primes_len + 2);\n\
    \    primes_set.insert(primes_len + 3);\n    primes_set.insert(primes_len + 4);\n\
    \    primes_set.insert(primes_len + 5);\n    primes_set.insert(primes_len + 6);\n\
    \    primes_set.insert(primes_len + 7);\n    primes_set.insert(primes_len + 8);\n\
    \    primes_set.insert(primes_len + 9);\n    primes_set.insert(primes_len + 10);\n\
    \    primes_set.insert(primes_len + 11);\n    primes_set.insert(primes_len + 12);\n\
    \    primes_set.insert(primes_len + 13);\n    primes_set.insert(primes_len + 14);\n\
    \    primes_set.insert(primes_len + 15);\n    primes_set.insert(primes_len + 16);\n\
    \    primes_set.insert(primes_len + 17);\n    primes_set.insert(primes_len + 18);\n\
    \    primes_set.insert(primes_len + 19);\n    primes_set.insert(primes_len + 20);\n\
    \    primes_set.insert(primes_len + 21);\n    primes_set.insert(primes_len + 22);\n\
    \    primes_set.insert(primes_len + 23);\n    primes_set.insert(primes_len + 24);\n\
    \    primes_set.insert(primes_len + 25);\n    primes_set.insert(primes_len + 26);\n\
    \    primes_set.insert(primes_len + 27);\n    primes_set.insert(primes_len + 28);\n\
    \    primes_set.insert(primes_len + 29);\n    primes_set.insert(primes_len + 30);\n\
    \    primes_set.insert(primes_len + 31);\n    primes_set.insert(primes_len + 32);\n\
    \    primes_set.insert(primes_len + 33);\n    primes_set.insert(primes_len + 34);\n\
    \    primes_set.insert(primes_len + 35);\n    primes_set.insert(primes_len + 36);\n\
    \    primes_set.insert(primes_len + 37);\n    primes_set.insert(primes_len + 38);\n\
    \    primes_set.insert(primes_len + 39);\n\n}\n\nfn main() {\n    let candidate\
    \ = words_in_sentence;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfqk4je_l.rs:17:26\n   |\n17 |     let mut primes_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfqk4je_l.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfqk4je_l.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfqk4je_l.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfqk4je_l.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfqk4je_l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfqk4je_l.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfqk4je_l.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfqk4je_l.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfqk4je_l.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfqk4je_l.rs:69:25\n   |\n69 |  "
  stdout: ''
  timestamp: 1659823182
