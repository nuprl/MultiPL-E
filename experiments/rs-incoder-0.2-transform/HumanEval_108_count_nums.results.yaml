language: rs
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            cnt += x;\n        } else {\n            cnt += x - 10;\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7co2weu.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp7gwu5b7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        sum\
    \ += x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnpesb05o.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x > 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjxi6m0a.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for x in arr {\n        if\
    \ x > 0 {\n            cnt += 1;\n        }\n        if x < 0 {\n            cnt\
    \ += 1;\n            x += 10;\n        }\n    }\n    cnt\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmpt8u_q7ok.rs:19:13\n\
    \   |\n19 |             x += 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `x`\n  --> /tmp/tmpt8u_q7ok.rs:19:13\n\
    \   |\n13 |     for x in arr {\n   |         -\n   |         |\n   |         first\
    \ assignment to `x`\n   |         help: consider making this binding mutable:\
    \ `mut x`\n...\n19 |             x += 10;\n   |             ^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp7gwu5b7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num;\n        } else {\n            sum +=\
    \ num % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp9qrc1fft.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for x in arr {\n        if\
    \ x >= 0 {\n            cnt += 1;\n        } else {\n            cnt += x.checked_sub(1).unwrap();\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-4`,\n right: `0`', /tmp/tmp0nciqvoq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &i in arr {\n      \
    \  if i >= 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_x2071_0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3230h31x.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        sum\
    \ += n;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfygjd9s3.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            cnt += n / 10;\n            cnt += n % 10;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmpn9ne2wto.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n >= 0 {\n            sum += n;\n        } else {\n            sum += (-n) as\
    \ isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_rx123x.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num;\n        } else {\n            sum +=\
    \ num % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp9qrc1fft.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    let mut sum = 0;\n    for\
    \ &x in arr {\n        if x >= 0 {\n            sum += x;\n        } else {\n\
    \            sum += x * x;\n        }\n        cnt += 1;\n    }\n    cnt\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaoydo_5b.rs:14:9\n   |\n\
    14 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ sum += num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp885rxlyj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        } else {\n            sum += x * -1;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebzd12f7.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &i in arr {\n      \
    \  if i >= 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_x2071_0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += x * 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn2tsnma.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   if num < 0 {\n            count += num as isize;\n        } else {\n     \
    \       count += num / 10;\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp6n46uewl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3230h31x.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += i;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzyv37rs_.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            cnt += n / 10;\n            cnt += n % 10;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9htko8ny.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3pzbltp.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   if num < 0 {\n            count += num as isize;\n        } else {\n     \
    \       count += num as isize - 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-4`,\n right: `0`', /tmp/tmp1mx3yfs2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq55uq1uu.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += x as isize;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy8dawdjp.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaus9hrfh.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for x in arr {\n        if\
    \ x < 0 {\n            cnt += 1;\n        } else {\n            cnt += count_digits(x);\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digits` in this scope\n  -->\
    \ /tmp/tmpo6ntbbx_.rs:17:20\n   |\n17 |             cnt += count_digits(x);\n\
    \   |                    ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        } else {\n            sum += x * -1;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebzd12f7.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num;\n        } else {\n            sum +=\
    \ num % 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp9qrc1fft.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += x * 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn2tsnma.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for x in arr {\n        if\
    \ x >= 0 {\n            cnt += 1;\n        } else {\n            cnt += x.checked_sub(1).unwrap();\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-4`,\n right: `0`', /tmp/tmp0nciqvoq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            cnt += n / 10;\n            cnt += n % 10;\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9htko8ny.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n >= 0 {\n            sum += n;\n        } else {\n            sum += (-n) as\
    \ isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp2osznqhy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp7gwu5b7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3pzbltp.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n >= 0 {\n            sum += n;\n        } else {\n            sum += n * 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2nwhx56p.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &i in arr {\n      \
    \  if i >= 0 {\n            count += i;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmje4z4kg.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n < 0 {\n            sum += n;\n        } else {\n            sum += n % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_yd4lsv.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3pzbltp.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3230h31x.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp7gwu5b7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            cnt += x;\n        } else {\n            cnt += x - 10;\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7co2weu.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaus9hrfh.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += i;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzyv37rs_.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += x * 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn2tsnma.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &i in arr {\n      \
    \  if i >= 0 {\n            count += i;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmje4z4kg.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaus9hrfh.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaus9hrfh.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i < 0 {\n            sum += i;\n        } else {\n            sum += i % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryf2f_qh.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut sum = 0;\n    let mut sign = 1;\n    let mut first_digit = -1;\n\
    \    while let Some(digit) = digits.iter().next() {\n        sum += digit;\n \
    \       if sum > 0 {\n            cnt += 1;\n        }\n        if sum < 0 {\n\
    \            sum += sign;\n            first_digit = digit;\n        }\n     \
    \   sign *= -1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8u8h_2x7.rs:24:27\n   |\n\
    16 |     let mut first_digit = -1;\n   |                           -- expected\
    \ due to this value\n...\n24 |             first_digit = digit;\n   |        \
    \                   ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n24 |             first_digit = *digit;\n   |\
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3230h31x.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3230h31x.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        sum\
    \ += x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnpesb05o.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb55ilplw.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &x in arr {\n        if\
    \ x > 0 {\n            cnt += x;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp900epb9l.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n < 0 {\n            sum += n;\n        } else {\n            sum += n % 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmprwftgkd0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3pzbltp.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for n in arr {\n       \
    \ if n > 0 {\n            count += n / 10;\n            n %= 10;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `n` is never read\n  --> /tmp/tmpmqrlvkjf.rs:16:13\n\
    \   |\n16 |             n %= 10;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `n`\n  --> /tmp/tmpmqrlvkjf.rs:16:13\n\
    \   |\n13 |     for n in arr {\n   |         -\n   |         |\n   |         first\
    \ assignment to `n`\n   |         help: consider making this binding mutable:\
    \ `mut n`\n...\n16 |             n %= 10;\n   |             ^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &x in arr {\n      \
    \  if x >= 0 {\n            count += x;\n        } else {\n            count +=\
    \ x - 10;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4miywijs.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ sum += num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp885rxlyj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        sum\
    \ += n;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfygjd9s3.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for num in arr {\n       \
    \ if num < 0 {\n            sum += num as isize;\n        } else {\n         \
    \   sum += num % 10 as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmpae8l3jmn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        } else {\n            sum += x * -1;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebzd12f7.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += x * 10;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn2tsnma.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x > 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjxi6m0a.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp7gwu5b7q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            cnt += 1;\n        } else {\n            cnt += x.checked_sub(1).unwrap();\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqgcoam2z.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n >= 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq55uq1uu.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for n in arr {\n        if\
    \ n > 0 {\n            cnt += n;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmpa8dcfywn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x < 0 {\n            sum += x;\n        } else {\n            sum += *x;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0tvl7zm.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            cnt += i;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzyv37rs_.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for num in arr {\n     \
    \   if num < 0 {\n            count += num as isize;\n        } else {\n     \
    \       count += num as isize - 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-4`,\n right: `0`', /tmp/tmp1mx3yfs2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for n in arr {\n       \
    \ if n < 0 {\n            count += (-n).leading_digits();\n        } else {\n\
    \            count += n;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `leading_digits` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpp61o1116.rs:15:27\n   |\n15 |             count\
    \ += (-n).leading_digits();\n   |                           ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `leading_ones`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb55ilplw.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n >= 0 {\n            sum += n;\n        } else {\n            sum += (-n) as\
    \ isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_rx123x.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3pzbltp.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqpkk1cn.rs:12:31\n   |\n\
    12 |     arr.iter().filter(|x| x > 0).count()\n   |                          \
    \     ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqpkk1cn.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) ->\
    \ isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n12 |     arr.iter().filter(|x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        sum\
    \ += n;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfygjd9s3.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for &n in arr {\n        if\
    \ n > 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb55ilplw.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &x in arr {\n        if\
    \ x >= 0 {\n            sum += x;\n        } else {\n            sum += x * -1;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebzd12f7.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuemwuaab.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in arr {\n        sum\
    \ += n;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfygjd9s3.rs:13:9\n   |\n\
    13 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &i in arr {\n      \
    \  if i >= 0 {\n            count += i;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmje4z4kg.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        sum\
    \ += n;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = count_nums;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `0`', /tmp/tmp8a06ikhi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in arr {\n        if\
    \ i >= 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaiwu6vse.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for &x in arr {\n      \
    \  if x >= 0 {\n            count += x;\n        } else {\n            count +=\
    \ x + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpytm0byyl.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in arr {\n        if\
    \ n >= 0 {\n            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `6`', /tmp/tmp0ulij2ow.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1,\
    \ 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr:\
    \ Vec<isize>) -> isize {\n    arr.iter().filter(|&x| x > 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9b0rjhuj.rs:12:32\n   |\n\
    12 |     arr.iter().filter(|&x| x > 0).count()\n   |                         \
    \       ^\n   |                                |\n   |                       \
    \         expected `&isize`, found integer\n   |                             \
    \   help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9b0rjhuj.rs:12:5\n   |\n11 | fn count_nums(arr: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n12 |     arr.iter().filter(|&x| x > 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().filter(|&x|\
    \ x > 0).count().try_into().unwrap()\n   |                                   \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011235
