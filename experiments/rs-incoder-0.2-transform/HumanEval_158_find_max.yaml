name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\"\
  )\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"\
  game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"\
  ), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\n\
  fn find_max(words: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut unique_chars = HashMap::new();\n    let mut max_chars =\
    \ String::new();\n    for word in words {\n        for c in word.chars() {\n \
    \           if !unique_chars.contains_key(&c) {\n                unique_chars.insert(c,\
    \ 1);\n            } else {\n                unique_chars.entry(c).or_insert(0)\
    \ += 1;\n            }\n        }\n        if unique_chars.len() > max_chars.len()\
    \ {\n            max_chars = word;\n        }\n    }\n    max_chars", "    let\
    \ mut counters = HashMap::new();\n    for word in words {\n        if let Some(count)\
    \ = counters.get(&word) {\n            *count += 1;\n        } else {\n      \
    \      counters.insert(word.clone(), 1);\n        }\n    }\n    let mut max_count\
    \ = counters.iter().max().unwrap();\n    let mut max_word = String::new();\n \
    \   for word in counters {\n        if *word == max_count {\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut i = 0;\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n        if i == words.size() - 1 {\n            break;\n\
    \        }\n        i += 1;\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counter.get(&word) {\n\
    \            if count > 1 {\n                counter.insert(word, 1);\n      \
    \      } else {\n                counter.insert(word, count + 1);\n          \
    \  }\n        } else {\n            counter.insert(word, 1);\n        }\n    }\n\
    \    let mut max_word = String::new();\n    let mut max_count = counter.get(&max_word);\n\
    \    for word in counter {\n        if counter.get(&word) > max_count {\n    \
    \        max_word = word;\n            max_count = counter.get(&word);\n     \
    \   }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ c in max_counters.keys() {\n        if *c > max_counters.entry(c).or_insert(0)\
    \ {\n            max_counters.entry(c).or_insert(0) = *c;\n            max_key\
    \ = c;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ c.chars().count();\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, value) in max_counters.iter() {\n        if\
    \ value > max_counters.get(&key).unwrap() {\n            max_counters.insert(key,\
    \ value);\n            max_key = key;\n        }\n    }\n    max_key", "    let\
    \ mut counters = HashMap::new();\n    for word in words {\n        if let Some(count)\
    \ = counters.get(&word) {\n            counters.insert(word, count + 1);\n   \
    \     } else {\n            counters.insert(word, 1);\n        }\n    }\n    let\
    \ mut max_word = String::new();\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    for (_, count) in counters {\n        if count == max_count {\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = std::i32::MAX;\n        for c in word.chars() {\n\
    \            if *c != ' ' {\n                count += 1;\n            }\n    \
    \    }\n        if count > max_count {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n  \
    \  let mut max_word = String::new();\n    for counter in counters.iter() {\n \
    \       if *counter > max_counter {\n            max_counter = *counter;\n   \
    \         max_word = words[counters.iter().position(|&(_, count)| count == max_counter).unwrap()];\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for (counter, word) in counters.iter().cloned().sort_by(|a,\
    \ b| b.cmp(&a)) {\n        if *counter > max_counters.len() {\n            max_counters\
    \ = counters;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut counters = HashMap::new();\n    for word in words {\n        counters.insert(word.chars().count(),\
    \ 1);\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let count = counters.get(&word.chars().count()).unwrap();\n\
    \        if count > max_counters.get(&count).unwrap() {\n            max_counters.insert(count,\
    \ 1);\n            max_word = word;\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::cmp::Ordering::Equal;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::cmp::Ordering::Equal;\n        for c in word.chars() {\n      \
    \      if *c != c.to_ascii_lowercase() {\n                count = std::cmp::Ordering::Less;\n\
    \                break;\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        counters.entry(word.chars().count()).or_insert(0) += 1;\n \
    \   }\n    let mut max_counter = counters.iter().max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if counters[word.chars().count()]\
    \ > max_counter {\n            max_counter = counters[word.chars().count()];\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        counters.insert(word.chars().count(),\
    \ 1);\n    }\n    let mut max_count = counters.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for (_, count) in counters {\n        if\
    \ count == max_count {\n            max_word = word;\n            break;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for (counter, word) in counters.iter().take_while(|&(_,\
    \ count)| count > max_counters.len()) {\n        max_counters = max_counters.entry(counter).or_insert(0);\n\
    \        max_word = word;\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut unique_chars\
    \ = HashMap::new();\n    let mut max_chars = String::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.len() > max_chars.len() {\n      \
    \      max_chars = word;\n        }\n    }\n    max_chars", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    let mut max_chars = String::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains_key(&c) {\n     \
    \           unique_chars.insert(c, 1);\n            } else {\n               \
    \ unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n       \
    \ if unique_chars.len() > max_chars.len() {\n            max_chars = word;\n \
    \       }\n    }\n    max_chars", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.insert(word.chars().count(), 1);\n\
    \    }\n    let mut max_counters = counters.clone();\n    let mut max_word = String::new();\n\
    \    let mut max_word_len = String::new();\n    for word in words {\n        let\
    \ mut counters = HashMap::new();\n        for c in word.chars() {\n          \
    \  counters.insert(c, 1);\n        }\n        if counters.len() > max_counters.len()\
    \ {\n            max_counters = counters;\n            max_word = word;\n    \
    \        max_word_len = word.len();\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((*c).to_ascii_lowercase());\n\
    \        }\n        if count.len() > max_count.len() {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut unique_chars = HashMap::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains_key(&c) {\n     \
    \           unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_chars = unique_chars.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in unique_chars.keys() {\n \
    \       if unique_chars[c] == max_chars {\n            max_word = word;\n    \
    \        break;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        counters.entry(word.chars().count()).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_count = counters.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for word in words {\n        if counters.entry(word.chars().count()).or_insert(0)\
    \ >= max_count {\n            max_count = counters.iter().max().unwrap();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counter.get(&word) {\n            if count > 1 {\n           \
    \     counter.insert(word, count + 1);\n            } else {\n               \
    \ counter.insert(word, 1);\n            }\n        } else {\n            counter.insert(word,\
    \ 1);\n        }\n    }\n    let mut max_word = String::new();\n    let mut max_count\
    \ = counter.get(&max_word).unwrap();\n    for word in counter {\n        if counter.get(&word).unwrap()\
    \ > max_count {\n            max_word = word;\n            max_count = counter.get(&word).unwrap();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in &words {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in &words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        let mut counter = counters.get(&word);\n        if\
    \ counter == None {\n            counter = counters.entry(word).or_insert(0);\n\
    \        }\n        *counter += 1;\n        counters.insert(word, *counter);\n\
    \    }\n    let mut max_counter = counters.iter().max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for counter in counters.iter() {\n        if\
    \ *counter > max_counter {\n            max_counter = *counter;\n            max_word\
    \ = counter.key;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n  \
    \  let mut max_word = String::new();\n    for counter in counters {\n        if\
    \ *counter > max_counter {\n            max_counter = *counter;\n            max_word\
    \ = words[counters.iter().position(|&x| x == max_counter).unwrap()];\n       \
    \ }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        if let Some(count) = counters.get(&word) {\n           \
    \ if *count > word.chars().count() {\n                counters.insert(word, 1);\n\
    \            } else {\n                counters.entry(*count).or_insert(0) +=\
    \ 1;\n            }\n        } else {\n            counters.insert(word, 1);\n\
    \        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n \
    \   let mut max_word = String::new();\n    for (_, count) in counters.iter() {\n\
    \        if *count > max_count {\n            max_count = *count;\n          \
    \  max_word = words[counters.iter().position(|&(_, count)| count > max_count).unwrap()];\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n  \
    \  let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ c.chars().count();\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        counters.insert(word.chars().count(),\
    \ 1);\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    let mut max_word_len = String::new();\n    for (_, count)\
    \ in &mut counters {\n        if *count > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n            max_word_len\
    \ = String::new();\n        }\n        if *count == max_counters.len() {\n   \
    \         max_counters.entry(*count).or_insert(0) += 1;\n            if max_counters.len()\
    \ > 1 {\n                max_word_len = max_counters.entry(*max_counters.len()\
    \ - 1).or_insert(0);\n            }\n        }\n    }\n    if max_counters.len()\
    \ > 1 {\n        max_word_len = max_counters.entry(*max_counters.len() - 1).or_insert(0);\n\
    \    }\n    if max_word_len > 1 {\n        max_word = max_counters.entry(*max_word_len).or_insert(0);\n\
    \    }\n    if max_word == \"\" {\n        max_word = String::from(\"zzz\");\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for w in words {\n        if w.chars().count()\
    \ > max_count {\n            max_count = w.chars().count();\n            max_word\
    \ = w;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if *value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        if let Some(count) = counters.get(&word) {\n  \
    \          *count += 1;\n        } else {\n            counters.insert(word.clone(),\
    \ 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if *count > max_count {\n            max_count = *count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    if max_count.len()\
    \ > 1 {\n        let mut max_count = std::collections::HashSet::new();\n     \
    \   for word in words {\n            let mut count = std::collections::HashSet::new();\n\
    \            for c in word.chars() {\n                count.insert((c, 1));\n\
    \            }\n            if count.len() > max_count.len() {\n             \
    \   max_count = count;\n                max_word = word;\n            }\n    \
    \    }\n        return max_word;\n    }\n    String::new()", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counters.iter() {\n        if *value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    let mut max_word_len = String::new();\n    for (counter,\
    \ word) in counters.iter().cloned().sort_by(|a, b| b.cmp(&a)) {\n        if *counter\
    \ > max_counters.entry(word).or_insert(0) {\n            max_counters = max_counters.entry(word).or_insert(0);\n\
    \            max_word = word;\n            max_word_len = word.len();\n      \
    \  }\n    }\n    max_word", "    let mut counter = HashMap::new();\n    for word\
    \ in words {\n        if let Some(count) = counter.get(&word) {\n            if\
    \ count > 1 {\n                counter.insert(word, count + 1);\n            }\
    \ else {\n                counter.insert(word, 1);\n            }\n        } else\
    \ {\n            counter.insert(word, 1);\n        }\n    }\n    let mut max_word\
    \ = String::new();\n    let mut max_count = counter.get(&max_word).unwrap();\n\
    \    for word in counter {\n        if counter.get(&word).unwrap() > max_count\
    \ {\n            max_count = counter.get(&word).unwrap();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::i32::MAX;\n\
    \        for c in word.chars() {\n            count += 1;\n        }\n       \
    \ if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        counter.insert(word.chars().count(), 1);\n \
    \   }\n    let mut max_key = counter.keys().iter().max().unwrap();\n    let mut\
    \ max_value = counter.values().iter().max().unwrap();\n    let mut max_word =\
    \ String::new();\n    for k in &mut max_key {\n        if counter[k] == max_value\
    \ {\n            max_word = words[*k].clone();\n        }\n    }\n    max_word",
  "    let mut counts = HashMap::new();\n    for word in words {\n        let mut\
    \ count = counts.entry(word.clone()).or_insert(0);\n        *count += 1;\n   \
    \ }\n    let mut max_count = counts.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for count in counts.iter() {\n        if *count > max_count\
    \ {\n            max_count = *count;\n            max_word = count.key;\n    \
    \    }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        if let Some(count) = counters.get(&word) {\n            counters.insert(word,\
    \ count + 1);\n        } else {\n            counters.insert(word, 1);\n     \
    \   }\n    }\n    let mut max_word = String::new();\n    let mut max_count = counters.iter().max_by_key(|&(_,\
    \ count)| count).unwrap();\n    for (_, count) in counters {\n        if count\
    \ == max_count {\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut counter = HashMap::new();\n    for word in words {\n        counter.insert(word.chars().distinct().count(),\
    \ 1);\n    }\n    let mut max_key = counter.keys().max_by_key(|&key| counter[key]);\n\
    \    if max_key.is_none() {\n        return String::new();\n    }\n    let mut\
    \ max_value = counter[&max_key];\n    for word in words {\n        if counter.contains_key(&word.chars().distinct().count())\
    \ {\n            if counter[&word] > max_value {\n                max_value =\
    \ counter[&word];\n                max_key = word;\n            }\n        }\n\
    \    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_ascii_lowercase());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut counters =\
    \ HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  for (counter, word) in counters.iter().cloned().sort_by_key(|(_, count)| {\n\
    \        count.cmp(&max_counters.get(&c).unwrap())\n    }) {\n        max_counters.entry(counter).or_insert(0)\
    \ -= 1;\n        if max_counters.get(&c).unwrap() == 0 {\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ *max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = *max_counters[c];\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counter.get(&word) {\n\
    \            if count > 1 {\n                counter.insert(word, 1);\n      \
    \      } else {\n                counter.insert(word, count + 1);\n          \
    \  }\n        } else {\n            counter.insert(word, 1);\n        }\n    }\n\
    \    let mut max_word = String::new();\n    let mut max_count = -1;\n    for (_,\
    \ count) in counter.iter() {\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = String::from(word);\n        }\n    }\n   \
    \ max_word", "    let mut unique_chars = HashMap::new();\n    let mut max_chars\
    \ = String::new();\n    let mut max_word = String::new();\n\n    for word in words\
    \ {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 1);\n            } else {\n      \
    \          unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n\
    \    }\n\n    for entry in unique_chars.iter() {\n        if entry.value >= max_chars.len()\
    \ {\n            max_chars = entry.key;\n            max_word = entry.value;\n\
    \        }\n    }\n\n    max_chars", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for counter in &mut max_counters {\n        if *counter\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n        if *counter > max_counters.entry(*counter).or_insert(0)\
    \ {\n            max_counters.entry(*counter).or_insert(0) = *counter;\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        if let Some(count) = counter.entry(word.clone()).or_insert(0)\
    \ {\n            *count += 1;\n        }\n    }\n    let mut max_count = counter.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in counter.iter() {\n   \
    \     if *word.value >= max_count {\n            max_count = *word.value;\n  \
    \          max_word = word.key;\n        }\n    }\n    max_word", "    let mut\
    \ max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for index in 0..words.len() {\n        if words[index].chars().count()\
    \ > max_count {\n            max_count = words[index].chars().count();\n     \
    \       max_word = words[index];\n            max_index = index;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            *count += 1;\n        } else {\n            counters.insert(word.clone(),\
    \ 1);\n        }\n    }\n    let mut max_word = String::new();\n    let mut max_count\
    \ = counters.iter().max().unwrap();\n    for (_, count) in counters.iter_mut()\
    \ {\n        *count = *count - 1;\n        if *count > max_count {\n         \
    \   max_count = *count;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut counter = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counter.get(&word) {\n            if count > 1 {\n           \
    \     return word;\n            }\n            counter.insert(word, 1);\n    \
    \    } else {\n            counter.insert(word, 1);\n        }\n    }\n    let\
    \ mut max_word = String::new();\n    let mut max_count = counter.get(&max_word).unwrap();\n\
    \    for word in counter {\n        if counter.get(&word).unwrap() > max_count\
    \ {\n            max_count = counter.get(&word).unwrap();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(*c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words[0].chars().count();\n  \
    \  let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n    \
    \    if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  for c in counters.keys() {\n        if counters[c] > max_counters[c] {\n  \
    \          max_counters[c] = counters[c];\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let\
    \ mut max_word = String::new();\n    for word in words {\n        let count =\
    \ word.chars().filter(|c| !c.is_whitespace()).count();\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            counters.insert(word, count + 1);\n        } else {\n           \
    \ counters.insert(word, 1);\n        }\n    }\n    let mut max_key = String::new();\n\
    \    let mut max_value = String::new();\n    for (key, value) in counters {\n\
    \        if value > max_value.len() {\n            max_value = key;\n        \
    \    max_key = key;\n        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for (_, count) in max_counters.iter_mut().take(1) {\n\
    \        if *count > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_word = String::new();\n        }\n    }\n    for (_, count) in\
    \ max_counters.iter_mut().take(1) {\n        *count -= 1;\n        if *count ==\
    \ 0 {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        counter.insert(word.chars().count(), 1);\n    }\n \
    \   let mut max_key = counter.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_value = max_key.0;\n    let mut max_word = String::new();\n \
    \   for word in words {\n        if word.chars().count() == max_value {\n    \
    \        max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (_, count) in max_counters.iter() {\n        if count > max_counters.get(&max_key).unwrap().unwrap()\
    \ {\n            max_counters.insert(max_key, count);\n            max_key = String::new();\n\
    \        }\n    }\n    if max_counters.len() == 1 {\n        max_key\n    } else\
    \ {\n        let mut max_key = String::new();\n        let mut max_value = max_counters.get(&max_key).unwrap().unwrap();\n\
    \        for (key, value) in max_counters.iter() {\n            if value > max_value\
    \ {\n                max_value = value;\n                max_key = key;\n    \
    \        }\n        }\n        max_key\n    }", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        if\
    \ word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  let mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n\
    \        if v > max_counters.len() {\n            max_counters = v;\n        \
    \    max_word = word;\n            max_key = c;\n        }\n    }\n    max_word",
  "    let mut counters = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counters.get(&word) {\n            if count > 1 {\n          \
    \      counters.insert(word, count - 1);\n            }\n        } else {\n  \
    \          counters.insert(word, 1);\n        }\n    }\n    let mut max_word =\
    \ String::new();\n    let mut max_count = counters.iter().max().unwrap();\n  \
    \  for (_, count) in counters {\n        if count == max_count {\n           \
    \ max_word = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            if *count > 1 {\n                return word;\n            }\n  \
    \          counters.insert(word, 1);\n        } else {\n            counters.insert(word,\
    \ 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if *count > max_count {\n            max_count = *count;\n            max_word\
    \ = words[counters.iter().position(|&(_, count)| count > max_count).unwrap()];\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(\"\");\n        }\n\
    \        if value == max_value + 1 {\n            max_key = String::from(&max_key);\n\
    \        }\n    }\n    max_key", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for k in counter.keys() {\n        if\
    \ counter[k] == max_value {\n            max_key = k;\n        }\n    }\n    max_key",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::from(\"\");\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_word = c;\n        }\n    }\n    max_word",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            unique_chars.insert(c,\
    \ 1);\n        }\n    }\n    let mut max_chars = unique_chars.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in unique_chars.keys() {\n \
    \       if *c > max_chars {\n            max_chars = *c;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            counters.insert(word, count + 1);\n        } else {\n           \
    \ counters.insert(word, 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if count == max_count {\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counters.get(&word) {\n            counters.insert(word, count\
    \ + 1);\n        } else {\n            counters.insert(word, 1);\n        }\n\
    \    }\n    let mut max_word = String::new();\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    for (_, count) in counters {\n        if count == max_count {\n         \
    \   max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().filter(|c| !c.is_whitespace()).count();\n\
    \        if count > max_count.len() {\n            max_count = count;\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        if let Some(count) = counters.get(&word)\
    \ {\n            counters.insert(word, count + 1);\n        } else {\n       \
    \     counters.insert(word, 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in counters {\n        if\
    \ counters[word] == max_count {\n            max_word = word;\n        }\n   \
    \ }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::i32::MAX;\n\
    \        for c in word.chars() {\n            if *c != c.to_ascii_lowercase()\
    \ {\n                count += 1;\n            }\n        }\n        if count >\
    \ max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        if let Some(count) = counter.get(&word) {\n   \
    \         if count > 1 {\n                counter.insert(word, 1);\n         \
    \   } else {\n                counter.insert(word, count + 1);\n            }\n\
    \        } else {\n            counter.insert(word, 1);\n        }\n    }\n  \
    \  let mut max_word = String::new();\n    let mut max_count = counter.get(&max_word).unwrap();\n\
    \    for word in counter {\n        if counter.get(&word).unwrap() > max_count\
    \ {\n            max_word = word;\n            max_count = counter.get(&word).unwrap();\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        let mut counter = counters.entry(word.clone()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max_key = String::new();\n    let\
    \ mut max_value = counters.entry(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = 0;\n    let mut max_word\
    \ = String::new();\n    for c in counters.keys() {\n        if counters[c] > max_counter\
    \ {\n            max_counter = counters[c];\n            max_word = c;\n     \
    \   }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        counters.insert(word.chars().count(), 1);\n    }\n\
    \    let mut max_count = counters.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for count in counters.iter() {\n        if *count > max_count\
    \ {\n            max_count = *count;\n            max_word = words[counters.iter().position(|&(_,\
    \ count)| count == max_count).unwrap()];\n        }\n    }\n    max_word", " \
    \   let mut unique_chars = HashMap::new();\n    let mut max_chars = String::new();\n\
    \    for word in words {\n        for char in word.chars() {\n            unique_chars.entry(char).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.len() > max_chars.len() {\n      \
    \      max_chars = unique_chars.clone();\n        }\n        unique_chars.clear();\n\
    \    }\n    if unique_chars.len() > max_chars.len() {\n        max_chars = unique_chars.clone();\n\
    \    }\n    max_chars", "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_word = words.iter().find(|w|\
    \ w.chars().count() == max_count).unwrap();\n    for word in words {\n       \
    \ if word.chars().count() == max_count {\n            max_count = words.iter().map(|w|\
    \ w.chars().count()).max().unwrap();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ let count = word.chars().count();\n        if count > max_count {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_chars = unique_chars.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in max_chars.chars() {\n   \
    \     if !max_word.contains(&c) {\n            max_word.push(c);\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            *count += 1;\n        } else {\n            counters.insert(word.clone(),\
    \ 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if *count > max_count {\n            max_count = *count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        counter.insert(word.chars().count(), 1);\n    }\n\
    \    let mut max_key = counter.keys().max().unwrap();\n    let mut max_value =\
    \ counter.values().max().unwrap();\n    let mut max_word = String::new();\n  \
    \  for k in counter.keys() {\n        if counter[k].unwrap() == max_value {\n\
    \            max_word = words[k].clone();\n            break;\n        }\n   \
    \ }\n    max_word", "    let mut max_count = words[0].chars().count();\n    let\
    \ mut max_word = words[0];\n    for word in words.iter() {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n        if max_counters[c] > 0 {\n\
    \            max_counters.entry(c).or_insert(0) -= 1;\n        }\n    }\n    max_word",
  "    let mut counters = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counters.get(&word) {\n            if count > 1 {\n          \
    \      return word;\n            }\n            counters.insert(word, 1);\n  \
    \      } else {\n            counters.insert(word, 1);\n        }\n    }\n   \
    \ let mut max_count = counters.iter().max().unwrap();\n    let mut max_word =\
    \ String::new();\n    for word in counters {\n        if counters[word] == max_count\
    \ {\n            max_word = word;\n        }\n    }\n    max_word", "    let mut\
    \ max_count = words[0].chars().count();\n    let mut max_word = words[0];\n  \
    \  for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 1);\n            } else {\n      \
    \          unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n\
    \    }\n    let mut max_chars = unique_chars.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_word = String::new();\n    for c in max_chars.key() {\n     \
    \   if !max_word.contains(&c) {\n            max_word.push_str(&c);\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counter.get(&word) {\n\
    \            if *count > word.chars().count() {\n                counter.insert(word,\
    \ 1);\n            } else {\n                counter.insert(word, *count + 1);\n\
    \            }\n        } else {\n            counter.insert(word, 1);\n     \
    \   }\n    }\n    let mut max_word = String::new();\n    let mut max_count = -1;\n\
    \    for (word, count) in counter.iter() {\n        if *count > max_count {\n\
    \            max_count = *count;\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut max_count =\
    \ std::collections::HashSet::new();\n    let mut max_word = String::new();\n \
    \   for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((*c).to_ascii_lowercase());\n\
    \        }\n        if count.len() > max_count.len() {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        if let Some(count) = counters.get(&word)\
    \ {\n            counters.insert(word, count + 1);\n        } else {\n       \
    \     counters.insert(word, 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if count == max_count {\n            max_word = word;\n            break;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words {\n        let count = word.chars().count();\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut unique_chars = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_chars = unique_chars.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in unique_chars.keys() {\n \
    \       if unique_chars[c] > max_chars {\n            max_chars = unique_chars[c];\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        if let Some(count) = counters.get(&word)\
    \ {\n            if count > 1 {\n                counters.insert(word, count +\
    \ 1);\n            } else {\n                counters.insert(word, 1);\n     \
    \       }\n        } else {\n            counters.insert(word, 1);\n        }\n\
    \    }\n    let mut max_word = String::new();\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    for word in counters {\n        if counters[word] == max_count {\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ count += 1;\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.insert(word.chars().count(), 1);\n\
    \    }\n    let mut max_counters = counters.clone();\n    let mut max_word = String::new();\n\
    \    for counter in &mut counters {\n        if *counter > max_counters.len()\
    \ {\n            max_counters = counter;\n            max_word = word;\n     \
    \   }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for (counter, word) in counters.iter().take_while(|(_,\
    \ count)| count > max_counters.len()) {\n        max_counters = max_counters.clone();\n\
    \        max_word = word;\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        if let Some(count) = counter.get(&word) {\n            if count >\
    \ 1 {\n                return word;\n            }\n            counter.insert(word,\
    \ 1);\n        } else {\n            counter.insert(word, 1);\n        }\n   \
    \ }\n    let mut max_word = String::new();\n    let mut max_count = counter.get(&max_word).unwrap();\n\
    \    for word in counter {\n        if counter.get(&word).unwrap() > max_count\
    \ {\n            max_word = word;\n            max_count = counter.get(&word).unwrap();\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        if let Some(count) = counters.get(&word) {\n \
    \           *count += 1;\n        } else {\n            counters.insert(word.clone(),\
    \ 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (_, count) in counters {\n   \
    \     if *count > max_count {\n            max_count = *count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (key, value) in max_counters.iter() {\n        if value > max_counters.get(&key).unwrap()\
    \ {\n            max_counters.insert(key, value);\n            max_word = key;\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_word = String::new();\n        }\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n    }\n    for c in max_counters.keys()\
    \ {\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n        }\n    }\n\
    \    for c in max_counters.keys() {\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \        }\n    }\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n    }\n    for c in max_counters.keys()\
    \ {\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n        }\n    }\n\
    \    for c in max_counters.keys() {\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \        }\n    }\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n    }\n    for c in max_counters.keys()\
    \ {\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = HashMap::new();\n            max_word = String::new();\n        }\n    }\n\
    \    for c in max_counters.keys() {\n        if max_counters[c] > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \        }\n    }\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n    }\n    for c in max_counters.keys()\
    \ {\n        if max_counters[c] > max_counters.len() {\n            max_counters\
    \ = ", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        if let Some(count) = counters.get(&word) {\n            *count +=\
    \ 1;\n        } else {\n            counters.insert(word.clone(), 1);\n      \
    \  }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for (_, count) in counters {\n        if\
    \ *count > max_count {\n            max_count = *count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        counters.insert(word.chars().distinct().count(), 1);\n    }\n\
    \    let mut max_counters = counters.clone();\n    let mut max_word = String::new();\n\
    \    for counter in &mut max_counters {\n        if *counter > max_counters.len()\
    \ {\n            max_counters = counter;\n            max_word = counter.key().to_string();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys().cloned() {\n   \
    \     if counters[c] > max_counters[c] {\n            max_counters[c] = counters[c];\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counter = 0;\n    let mut max_word = String::new();\n    for counter in\
    \ counters {\n        if counter > max_counter {\n            max_counter = counter;\n\
    \            max_word = counters.key(counter);\n        }\n    }\n    max_word",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        counter.insert(word.chars().count(), 1);\n    }\n\
    \    let mut max_count = counter.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        if counter.iter().any(|&(_,\
    \ count)| count == max_count) {\n            max_count = counter.iter().max().unwrap();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counter = HashMap::new();\n    for\
    \ word in words {\n        if let Some(count) = counter.get(&word) {\n       \
    \     if count > 1 {\n                counter.insert(word, 1);\n            }\
    \ else {\n                counter.insert(word, count + 1);\n            }\n  \
    \      } else {\n            counter.insert(word, 1);\n        }\n    }\n    let\
    \ mut max_word = String::new();\n    let mut max_count = counter.get(&max_word).unwrap();\n\
    \    for word in counter {\n        if let Some(count) = counter.get(&word) {\n\
    \            if count > max_count {\n                max_count = count;\n    \
    \            max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max_count = std::i32::MAX;\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::i32::MAX;\n        for\
    \ c in word.chars() {\n            if *c != c.to_ascii_lowercase() {\n       \
    \         count += 1;\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counter = 0;\n    let mut max_word = String::new();\n    for c in counters.keys()\
    \ {\n        if counters[c] > max_counter {\n            max_counter = counters[c];\n\
    \            max_word = c.to_string();\n        }\n    }\n    max_word", "   \
    \ let mut counters = HashMap::new();\n    for word in words {\n        if let\
    \ Some(count) = counters.get(&word) {\n            if count > 1 {\n          \
    \      counters.insert(word, count + 1);\n            } else {\n             \
    \   counters.insert(word, 1);\n            }\n        } else {\n            counters.insert(word,\
    \ 1);\n        }\n    }\n    let mut max_word = String::new();\n    let mut max_count\
    \ = counters.iter().max().unwrap();\n    for (_, count) in counters {\n      \
    \  if count == max_count {\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut max_count = std::collections::HashSet::new();\n  \
    \  let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    let mut max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).next();\n    while max_word.chars().count()\
    \ > 0 {\n        max_count -= 1;\n        max_word = words.iter().filter(|word|\
    \ word.chars().count() == max_count).next();\n    }\n    max_word", "    let mut\
    \ unique_chars = HashMap::new();\n    let mut max_chars = String::new();\n   \
    \ let mut max_word = String::new();\n\n    for word in words {\n        for c\
    \ in word.chars() {\n            if !unique_chars.contains_key(&c) {\n       \
    \         unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n\n        if unique_chars.values().iter().max().unwrap() >\
    \ unique_chars.values().len() {\n            max_chars = word;\n            max_word\
    \ = word;\n        } else {\n            max_chars = max_chars.chars().collect::<String>().join(\"\
    \");\n            if max_chars == word {\n                max_word = word;\n \
    \           }\n        }\n    }\n\n    max_chars", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        if let Some(count) = counters.get(&word) {\n      \
    \      counters.insert(word, count + 1);\n        } else {\n            counters.insert(word,\
    \ 1);\n        }\n    }\n    let mut max_word = String::new();\n    let mut max_count\
    \ = counters.iter().max().unwrap();\n    for (_, count) in counters.iter_mut()\
    \ {\n        if *count > max_count {\n            max_count = *count;\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in &words {\n        if word.chars().count() > max_count {\n            max_count\
    \ = word.chars().count();\n            max_word = word;\n        }\n    }\n  \
    \  max_word", "    let mut counters = HashMap::new();\n    for word in words {\n\
    \        if let Some(count) = counters.get(&word) {\n            if *count > 1\
    \ {\n                return word;\n            }\n            counters.entry(word).or_insert(0)\
    \ += 1;\n        } else {\n            counters.insert(word, 1);\n        }\n\
    \    }\n    let mut max_count = counters.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for (_, count) in counters {\n        if *count >= max_count\
    \ {\n            max_count = count;\n            max_word = words[counters.iter().position(|&(_,\
    \ count)| count >= max_count).unwrap()]\n        }\n    }\n    max_word", "  \
    \  let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for word\
    \ in words {\n        let count = word.chars().count();\n        if count == max_count\
    \ {\n            if max_index == -1 || count < words[max_index].chars().count()\
    \ {\n                max_word = word;\n                max_index = max_word.chars().count();\n\
    \            }\n        } else {\n            max_count = count;\n           \
    \ max_word = word;\n            max_index = word.chars().count();\n        }\n\
    \    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word"]
stop_tokens:
- "\n}"
