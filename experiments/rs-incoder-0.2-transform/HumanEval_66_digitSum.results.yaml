language: rs
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' as isize;\n        } else {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmp1ycb9hua.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c > '9'\
    \ {\n            sum += c - '0';\n        } else {\n            sum += c - 'a'\
    \ + 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp9toiarht.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0369]: cannot\
    \ subtract `char` from `char`\n  --> /tmp/tmp9toiarht.rs:23:22\n   |\n23 |   \
    \          sum += c - 'a' + 10;\n   |                    - ^ --- char\n   |  \
    \                  |\n   |                    char\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpqrgrx6d8.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmprsi1d5pn.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnt6tqf2h.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnt6tqf2h.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpnt6tqf2h.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpqrgrx6d8.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum::<isize>()\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0aao_ai.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum::<isize>()\n   |     \
    \                          ^^^\n   |                               |\n   |   \
    \                            expected `&char`, found `char`\n   |            \
    \                   help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf0aao_ai.rs:18:43\n   |\n18 |     s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum::<isize>()\n   |                                 \
    \          ^^^\n   |                                           |\n   |       \
    \                                    expected `&char`, found `char`\n   |    \
    \                                       help: consider borrowing here: `&'Z'`\n\
    \nerror[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpf0aao_ai.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum::<isize>()\n\
    \     |                                                ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpqrgrx6d8.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnt6tqf2h.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnt6tqf2h.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpnt6tqf2h.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpqrgrx6d8.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnt6tqf2h.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnt6tqf2h.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpnt6tqf2h.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpqrgrx6d8.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpe7c6ttj4.rs:18:50\n     |\n18   |     s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n\
    \     |                                                  ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            sum\
    \ += c - 'a' + 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmphg92bm8h.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0369]: cannot\
    \ subtract `char` from `char`\n  --> /tmp/tmphg92bm8h.rs:23:22\n   |\n23 |   \
    \          sum += c - 'a' + 10;\n   |                    - ^ --- char\n   |  \
    \                  |\n   |                    char\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9_xc2hxs.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9_xc2hxs.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp9_xc2hxs.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpvdjacm44.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpvdjacm44.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' as isize;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpdzct6v6n.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' + 10;\n        } else {\n        \
    \    sum += c;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyu9b4m9x.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpyu9b4m9x.rs:23:17\n \
    \  |\n23 |             sum += c;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' as isize;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpdzct6v6n.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            sum += c - 'A' as isize;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpdzct6v6n.rs:21:22\n\
    \   |\n21 |             sum += c - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        } else {\n            break;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpnp15xkvg.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0'\
    \ && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpbg5u0b7i.rs:21:22\n\
    \   |\n21 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnt6tqf2h.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnt6tqf2h.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpnt6tqf2h.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    s.chars().filter(|c| c >= '0' && c <= '9').sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe44cr3eq.rs:18:31\n   |\n\
    18 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe44cr3eq.rs:18:43\n   |\n18 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpe44cr3eq.rs:18:48\n\
    \     |\n18   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmp06uv4dw_.rs:21:17\n\
    \   |\n21 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"\
    ))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"\
    helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n///\
    \ >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) ->\
    \ isize {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpd9oj1v4v.rs:20:14\n   |\n20 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpd9oj1v4v.rs:21:17\n   |\n21 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010674
