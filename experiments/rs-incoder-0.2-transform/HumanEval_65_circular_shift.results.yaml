language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n        let digit = c.to_digit(10);\n        let digit = if digit < 10\
    \ { digit + shift } else { digit - 10 };\n        digit + carry\n    });\n   \
    \ while digits.len() > 0 {\n        let digit = digits.remove(0);\n        if\
    \ digit < 10 {\n            s.push_str(&format!(\"{}{}\", digit, shift));\n  \
    \      } else {\n            s.push_str(&format!(\"{}{}\", digit - 10, shift));\n\
    \            carry = 1;\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"\
    {}\", shift));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8en55n__.rs:13:32\n   |\n\
    13 |         let digit = if digit < 10 { digit + shift } else { digit - 10 };\n\
    \   |                                ^^ expected enum `Option`, found integer\n\
    \   |\n   = note: expected enum `Option<u32>`\n              found type `{integer}`\n\
    help: try wrapping the expression in `Some`\n   |\n13 |         let digit = if\
    \ digit < Some(10) { digit + shift } else { digit - 10 };\n   |              \
    \                  +++++  +\n\nerror[E0369]: cannot add `isize` to `Option<u32>`\n\
    \  --> /tmp/tmp8en55n__.rs:13:43\n   |\n13 |         let digit = if digit < 10\
    \ { digit + shift } else { digit - 10 };\n   |                               \
    \      ----- ^ ----- isize\n   |                                     |\n   | \
    \                                    Option<u32>\n\nerror[E0369]: cannot subtract\
    \ `{integer}` from `Option<u32>`\n  --> /tmp/tmp8en55n__.rs:13:66\n   |\n13 |\
    \         let digit = if digit < 10 { digit + shift } else { digit - 10 };\n \
    \  |                                                            ----- ^ -- {integer}\n\
    \   |                                                            |\n   |     \
    \                                                       Option<u32>\n\nerror[E0599]:\
    \ the method `len` exists for struct `Map<Enumerate<Chars<'_>>, _>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp8en55n__.rs:16:18\n   |\n16 |     \
    \  while digits.len() > 0 {\n   |                    ^^^ method cannot be called\
    \ on `Map<Enumerate<Chars<'_>>, _>` due to unsatisfied trait bounds\n   |\n  \
    \ = note: the following trait bounds were not satisfied:\n           `Enumerate<Chars<'_>>:\
    \ ExactSizeIterator`\n           which is required by `Map<Enumerate<Chars<'_>>,\
    \ _>: ExactSizeIterator`\n\nerror[E0599]: no method named `remove` found for struct\
    \ `Map` in the current scope\n  --> /tmp/tmp8en55n__.rs:17:28\n   |\n17 |    \
    \     let digit = digits.remove(0);\n   |                            ^^^^^^ method\
    \ not found in `Map<Enumerate<Chars<'_>>, _>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed expla"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_pvb6nl.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg_pvb6nl.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83zcv8oz.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp83zcv8oz.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp83zcv8oz.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp83zcv8oz.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits[..(digits.len() - shift)].to_string();\n    digits = digits[..(digits.len()\
    \ + shift)].to_string();\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0g5a892u.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp0g5a892u.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0g5a892u.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp0g5a892u.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.to_digits().iter() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s.push((digit % 10).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ % 10).to_string());\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp3sv4p7c7.rs:11:16\n   |\n11 |     for d in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3sv4p7c7.rs:18:16\n   |\n18 |         s.push((carry\
    \ % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += digit.to_string();\n        x /= 10;\n        carry += digit as isize;\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoypvne85.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = if carry > 0 {\n            digit + shift\n        } else\
    \ {\n            digit + shift - s.len()\n        };\n        carry = digit /\
    \ 10;\n        s += &format!(\"{}{}\", digit % 10, &'0');\n    }\n    if carry\
    \ > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7x1_zu6.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    while n > 0 {\n        if n % 10 == 0 {\n            s.push_str(&format!(\"\
    {}{}\", n % 10, shift));\n            shift += 1;\n        } else {\n        \
    \    s.push_str(&format!(\"{}\", n % 10));\n        }\n        n /= 10;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `shift`\n  --> /tmp/tmpzvyfa60o.rs:14:13\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                       ----- help: consider making this binding mutable: `mut\
    \ shift`\n...\n14 |             shift += 1;\n   |             ^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..digits.len()\
    \ - i]);\n    }\n    s.push(*digits[0..digits.len() - shift]);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwsyzjsc0.rs:12:42\n   |\n\
    12 |         s.push(*digits[0..digits.len() - i]);\n   |                     \
    \                     ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwsyzjsc0.rs:12:40\n   |\n12 | \
    \        s.push(*digits[0..digits.len() - i]);\n   |                         \
    \               ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0614]: type `str`\
    \ cannot be dereferenced\n  --> /tmp/tmpwsyzjsc0.rs:12:16\n   |\n12 |        \
    \ s.push(*digits[0..digits.len() - i]);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwsyzjsc0.rs:14:38\n   |\n14 |\
    \     s.push(*digits[0..digits.len() - shift]);\n   |                        \
    \              ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpwsyzjsc0.rs:14:36\n   |\n14 |     s.push(*digits[0..digits.len()\
    \ - shift]);\n   |                                    ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpwsyzjsc0.rs:14:12\n\
    \   |\n14 |     s.push(*digits[0..digits.len() - shi"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        if carry {\n            digit += 1;\n        }\n\
    \        s += digit.to_string();\n        carry = digit > 9;\n    }\n    if carry\
    \ {\n        s += \"0\".to_string();\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:13:12\n  \
    \ |\n13 |         if carry {\n   |            ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:17:17\n   |\n10 |\
    \     let mut carry = 0;\n   |                     - expected due to this value\n\
    ...\n17 |         carry = digit > 9;\n   |                 ^^^^^^^^^ expected\
    \ integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:19:8\n\
    \   |\n19 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfk8wpspz.rs:20:14\n   |\n20 |\
    \         s += \"0\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found struct `String`\n   |\
    \              help: consider borrowing here: `&\"0\".to_string()`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            s.push_str(&x[i..]);\n\
    \            break;\n        }\n        s.push_str(&x[i..]);\n        i += 1;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzm2vtpdz.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpzm2vtpdz.rs:13:25\n   |\n\
    13 |             s.push_str(&x[i..]);\n   |                         ^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpzm2vtpdz.rs:16:21\n\
    \   |\n16 |         s.push_str(&x[i..]);\n   |                     ^^^^^^\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let d\
    \ = d + carry;\n        carry = d / 10;\n        s += d.to_string();\n    }\n\
    \    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjy43mcwy.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjy43mcwy.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift {\n \
    \       if carry > 0 {\n            s.push_str(&digits[digits.len() - i..digits.len()\
    \ - i + 1]);\n            carry = 0;\n        } else {\n            s.push_str(&digits[digits.len()\
    \ - i]);\n        }\n    }\n    if carry > 0 {\n        s.push_str(&digits[digits.len()\
    \ - shift..digits.len() - shift + 1]);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8d_fj0hk.rs:14:47\n   |\n\
    14 |             s.push_str(&digits[digits.len() - i..digits.len() - i + 1]);\n\
    \   |                                               ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp8d_fj0hk.rs:14:45\n\
    \   |\n14 |             s.push_str(&digits[digits.len() - i..digits.len() - i\
    \ + 1]);\n   |                                             ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8d_fj0hk.rs:14:65\n\
    \   |\n14 |             s.push_str(&digits[digits.len() - i..digits.len() - i\
    \ + 1]);\n   |                                                               \
    \  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp8d_fj0hk.rs:14:63\n   |\n14 |             s.push_str(&digits[digits.len()\
    \ - i..digits.len() - i + 1]);\n   |                                         \
    \                      ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8d_fj0hk.rs:17:47\n   |\n17 |             s.push_str(&digits[digits.len()\
    \ - i]);\n   |                    "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().nth(i).unwrap());\n\
    \    }\n    s.push(*digits[shift..].chars().nth(shift).unwrap());\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp6kk_z4n1.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().nth(i).unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp6kk_z4n1.rs:14:13\n   |\n14 |     s.push(*digits[shift..].chars().nth(shift).unwrap());\n\
    \   |             ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift];\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2f6pq_pw.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp2f6pq_pw.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp2f6pq_pw.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2f6pq_pw.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift];\n   |                     \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2f6pq_pw.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = if carry > 0 {\n            digit + shift\n        } else\
    \ {\n            digit\n        };\n        carry = digit / 10;\n        s +=\
    \ digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppt29ij9k.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppt29ij9k.rs:22:14\n  \
    \ |\n22 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcyeh06oi.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpcyeh06oi.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &n in &x.to_string().chars() {\n        let digit = n.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s.push((digit % 10).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ % 10).to_string());\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&Chars<'_>` is not an iterator\n  --> /tmp/tmpalc1u5ns.rs:11:15\n\
    \   |\n11 |     for &n in &x.to_string().chars() {\n   |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \   |               |\n   |               `&Chars<'_>` is not an iterator\n  \
    \ |               help: consider removing the leading `&`-reference\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n   = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpalc1u5ns.rs:18:16\n\
    \   |\n18 |         s.push((carry % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        s +=\
    \ if carry {\n            '0'\n        } else {\n            '1'\n        };\n\
    \        carry = d >= '9';\n    }\n    if carry {\n        s += '0';\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:12:17\n  \
    \ |\n12 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:13:13\n\
    \   |\n13 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    13 |             \"0\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:15:13\n\
    \   |\n15 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    15 |             \"1\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:17:17\n\
    \   |\n10 |     let mut carry = 0;\n   |                     - expected due to\
    \ this value\n...\n17 |         carry = d >= '9';\n   |                 ^^^^^^^^\
    \ expected integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:19:8\n\
    \   |\n19 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:20:14\n   |\n20 |\
    \         s += '0';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ if shift > 0 {\n        digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \    }\n    result.push_str(digits);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbywlvgt.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmppbywlvgt.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppbywlvgt.rs:13:52\n\
    \   |\n13 |         digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                    ^^^\n   |           \
    \                                         |\n   |                            \
    \                        expected `&char`, found `char`\n   |                \
    \                                    help: consider borrowing here: `&'0'`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppbywlvgt.rs:13:62\n   |\n13 |  \
    \       digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                              ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         digits = digits.chars().skip_while(|c|\
    \ c < '0').take(shift.try_into().unwrap()).collect();\n   |                  \
    \                                                 ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppbywlvgt.rs:15:21\n   |\n15 |     result.push_str(digits);\n\
    \   |                     ^^^^^^\n   |                     |\n   |           \
    \          expected `&str`, f"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n\
    \    }\n    s.push(*digits.pop().unwrap());\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpah_s_k7k.rs:12:16\n\
    \   |\n12 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpah_s_k7k.rs:14:12\n\
    \   |\n14 |     s.push(*digits.pop().unwrap());\n   |            ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits().iter() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s.push((digit % 10).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ % 10).to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp5b3f2op2.rs:11:17\n   |\n11 |     for &d in x.to_digits().iter()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5b3f2op2.rs:18:16\n   |\n18 |         s.push((carry\
    \ % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += digit.to_string();\n        x /= 10;\n        carry = digit + carry;\n  \
    \  }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpukccc5jl.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpukccc5jl.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push_str(&format!(\"\
    {}\", remainder % 10));\n        remainder = remainder / 10;\n    }\n    if shift\
    \ > digits.len() {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuofixl34.rs:15:16\n   |\n\
    15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpuofixl34.rs:16:16\n   |\n16 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        let digit = digit as char;\n        if digit == '1' {\n            s.push_str(&format!(\"\
    {}{}\", carry, digit));\n            carry = 0;\n        } else {\n          \
    \  s.push_str(&format!(\"{}{}\", digit, carry));\n            carry = 0;\n   \
    \     }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0100\"`,\n right: `\"001\"`', /tmp/tmptzome6sf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp82cbyr_0.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp82cbyr_0.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp82cbyr_0.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[(digits.len()\
    \ - 1) - i];\n    }\n    s + digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy5nyvkt6.rs:12:42\n   |\n\
    12 |         s += digits[(digits.len() - 1) - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpy5nyvkt6.rs:12:40\n   |\n12 | \
    \        s += digits[(digits.len() - 1) - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpy5nyvkt6.rs:12:14\n   |\n12 |  \
    \       s += digits[(digits.len() - 1) - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5nyvkt6.rs:14:9\n\
    \   |\n14 |     s + digits\n   |         ^^^^^^\n   |         |\n   |        \
    \ expected `&str`, found struct `String`\n   |         help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        digits.push(digit.to_string());\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeb1d3zq7.rs:13:21\n   |\n\
    13 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeb1d3zq7.rs:16:16\n   |\n16 |     if shift > digits.len() {\n  \
    \ |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \                        ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpeb1d3zq7.rs:17:16\n\
    \   |\n17 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let d\
    \ = d + carry;\n        carry = d / 10;\n        s = s.push_str(&format!(\"{}{}\"\
    , d, &'0' + carry % 10));\n    }\n    if carry > 0 {\n        s = s.push_str(&format!(\"\
    {}\", carry));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fagjye9.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6fagjye9.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0369]: cannot add `{integer}` to `&char`\n  --> /tmp/tmp6fagjye9.rs:14:49\n\
    \   |\n14 |         s = s.push_str(&format!(\"{}{}\", d, &'0' + carry % 10));\n\
    \   |                                            ---- ^ ---------- {integer}\n\
    \   |                                            |\n   |                     \
    \                       &char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6fagjye9.rs:14:13\n\
    \   |\n9  |     let mut s = String::new();\n   |                 -------------\
    \ expected due to this value\n...\n14 |         s = s.push_str(&format!(\"{}{}\"\
    , d, &'0' + carry % 10));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmp6fagjye9.rs:14:15\n   |\n14 |         s\
    \ = s.push_str(&format!(\"{}{}\", d, &'0' + carry % 10));\n   |             -\
    \ ^^^^^^^^ this call modifies `s` in-place\n   |             |\n   |         \
    \    you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push_str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6fagjye9.rs:17:13\n   |\n9  |     let mut s = String::new();\n\
    \   |"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    for &d in digits {\n        let mut digit = d.to_digit(10);\n        if digit\
    \ < 10 {\n            digit += carry;\n            carry = digit / 10;\n     \
    \       digit %= 10;\n        }\n        s.push((digit as char).to_string());\n\
    \    }\n    if carry > 0 {\n        s.push((carry as char).to_string());\n   \
    \ }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3w95ifhi.rs:12:9\n   |\n\
    12 |     for &d in digits {\n   |         ^^    ------ this expression has type\
    \ `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `d`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3w95ifhi.rs:19:16\n   |\n19 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3w95ifhi.rs:22:16\n\
    \   |\n22 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmp3w95ifhi.rs:22:16\n\
    \   |\n22 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmp3w95ifhi.rs:22:16\n   |\n22 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.extend(digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string().reverse()\n        }\n    }).collect());\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvs_q2p3t.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvs_q2p3t.rs:16:17\n\
    \   |\n16 |         if i == shift {\n   |                 ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpvs_q2p3t.rs:19:27\n\
    \   |\n19 |             c.to_string().reverse()\n   |                        \
    \   ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83zcv8oz.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp83zcv8oz.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp83zcv8oz.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp83zcv8oz.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    while shift > 0 {\n        if shift > digits.len() {\n            digits\
    \ = digits.reverse();\n        }\n        let digit = digits[digits.len() - 1\
    \ - shift];\n        carry += digit as isize;\n        digits[digits.len() - 1\
    \ - shift] = 0;\n        shift -= 1;\n    }\n    if carry > 0 {\n        digits.push(&carry);\n\
    \    }\n    digits.reverse();\n    String::from_utf8(digits).unwrap()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplwrfe_2b.rs:13:20\n   |\n\
    13 |         if shift > digits.len() {\n   |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         if shift >\
    \ digits.len().try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplwrfe_2b.rs:14:22\n   |\n11 |\
    \     let mut digits = x.to_string().chars().collect::<Vec<_>>();\n   |      \
    \                ----------------------------------------- expected due to this\
    \ value\n...\n14 |             digits = digits.reverse();\n   |              \
    \        ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<char>`\n           found unit type `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplwrfe_2b.rs:16:47\n   |\n16 |         let digit\
    \ = digits[digits.len() - 1 - shift];\n   |                                  \
    \             ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmplwrfe_2b.rs:16:45\n   |\n16 |         let\
    \ digit = digits[digits.len() - 1 - shift];\n   |                            \
    \                 ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplwrfe_2b.rs:18:35\n   |\n18 |         digits[digits.len()\
    \ - 1 - shift] = 0;\n   |                                   ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmplwrfe_2b.rs:18:33\n\
    \   |\n18 |         digits[digits.len() - 1 "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut carry = 0;\n    for d in x.digits().iter().rev() {\n        let digit =\
    \ d.to_digit(10);\n        digits.push(digit as char);\n        carry += digit\
    \ as isize;\n        if carry > shift {\n            digits.push('0');\n     \
    \       carry = 1;\n        } else {\n            carry -= shift;\n        }\n\
    \    }\n    if carry > 0 {\n        digits.push('0');\n    }\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpaxnhubcd.rs:11:16\n   |\n11 |     for d in x.digits().iter().rev()\
    \ {\n   |                ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += digit.to_string();\n        x /= 10;\n        carry = digit + carry;\n  \
    \  }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpukccc5jl.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpukccc5jl.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ i = x;\n    while i >= shift {\n        i /= 10;\n        s.push(i);\n    }\n\
    \    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl97zjzo1.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl97zjzo1.rs:18:16\n   |\n18 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            break;\n\
    \        }\n        let mut digit = x.len() - shift;\n        if digit < 0 {\n\
    \            digit = 0;\n        }\n        s.push((x[digit].to_string()).chars().nth(digit).unwrap());\n\
    \        shift -= digit;\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpepgdattl.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpepgdattl.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpepgdattl.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift;\n   |                           ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpepgdattl.rs:19:17\n\
    \   |\n19 |         s.push((x[digit].to_string()).chars().nth(digit).unwrap());\n\
    \   |                 ^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.digits() {\n        let mut digit = d.unwrap();\n\
    \        digit += carry;\n        carry = digit / 10;\n        digit %= 10;\n\
    \        s += digit.to_string();\n    }\n    if carry > 0 {\n        s += &format!(\"\
    {}\", carry).to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpe5o3avcw.rs:11:16\n   |\n11 |     for d in x.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        carry\
    \ = digit + carry;\n        s += digit.to_string();\n        x /= 10;\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6rf41174.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6rf41174.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for c\
    \ in x.to_string().chars() {\n        if c >= '0' && c <= '9' {\n            s.push_str(&c.to_string());\n\
    \        } else {\n            s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).unwrap());\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsuhuq_2.rs:14:68\n   |\n\
    14 |             s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).unwrap());\n\
    \   |                                                                    ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n14 |           \
    \  s.push_str(&c.to_string() + &c.to_string().chars().nth(shift.try_into().unwrap()).unwrap());\n\
    \   |                                                                        \
    \ ++++++++++++++++++++\n\nerror[E0369]: cannot add `&char` to `&String`\n  -->\
    \ /tmp/tmpmsuhuq_2.rs:14:39\n   |\n14 |             s.push_str(&c.to_string()\
    \ + &c.to_string().chars().nth(shift).unwrap());\n   |                       \
    \ -------------- ^ ------------------------------------------ &char\n   |    \
    \                    |\n   |                        &String\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    while n > 0 {\n        s.push((n % 10) as char);\n        n /= 10;\n\
    \    }\n    if shift > s.len() {\n        for _ in 0..shift - s.len() {\n    \
    \        s.push('0');\n        }\n    } else {\n        for _ in 0..shift - s.len()\
    \ {\n            s.insert(0, 0);\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpieh58jvq.rs:15:16\n   |\n\
    15 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpieh58jvq.rs:16:29\n   |\n16 |         for _ in 0..shift\
    \ - s.len() {\n   |                             ^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmpieh58jvq.rs:16:27\n\
    \   |\n16 |         for _ in 0..shift - s.len() {\n   |                      \
    \     ^ no implementation for `isize - usize`\n   |\n   = help: the trait `Sub<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpieh58jvq.rs:20:29\n\
    \   |\n20 |         for _ in 0..shift - s.len() {\n   |                      \
    \       ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract\
    \ `usize` from `isize`\n  --> /tmp/tmpieh58jvq.rs:20:27\n   |\n20 |         for\
    \ _ in 0..shift - s.len() {\n   |                           ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched t"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0izzsj81.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp0izzsj81.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmp0izzsj81.rs:12:14\n   |\n12 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rev() {\n        if i >= shift {\n            s.push(i);\n\
    \        } else {\n            s.push('0');\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokzervht.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpokzervht.rs:16:17\n   |\n16 |\
    \         if i >= shift {\n   |                 ^^^^^ expected `char`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        s +=\
    \ if carry {\n            '1'\n        } else {\n            '0'\n        };\n\
    \        carry = d > '9';\n    }\n    if carry {\n        s += '1';\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:12:17\n  \
    \ |\n12 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:13:13\n\
    \   |\n13 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    13 |             \"1\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:15:13\n\
    \   |\n15 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    15 |             \"0\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:17:17\n\
    \   |\n10 |     let mut carry = 0;\n   |                     - expected due to\
    \ this value\n...\n17 |         carry = d > '9';\n   |                 ^^^^^^^\
    \ expected integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:19:8\n\
    \   |\n19 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkz9utgmb.rs:20:14\n   |\n20 |\
    \         s += '1';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if y"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].rposition(|&c|\
    \ c != '0').unwrap());\n    }\n    s.push(*digits[0..shift].rposition(|&c| c !=\
    \ '0').unwrap());\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpkbchibn_.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].rposition(|&c|\
    \ c != '0').unwrap());\n   |                 ^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpkbchibn_.rs:14:13\n   |\n14 |     s.push(*digits[0..shift].rposition(|&c|\
    \ c != '0').unwrap());\n   |             ^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s + digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6y298tp.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpa6y298tp.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpa6y298tp.rs:12:14\n   |\n12 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa6y298tp.rs:14:9\n\
    \   |\n14 |     s + digits\n   |         ^^^^^^\n   |         |\n   |        \
    \ expected `&str`, found struct `String`\n   |         help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.digits() {\n        let digit = if carry == 0 {\n\
    \            d\n        } else {\n            d + carry\n        };\n        carry\
    \ = digit / 10;\n        s += digit.to_string();\n    }\n    if carry > 0 {\n\
    \        s += carry.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpb1uads8b.rs:11:17\n   |\n11 |     for &d in x.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb1uads8b.rs:21:14\n   |\n21 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift..];\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppt3p1s2r.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmppt3p1s2r.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppt3p1s2r.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppt3p1s2r.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift..];\n   |                   \
    \             ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmppt3p1s2r.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift..];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isiz"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for &d\
    \ in x.to_string().chars().take(shift) {\n        s.push(d);\n    }\n    for &d\
    \ in x.to_string().chars().skip(shift).take(shift) {\n        s.push(d);\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg8km42n4.rs:10:42\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg8km42n4.rs:10:9\n   |\n10 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg8km42n4.rs:13:42\n  \
    \ |\n13 |     for &d in x.to_string().chars().skip(shift).take(shift) {\n   |\
    \                                          ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     for &d in x.to_string().chars().skip(shift.try_into().unwrap()).take(shift)\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg8km42n4.rs:13:54\n   |\n13 |\
    \     for &d in x.to_string().chars().skip(shift).take(shift) {\n   |        \
    \                                              ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     for &d in x.to_string().chars().skip(shift).take(shift.try_into().unwrap())\
    \ {\n   |                                                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg8km42n4.rs:13:9\n   |\n13 | \
    \    for &d in x.to_string().chars().skip(shift).take(shift) {\n   |         ^^\
    \    ---------------------------------------"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push(0);\n  \
    \  digits.reverse();\n    digits.push_str(&circular_shift_digits(digits, shift));\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `circular_shift_digits` in this scope\n\
    \  --> /tmp/tmp2hdvz31d.rs:17:22\n   |\n17 |     digits.push_str(&circular_shift_digits(digits,\
    \ shift));\n   |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hdvz31d.rs:12:21\n \
    \  |\n12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hdvz31d.rs:15:17\n\
    \   |\n15 |     digits.push(0);\n   |                 ^ expected `char`, found\
    \ `u8`\n\nerror[E0599]: no method named `reverse` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp2hdvz31d.rs:16:12\n   |\n16 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        if digit < 0 {\n            s.push('-');\n      \
    \      carry = -digit;\n        } else {\n            s.push('0');\n         \
    \   carry = digit + carry;\n        }\n    }\n    if carry > 0 {\n        s.push('1');\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpicurq90v.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpicurq90v.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            s.push_str(&x[i\
    \ - shift..i]);\n        } else {\n            s.push_str(&x[i..i + shift]);\n\
    \        }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgzbc1lib.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpgzbc1lib.rs:13:25\n   |\n\
    13 |             s.push_str(&x[i - shift..i]);\n   |                         ^^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpgzbc1lib.rs:15:25\n\
    \   |\n15 |             s.push_str(&x[i..i + shift]);\n   |                  \
    \       ^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n\
    \    }\n    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp0e4d7w2r.rs:12:16\n\
    \   |\n12 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0e4d7w2r.rs:14:12\n   |\n14 |\
    \     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found `str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1 - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyhw4_yfs.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpyhw4_yfs.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpyhw4_yfs.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().next().unwrap());\n\
    \    }\n    s.push(*digits.chars().next().unwrap());\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmps86gv5kz.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().next().unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmps86gv5kz.rs:14:12\n\
    \   |\n14 |     s.push(*digits.chars().next().unwrap());\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        let digit = digit as char;\n        if digit == '1' {\n            if\
    \ carry != 0 {\n                s.push_str(&format!(\"{}{}\", digit, carry));\n\
    \                carry = 0;\n            } else {\n                s.push_str(&digit);\n\
    \            }\n        } else {\n            s.push_str(&digit);\n          \
    \  carry += digit as isize;\n        }\n    }\n    if carry != 0 {\n        s.push_str(&format!(\"\
    {}{}\", digit, carry));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digit` in this scope\n  --> /tmp/tmpai1cj26d.rs:26:37\n\
    \   |\n26 |         s.push_str(&format!(\"{}{}\", digit, carry));\n   |      \
    \                               ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpai1cj26d.rs:18:28\n   |\n18 |              \
    \   s.push_str(&digit);\n   |                            ^^^^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpai1cj26d.rs:21:24\n\
    \   |\n21 |             s.push_str(&digit);\n   |                        ^^^^^^\
    \ expected `str`, found `char`\n   |\n   = note: expected reference `&str`\n \
    \             found reference `&char`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rposition(|&c| c != '0').rev() {\n        *i += shift % 10;\n\
    \        shift /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp32puhtzk.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmp32puhtzk.rs:15:24\n     |\n15   |     for i in s.chars().rposition(|&c|\
    \ c != '0').rev() {\n     |                        ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp32puhtzk.rs:15:35\n   |\n15 |     for i in s.chars().rposition(|&c|\
    \ c != '0').rev() {\n   |                                   ^--\n   |        \
    \                           ||\n   |                                   |expected\
    \ due to this\n   |                                   expected `char`, found reference\n\
    \   |                                   help: did you mean `c`: `&char`\n   |\n\
    \   = note:   expected type `char`\n           found reference `&_`\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmp32puhtzk.rs:15:49\n    |\n\
    15  |       for i in s.chars().rposition(|&c| c != '0').rev() {\n    |       \
    \                                            ^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s += &format!(\"{}{}\"\
    , i % 10, i / 10);\n    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n\
    \    } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbc43ayb.rs:15:16\n   |\n\
    15 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkbc43ayb.rs:16:21\n   |\n16 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpkbc43ayb.rs:16:19\n   |\n\
    16 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpkbc43ayb.rs:18:9\n   |\n18 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --expl"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in digits.chars().cloned() {\n        s.push(i);\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjh01bmtl.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpjh01bmtl.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjh01bmtl.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0271]: type mismatch resolving `<Chars<'_>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpjh01bmtl.rs:14:29\n     |\n14   |\
    \     for i in digits.chars().cloned() {\n     |                             ^^^^^^\
    \ expected reference, found `char`\n     |\n     = note: expected reference `&_`\n\
    \                     found type `char`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmpjh01bmtl.rs:14:14\n   |\n14 |     for i in digits.chars().cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut carry = 0;\n    let mut i = x;\n    while i >= 10 {\n        digits.push(i\
    \ % 10);\n        i /= 10;\n    }\n    while i >= 10 {\n        digits.push((i\
    \ % 10) + carry);\n        i /= 10;\n        carry = 1;\n    }\n    digits.push((i\
    \ % 10) + carry);\n    digits[digits.len() - shift..].to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphx3xny68.rs:13:21\n   |\n\
    13 |         digits.push(i % 10);\n   |                     ^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphx3xny68.rs:17:21\n\
    \   |\n17 |         digits.push((i % 10) + carry);\n   |                     ^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphx3xny68.rs:21:17\n\
    \   |\n21 |     digits.push((i % 10) + carry);\n   |                 ^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphx3xny68.rs:22:27\n\
    \   |\n22 |     digits[digits.len() - shift..].to_owned()\n   |              \
    \             ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmphx3xny68.rs:22:25\n   |\n22 |     digits[digits.len()\
    \ - shift..].to_owned()\n   |                         ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().next().unwrap());\n\
    \    }\n    s.push(*digits.chars().next().unwrap());\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmps86gv5kz.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().next().unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmps86gv5kz.rs:14:12\n\
    \   |\n14 |     s.push(*digits.chars().next().unwrap());\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3je8rm45.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3je8rm45.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp3je8rm45.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp3je8rm45.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    let mut carry = 0;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        n /= 10;\n        if carry {\n            s.insert(0, digit);\n     \
    \   } else {\n            s.insert(0, digit + shift);\n        }\n        carry\
    \ = 1;\n    }\n    if carry {\n        s.insert(0, 1);\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_f49z4ai.rs:15:12\n   |\n\
    15 |         if carry {\n   |            ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_f49z4ai.rs:16:25\n   |\n16 |\
    \             s.insert(0, digit);\n   |                         ^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_f49z4ai.rs:18:25\n\
    \   |\n18 |             s.insert(0, digit + shift);\n   |                    \
    \     ^^^^^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_f49z4ai.rs:22:8\n   |\n22 |     if carry {\n   |     \
    \   ^^^^^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_f49z4ai.rs:23:21\n   |\n23 |         s.insert(0, 1);\n   |    \
    \                 ^ expected `char`, found `u8`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = if carry > 0 {\n            digit + shift\n        } else\
    \ {\n            digit\n        };\n        carry = digit / 10;\n        s.push((digit\
    \ % 10 + '0').to_string());\n    }\n    if carry > 0 {\n        s.push((carry.to_string().to_string().to_string()\
    \ + &\"0\").to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6ur85ir.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa6ur85ir.rs:22:16\n  \
    \ |\n22 |         s.push((carry.to_string().to_string().to_string() + &\"0\").to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            s.push_str(&x[i\
    \ - shift as usize..i]);\n        } else {\n            s.push_str(&x[i..i + shift\
    \ as usize]);\n        }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpv8hkh8q7.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv8hkh8q7.rs:13:31\n   |\n13 |             s.push_str(&x[i\
    \ - shift as usize..i]);\n   |                               ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpv8hkh8q7.rs:13:29\n   |\n13 |             s.push_str(&x[i - shift\
    \ as usize..i]);\n   |                             ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpv8hkh8q7.rs:13:25\n\
    \   |\n13 |             s.push_str(&x[i - shift as usize..i]);\n   |         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv8hkh8q7.rs:15:34\n   |\n15 |             s.push_str(&x[i..i +\
    \ shift as usize]);\n   |                                  ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpv8hkh8q7.rs:15:25\n   |\n15 |             s.push_str(&x[i..i +\
    \ shift as usize]);\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmpv8hkh8q7.rs:15:32\n\
    \   |\n15 |             s.push_str(&x[i..i + shift as usize]);\n   |         \
    \                       ^ no implementation for `isize + usize`\n   |\n   = help:\
    \ the trait `Add<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in digits.chars().cloned() {\n        s.push(i);\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjh01bmtl.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpjh01bmtl.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjh01bmtl.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0271]: type mismatch resolving `<Chars<'_>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpjh01bmtl.rs:14:29\n     |\n14   |\
    \     for i in digits.chars().cloned() {\n     |                             ^^^^^^\
    \ expected reference, found `char`\n     |\n     = note: expected reference `&_`\n\
    \                     found type `char`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmpjh01bmtl.rs:14:14\n   |\n14 |     for i in digits.chars().cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        *i as usize\
    \ + shift % 10 as usize\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqhq13for.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpqhq13for.rs:15:24\n     |\n15   |     for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n     |                        ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0614]: type `usize`\
    \ cannot be dereferenced\n  --> /tmp/tmpqhq13for.rs:16:9\n   |\n16 |         *i\
    \ as usize + shift % 10 as usize\n   |         ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqhq13for.rs:16:31\n   |\n16 |         *i as usize + shift\
    \ % 10 as usize\n   |                               ^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpqhq13for.rs:16:29\n\
    \   |\n16 |         *i as usize + shift % 10 as usize\n   |                  \
    \           ^ no implementation for `isize % usize`\n   |\n   = help: the trait\
    \ `Rem<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqhq13for.rs:15:5\n   |\n8  |   fn circular_shift(x: isize, shift:\
    \ isize) -> String {\n   |                                                ------\
    \ expected `String` because of return type\n...\n1"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..(digits.len()\
    \ - i)].to_string();\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9w1cs4o5.rs:12:44\n   |\n\
    12 |         digits = &digits[..(digits.len() - i)].to_string();\n   |       \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp9w1cs4o5.rs:12:42\n   |\n\
    12 |         digits = &digits[..(digits.len() - i)].to_string();\n   |       \
    \                                   ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9w1cs4o5.rs:12:18\n   |\n10 |     let mut digits\
    \ = x.to_string();\n   |                      ------------- expected due to this\
    \ value\n11 |     for i in 0..shift {\n12 |         digits = &digits[..(digits.len()\
    \ - i)].to_string();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\nhelp: consider removing the\
    \ borrow\n   |\n12 -         digits = &digits[..(digits.len() - i)].to_string();\n\
    12 +         digits = digits[..(digits.len() - i)].to_string();\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9w1cs4o5.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = carry / 10;\n      \
    \  s.push((digit as char).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ as char).to_string());\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpd81j4vjt.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd81j4vjt.rs:15:16\n   |\n15 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd81j4vjt.rs:18:16\n\
    \   |\n18 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmpd81j4vjt.rs:18:16\n\
    \   |\n18 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmpd81j4vjt.rs:18:16\n   |\n18 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqa2j_47.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += &x.to_string()[..i];\n    }\n    s += &x.to_string()[..shift];\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpzxe5ikpk.rs:11:15\n   |\n11 |         s += &x.to_string()[..i];\n\
    \   |               ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpzxe5ikpk.rs:13:11\n   |\n13 |     s += &x.to_string()[..shift];\n\
    \   |           ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.extend(&[remainder]);\n\
    \    digits.rotate_left(shift);\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgcmvww63.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0277]: the trait bound `String: Extend<&isize>`\
    \ is not satisfied\n  --> /tmp/tmpgcmvww63.rs:15:12\n   |\n15 |     digits.extend(&[remainder]);\n\
    \   |            ^^^^^^ the trait `Extend<&isize>` is not implemented for `String`\n\
    \   |\n   = help: the following other types implement trait `Extend<A>`:\n   \
    \          <String as Extend<&'a char>>\n             <String as Extend<&'a str>>\n\
    \             <String as Extend<Box<str>>>\n             <String as Extend<Cow<'a,\
    \ str>>>\n             <String as Extend<String>>\n             <String as Extend<char>>\n\
    \nerror[E0599]: no method named `rotate_left` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpgcmvww63.rs:16:12\n   |\n16 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkfh2gt4h.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpkfh2gt4h.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpkfh2gt4h.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ s.push(i);\n    for i in s.chars().rev() {\n        if i >= '0' && i <= '9'\
    \ {\n            s.insert(i, ' ');\n        }\n    }\n    if shift > s.len() {\n\
    \        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0t30l0x_.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0t30l0x_.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0t30l0x_.rs:18:22\n   |\n18 |             s.insert(i,\
    \ ' ');\n   |                      ^ expected `usize`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0t30l0x_.rs:21:16\n   |\n21 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n21 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp0t30l0x_.rs:22:11\n\
    \   |\n22 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsag3c7xf.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsag3c7xf.rs:13:18\n \
    \  |\n10 |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n13 |         digits = &digits[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n13 |         digits = (&digits[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsag3c7xf.rs:15:12\n   |\n15 |     s.push(*digits);\n  \
    \ |            ^^^^^^^ expected `char`, found `str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[..]);\n\
    \        digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n\
    \    result.push_str(&digits[..]);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzrvlufb7.rs:13:52\n   |\n\
    13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n  \
    \ |                                                    ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpzrvlufb7.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmpzrvlufb7.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut carry = 0;\n    while digits.len() > shift\
    \ {\n        let digit = digits.chars().nth(shift).unwrap();\n        digits =\
    \ digits.chars().nth(digits.len() - shift).unwrap();\n        carry = digit as\
    \ isize + (carry << shift);\n        s.push(carry % 10);\n        carry /= 10;\n\
    \    }\n    s.push(carry % 10);\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7041j475.rs:12:26\n   |\n\
    12 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7041j475.rs:13:40\n   |\n13 |\
    \         let digit = digits.chars().nth(shift).unwrap();\n   |              \
    \                          ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         let digit = digits.chars().nth(shift.try_into().unwrap()).unwrap();\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7041j475.rs:14:52\n   |\n14 |         digits\
    \ = digits.chars().nth(digits.len() - shift).unwrap();\n   |                 \
    \                                   ^^^^^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp7041j475.rs:14:50\n\
    \   |\n14 |         digits = digits.chars().nth(digits.len() - shift).unwrap();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7041j475.rs:14:18\n\
    \   |\n10 |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n14 |         digits = digits.chars().nth(digits.len()\
    \ - shift).unwrap();\n   | "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcyeh06oi.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpcyeh06oi.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpizhy6un0.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpizhy6un0.rs:13:18\n   |\n10 |  \
    \   let mut digits = x.to_string();\n   |                      ------------- expected\
    \ due to this value\n...\n13 |         digits = &digits[1..];\n   |          \
    \        ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\nhelp: try\
    \ using a conversion method\n   |\n13 |         digits = (&digits[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpizhy6un0.rs:15:12\n   |\n15 |     s.push(*digits);\n  \
    \ |            ^^^^^^^ expected `char`, found `str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.digits() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry + shift;\n        carry = digit / 10;\n   \
    \     digit %= 10;\n        s.push((digit as char).to_string());\n    }\n    if\
    \ carry > 0 {\n        s.push((carry as char).to_string());\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp57vj5e61.rs:11:17\n   |\n11 |     for &d in x.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp57vj5e61.rs:16:16\n   |\n16 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp57vj5e61.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmp57vj5e61.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmp57vj5e61.rs:19:16\n   |\n19 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        if i >= x.len() {\n           \
    \ s.push('0');\n        } else {\n            let digit = x.chars().nth(i).unwrap();\n\
    \            s.push((digit as char) + carry);\n            carry = (digit as char).is_digit(10);\n\
    \        }\n    }\n    if carry {\n        s.push('1');\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9zl9zxxx.rs:12:19\n   |\n12 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `chars` found for type `isize` in the current scope\n  --> /tmp/tmp9zl9zxxx.rs:15:27\n\
    \   |\n15 |             let digit = x.chars().nth(i).unwrap();\n   |         \
    \                  ^^^^^ method not found in `isize`\n\nerror[E0369]: cannot add\
    \ `{integer}` to `char`\n  --> /tmp/tmp9zl9zxxx.rs:16:36\n   |\n16 |         \
    \    s.push((digit as char) + carry);\n   |                    ---------------\
    \ ^ ----- {integer}\n   |                    |\n   |                    char\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9zl9zxxx.rs:17:21\n   |\n10 |\
    \     let mut carry = 0;\n   |                     - expected due to this value\n\
    ...\n17 |             carry = (digit as char).is_digit(10);\n   |            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9zl9zxxx.rs:20:8\n   |\n20 |     if carry {\n\
    \   |        ^^^^^ expected `bool`, found integer\n\nerror: aborting due to 5\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift];\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2f6pq_pw.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp2f6pq_pw.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp2f6pq_pw.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2f6pq_pw.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift];\n   |                     \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2f6pq_pw.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n\
    \        digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n\
    \    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp42f31psw.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42f31psw.rs:13:52\n \
    \  |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                    ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp42f31psw.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmp42f31psw.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42f31psw.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        if digit > 0 {\n            s.push_str(&format!(\"{}{}\", digit, shift));\n\
    \            carry = digit >> shift;\n        } else {\n            s.push_str(&format!(\"\
    {}{}\", carry, shift));\n            carry = 0;\n        }\n    }\n    if carry\
    \ > 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq7trq3c.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3je8rm45.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3je8rm45.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp3je8rm45.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp3je8rm45.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.push(digits[digits.len() - shift].to_string());\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy7rqaend.rs:14:21\n   |\n\
    14 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpy7rqaend.rs:16:39\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpy7rqaend.rs:16:37\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpy7rqaend.rs:16:17\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap();\n\
    \    }\n    s += digits;\n    s[shift..].to_owned()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5htlqq8c.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap();\n   |                  \
    \                   ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap();\n  \
    \ |                                      ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5htlqq8c.rs:12:18\n   |\n10 |     let mut digits\
    \ = x.to_string();\n   |                      ------------- expected due to this\
    \ value\n11 |     for i in 0..shift {\n12 |         digits = digits.chars().nth(i).unwrap();\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5htlqq8c.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp5htlqq8c.rs:15:5\n   |\n15 |     s[shift..].to_owned()\n   |  \
    \   ^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for c\
    \ in x.to_string().chars() {\n        if c >= '0' && c <= '9' {\n            s.push_str(&c.to_string());\n\
    \        } else {\n            s.push_str(&c.to_string() + &c.to_string() + &c.to_string());\n\
    \        }\n    }\n    if shift > s.len() {\n        s.reverse();\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&String` to `&String`\n  --> /tmp/tmp7eyppijn.rs:14:39\n\
    \   |\n14 |             s.push_str(&c.to_string() + &c.to_string() + &c.to_string());\n\
    \   |                        -------------- ^ -------------- &String\n   |   \
    \                     |              |\n   |                        |        \
    \      `+` cannot be used to concatenate two `&str` strings\n   |            \
    \            &String\n   |\n   = note: string concatenation requires an owned\
    \ `String` on the left\nhelp: remove the borrow to obtain an owned `String`\n\
    \   |\n14 -             s.push_str(&c.to_string() + &c.to_string() + &c.to_string());\n\
    14 +             s.push_str(c.to_string() + &c.to_string() + &c.to_string());\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7eyppijn.rs:17:16\n  \
    \ |\n17 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp7eyppijn.rs:18:11\n\
    \   |\n18 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift {\n \
    \       if carry > 0 {\n            s.push_str(&digits[digits.len() - i..digits.len()\
    \ - i + 1]);\n        }\n        let digit = digits.chars().nth(i).unwrap();\n\
    \        if digit < '0' || digit > '9' {\n            s.push_str(\"0\");\n   \
    \     } else {\n            s.push_str(&digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + \n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdrhiw5fk.rs:30:3\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               - unclosed delimiter\n...\n12\
    \ |     for i in 0..shift {\n   |                       - unclosed delimiter\n\
    ...\n19 |         } else {\n   |                - this delimiter might not be\
    \ properly closed...\n20 |             s.push_str(&digit + &digit + &digit + ...\n\
    21 | }\n   | - ...as it matches this but it has different indentation\n...\n30\
    \ | }\n   |   ^\n\nerror: expected expression, found `)`\n  --> /tmp/tmpdrhiw5fk.rs:21:1\n\
    \   |\n21 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpdrhiw5fk.rs:20:23\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \         - closing delimiter possibly meant for this\n...\n20 |             s.push_str(&digit\
    \ + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit + &digit\
    \ + &digit + &digit + &digit...\n   |                       ^ unclosed delimiter\n\
    21 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdrhiw5fk.rs:14:47\n   |\n14 |             s.push_str(&digits[digits.len()\
    \ - i..digits.len() - i + 1]);\n   |                                         \
    \      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpdrhiw5fk.rs:14:45\n   |\n14 |             s.push_str(&digits[digits.len()\
    \ - i..digits.len() - i + 1]);\n   |                                         \
    \    ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \     "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_pvb6nl.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg_pvb6nl.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fqspqrd.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp4fqspqrd.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp4fqspqrd.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        let digit = digit as char;\n        if digit == '1' {\n            s.push_str(\"\
    1\");\n            carry = 0;\n        } else {\n            s.push_str(&format!(\"\
    {}{}\", carry, digit));\n            carry = 0;\n        }\n    }\n    if carry\
    \ != 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpnts8mr0l.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut remaining = x;\n    while remaining > 0 {\n        let digit = remaining\
    \ % 10;\n        remaining /= 10;\n        result.push((digit as char).to_string());\n\
    \    }\n    if shift > result.len() {\n        result.reverse();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8334o1as.rs:14:21\n   |\n\
    14 |         result.push((digit as char).to_string());\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8334o1as.rs:16:16\n   |\n16 |     if shift >\
    \ result.len() {\n   |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp8334o1as.rs:17:16\n   |\n17 |         result.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmp8334o1as.rs:14:21\n   |\n14 |         result.push((digit as char).to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmp8334o1as.rs:14:21\n   |\n14 |         result.push((digit\
    \ as char).to_string());\n   |                     ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6e4hdxze.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6e4hdxze.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift {\n \
    \       if carry > 0 {\n            s.insert(0, &digits[digits.len() - i]);\n\
    \            carry = 0;\n        } else {\n            s.insert(0, &digits[digits.len()\
    \ - i + 1]);\n        }\n    }\n    if carry > 0 {\n        s.insert(0, &digits[digits.len()\
    \ - shift]);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxivblj3n.rs:14:48\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i]);\n   |               \
    \                                 ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpxivblj3n.rs:14:46\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i]);\n   |               \
    \                               ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxivblj3n.rs:14:26\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i]);\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxivblj3n.rs:14:25\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i]);\n   |        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n14 -             s.insert(0, &digits[digits.len()\
    \ - i]);\n14 +             s.insert(0, digits[digits.len() - i"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        if remainder >= shift {\n\
    \            s.push((remainder % shift).to_string());\n            remainder =\
    \ remainder / shift;\n        } else {\n            s.push((remainder % 10).to_string());\n\
    \            remainder = remainder / 10;\n        }\n    }\n    s.push((remainder\
    \ % 10).to_string());\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp48a5hjvv.rs:13:20\n   |\n\
    13 |             s.push((remainder % shift).to_string());\n   |              \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp48a5hjvv.rs:16:20\n   |\n16 |\
    \             s.push((remainder % 10).to_string());\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp48a5hjvv.rs:20:12\n   |\n20 |     s.push((remainder % 10).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(&remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push(&remainder);\n\
    \    digits.reverse();\n    digits.push_str(&circular_shift_digits(digits, shift));\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `circular_shift_digits` in this scope\n\
    \  --> /tmp/tmpa0h2h3db.rs:17:22\n   |\n17 |     digits.push_str(&circular_shift_digits(digits,\
    \ shift));\n   |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0h2h3db.rs:12:21\n \
    \  |\n12 |         digits.push(&remainder % 10);\n   |                     ^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0h2h3db.rs:15:17\n\
    \   |\n15 |     digits.push(&remainder);\n   |                 ^^^^^^^^^^ expected\
    \ `char`, found `&isize`\n\nerror[E0599]: no method named `reverse` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpa0h2h3db.rs:16:12\n   |\n\
    16 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push(remainder);\n\
    \    digits.reverse();\n    digits.push_str(&circular_shift_digits(digits, shift));\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `circular_shift_digits` in this scope\n\
    \  --> /tmp/tmpi9xrbxzd.rs:17:22\n   |\n17 |     digits.push_str(&circular_shift_digits(digits,\
    \ shift));\n   |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi9xrbxzd.rs:12:21\n \
    \  |\n12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi9xrbxzd.rs:15:17\n\
    \   |\n15 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpi9xrbxzd.rs:16:12\n   |\n16 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        if carry {\n            digit += 1;\n        }\n        carry = digit\
    \ >> shift;\n        digit &= (1 << shift) - 1;\n        s.push('0' + digit);\n\
    \    }\n    if carry != 0 {\n        s.push('1' + carry);\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp038e3c90.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp038e3c90.rs:13:12\n  \
    \ |\n13 |         if carry {\n   |            ^^^^^ expected `bool`, found integer\n\
    \nerror[E0369]: cannot add `_` to `char`\n  --> /tmp/tmp038e3c90.rs:18:20\n  \
    \ |\n18 |         s.push('0' + digit);\n   |                --- ^ ----- _\n  \
    \ |                |\n   |                char\n\nerror[E0369]: cannot add `{integer}`\
    \ to `char`\n  --> /tmp/tmp038e3c90.rs:21:20\n   |\n21 |         s.push('1' +\
    \ carry);\n   |                --- ^ ----- {integer}\n   |                |\n\
    \   |                char\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift);\n\
    \    String::from(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp5i6vp8at.rs:10:12\n   |\n10 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_chars().collect::<String>();\n    }\n    if carry > 0 {\n   \
    \     s += carry.to_chars().collect::<String>();\n    }\n    if shift > s.len()\
    \ {\n        s[s.len() - shift..].to_owned()\n    } else {\n        s[0..shift].to_owned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmptze419al.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_chars` found for type `{integer}` in the current scope\n\
    \  --> /tmp/tmptze419al.rs:18:20\n   |\n18 |         s += carry.to_chars().collect::<String>();\n\
    \   |                    ^^^^^^^^ method not found in `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptze419al.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptze419al.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmptze419al.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmptze419al.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <Strin"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    if\
    \ shift > digits.len() {\n        digits = digits.reverse();\n    }\n    String::from(digits[..shift])\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7g8t648o.rs:10:16\n   |\n\
    10 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp7g8t648o.rs:11:25\n   |\n11 |         digits = digits.reverse();\n \
    \  |                         ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reserve`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `RangeTo<isize>`\n  --> /tmp/tmp7g8t648o.rs:13:18\n   |\n13 |     String::from(digits[..shift])\n\
    \   |                  ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(i);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa499ahhl.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa499ahhl.rs:18:12\n   |\n18 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift as usize) {\n   \
    \     s += if carry {\n            d.to_string() + &\"1\"\n        } else {\n\
    \            d.to_string()\n        };\n        carry = d > '9';\n    }\n    if\
    \ carry {\n        s += &\"1\";\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj4ba2hbp.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj4ba2hbp.rs:12:17\n   |\n12 |         s += if carry {\n   |   \
    \              ^^^^^ expected `bool`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj4ba2hbp.rs:17:17\n   |\n10 |     let mut carry = 0;\n\
    \   |                     - expected due to this value\n...\n17 |         carry\
    \ = d > '9';\n   |                 ^^^^^^^ expected integer, found `bool`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpj4ba2hbp.rs:19:8\n   |\n19 |   \
    \  if carry {\n   |        ^^^^^ expected `bool`, found integer\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1) - i];\n    }\n    s + &digits[(digits.len() - 1) - shift]\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6lbd3lxg.rs:12:43\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp6lbd3lxg.rs:12:41\n   |\n12 | \
    \        s += &digits[(digits.len() - 1) - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp6lbd3lxg.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6lbd3lxg.rs:14:38\n\
    \   |\n14 |     s + &digits[(digits.len() - 1) - shift]\n   |                \
    \                      ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp6lbd3lxg.rs:14:36\n   |\n\
    14 |     s + &digits[(digits.len() - 1) - shift]\n   |                       \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not imple"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            i += x.len()\
    \ - i;\n        } else {\n            i += 1;\n        }\n        s += &x[i..];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpevhvuxmi.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpevhvuxmi.rs:13:20\n\
    \   |\n13 |             i += x.len() - i;\n   |                    ^^^ method\
    \ not found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpevhvuxmi.rs:17:15\n   |\n17 |         s += &x[i..];\n   |     \
    \          ^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap().to_string();\n\
    \    }\n    s += digits;\n    s[s.len() - shift..].to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtl3yv0o.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap().to_string();\n   |      \
    \                               ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                      ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphtl3yv0o.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphtl3yv0o.rs:15:17\n   |\n15 |     s[s.len()\
    \ - shift..].to_owned()\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmphtl3yv0o.rs:15:15\n\
    \   |\n15 |     s[s.len() - shift..].to_owned()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy__uictk.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpy__uictk.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpy__uictk.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy__uictk.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpy__uictk.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `u"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s[digits.len() - shift..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsbko3dyt.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpsbko3dyt.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmpsbko3dyt.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsbko3dyt.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpsbko3dyt.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \  "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - i - 1];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp73cs_y5k.rs:12:37\n   |\n\
    12 |         s += &digits[digits.len() - i - 1];\n   |                       \
    \              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp73cs_y5k.rs:12:35\n   |\n12 |         s\
    \ += &digits[digits.len() - i - 1];\n   |                                   ^\
    \ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmp73cs_y5k.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - i - 1];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp73cs_y5k.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp73cs_y5k.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut shift = shift % digits.len();\n    while\
    \ shift != 0 {\n        digits = digits.chars().nth(shift).unwrap().to_string();\n\
    \        shift -= digits.len();\n    }\n    s += digits;\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphg27fpea.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmphg27fpea.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphg27fpea.rs:13:37\n\
    \   |\n13 |         digits = digits.chars().nth(shift).unwrap().to_string();\n\
    \   |                                     ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         digits = digits.chars().nth(shift.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphg27fpea.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmphg27fpea.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n          "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift {\n \
    \       if carry > 0 {\n            s.push_str(&format!(\"{}{}\", digits[0..i],\
    \ &carry));\n            carry = 0;\n        } else {\n            s.push_str(&digits[0..i]);\n\
    \        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\", &carry));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpern4u3dj.rs:14:41\n   |\n14 |             s.push_str(&format!(\"\
    {}{}\", digits[0..i], &carry));\n   |                                        \
    \ ^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n\
    \   = help: the trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpern4u3dj.rs:17:25\n   |\n17 |             s.push_str(&digits[0..i]);\n\
    \   |                         ^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        if carry\
    \ > 0 {\n            s.push_str(&format!(\"{}{}\", d, &carry));\n        } else\
    \ {\n            s.push_str(&d);\n        }\n        carry = d / 10;\n    }\n\
    \    if carry > 0 {\n        s.push_str(&format!(\"{}\", &carry));\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpohqoo37j.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpohqoo37j.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpohqoo37j.rs:11:10\n   |\n11 |     for &d in x.to_string().chars().take(shift)\
    \ {\n   |          ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n   --> /tmp/tmpohqoo37j.rs:13:41\n    |\n13  |  \
    \           s.push_str(&format!(\"{}{}\", d, &carry));\n    |                \
    \                         ^ doesn't have a size known at compile-time\n    |\n\
    \    = help: the trait `Sized` is not implemented for `str`\nnote: required by\
    \ a bound in `ArgumentV1::<'a>::new_display`\n    = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0369]: cannot divide `str` by `{integer}`\n\
    \  --> /tmp/tmpohqoo37j.rs:17:19\n   |\n17 |         carry = d / 10;\n   |   \
    \              - ^ -- {integer}\n   |                 |\n   |                \
    \ str\n\nerror: abor"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqa2j_47.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s[digits.len() - shift..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsbko3dyt.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpsbko3dyt.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmpsbko3dyt.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsbko3dyt.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpsbko3dyt.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \  "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n        let digit = if c < '0' || c > '9' {\n            0\n        }\
    \ else {\n            c - '0'\n        };\n        digit * 10 + carry\n    });\n\
    \    while shift > 0 {\n        if shift > digits.len() {\n            digits\
    \ = digits.rev();\n            shift = shift - digits.len();\n        }\n    \
    \    let digit = digits.next()\n            .unwrap()\n            .checked_mul(10)\n\
    \            .ok()\n            .unwrap();\n        carry = digit.checked_add(&carry).ok().unwrap();\n\
    \        s.push((digit as char).to_string());\n        shift -= digits.len();\n\
    \    }\n    if carry > 0 {\n        s.push((carry as char).to_string());\n   \
    \ }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpj6wsfg7c.rs:15:15\n\
    \   |\n15 |             c - '0'\n   |             - ^ --- char\n   |         \
    \    |\n   |             char\n\nerror[E0599]: the method `len` exists for struct\
    \ `Map<Enumerate<Chars<'_>>, _>`, but its trait bounds were not satisfied\n  -->\
    \ /tmp/tmpj6wsfg7c.rs:20:27\n   |\n20 |           if shift > digits.len() {\n\
    \   |                             ^^^ method cannot be called on `Map<Enumerate<Chars<'_>>,\
    \ _>` due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `Enumerate<Chars<'_>>: ExactSizeIterator`\n\
    \           which is required by `Map<Enumerate<Chars<'_>>, _>: ExactSizeIterator`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpj6wsfg7c.rs:21:29\n     |\n21   |             digits = digits.rev();\n\
    \     |                             ^^^ the trait `ExactSizeIterator` is not implemented\
    \ for `Chars<'_>`\n     |\n     = help: the following other types implement trait\
    \ `ExactSizeIterator`:\n               &mut I\n               Args\n         \
    \      ArgsOs\n               ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_,\
    \ T, N>\n               ArrayWindows<'_, T, N>\n               Box<I, A>\n   \
    \            Chunks<'_, T>\n             and 109 others\n     = note: required\
    \ because of the requirements on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n\
    \     = note: 1 redundant requirement hidden\n     = note: required because of\
    \ the requirements on the impl of `DoubleEndedIterator` for `Map<Enumerate<Chars<'_>>,\
    \ _>`\nnote: required by a bound in `rev`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj6wsfg7c.rs:21:22\n   |\n11 |       let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n   |  ______________________-\n12 | |         let digit = if c < '0'\
    \ || c > '9' {\n13 | |             0\n14 | |         } else {\n...  |\n17 | |\
    \         digit * 10 + carry\n18 | |     });\n   | |______- expected due to this\
    \ value\n...\n21 |               digits = digits.rev();\n "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..(digits.len()\
    \ - i)].to_string() + &digits[i..].to_string();\n    }\n    s += digits;\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaql7lbl9.rs:12:44\n   |\n\
    12 |         digits = &digits[..(digits.len() - i)].to_string() + &digits[i..].to_string();\n\
    \   |                                            ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpaql7lbl9.rs:12:42\n\
    \   |\n12 |         digits = &digits[..(digits.len() - i)].to_string() + &digits[i..].to_string();\n\
    \   |                                          ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpaql7lbl9.rs:12:63\n\
    \   |\n12 |         digits = &digits[..(digits.len() - i)].to_string() + &digits[i..].to_string();\n\
    \   |                                                               ^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaql7lbl9.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nS"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[0..digits.len()\
    \ - i];\n    }\n    s + digits[digits.len() - shift..digits.len()];\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_uvq85tk.rs:12:39\n   |\n\
    12 |         s += digits[0..digits.len() - i];\n   |                         \
    \              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp_uvq85tk.rs:12:37\n   |\n12 |         s\
    \ += digits[0..digits.len() - i];\n   |                                     ^\
    \ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_uvq85tk.rs:12:14\n\
    \   |\n12 |         s += digits[0..digits.len() - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found `str`\n   |   \
    \           help: consider borrowing here: `&digits[0..digits.len() - i]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_uvq85tk.rs:14:31\n   |\n14 |  \
    \   s + digits[digits.len() - shift..digits.len()];\n   |                    \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp_uvq85tk.rs:14:29\n   |\n14 |     s + digits[digits.len()\
    \ - shift..digits.len()];\n   |                             ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatche"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - shift;\n        if digit < 0 {\n\
    \            digit = 0;\n        }\n        s.push((&x[digit]).to_string());\n\
    \        shift -= digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpuiunznym.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpuiunznym.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpuiunznym.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift;\n   |                           ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpuiunznym.rs:19:18\n\
    \   |\n19 |         s.push((&x[digit]).to_string());\n   |                  ^^^^^^^^\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = digit << shift | carry;\n        carry = digit >> 8;\n  \
    \      s += digit.to_string();\n    }\n    if carry != 0 {\n        s += &format!(\"\
    {}\", carry);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdll6wcoq.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83zcv8oz.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp83zcv8oz.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp83zcv8oz.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp83zcv8oz.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.to_digits().iter() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_chars().collect::<String>();\n    }\n    if carry > 0 {\n   \
    \     s += carry.to_chars().collect::<String>();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpc_x1x_j3.rs:11:16\n   |\n11 |     for d in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_chars` found for type `{integer}` in the current scope\n\
    \  --> /tmp/tmpc_x1x_j3.rs:18:20\n   |\n18 |         s += carry.to_chars().collect::<String>();\n\
    \   |                    ^^^^^^^^ method not found in `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        s += if carry {\n            digit + 10\n       \
    \ } else {\n            digit\n        };\n        carry = digit > 9;\n    }\n\
    \    if carry {\n        s += '0';\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:13:17\n  \
    \ |\n13 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0277]: cannot add `{integer}` to `&str`\n  --> /tmp/tmpla9nqwuu.rs:14:19\n\
    \   |\n14 |             digit + 10\n   |                   ^ no implementation\
    \ for `&str + {integer}`\n   |\n   = help: the trait `Add<{integer}>` is not implemented\
    \ for `&str`\n   = help: the trait `Add<&str>` is implemented for `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:18:25\n   |\n18 |  \
    \       carry = digit > 9;\n   |                         ^ expected `&str`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:18:17\n\
    \   |\n10 |     let mut carry = 0;\n   |                     - expected due to\
    \ this value\n...\n18 |         carry = digit > 9;\n   |                 ^^^^^^^^^\
    \ expected integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:20:8\n\
    \   |\n20 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpla9nqwuu.rs:21:14\n   |\n21 |\
    \         s += '0';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if y"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n\
    \    }\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n   \
    \ }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmplkx25f0b.rs:12:16\n\
    \   |\n12 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmplkx25f0b.rs:15:16\n\
    \   |\n15 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &n in &x.to_string().chars() {\n        let digit = n.to_digit(10);\n\
    \        let digit = digit + carry + shift;\n        carry = digit / 10;\n   \
    \     digit = digit % 10;\n        s.push((digit as char).to_string());\n    }\n\
    \    if carry > 0 {\n        s.push((carry as char).to_string());\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&Chars<'_>` is not an iterator\n  --> /tmp/tmpmou83ioa.rs:11:15\n\
    \   |\n11 |     for &n in &x.to_string().chars() {\n   |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \   |               |\n   |               `&Chars<'_>` is not an iterator\n  \
    \ |               help: consider removing the leading `&`-reference\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n   = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmou83ioa.rs:16:16\n\
    \   |\n16 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmou83ioa.rs:19:16\n   |\n19 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `{integer}`\n  --> /tmp/tmpmou83ioa.rs:19:16\n   |\n19 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^ invalid cast\n \
    \  |\nhelp: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpmou83ioa.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0604.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().nth(i));\n\
    \    }\n    s.push(*digits[shift..].chars().nth(shift));\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpt3evc72q.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().nth(i));\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpt3evc72q.rs:14:13\n   |\n14 |     s.push(*digits[shift..].chars().nth(shift));\n\
    \   |             ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpvwtzhgwz.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvwtzhgwz.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rposition(|c| c > '9') {\n        s[i] = c - '0';\n    }\n\
    \    for i in s.chars().rposition(|c| c > '9') {\n        s[i] = c + shift % 10;\n\
    \        shift /= 10;\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp6wxg1exx.rs:16:16\n\
    \   |\n16 |         s[i] = c - '0';\n   |                ^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror[E0425]: cannot find value `c` in this\
    \ scope\n  --> /tmp/tmp6wxg1exx.rs:19:16\n   |\n19 |         s[i] = c + shift\
    \ % 10;\n   |                ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6wxg1exx.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmp6wxg1exx.rs:15:24\n     |\n15   |     for i in s.chars().rposition(|c|\
    \ c > '9') {\n     |                        ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp6wxg1exx.rs:16:9\n   |\n16 |   \
    \      s[i] = c - '0';\n   |         ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is\
    \ not satisfied\n    --> /tmp/tmp6wxg1exx.rs:18:24\n     |\n18   |     for i in\
    \ s.chars().rposition(|c| c > '9') {\n     |     "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().take(shift);\n    for\
    \ d in digits {\n        match carry {\n            0 => {\n                s.push(d);\n\
    \                carry = 0;\n            }\n            1 => {\n             \
    \   s.push('0');\n                carry = 0;\n            }\n            _ =>\
    \ {\n                s.push('1');\n                carry = 0;\n            }\n\
    \        }\n    }\n    if carry != 0 {\n        s.push('1');\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmyeswfc.rs:11:49\n   |\n\
    11 |     let mut digits = x.to_string().chars().take(shift);\n   |           \
    \                                      ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     let mut digits = x.to_string().chars().take(shift.try_into().unwrap());\n\
    \   |                                                      ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxotw126a.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push_front(&digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push_front(&digits[digits.len() - shift]);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_front` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp675275wh.rs:12:11\n   |\n12 |         s.push_front(&digits[digits.len()\
    \ - i - 1]);\n   |           ^^^^^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp675275wh.rs:12:45\n   |\n12 |         s.push_front(&digits[digits.len()\
    \ - i - 1]);\n   |                                             ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp675275wh.rs:12:43\n\
    \   |\n12 |         s.push_front(&digits[digits.len() - i - 1]);\n   |       \
    \                                    ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp675275wh.rs:12:23\n\
    \   |\n12 |         s.push_front(&digits[digits.len() - i - 1]);\n   |       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `push_front` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp675275wh.rs:14:7\n   |\n14 |     s.push_front(&digits[digits.len()\
    \ - shift]);\n   |       ^^^"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i\
    \ + 1).unwrap().to_string();\n    }\n    s += digits;\n    s[s.len() - shift..].to_owned()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk2ous2ud.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i + 1).unwrap().to_string();\n   |  \
    \                                   ^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         digits = digits.chars().nth((i + 1).try_into().unwrap()).unwrap().to_string();\n\
    \   |                                     +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk2ous2ud.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk2ous2ud.rs:15:17\n   |\n15 |     s[s.len()\
    \ - shift..].to_owned()\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpk2ous2ud.rs:15:15\n\
    \   |\n15 |     s[s.len() - shift..].to_owned()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n\
    \    }\n    s[0..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6aqw3r8i.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6aqw3r8i.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp6aqw3r8i.rs:21:5\n   |\n21 |     s[0..shift].to_string()\n   |\
    \     ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n\
    \   = help: the trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        s.push(x[x.len() - shift - 1]);\n        shift -= 1;\n   \
    \ }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp11rq1icq.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp11rq1icq.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp11rq1icq.rs:15:20\n   |\n15 |         s.push(x[x.len()\
    \ - shift - 1]);\n   |                    ^^^ method not found in `isize`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rev() {\n        if i >= shift {\n            s.push(i);\n\
    \        } else {\n            s.push('0');\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokzervht.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpokzervht.rs:16:17\n   |\n16 |\
    \         if i >= shift {\n   |                 ^^^^^ expected `char`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i >= x.len() {\n            s.push('0');\n       \
    \ } else {\n            s.push(x[i]);\n        }\n    }\n    s.push('0');\n  \
    \  s[shift..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpj119sg30.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpj119sg30.rs:14:20\n   |\n\
    14 |             s.push(x[i]);\n   |                    ^^^^\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpj119sg30.rs:18:5\n\
    \   |\n18 |     s[shift..].to_string()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        if digit > 0 {\n            s.push_str(&format!(\"\
    {}{}\", digit, carry));\n            carry = 0;\n        } else {\n          \
    \  s.push_str(&format!(\"{}\", digit));\n            carry = 1;\n        }\n \
    \   }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmrjyguzk.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmrjyguzk.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcyeh06oi.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpcyeh06oi.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpcyeh06oi.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n\
    \    s.push(*digits[..]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmps8g6sugx.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmps8g6sugx.rs:13:52\n   |\n13 |  \
    \       digits = digits.chars().nth(digits.len() - i + 1).collect();\n   |   \
    \                                                 ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmps8g6sugx.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmps8g6sugx.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0614]: type `str` cannot be dereferenced\n\
    \  --> /tmp/tmps8g6sugx.rs:15:12\n   |\n15 |     s.push(*digits[..]);\n   |  \
    \          ^^^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s.push((digit % 10).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ % 10).to_string());\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp79lll558.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79lll558.rs:18:16\n  \
    \ |\n18 |         s.push((carry % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        match digit {\n            '1' => s.push_str(&format!(\"{}{}\", carry,\
    \ digit)),\n            '0' => s.push_str(&format!(\"{}{}\", digit, carry)),\n\
    \            _ => panic!(\"Unexpected digit {}\", digit),\n        }\n       \
    \ carry = digit as isize - 1;\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"\
    {}\", carry));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0104847\"`,\n right: `\"001\"`', /tmp/tmptgdemg1b.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push(0);\n  \
    \  digits.reverse();\n    digits.rotate_left(shift);\n    digits\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7bz43y0i.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7bz43y0i.rs:15:17\n\
    \   |\n15 |     digits.push(0);\n   |                 ^ expected `char`, found\
    \ `u8`\n\nerror[E0599]: no method named `reverse` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp7bz43y0i.rs:16:12\n   |\n16 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0599]: no method named `rotate_left` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp7bz43y0i.rs:17:12\n   |\n17 | \
    \    digits.rotate_left(shift);\n   |            ^^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s += digits[..i];\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtp3ww68.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpjtp3ww68.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjtp3ww68.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjtp3ww68.rs:15:14\n\
    \   |\n15 |         s += digits[..i];\n   |              ^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found `str`\n   |          \
    \    help: consider borrowing here: `&digits[..i]`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0izzsj81.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp0izzsj81.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmp0izzsj81.rs:12:14\n   |\n12 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits[..]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpxf4u7e1f.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpxf4u7e1f.rs:13:18\n   |\n10 |  \
    \   let mut digits = x.to_string();\n   |                      ------------- expected\
    \ due to this value\n...\n13 |         digits = &digits[1..];\n   |          \
    \        ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\nhelp: try\
    \ using a conversion method\n   |\n13 |         digits = (&digits[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror[E0614]: type `str`\
    \ cannot be dereferenced\n  --> /tmp/tmpxf4u7e1f.rs:15:12\n   |\n15 |     s.push(*digits[..]);\n\
    \   |            ^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s += digits[..i];\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dlwmysl.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp7dlwmysl.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7dlwmysl.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7dlwmysl.rs:15:14\n\
    \   |\n15 |         s += digits[..i];\n   |              ^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found `str`\n   |          \
    \    help: consider borrowing here: `&digits[..i]`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        s +=\
    \ if carry == 0 {\n            d.to_string()\n        } else {\n            d.to_string().to_string()\
    \ + &\"0\"\n        };\n        carry = d / 10;\n    }\n    if carry > 0 {\n \
    \       s += &\"0\".to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpri5jwn4z.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpri5jwn4z.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    let mut carry = 0;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        n /= 10;\n        if carry > 0 {\n            s.insert(0, digit);\n \
    \       } else {\n            s.insert(0, digit + 1);\n        }\n        carry\
    \ = digit * digit;\n    }\n    if carry > 0 {\n        s.insert(0, 1);\n    }\n\
    \    s.reverse();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgz2qnsps.rs:16:25\n   |\n\
    16 |             s.insert(0, digit);\n   |                         ^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgz2qnsps.rs:18:25\n\
    \   |\n18 |             s.insert(0, digit + 1);\n   |                        \
    \ ^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgz2qnsps.rs:23:21\n   |\n23 |         s.insert(0, 1);\n   |   \
    \                  ^ expected `char`, found `u8`\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpgz2qnsps.rs:25:7\n\
    \   |\n25 |     s.reverse();\n   |       ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry + shift;\n        carry = digit / 10;\n   \
    \     s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7_p_x2zk.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7_p_x2zk.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwp6dupcn.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwp6dupcn.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp6dupcn.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[(digits.len()\
    \ - 1) - i];\n    }\n    s + digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy5nyvkt6.rs:12:42\n   |\n\
    12 |         s += digits[(digits.len() - 1) - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpy5nyvkt6.rs:12:40\n   |\n12 | \
    \        s += digits[(digits.len() - 1) - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpy5nyvkt6.rs:12:14\n   |\n12 |  \
    \       s += digits[(digits.len() - 1) - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5nyvkt6.rs:14:9\n\
    \   |\n14 |     s + digits\n   |         ^^^^^^\n   |         |\n   |        \
    \ expected `&str`, found struct `String`\n   |         help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        carry\
    \ = digit + carry;\n        s += digit.to_string();\n        x /= 10;\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6rf41174.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6rf41174.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ while shift > 0 {\n        result.push_str(&digits[shift..]);\n        shift\
    \ -= digits.len();\n    }\n    result.push_str(&digits[0..shift]);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9g2pc3dw.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp9g2pc3dw.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp9g2pc3dw.rs:13:26\n   |\n13 |         result.push_str(&digits[shift..]);\n\
    \   |                          ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9g2pc3dw.rs:14:18\n\
    \   |\n14 |         shift -= digits.len();\n   |                  ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize`\
    \ from `isize`\n  --> /tmp/tmp9g2pc3dw.rs:14:15\n   |\n14 |         shift -= digits.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other t"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        match\
    \ carry {\n            0 => s.push(d),\n            1 => s.push('0'),\n      \
    \      _ => s.push('1'),\n        }\n        carry = d / 10;\n    }\n    if carry\
    \ > 0 {\n        s.push('1');\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiz8jwhc_.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiz8jwhc_.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0369]: cannot divide `char` by `{integer}`\n  --> /tmp/tmpiz8jwhc_.rs:17:19\n\
    \   |\n17 |         carry = d / 10;\n   |                 - ^ -- {integer}\n \
    \  |                 |\n   |                 char\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap().to_string();\n\
    \    }\n    for i in 0..shift {\n        s += digits[i];\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpirq83mlm.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap().to_string();\n   |      \
    \                               ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                      ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmpirq83mlm.rs:15:14\n\
    \   |\n15 |         s += digits[i];\n   |              ^^^^^^^^^ `String` cannot\
    \ be indexed by `isize`\n   |\n   = help: the trait `Index<isize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if x % 10 == 0 {\n            s.push_str(&format!(\"\
    {}\", x % 10));\n        } else {\n            s.push_str(&format!(\"{}{}\", x\
    \ % 10, i as char));\n        }\n        x /= 10;\n    }\n    if shift > s.len()\
    \ {\n        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8b9a3i7f.rs:18:16\n   |\n\
    18 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8b9a3i7f.rs:19:11\n\
    \   |\n19 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmp8b9a3i7f.rs:14:49\n   |\n14 |        \
    \     s.push_str(&format!(\"{}{}\", x % 10, i as char));\n   |               \
    \                                  ^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmp8b9a3i7f.rs:14:49\n   |\n14 |         \
    \    s.push_str(&format!(\"{}{}\", x % 10, i as char));\n   |                \
    \                                 ^^^^^^^^^\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ze_ect_.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp6ze_ect_.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ze_ect_.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmp6ze_ect_.rs:15:14\n   |\n15 |         s\
    \ += digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += &x.to_string()[..i];\n    }\n    for i in 0..shift\
    \ {\n        s += &x.to_string()[i..];\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp2hlfk2o6.rs:11:15\n   |\n11 |         s += &x.to_string()[..i];\n\
    \   |               ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp2hlfk2o6.rs:14:15\n   |\n14 |         s += &x.to_string()[i..];\n\
    \   |               ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for &d\
    \ in x.to_string().chars().take(shift) {\n        s.push(d);\n    }\n    s.push('0');\n\
    \    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbx2n73lf.rs:10:42\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbx2n73lf.rs:10:9\n   |\n10 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa5lkiau8.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_pvb6nl.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg_pvb6nl.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        s +=\
    \ if carry {\n            '0'\n        } else {\n            '1'\n        };\n\
    \        carry = d >= '9';\n    }\n    if carry {\n        s += '0';\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:12:17\n  \
    \ |\n12 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:13:13\n\
    \   |\n13 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    13 |             \"0\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:15:13\n\
    \   |\n15 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    15 |             \"1\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:17:17\n\
    \   |\n10 |     let mut carry = 0;\n   |                     - expected due to\
    \ this value\n...\n17 |         carry = d >= '9';\n   |                 ^^^^^^^^\
    \ expected integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:19:8\n\
    \   |\n19 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp62qncjzd.rs:20:14\n   |\n20 |\
    \         s += '0';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqa2j_47.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpbqa2j_47.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    let mut carry = 0;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        n /= 10;\n        if carry > 0 {\n            s.insert(0, digit);\n \
    \       } else {\n            s.insert(0, digit + 1);\n        }\n        carry\
    \ = digit * digit;\n    }\n    if carry > 0 {\n        s.insert(0, 1);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnxvx14l.rs:16:25\n   |\n\
    16 |             s.insert(0, digit);\n   |                         ^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmnxvx14l.rs:18:25\n\
    \   |\n18 |             s.insert(0, digit + 1);\n   |                        \
    \ ^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmnxvx14l.rs:23:21\n   |\n23 |         s.insert(0, 1);\n   |   \
    \                  ^ expected `char`, found `u8`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for &d\
    \ in x.to_string().chars().take(shift) {\n        s.push(d);\n    }\n    s.push('0');\n\
    \    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbx2n73lf.rs:10:42\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbx2n73lf.rs:10:9\n   |\n10 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83zcv8oz.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp83zcv8oz.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp83zcv8oz.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp83zcv8oz.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - 1) - i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpclilpv2p.rs:12:54\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |         \
    \                                             ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpclilpv2p.rs:12:52\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |  \
    \                                                  ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpclilpv2p.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |  \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut shift = shift % 10;\n    while shift != 0 {\n  \
    \      remainder = remainder / 10;\n        shift = shift % 10;\n        s.push((remainder\
    \ % 10) + shift);\n    }\n    s.push((remainder % 10) + shift);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3wuzlgd4.rs:15:16\n   |\n\
    15 |         s.push((remainder % 10) + shift);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3wuzlgd4.rs:17:12\n\
    \   |\n17 |     s.push((remainder % 10) + shift);\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3je8rm45.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3je8rm45.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3je8rm45.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp3je8rm45.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp3je8rm45.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot "
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in digits.chars().cloned() {\n        s.push(i);\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjh01bmtl.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpjh01bmtl.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjh01bmtl.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0271]: type mismatch resolving `<Chars<'_>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpjh01bmtl.rs:14:29\n     |\n14   |\
    \     for i in digits.chars().cloned() {\n     |                             ^^^^^^\
    \ expected reference, found `char`\n     |\n     = note: expected reference `&_`\n\
    \                     found type `char`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmpjh01bmtl.rs:14:14\n   |\n14 |     for i in digits.chars().cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s += digits[i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc0bjr0qi.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpc0bjr0qi.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc0bjr0qi.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpc0bjr0qi.rs:15:14\n   |\n15 |         s += digits[i];\n\
    \   |              ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed expl"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_pvb6nl.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg_pvb6nl.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i as usize];\n\
    \    }\n    for i in 0..shift {\n        digits[i as usize] = digits[(shift +\
    \ i) as usize];\n    }\n    s += digits\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpaqtuk9kf.rs:12:14\n\
    \   |\n12 |         s += digits[i as usize];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpaqtuk9kf.rs:15:9\n   |\n15 |         digits[i as usize] = digits[(shift\
    \ + i) as usize];\n   |         ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpaqtuk9kf.rs:15:30\n   |\n15 |         digits[i as usize] = digits[(shift\
    \ + i) as usize];\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \     "
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        digits.push(digit.to_string());\n\
    \    }\n    if shift > digits.len() {\n        digits.reverse();\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu48inl3f.rs:14:21\n   |\n\
    14 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpu48inl3f.rs:16:16\n   |\n16 |     if shift > digits.len() {\n  \
    \ |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \                        ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpu48inl3f.rs:17:16\n\
    \   |\n17 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        let digit = digit as char;\n        let digit = digit as u8;\n      \
    \  let digit = digit as u16;\n        let digit = digit as u32;\n        let digit\
    \ = digit as u64;\n        let digit = digit as usize;\n        let digit = digit\
    \ as isize;\n        let digit = digit as i8;\n        let digit = digit as i16;\n\
    \        let digit = digit as i32;\n        let digit = digit as i64;\n      \
    \  let digit = digit as isize;\n        let digit = digit as i8;\n        let\
    \ digit = digit as i16;\n        let digit = digit as i32;\n        let digit\
    \ = digit as i64;\n        let digit = digit as isize;\n        let digit = digit\
    \ as i8;\n        let digit = digit as i16;\n        let digit = digit as i32;\n\
    \        let digit = digit as i64;\n        let digit = digit as isize;\n    \
    \    let digit = digit as i8;\n        let digit = digit as i16;\n        let\
    \ digit = digit as i32;\n        let digit = digit as i64;\n        let digit\
    \ = digit as isize;\n        let digit = digit as i8;\n        let digit = digit\
    \ as i16;\n        let digit = digit as i32;\n        let digit = digit as i64;\n\
    \        let digit = digit as isize;\n        let digit = digit as i8;\n     \
    \   let digit = digit as i16;\n        let digit = digit as i32;\n        let\
    \ digit = digit as i64;\n        let digit = digit as isize;\n        let digit\
    \ = digit as i8;\n        let digit = digit as i16;\n        let digit = digit\
    \ as i32;\n        let digit = digit as i64;\n        let digit = digit as isize;\n\
    \        let digit = digit as i8;\n        let digit = digit as i16;\n       \
    \ let digit = digit as i32;\n        let digit = digit as i64;\n        let digit\
    \ = digit as isize;\n        let digit = digit as i8;\n        let digit = digit\
    \ as i16;\n        let digit = digit as i32;\n        let digit = digit as i64;\n\
    \        let digit = digit as isize;\n        let digit = digit as i8;\n     \
    \   let digit = digit as i16;\n        let digit = digit as i32;\n        let\
    \ digit = digit as i64;\n        let digit = digit as isize;\n        let digit\
    \ = digit as i8;\n        let digit = digit as i16;\n\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwhylrj7o.rs:81:3\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               - unclosed delimiter\n...\n11\
    \ |     for digit in x.to_string().chars().take(shift as usize) {\n   |      \
    \                                                       - this delimiter might\
    \ not be properly closed...\n...\n72 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n81 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwhylrj7o.rs:8:46\n  |\n8 | fn circular_shift(x: isize, shift:\
    \ isize) -> String {\n  |    --------------                            ^^^^^^\
    \ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_pvb6nl.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg_pvb6nl.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        let digit = digit as char;\n        let digit = digit as u8;\n      \
    \  let digit = digit as u16;\n        let digit = digit as u32;\n        let digit\
    \ = digit as u64;\n        let digit = digit as usize;\n        let digit = digit\
    \ as isize;\n        let digit = digit as i8;\n        let digit = digit as i16;\n\
    \        let digit = digit as i32;\n        let digit = digit as i64;\n      \
    \  let digit = digit as isize;\n        let digit = digit as i8;\n        let\
    \ digit = digit as i16;\n        let digit = digit as i32;\n        let digit\
    \ = digit as i64;\n        let digit = digit as isize;\n        let digit = digit\
    \ as i8;\n        let digit = digit as i16;\n        let digit = digit as i32;\n\
    \        let digit = digit as i64;\n        let digit = digit as isize;\n    \
    \    let digit = digit as i8;\n        let digit = digit as i16;\n        let\
    \ digit = digit as i32;\n        let digit = digit as i64;\n        let digit\
    \ = digit as isize;\n        let digit = digit as i8;\n        let digit = digit\
    \ as i16;\n        let digit = digit as i32;\n        let digit = digit as i64;\n\
    \        let digit = digit as isize;\n        let digit = digit as i8;\n     \
    \   let digit = digit as i16;\n        let digit = digit as i32;\n        let\
    \ digit = digit as i64;\n        let digit = digit as isize;\n        let digit\
    \ = digit as i8;\n        let digit = digit as i16;\n        let digit = digit\
    \ as i32;\n        let digit = digit as i64;\n        let digit = digit as isize;\n\
    \        let digit = digit as i8;\n        let digit = digit as i16;\n       \
    \ let digit = digit as i32;\n        let digit = digit as i64;\n        let digit\
    \ = digit as isize;\n        let digit = digit as i8;\n        let digit = digit\
    \ as i16;\n        let digit = digit as i32;\n        let digit = digit as i64;\n\
    \        let digit = digit as isize;\n        let digit = digit as i8;\n     \
    \   let digit = digit as i16;\n        let digit = digit as i32;\n        let\
    \ digit = digit as i64;\n        let digit = digit as isize;\n        let digit\
    \ = digit as i8;\n        let digit = digit as i16;\n\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwhylrj7o.rs:81:3\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               - unclosed delimiter\n...\n11\
    \ |     for digit in x.to_string().chars().take(shift as usize) {\n   |      \
    \                                                       - this delimiter might\
    \ not be properly closed...\n...\n72 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n81 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwhylrj7o.rs:8:46\n  |\n8 | fn circular_shift(x: isize, shift:\
    \ isize) -> String {\n  |    --------------                            ^^^^^^\
    \ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n\
    \    }\n    s[0..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6aqw3r8i.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6aqw3r8i.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp6aqw3r8i.rs:21:5\n   |\n21 |     s[0..shift].to_string()\n   |\
    \     ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n\
    \   = help: the trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits[..(digits.len() - shift)].to_string();\n    digits = digits.reverse();\n\
    \    String::from(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppy1hfvmi.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmppy1hfvmi.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmppy1hfvmi.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ if shift > x.len() {\n        for i in x.len() - shift..x.len() {\n        \
    \    s += &x[i..i + shift].to_string();\n        }\n    } else {\n        for\
    \ i in 0..shift {\n            s += &x[i..i + shift].to_string();\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeqimlmei.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpeqimlmei.rs:14:18\n\
    \   |\n14 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpeqimlmei.rs:15:20\n   |\n15 |         for i\
    \ in x.len() - shift..x.len() {\n   |                    ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpeqimlmei.rs:15:37\n   |\n15 |         for i\
    \ in x.len() - shift..x.len() {\n   |                                     ^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpeqimlmei.rs:16:19\n   |\n16 |             s += &x[i..i\
    \ + shift].to_string();\n   |                   ^^^^^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpeqimlmei.rs:20:19\n\
    \   |\n20 |             s += &x[i..i + shift].to_string();\n   |             \
    \      ^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    for &d in digits {\n        let mut digit = d.to_digit(10);\n        if carry\
    \ {\n            digit += 1;\n        }\n        carry = digit >> shift;\n   \
    \     digit &= (1 << shift) - 1;\n        s.push((digit as char).to_string());\n\
    \    }\n    if carry {\n        s.push((carry as char).to_string());\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplwylqx6m.rs:12:9\n   |\n\
    12 |     for &d in digits {\n   |         ^^    ------ this expression has type\
    \ `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `d`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplwylqx6m.rs:14:12\n   |\n14 |         if carry\
    \ {\n   |            ^^^^^ expected `bool`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplwylqx6m.rs:19:16\n   |\n19 |         s.push((digit as\
    \ char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplwylqx6m.rs:21:8\n\
    \   |\n21 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplwylqx6m.rs:22:16\n   |\n22 |\
    \         s.push((carry as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `{integer}`\n  --> /tmp/tmplwylqx6m.rs:22:16\n   |\n22 |    \
    \     s.push((carry as char).to_string());\n   |                ^^^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmplwylqx6m.rs:22:16\n   |\n22 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push_str(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push_str(remainder);\n\
    \    digits.reverse();\n    digits.push_str(&[\n        '0',\n        '1',\n \
    \       '2',\n        '3',\n        '4',\n        '5',\n        '6',\n       \
    \ '7',\n        '8',\n        '9',\n    ][shift as usize]);\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxprmhphr.rs:12:25\n   |\n\
    12 |         digits.push_str(remainder % 10);\n   |                         ^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxprmhphr.rs:15:21\n\
    \   |\n15 |     digits.push_str(remainder);\n   |                     ^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpxprmhphr.rs:16:12\n\
    \   |\n16 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxprmhphr.rs:17:21\n   |\n17 |       digits.push_str(&[\n   |  _____________________^\n\
    18 | |         '0',\n19 | |         '1',\n20 | |         '2',\n...  |\n27 | |\
    \         '9',\n28 | |     ][shift as usize]);\n   | |_____________________^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c7fy_t0.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1c7fy_t0.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        if x >= 10 {\n            s.push_str(&format!(\"\
    {}{}\", x / 10, i % 10));\n            x %= 10;\n        } else {\n          \
    \  s.push_str(&format!(\"{}\", x));\n            x += carry;\n            carry\
    \ = 0;\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\"\
    , x));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpggtq3ojp.rs:14:13\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n14 |\
    \             x %= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpggtq3ojp.rs:17:13\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n17 |\
    \             x += carry;\n   |             ^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &n in &x.to_string().chars() {\n        let digit = n.to_digit(10);\n\
    \        if digit < 0 {\n            s.push_str(&n.to_string().chars().collect::<String>().rev());\n\
    \        } else {\n            s.push_str(&n.to_string().chars().collect::<String>());\n\
    \        }\n        let digit = digit + carry % 10;\n        carry = digit / 10;\n\
    \    }\n    if carry > 0 {\n        s.push_str(&n.to_string().chars().collect::<String>().rev());\n\
    \    }\n    if shift > s.len() {\n        s.reverse();\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `n` in this scope\n  --> /tmp/tmpbwer92oe.rs:22:21\n\
    \   |\n22 |         s.push_str(&n.to_string().chars().collect::<String>().rev());\n\
    \   |                     ^ help: a local variable with a similar name exists:\
    \ `s`\n\nerror[E0277]: `&Chars<'_>` is not an iterator\n  --> /tmp/tmpbwer92oe.rs:11:15\n\
    \   |\n11 |     for &n in &x.to_string().chars() {\n   |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \   |               |\n   |               `&Chars<'_>` is not an iterator\n  \
    \ |               help: consider removing the leading `&`-reference\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n   = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbwer92oe.rs:24:16\n\
    \   |\n24 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n24 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpbwer92oe.rs:25:11\n\
    \   |\n25 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperb46772.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmperb46772.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmperb46772.rs:12:14\n   |\n12 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmperb46772.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011425
