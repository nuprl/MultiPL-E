name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n///\
  \ >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>>\
  \ remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"\
  aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"\
  ))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()",
  '    text.chars().filter(|c| !is_vowel(c)).collect()', "    let mut vowels = vec!['a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z", "    text.chars()\n        .filter(|c|\
    \ !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n   \
    \     .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_vowel())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', '    text.chars().filter(|c|
    !c.is_vowel()).collect()', "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    let mut vowels\
    \ = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for ch in text.chars() {\n        if !vowels.contains(&ch.to_lowercase())\
    \ {\n            result.push_str(&ch.to_string());\n        } else {\n       \
    \     result.push_str(&ch.to_string());\n        }\n    }\n    result", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_control_character())\n\
    \        .filter(|c| !c.is_ascii_printable())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| c.is_alphabetic())\n        .filter(|c| !c.is_vowel())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_punctuation())\n        .filter(|c| !c.is_ascii_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_ascii_print())\n        .filter(|c| !c.is_ascii_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_ascii_symbol())\n        .filter(|c| !c.is_ascii_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_ascii_lowercase())\n        .filter(|c| !c.is_ascii_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_ascii_digit())\n        .filter(|c| !c.is_ascii_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_ascii_symbol())\n        .filter(|c| !c.is_ascii_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_ascii_control())\n        .filter(|c| !c.is_ascii_ascii_print())\n\
    \        .filter(|c| !c.is_ascii_ascii_graph())\n        .filter(|c| !c.is_ascii_punctuation())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect::<String>()", "    let mut vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::from(\"\
    \");\n    for ch in text.chars() {\n        if vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_ascii_lowercase());\n        } else {\n\
    \            result.push_str(&ch);\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_string());\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for ch in text.chars() {\n        if vowels.contains(ch)\
    \ {\n            result.push_str(&ch);\n        } else {\n            result.push_str(\"\
    _\");\n        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_vowel())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !c.is_ascii_lowercase()).collect()', "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()"]
stop_tokens:
- "\n}"
