name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n///\
  \ >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>>\
  \ remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"\
  aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"\
  ))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
  )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\"\
  )), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")),\
  \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"\
  cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"\
  ));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\
  }\n"
completions: ['    text.chars().filter(|c| !is_vowel(c)).collect()', "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::from(\"\");\n    for ch in text.chars() {\n        if vowels.contains(ch)\
    \ {\n            result.push_str(&ch);\n        } else {\n            result.push_str(\"\
    _\");\n        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars().filter_map(|c|\
    \ {\n        if c.is_uppercase() {\n            Some(c)\n        } else {\n  \
    \          None\n        }\n    }).collect()", "    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for ch in text.chars() {\n        if !vowels.contains(ch) {\n           \
    \ result.push_str(&ch);\n        }\n    }\n    result", "    text.chars()\n  \
    \      .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n   \
    \     .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect::<String>()", " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", '    text.chars().filter(|c|
    !c.is_vowel()).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    let mut vowels = HashSet::new();\n    vowels.insert(String::from('a'));\n \
    \   vowels.insert(String::from('e'));\n    vowels.insert(String::from('i'));\n\
    \    vowels.insert(String::from('o'));\n    vowels.insert(String::from('u'));\n\
    \    vowels.insert(String::from('y'));\n    vowels.insert(String::from('A'));\n\
    \    vowels.insert(String::from('E'));\n    vowels.insert(String::from('I'));\n\
    \    vowels.insert(String::from('O'));\n    vowels.insert(String::from('U'));\n\
    \    vowels.insert(String::from('Y'));\n\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowels_set = HashSet::new();\n\
    \    for ch in text.chars() {\n        if vowels.contains(ch) {\n            vowels_set.insert(ch);\n\
    \        }\n    }\n    for ch in vowels_set.keys() {\n        result.append(ch);\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic()\
    \ + c.is_lowercase() + c.is_uppercase())\n        .collect::<String>()\n     \
    \   .into_iter()\n        .filter(|c| !c.is_alphabetic() + !c.is_lowercase() +\
    \ !c.is_uppercase())\n        .collect::<String>()\n        .into_iter()\n   \
    \     .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c\
    \ in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", '    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect()", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut\
    \ result = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(ch)\
    \ {\n            result.push_str(&ch);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect::<String>()", " \
    \   let mut vowels = HashSet::new();\n    vowels.insert(String::from('a'));\n\
    \    vowels.insert(String::from('e'));\n    vowels.insert(String::from('i'));\n\
    \    vowels.insert(String::from('o'));\n    vowels.insert(String::from('u'));\n\
    \    vowels.insert(String::from('y'));\n    vowels.insert(String::from('A'));\n\
    \    vowels.insert(String::from('E'));\n    vowels.insert(String::from('I'));\n\
    \    vowels.insert(String::from('O'));\n    vowels.insert(String::from('U'));\n\
    \    vowels.insert(String::from('Y'));\n    text.chars().filter(|c| vowels.contains(&c.to_string())).collect()",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::from(\"\");\n    for c in text.chars() {\n     \
    \   if !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n\
    \    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    let mut vowels =\
    \ vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    let mut result = String::new();\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowels_count = vowels.len();\n\
    \    let mut vowels_index = 0;\n    for ch in text.chars() {\n        if vowels_count\
    \ > 0 {\n            if ch == vowels[vowels_index] {\n                vowels_count\
    \ -= 1;\n            } else {\n                vowels_index += 1;\n          \
    \      vowels_count += 1;\n            }\n        } else {\n            vowels_index\
    \ += 1;\n            vowels_count += 1;\n        }\n        result.push(ch);\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n  \
    \      .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c.to_ascii_lowercase()) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_string())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    let mut vowels =\
    \ vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| c.is_uppercase())\n        .filter(|c| !c.is_lowercase())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_graph())\n        .filter(|c| !c.is_ascii_punctuation())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph(0))\n\
    \        .filter(|c| !c.is_ascii_graph(1))\n        .filter(|c| !c.is_ascii_graph(2))\n\
    \        .filter(|c| !c.is_ascii_graph(3))\n        .filter(|c| !c.is_ascii_graph(4))\n\
    \        .filter(|c| !c.is_ascii_graph(5))\n        .filter(|c| !c.is_ascii_graph(6))\n\
    \        .filter(|c| !c.is_ascii_graph(7))\n        .filter(|c| !c.is_ascii_graph(8))\n\
    \        .filter(|c| !c.is_ascii_graph(9))\n        .filter(|c| !c.is_ascii_graph(10))\n\
    \        .filter(|c| !c.is_ascii_graph(11))\n        .filter(|c| !c.is_ascii_graph(12))\n\
    \        .filter(|c| !c.is_ascii_graph(13))\n        .filter(|c| !c.is_ascii_graph(14))\n\
    \        .filter(|c| !c.is_ascii_graph(15))\n        .filter(|c| !c.is_ascii_graph(16))\n\
    \        .filter(|c| !c.is_ascii_graph(17))\n        .filter(|c| !c.is_ascii_graph(18))\n\
    \        .filter(|c| !c.is_ascii_graph(19))\n        .filter(|c| !c.is_ascii_graph(20))\n\
    \        .filter(|c| !c.is_ascii_graph(21))\n        .filter(|c| !c.is_ascii_graph(22))\n\
    \        .filter(|c| !c.is_ascii_graph(23))\n        .filter(|c| !c.is_ascii_graph(24))\n\
    \        .filter(|c| !c.is_ascii_graph(25))\n        .filter(|c| !c.is_ascii_graph(26))\n\
    \        .filter(|c| !c.is_ascii_graph(27))\n        .filter(|c| !c.is_ascii_graph(28))\n\
    \        .filter(|c| !c.is_ascii_graph(29))\n        .filter(|c| !c.is_ascii_graph(30))\n\
    \        .filter(|c| !c.is_ascii_", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !c.is_vowel()).collect()',
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars().filter_map(|c| {\n        if c.is_uppercase() {\n            Some(c.to_lowercase())\n\
    \        } else {\n            None\n        }\n    }).collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars().filter_map(|c|\
    \ match c {\n        'a' => Some('e'),\n        'e' => Some('i'),\n        'i'\
    \ => Some('o'),\n        'o' => Some('u'),\n        'u' => Some('y'),\n      \
    \  'y' => Some(''),\n        _ => None,\n    }).collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    let mut vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_vowel())\n \
    \       .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_vowel())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", '    text.chars().filter(|c|
    !c.is_ascii_lowercase()).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_line_break())\n\
    \        .filter(|c| !c.is_ascii_control_character())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"), 1);\n    vowels.insert(String::from(\"e\"), 1);\n    vowels.insert(String::from(\"\
    i\"), 1);\n    vowels.insert(String::from(\"o\"), 1);\n    vowels.insert(String::from(\"\
    u\"), 1);\n    vowels.insert(String::from(\"y\"), 1);\n    vowels.insert(String::from(\"\
    A\"), 1);\n    vowels.insert(String::from(\"E\"), 1);\n    vowels.insert(String::from(\"\
    I\"), 1);\n    vowels.insert(String::from(\"O\"), 1);\n    vowels.insert(String::from(\"\
    U\"), 1);\n    vowels.insert(String::from(\"Y\"), 1);\n    text.chars().filter(|c|\
    \ vowels.contains(&c.to_string())).collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  '    text.chars().filter(|c| !is_vowel(c)).collect()', "    text.chars()\n     \
    \   .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect::<String>()", " \
    \   let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(&ch.to_ascii_lowercase()) {\n            result.append(ch);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(&ch.to_ascii_lowercase()) {\n            result.push_str(&ch);\n\
    \        } else {\n            result.push_str(&ch.to_ascii_lowercase());\n  \
    \      }\n    }\n    result", "    let mut vowels = HashSet::new();\n    vowels.insert(b'a',\
    \ b'e', b'i', b'o', b'u');\n    vowels.insert(b'b', b'c', b'd', b'f');\n    vowels.insert(b'z',\
    \ b'y', b'w');\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n  \
    \      .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n   \
    \     .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", " \
    \   text.chars().filter_map(|c| match c {\n        'a' => Some('e'),\n       \
    \ 'e' => Some('i'),\n        'i' => Some('o'),\n        'o' => Some('u'),\n  \
    \      'u' => Some('y'),\n        'y' => Some(''),\n        _ => None,\n    })\n\
    \    .collect::<String>()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for ch in\
    \ text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase()) {\n  \
    \          result.push_str(&ch.to_string());\n        }\n    }\n    result", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c\
    \ in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  '    text.chars().filter(|c| !is_vowel(c)).collect()', "    let mut vowels = vec!['a'..'z'];\n\
    \    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_control())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_tab())\n\
    \        .filter(|c| !c.is_ascii_verticaltab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_cr())\n        .filter(|c| !c.is_ascii_lf())\n\
    \        .filter(|c| !c.is_ascii_v())\n        .filter(|c| !c.is_ascii_a())\n\
    \        .filter(|c| !c.is_ascii_b())\n        .filter(|c| !c.is_ascii_c())\n\
    \        .filter(|c| !c.is_ascii_d())\n        .filter(|c| !c.is_ascii_e())\n\
    \        .filter(|c| !c.is_ascii_f())\n        .filter(|c| !c.is_ascii_g())\n\
    \        .filter(|c| !c.is_ascii_h())\n        .filter(|c| !c.is_ascii_i())\n\
    \        .filter(|c| !c.is_ascii_j())\n        .filter(|c| !c.is_ascii_k())\n\
    \        .filter(|c| !c.is_ascii_l())\n        .filter(|c| !c.is_ascii_m())\n\
    \        .filter(|c| !c.is_ascii_n())\n        .filter(|c| !c.is_ascii_o())\n\
    \        .filter(|c| !c.is_ascii_p())\n        .filter(|c| !c.is_ascii_q())\n\
    \        .filter(|c| !c.is_ascii_r())\n        .filter(|c| !c.is_ascii_s())\n\
    \        .filter(|c| !c.is_ascii_t())\n        .filter(|c| !c.is_ascii_u())\n\
    \        .filter(|c| !c.is_ascii_v())\n        .filter(|c| !c.is_ascii_w", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for ch\
    \ in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase()) {\n\
    \            result.push_str(&ch.to_string());\n        }\n    }\n    result",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  '    text.chars().filter(|c| !is_vowel(c)).collect()', "    text.chars()\n     \
    \   .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_line_break())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"));\n    vowels.insert(String::from(\"e\"));\n    vowels.insert(String::from(\"\
    i\"));\n    vowels.insert(String::from(\"o\"));\n    vowels.insert(String::from(\"\
    u\"));\n    vowels.insert(String::from(\"A\"));\n    vowels.insert(String::from(\"\
    E\"));\n    vowels.insert(String::from(\"I\"));\n    vowels.insert(String::from(\"\
    O\"));\n    vowels.insert(String::from(\"U\"));\n    text.chars().filter(|c| vowels.contains(&c.to_string())).collect()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    let mut vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"), true);\n    vowels.insert(String::from(\"e\"), true);\n    vowels.insert(String::from(\"\
    i\"), true);\n    vowels.insert(String::from(\"o\"), true);\n    vowels.insert(String::from(\"\
    u\"), true);\n    vowels.insert(String::from(\"A\"), true);\n    vowels.insert(String::from(\"\
    E\"), true);\n    vowels.insert(String::from(\"I\"), true);\n    vowels.insert(String::from(\"\
    O\"), true);\n    vowels.insert(String::from(\"U\"), true);\n    vowels.insert(String::from(\"\
    0\"), true);\n    vowels.insert(String::from(\"1\"), true);\n    vowels.insert(String::from(\"\
    2\"), true);\n    vowels.insert(String::from(\"3\"), true);\n    vowels.insert(String::from(\"\
    4\"), true);\n    vowels.insert(String::from(\"5\"), true);\n    vowels.insert(String::from(\"\
    6\"), true);\n    vowels.insert(String::from(\"7\"), true);\n    vowels.insert(String::from(\"\
    8\"), true);\n    vowels.insert(String::from(\"9\"), true);\n    vowels.insert(String::from(\"\
    !\"), true);\n    vowels.insert(String::from(\"?\"), true);\n    vowels.insert(String::from(\"\
    ,\"), true);\n    vowels.insert(String::from(\".\"), true);\n    vowels.insert(String::from(\"\
    ;\"), true);\n    vowels.insert(String::from(\":\"), true);\n    vowels.insert(String::from(\"\
    (\"), true);\n    vowels.insert(String::from(\")\"), true);\n    vowels.insert(String::from(\"\
    [\"), true);\n    vowels.insert(String::from(\"]\"), true);\n    vowels.insert(String::from(\"\
    {\"), true);\n    vowels.insert(String::from(\"}\"), true);\n    vowels.insert(String::from(\"\
    '\"), true);\n    vowels.insert(String::from(\"\\\"\"), true);\n    vowels.insert(String::from(\"\
    `\"), true);\n    vowels.insert(String::from(\"~\"), true);\n    vowels.insert(String::from(\"\
    !\"), true);\n    vowels.insert(String::from(\"?\"), true);\n    vowels.insert(String::from(\"\
    ,\"), true);\n    vowels.insert(String::from(\".\"), true);\n    vowels.insert(String::from(\"\
    ;\"), true);\n    vowels.insert(String::from(\":\"), true);\n    ", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "  \
    \  text.chars()\n        .filter(|c| c.is_alphabetic())\n        .filter(|c| !c.is_vowel())\n\
    \        .collect()", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   vowels.sort();\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if vowels.contains(&ch.to_lowercase()) {\n            result.push_str(&ch);\n\
    \        } else {\n            result.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    result", '    text.chars().filter(|c| !c.is_vowel()).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::from(\"\
    \");\n    for c in text.chars() {\n        if !vowels.contains(&c) {\n       \
    \     result.push(c);\n        }\n    }\n    result", "    text.chars()\n    \
    \    .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !c.is_ascii_lowercase()).collect()', '    text.chars().filter(|c| !is_vowel(c)).collect()',
  '    text.chars().filter(|c| !is_vowel(c)).collect()', '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .collect()", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"), 1);\n    vowels.insert(String::from(\"e\"), 1);\n    vowels.insert(String::from(\"\
    i\"), 1);\n    vowels.insert(String::from(\"o\"), 1);\n    vowels.insert(String::from(\"\
    u\"), 1);\n    vowels.insert(String::from(\"A\"), 1);\n    vowels.insert(String::from(\"\
    E\"), 1);\n    vowels.insert(String::from(\"I\"), 1);\n    vowels.insert(String::from(\"\
    O\"), 1);\n    vowels.insert(String::from(\"U\"), 1);\n    vowels.insert(String::from(\"\
    0\"), 1);\n    vowels.insert(String::from(\"1\"), 1);\n    vowels.insert(String::from(\"\
    2\"), 1);\n    vowels.insert(String::from(\"3\"), 1);\n    vowels.insert(String::from(\"\
    4\"), 1);\n    vowels.insert(String::from(\"5\"), 1);\n    vowels.insert(String::from(\"\
    6\"), 1);\n    vowels.insert(String::from(\"7\"), 1);\n    vowels.insert(String::from(\"\
    8\"), 1);\n    vowels.insert(String::from(\"9\"), 1);\n    vowels.insert(String::from(\"\
    _\"), 1);\n    vowels.insert(String::from(\"$\"), 1);\n    vowels.insert(String::from(\"\
    !\"), 1);\n    vowels.insert(String::from(\"@\"), 1);\n    vowels.insert(String::from(\"\
    %\"), 1);\n    vowels.insert(String::from(\"^\"), 1);\n    vowels.insert(String::from(\"\
    &\"), 1);\n    vowels.insert(String::from(\"*\"), 1);\n    vowels.insert(String::from(\"\
    (\"), 1);\n    vowels.insert(String::from(\")\"), 1);\n    vowels.insert(String::from(\"\
    ,\"), 1);\n    vowels.insert(String::from(\"-\"), 1);\n    vowels.insert(String::from(\"\
    .\"), 1);\n    vowels.insert(String::from(\"/\"), 1);\n    vowels.insert(String::from(\"\
    ?\"), 1);\n    vowels.insert(String::from(\"=\"), 1);\n    vowels.insert(String::from(\"\
    +\"), 1);\n    vowels.insert(String::from(\"{\"), 1);\n    vowels.insert(String::from(\"\
    }\"), 1);\n    vowels.insert(String::from(\"[\"), 1);\n    vowels.insert(String::from(\"\
    ]\"), 1);\n    vowels.insert(String::from(\"{\"), 1);\n", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !is_vowel(c))\n        .collect()", "    let mut result =\
    \ String::new();\n    for c in text.chars() {\n        if !is_vowel(c) {\n   \
    \         result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect::<String>()", " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect::<String>()", " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   let mut result = String::new();\n    for c in text.chars() {\n        if !is_vowel(c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars().filter_map(|c|\
    \ match c {\n        'a' => Some('e'),\n        'e' => Some('i'),\n        'i'\
    \ => Some('o'),\n        'o' => Some('u'),\n        'u' => Some('y'),\n      \
    \  'y' => Some(''),\n        _ => None,\n    })\n    .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_line_break())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_escape())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde", "    text.chars()\n        .filter(|c|\
    \ !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n   \
    \     .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()"]
stop_tokens:
- "\n}"
