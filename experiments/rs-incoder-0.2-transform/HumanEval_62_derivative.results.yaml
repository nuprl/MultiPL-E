language: rs
name: HumanEval_62_derivative
results:
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.push(1);\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * ys[i - 1]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 8, 40]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5beqzawd.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push((x\
    \ * (x - 1)) / 2);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltatc0uv.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp63o3vf2b.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 3, 5, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_omxy17k.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n  \
    \  }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4h4_rthz.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_deriv = vec![];\n    let mut xs_len = xs.len();\n    let mut xs_power\
    \ = vec![];\n    let mut xs_power_len = xs_power.len();\n    let mut xs_power_power\
    \ = vec![];\n    let mut xs_power_power_len = xs_power_power.len();\n    let mut\
    \ xs_power_power_power = vec![];\n    let mut xs_power_power_power_len = xs_power_power_power.len();\n\
    \    let mut xs_power_power_power_power = vec![];\n    let mut xs_power_power_power_power_len\
    \ = xs_power_power_power_power.len();\n    let mut xs_power_power_power_power_power\
    \ = vec![];\n    let mut xs_power_power_power_power_power_len = xs_power_power_power_power_power.len();\n\
    \    let mut xs_power_power_power_power_power_power = vec![];\n    let mut xs_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power.len();\n    let mut xs_power_power_power_power_power_power\
    \ = vec![];\n    let mut xs_power_power_power_power_power_power_len = xs_power_power_power_power_power_power.len();\n\
    \    let mut xs_power_power_power_power_power_power = vec![];\n    let mut xs_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power.len();\n    let mut xs_power_power_power_power_power_power\
    \ = vec![];\n    let mut xs_power_power_power_power_power_power_len = xs_power_power_power_power_power_power.len();\n\
    \    let mut xs_power_power_power_power_power_power = vec![];\n    let mut xs_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power.len();\n    let mut xs_power_power_power_power_power_power\
    \ = vec![];\n    let mut xs_power_power_power_power_power_power_power_len = xs_power_power_power_power_power_power_power.len();\n\
    \    let mut xs_power_power_power_power_power_power_power = vec![];\n    let mut\
    \ xs_power_power_power_power_power_power_power_len = xs_power_power_power_power_power_power_power_power.len();\n\
    \    let mut xs_power_power_power_power_power_power_power = vec![];\n    let mut\
    \ xs_power_power_power_power_power_power_power_len = xs_power_power_power_power_power_power_power_power.len();\n\
    \    let mut xs_\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_noxdlsn.rs:37:16\n   |\n\
    37 |     let mut xs_\n   |                ^ help: add `;` here\n38 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `xs_power_power_power_power_power_power_power`\
    \ in this scope\n  --> /tmp/tmp_noxdlsn.rs:32:64\n   |\n32 |     let mut xs_power_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power_power.len();\n   |                \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `xs_power_power_power_power_power_power_len`\n\
    \nerror[E0425]: cannot find value `xs_power_power_power_power_power_power_power_power`\
    \ in this scope\n  --> /tmp/tmp_noxdlsn.rs:34:64\n   |\n34 |     let mut xs_power_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power_power_power.len();\n   |          \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `xs_power_power_power_power_power_power_power_len`\n\
    \nerror[E0425]: cannot find value `xs_power_power_power_power_power_power_power_power`\
    \ in this scope\n  --> /tmp/tmp_noxdlsn.rs:36:64\n   |\n36 |     let mut xs_power_power_power_power_power_power_power_len\
    \ = xs_power_power_power_power_power_power_power_power.len();\n   |          \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `xs_power_power_power_power_power_power_power_len`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp_noxdlsn.rs:8:34\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ----------                    ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_len = xs.len();\n    let mut xs_pow\
    \ = vec![0; xs_len];\n    let mut xs_pow2 = vec![0; xs_len];\n    let mut xs_pow3\
    \ = vec![0; xs_len];\n    let mut xs_pow4 = vec![0; xs_len];\n    let mut xs_pow5\
    \ = vec![0; xs_len];\n    let mut xs_pow6 = vec![0; xs_len];\n    let mut xs_pow7\
    \ = vec![0; xs_len];\n    let mut xs_pow8 = vec![0; xs_len];\n    let mut xs_pow9\
    \ = vec![0; xs_len];\n    let mut xs_pow10 = vec![0; xs_len];\n    let mut xs_pow11\
    \ = vec![0; xs_len];\n    let mut xs_pow12 = vec![0; xs_len];\n    let mut xs_pow13\
    \ = vec![0; xs_len];\n    let mut xs_pow14 = vec![0; xs_len];\n    let mut xs_pow15\
    \ = vec![0; xs_len];\n    let mut xs_pow16 = vec![0; xs_len];\n    let mut xs_pow17\
    \ = vec![0; xs_len];\n    let mut xs_pow18 = vec![0; xs_len];\n    let mut xs_pow19\
    \ = vec![0; xs_len];\n    let mut xs_pow20 = vec![0; xs_len];\n    let mut xs_pow21\
    \ = vec![0; xs_len];\n    let mut xs_pow22 = vec![0; xs_len];\n    let mut xs_pow23\
    \ = vec![0; xs_len];\n    let mut xs_pow24 = vec![0; xs_len];\n    let mut xs_pow25\
    \ = vec![0; xs_len];\n    let mut xs_pow26 = vec![0; xs_len];\n    let mut xs_pow27\
    \ = vec![0; xs_len];\n    let mut xs_pow28 = vec![0; xs_len];\n    let mut xs_pow29\
    \ = vec![0; xs_len];\n    let mut xs_pow30 = vec![0; xs_len];\n    let mut xs_pow31\
    \ = vec![0; xs_len];\n    let mut xs_pow32 = \n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpdjj7o_ua.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_power = xs.clone();\n    xs_power.push(0);\n    let mut xs_power = xs_power.clone();\n\
    \    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n\
    \    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut\
    \ xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power =\
    \ xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n\
    \    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n\
    \    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut\
    \ xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power =\
    \ xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n\
    \    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n\
    \    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut\
    \ xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power =\
    \ xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n\
    \    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n\
    \    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut\
    \ xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power =\
    \ xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n\
    \    xs_power.push(1);\n    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n\
    \    let mut xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut\
    \ xs_power = xs_power.clone();\n    xs_power.push(1);\n    let mut xs_power =\
    \ xs_power.clone();\n    x\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpla5y78yc.rs:60:5\n\
    \   |\n60 |     x\n   |     ^ help: a local variable with a similar name exists:\
    \ `xs`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_power = xs.clone();\n    let mut power\
    \ = 1;\n    while xs_power.len() > 0 {\n        result.push(power);\n        xs_power.pop();\n\
    \        power *= xs_power.pop();\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply-assign `{integer}` by `Option<isize>`\n \
    \ --> /tmp/tmp2r0p333y.rs:15:15\n   |\n15 |         power *= xs_power.pop();\n\
    \   |               ^^ no implementation for `{integer} *= Option<isize>`\n  \
    \ |\n   = help: the trait `MulAssign<Option<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `MulAssign<Rhs>`:\n    \
    \         <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n        \
    \     <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n            \
    \ <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n             <i16\
    \ as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and 20 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push(i\
    \ * i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[25, 16, 4, 1, 9]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphxjx1q3r.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..xs.len() {\n        result.push(xs[i]\
    \ - xs[i - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpzwokud5n.rs:11:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    let mut x = 0;\n    let mut d = 0;\n    for &x in xs {\n\
    \        let mut y = x;\n        y += d;\n        ys.push(y);\n        d += x;\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdp96h4q.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    for i in 0..(xs.len()\
    \ - 1) {\n        xs_pow.push(xs[i]);\n    }\n    for i in 1..(xs.len() - 1) {\n\
    \        result.push(xs[i] * (xs_pow[i - 1] + xs_pow[i]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 6, 24]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp9p1vn1vs.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n\
    \    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n    let mut xs_pow5\
    \ = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7 = vec![];\n  \
    \  let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n    let mut xs_pow10\
    \ = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12 = vec![];\n\
    \    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n    let mut xs_pow15\
    \ = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17 = vec![];\n\
    \    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n    let mut xs_pow20\
    \ = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22 = vec![];\n\
    \    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n    let mut xs_pow25\
    \ = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27 = vec![];\n\
    \    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n    let mut xs_pow30\
    \ = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32 = vec![];\n\
    \    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n    let mut xs_pow35\
    \ = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37 = vec![];\n\
    \    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n    let mut xs_pow40\
    \ = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42 = vec![];\n\
    \    let mut xs_pow43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw_48s3y.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwt98qzd_.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj442awzn.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp576h5t_2.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0.0;\n    for &x in xs {\n        ys.push(1.0\
    \ + x * x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprjtbvm85.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrw1tkc2.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push(1);\n\
    \        for &y in ys {\n            ys.push(y * x);\n        }\n    }\n    ys\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2mgks9fg.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2mgks9fg.rs:13:13\n   |\n13 |         for &y in ys {\n   |    \
    \         ^^    -- this expression has type `Option<{integer}>`\n   |        \
    \     |\n   |             expected integer, found reference\n   |            \
    \ help: you can probably remove the explicit borrow: `y`\n   |\n   = note:   expected\
    \ type `{integer}`\n           found reference `&_`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push((xs[i\
    \ - 1] - xs[i]) / (xs[i] - xs[i - 1]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf53dv_ji.rs:11:22\n\
    \   |\n11 |         result.push((xs[i - 1] - xs[i]) / (xs[i] - xs[i - 1]));\n\
    \   |                      ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpf53dv_ji.rs:11:34\n   |\n11 |         result.push((xs[i - 1] -\
    \ xs[i]) / (xs[i] - xs[i - 1]));\n   |                                  ^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpf53dv_ji.rs:11:44\n\
    \   |\n11 |         result.push((xs[i - 1] - xs[i]) / (xs[i] - xs[i - 1]));\n\
    \   |                                            ^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpf53dv_ji.rs:11:52\n   |\n11 |         result.push((xs[i\
    \ - 1] - xs[i]) / (xs[i] - xs[i - 1]));\n   |                                \
    \                    ^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for "
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n  \
    \  }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4h4_rthz.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (xs.len() - 1)));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpnc9rilx2.rs:12:21\n\
    \   |\n12 |         result.push((x * (xs.len() - 1)));\n   |                 \
    \    ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n12 -         result.push((x * (xs.len()\
    \ - 1)));\n12 +         result.push(x * (xs.len() - 1));\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnc9rilx2.rs:11:9\n   |\n11 |     for &x in xs\
    \ {\n   |         ^^    -- this expression has type `Option<isize>`\n   |    \
    \     |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push((xs[0] -\
    \ xs[i]) / (xs[i] - i));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpvwjawl3u.rs:11:30\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - i));\n   |        \
    \                      ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpvwjawl3u.rs:11:40\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - i));\n   |        \
    \                                ^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo859lrax.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..xs.len() {\n        result.push(xs[i]\
    \ - xs[i - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpzwokud5n.rs:11:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp576h5t_2.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 3, 5, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp_omxy17k.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_pow = Vec::new();\n    let mut xs_pow2\
    \ = Vec::new();\n    let mut xs_pow3 = Vec::new();\n    let mut xs_pow4 = Vec::new();\n\
    \    let mut xs_pow5 = Vec::new();\n    let mut xs_pow6 = Vec::new();\n    let\
    \ mut xs_pow7 = Vec::new();\n    let mut xs_pow8 = Vec::new();\n    let mut xs_pow9\
    \ = Vec::new();\n    let mut xs_pow10 = Vec::new();\n    let mut xs_pow11 = Vec::new();\n\
    \    let mut xs_pow12 = Vec::new();\n    let mut xs_pow13 = Vec::new();\n    let\
    \ mut xs_pow14 = Vec::new();\n    let mut xs_pow15 = Vec::new();\n    let mut\
    \ xs_pow16 = Vec::new();\n    let mut xs_pow17 = Vec::new();\n    let mut xs_pow18\
    \ = Vec::new();\n    let mut xs_pow19 = Vec::new();\n    let mut xs_pow20 = Vec::new();\n\
    \    let mut xs_pow21 = Vec::new();\n    let mut xs_pow22 = Vec::new();\n    let\
    \ mut xs_pow23 = Vec::new();\n    let mut xs_pow24 = Vec::new();\n    let mut\
    \ xs_pow25 = Vec::new();\n    let mut xs_pow26 = Vec::new();\n    let mut xs_pow27\
    \ = Vec::new();\n    let mut xs_pow28 = Vec::new();\n    let mut xs_pow29 = Vec::new();\n\
    \    let mut xs_pow30 = Vec::new();\n    let mut xs_pow31 = Vec::new();\n    let\
    \ mut xs_pow32 = Vec::new();\n    let mut xs_pow33 = Vec::new();\n    let mut\
    \ xs_pow34 = Vec::new();\n    let mut xs_pow35 = Vec::new();\n    let mut xs_pow36\
    \ = Vec::new();\n    let mut xs_pow37 = Vec::new();\n    let mut xs_pow38 = Vec::new();\n\
    \    let mut xs_pow39 = Vec::new();\n    let mut xs_pow40 = \n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpq9m43h92.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push((xs.len() - i -\
    \ 1) * xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1yk_4u2d.rs:11:29\n   |\n\
    11 |         ys.push((xs.len() - i - 1) * xs[i]);\n   |                      \
    \       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize`\
    \ from `usize`\n  --> /tmp/tmp1yk_4u2d.rs:11:27\n   |\n11 |         ys.push((xs.len()\
    \ - i - 1) * xs[i]);\n   |                           ^ no implementation for `usize\
    \ - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp1yk_4u2d.rs:11:38\n\
    \   |\n11 |         ys.push((xs.len() - i - 1) * xs[i]);\n   |               \
    \                       ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_len = xs.len();\n    if xs_len == 0 {\n        return vec![];\n    }\n\
    \    let mut ys = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow_len\
    \ = xs_len.clone();\n    let mut xs_pow_len2 = xs_len.clone();\n    let mut xs_pow_len3\
    \ = xs_len.clone();\n    let mut xs_pow_len4 = xs_len.clone();\n    let mut xs_pow_len5\
    \ = xs_len.clone();\n    let mut xs_pow_len6 = xs_len.clone();\n    let mut xs_pow_len7\
    \ = xs_len.clone();\n    let mut xs_pow_len8 = xs_len.clone();\n    let mut xs_pow_len9\
    \ = xs_len.clone();\n    let mut xs_pow_len10 = xs_len.clone();\n    let mut xs_pow_len11\
    \ = xs_len.clone();\n    let mut xs_pow_len12 = xs_len.clone();\n    let mut xs_pow_len13\
    \ = xs_len.clone();\n    let mut xs_pow_len14 = xs_len.clone();\n    let mut xs_pow_len15\
    \ = xs_len.clone();\n    let mut xs_pow_len16 = xs_len.clone();\n    let mut xs_pow_len17\
    \ = xs_len.clone();\n    let mut xs_pow_len18 = xs_len.clone();\n    let mut xs_pow_len19\
    \ = xs_len.clone();\n    let mut xs_pow_len20 = xs_len.clone();\n    let mut xs_pow_len21\
    \ = xs_len.clone();\n    let mut xs_pow_len22 = xs_len.clone();\n    let mut xs_pow_len23\
    \ = xs_len.clone();\n    let mut xs_pow_len24 = xs_len.clone();\n    let mut xs_pow_len25\
    \ = xs_len.clone();\n    let mut xs_pow_len26 = xs_len.clone();\n    let mut xs_pow_len27\
    \ = xs_len.clone();\n    let mut xs_pow_len28 = xs_len.clone();\n    let mut xs_pow_len29\
    \ = xs_len.clone();\n    let mut xs_pow_len30 = xs_len.clone();\n    let mut xs_pow_len31\
    \ = xs_len.clone();\n    let mut xs_pow_len32 = xs_len.clone();\n    let mut xs_pow_len33\
    \ = xs_len.clone();\n    let mut x\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplpyn8wd6.rs:48:14\n   |\n\
    48 |     let mut x\n   |              ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmplpyn8wd6.rs:8:34\n  |\n\
    8 | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------         \
    \           ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdtty66mh.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n\
    \    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n    let mut xs_pow5\
    \ = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7 = vec![];\n  \
    \  let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n    let mut xs_pow10\
    \ = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12 = vec![];\n\
    \    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n    let mut xs_pow15\
    \ = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17 = vec![];\n\
    \    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n    let mut xs_pow20\
    \ = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22 = vec![];\n\
    \    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n    let mut xs_pow25\
    \ = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27 = vec![];\n\
    \    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n    let mut xs_pow30\
    \ = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32 = vec![];\n\
    \    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n    let mut xs_pow35\
    \ = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37 = vec![];\n\
    \    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n    let mut xs_pow40\
    \ = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42 = vec![];\n\
    \    let mut xs_pow43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw_48s3y.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x\
    \ - x) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7h3dmdw.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx.pop();\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpm23ih1xn.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp157wc3lm.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4k6abgi9.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp63o3vf2b.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_len = xs.len();\n    if xs_len == 0 {\n\
    \        return result;\n    }\n    let mut xs_power = xs_len - 1;\n    while\
    \ xs_power > 0 {\n        let mut sum = 0;\n        for _ in 0..(xs_power - 1)\
    \ {\n            sum += xs[xs_power];\n        }\n        result.push(sum);\n\
    \        xs_power -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 8, 2, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpzpem5t1h.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push((x\
    \ - 1) / x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3hckp_b.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrw1tkc2.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1)).into());\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81b5e24c.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push((xs.len()\
    \ - i).powf(2));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp77xz0kog.rs:11:33\n   |\n\
    11 |         result.push((xs.len() - i).powf(2));\n   |                      \
    \           ^ expected `usize`, found `isize`\n\nerror[E0599]: no method named\
    \ `powf` found for type `usize` in the current scope\n  --> /tmp/tmp77xz0kog.rs:11:36\n\
    \   |\n11 |         result.push((xs.len() - i).powf(2));\n   |               \
    \                     ^^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n  --> /tmp/tmp77xz0kog.rs:11:31\n\
    \   |\n11 |         result.push((xs.len() - i).powf(2));\n   |               \
    \                ^ no implementation for `usize - &isize`\n   |\n   = help: the\
    \ trait `Sub<&isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n\
    \    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n    let mut xs_pow5\
    \ = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7 = vec![];\n  \
    \  let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n    let mut xs_pow10\
    \ = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12 = vec![];\n\
    \    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n    let mut xs_pow15\
    \ = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17 = vec![];\n\
    \    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n    let mut xs_pow20\
    \ = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22 = vec![];\n\
    \    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n    let mut xs_pow25\
    \ = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27 = vec![];\n\
    \    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n    let mut xs_pow30\
    \ = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32 = vec![];\n\
    \    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n    let mut xs_pow35\
    \ = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37 = vec![];\n\
    \    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n    let mut xs_pow40\
    \ = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42 = vec![];\n\
    \    let mut xs_pow43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw_48s3y.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        result.push(y * (x - 1));\n        y *= x;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd9ypd5s.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in xs.iter() {\n        result.push(i *\
    \ i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpclsg417p.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp576h5t_2.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1)));\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpd969jx0k.rs:12:17\n\
    \   |\n12 |         ys.push((x * (xs.len() - 1)));\n   |                 ^   \
    \               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n12 -         ys.push((x * (xs.len() - 1)));\n\
    12 +         ys.push(x * (xs.len() - 1));\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd969jx0k.rs:11:9\n   |\n11 |     for &x in xs {\n   |         ^^\
    \    -- this expression has type `Option<isize>`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1wnmgxq.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut x =\
    \ xs[i];\n        let mut y = x;\n        for j in (i + 1)..(xs.len()) {\n   \
    \         y *= x;\n            y += xs[j];\n        }\n        result.push(y);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[305, 12, 21, 21]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpr6de2d2w.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.resize(xs.len(), 0);\n    for i in 0..ys.len()\
    \ {\n        ys[i] = xs[i] - xs[i - 1];\n    }\n    ys\n}\n\nfn main() {\n   \
    \ let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpee7ajrza.rs:12:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1)).into());\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81b5e24c.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    let mut d = 0;\n    for &x in\
    \ xs {\n        d += x;\n        ys.push(d);\n    }\n    ys\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4uw25sfv.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.resize(xs.len(), 0);\n    for i in 0..(xs.len()\
    \ - 1) {\n        ys[i] = xs[i + 1] - xs[i] * ys[i] / xs[i];\n    }\n    ys\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2fsln7i5.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..xs.len() {\n        result.push(xs[i]\
    \ - xs[i - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpzwokud5n.rs:11:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push((xs[i\
    \ + 1] - xs[i]) / (xs[i + 1]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpp2vz0fyc.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push((xs[i\
    \ + 1] - xs[i]) / (xs[i + 1]));\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmllg118_.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push((xs[0] -\
    \ xs[i]) / (xs[i] - 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpi_69lim5.rs:11:30\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - 1));\n   |        \
    \                      ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpi_69lim5.rs:11:40\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - 1));\n   |        \
    \                                ^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    let mut\
    \ z = 1;\n    for i in xs.iter() {\n        result .= x * y;\n        x /= i;\n\
    \        y /= i;\n        z /= i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `=`\n  --> /tmp/tmp49nal619.rs:14:17\n   |\n14\
    \ |         result .= x * y;\n   |                 ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp49nal619.rs:14:19\n   |\n9  |     let mut result = Vec::new();\n\
    \   |                      ---------- expected due to this value\n...\n14 |  \
    \       result .= x * y;\n   |                   ^^^^^ expected struct `Vec`,\
    \ found integer\n   |\n   = note: expected struct `Vec<_>`\n                found\
    \ type `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_der: Vec<isize> = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n\
    \    xs_der.pop();\n    xs_der.pop();\n    xs_der\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpukomymwf.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        result.push(y);\n        y *= x;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf2cp50v1.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push(x\
    \ / x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4kz98za.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_power = xs.clone();\n    let mut xs_power_index\
    \ = 0;\n    let mut xs_power_sum = 0;\n    while xs_power_index < xs.len() {\n\
    \        xs_power_sum += xs_power[xs_power_index];\n        xs_power_index +=\
    \ 1;\n    }\n    while xs_power_index < xs.len() {\n        let mut xs_power_sum\
    \ = xs_power[xs_power_index];\n        let mut xs_power_sum_index = 0;\n     \
    \   while xs_power_sum_index < xs_power.len() {\n            let mut xs_power_sum_power\
    \ = xs_power[xs_power_index];\n            while xs_power_sum_index < xs_power.len()\
    \ {\n                let mut xs_power_sum_power_index = 0;\n                while\
    \ xs_power_sum_power_index < xs_power.len() {\n                    xs_power_sum_power\
    \ += xs_power[xs_power_index] * xs_power[xs_power_sum_index];\n              \
    \      xs_power_sum_power_index += 1;\n                }\n                result.push(xs_power_sum\
    \ / xs_power_sum_power);\n                xs_power_sum_index += 1;\n         \
    \   }\n            xs_power_index += 1;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpteqmlwr8.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push((xs.len() - i) *\
    \ i);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqloc4y02.rs:11:29\n   |\n\
    11 |         ys.push((xs.len() - i) * i);\n   |                             ^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from\
    \ `usize`\n  --> /tmp/tmpqloc4y02.rs:11:27\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                           ^ no implementation for `usize -\
    \ &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqloc4y02.rs:11:34\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                                  ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot multiply `usize` by `&isize`\n  --> /tmp/tmpqloc4y02.rs:11:32\n\
    \   |\n11 |         ys.push((xs.len() - i) * i);\n   |                       \
    \         ^ no implementation for `usize * &isize`\n   |\n   = help: the trait\
    \ `Mul<&isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqloc4y02.rs:13:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     ys\n   |     ^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 5 pre"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo859lrax.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow_2 = vec![];\n\
    \    let mut xs_pow_3 = vec![];\n    let mut xs_pow_4 = vec![];\n    let mut xs_pow_5\
    \ = vec![];\n    let mut xs_pow_6 = vec![];\n    let mut xs_pow_7 = vec![];\n\
    \    let mut xs_pow_8 = vec![];\n    let mut xs_pow_9 = vec![];\n    let mut xs_pow_10\
    \ = vec![];\n    let mut xs_pow_11 = vec![];\n    let mut xs_pow_12 = vec![];\n\
    \    let mut xs_pow_13 = vec![];\n    let mut xs_pow_14 = vec![];\n    let mut\
    \ xs_pow_15 = vec![];\n    let mut xs_pow_16 = vec![];\n    let mut xs_pow_17\
    \ = vec![];\n    let mut xs_pow_18 = vec![];\n    let mut xs_pow_19 = vec![];\n\
    \    let mut xs_pow_20 = vec![];\n    let mut xs_pow_21 = vec![];\n    let mut\
    \ xs_pow_22 = vec![];\n    let mut xs_pow_23 = vec![];\n    let mut xs_pow_24\
    \ = vec![];\n    let mut xs_pow_25 = vec![];\n    let mut xs_pow_26 = vec![];\n\
    \    let mut xs_pow_27 = vec![];\n    let mut xs_pow_28 = vec![];\n    let mut\
    \ xs_pow_29 = vec![];\n    let mut xs_pow_30 = vec![];\n    let mut xs_pow_31\
    \ = vec![];\n    let mut xs_pow_32 = vec![];\n    let mut xs_pow_33 = vec![];\n\
    \    let mut xs_pow_34 = vec![];\n    let mut xs_pow_35 = vec![];\n    let mut\
    \ xs_pow_36 = vec![];\n    let mut xs_pow_37 = vec![];\n    let mut xs_pow_38\
    \ = vec![];\n    let mut xs_pow_39 = vec![];\n    let mut xs_pow_40 = vec![];\n\
    \    let mut xs_pow_41 = vec![];\n    let mut xs_pow_42 = vec![];\n    let mut\
    \ xs_pow_43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl29b2ibu.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_len = xs.len();\n    if xs_len == 0\
    \ {\n        return result;\n    }\n    let mut xs_pow = vec![0; xs_len];\n  \
    \  let mut xs_pow_len = xs_len + 1;\n    let mut xs_pow_last = vec![0; xs_pow_len];\n\
    \    let mut xs_pow_last_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow =\
    \ vec![0; xs_pow_len];\n    let mut xs_pow_last_pow_len = xs_pow_len + 1;\n  \
    \  let mut xs_pow_last_pow_pow = vec![0; xs_pow_len];\n    let mut xs_pow_last_pow_pow_len\
    \ = xs_pow_len + 1;\n    let mut xs_pow_last_pow_pow_pow = vec![0; xs_pow_len];\n\
    \    let mut xs_pow_last_pow_pow_pow_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow_pow_pow_len\
    \ = xs_pow_len + 1;\n    let mut xs_pow_last_pow_pow_pow_pow = vec![0; xs_pow_len];\n\
    \    let mut xs_pow_last_pow_pow_pow_pow_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow_pow_pow_pow_pow\
    \ = vec![0; xs_pow_len];\n    let mut xs_pow_last_pow_pow_pow_pow_len = xs_pow_len\
    \ + 1;\n    let mut xs_pow_last_pow_pow_pow_pow_pow = vec![0; xs_pow_len];\n \
    \   let mut xs_pow_last_pow_pow_pow_pow_pow_len = xs_pow_len + 1;\n    let mut\
    \ xs_pow_last_pow_pow_pow_pow_pow_pow = vec![0; xs_pow_len];\n    let mut xs_pow_last_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_len + 1;\n    let mut xs_pow_last_pow_pow_pow_pow_pow_pow_pow = vec![0;\
    \ xs_pow_len];\n    let mut xs_pow_last_pow_pow_pow_pow_pow_pow_len = xs_pow_len\
    \ + 1;\n    let mut xs_pow_last_pow_pow_pow_pow_pow_pow_pow = vec![0; xs_pow_len];\n\
    \    let mut xs_pow_last_pow_pow_pow_pow_pow_pow_len = xs_pow_len + 1;\n    let\
    \ mut xs_pow_last_pow_pow_pow_pow_pow_pow_pow = vec![0; xs_pow_len];\n    let\
    \ mut xs_pow_last_pow_pow_pow_pow_pow_pow_pow_len = xs_pow_len + 1;\n    let mut\
    \ xs_\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwkdobxn8.rs:39:16\n   |\n\
    39 |     let mut xs_\n   |                ^ help: add `;` here\n40 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwkdobxn8.rs:8:34\n\
    \  |\n8 | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------   \
    \                 ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmposyxte77.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push(1);\n\
    \        ys.push(x * x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxgmfllr_.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp576h5t_2.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.resize(xs.len(), 0);\n    let mut x = 0;\n    for\
    \ &x in xs {\n        ys[x] += x;\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprb0pyqo7.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut x =\
    \ xs[i];\n        let mut y = x;\n        let mut z = x;\n        for j in (i\
    \ + 1)..(xs.len()) {\n            y += xs[j] * z;\n            z *= x;\n     \
    \   }\n        result.push(y);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[537, 12, 30, 24]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpje_6k646.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    for i in xs.iter()\
    \ {\n        x += i;\n        y += 1;\n        result.push(y * (x - 1));\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 6, 15, 36, 70]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpftwf4_c8.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo859lrax.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.reverse();\n    dx.push(0);\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpttqcyza_.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2tpzaet7.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_len = xs.len();\n    if xs_len == 0 {\n        return vec![];\n    }\n\
    \    let mut xs_der: Vec<isize> = xs.clone();\n    xs_der.pop();\n    for i in\
    \ 0..(xs_len - 1) {\n        xs_der.push(xs_der[i] + xs_der[i + 1] * xs_der[i]);\n\
    \    }\n    xs_der\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4, 6, 3, 10, 28]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpglltn4os.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - xs.iter().cloned().sum());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqse6rupy.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppnxvredj.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push((xs[i\
    \ - 1] + xs[i]) / 2.0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpg6f5i1_g.rs:11:22\n\
    \   |\n11 |         result.push((xs[i - 1] + xs[i]) / 2.0);\n   |            \
    \          ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpg6f5i1_g.rs:11:34\n\
    \   |\n11 |         result.push((xs[i - 1] + xs[i]) / 2.0);\n   |            \
    \                      ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for i in xs.iter() {\n       \
    \ x += i;\n        result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpy2o55rql.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n  \
    \  }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4h4_rthz.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptp4xcy04.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i + 1);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 3, 5, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpu1wtcfvb.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppnxvredj.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        ys.push((x\
    \ * (xs.len() - 1)));\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpd969jx0k.rs:12:17\n\
    \   |\n12 |         ys.push((x * (xs.len() - 1)));\n   |                 ^   \
    \               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n12 -         ys.push((x * (xs.len() - 1)));\n\
    12 +         ys.push(x * (xs.len() - 1));\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd969jx0k.rs:11:9\n   |\n11 |     for &x in xs {\n   |         ^^\
    \    -- this expression has type `Option<isize>`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x).clone());\n\
    \    }\n    for &x in result {\n        *x *= x;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk1aweiyi.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_pow: Vec<isize> = xs.clone();\n    xs_pow.insert(0, 1);\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.insert(0, 0);\n    for i in 1..xs.len()\
    \ {\n        let mut dx_pow: Vec<isize> = dx.clone();\n        dx_pow.insert(0,\
    \ 0);\n        for j in 0..xs.len() {\n            dx_pow[0] += xs_pow[j] * dx[j];\n\
    \        }\n        dx = dx_pow;\n    }\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[314, 143, 43, 30, 0, 3, 1, 2, 4, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpzx9z09xo.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1wnmgxq.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter().rev() {\n        ys.push(i as isize);\n\
    \        ys.push(1);\n    }\n    ys.rev()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpz0s3u7h5.rs:14:8\n\
    \    |\n14  |       ys.rev()\n    |          ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \  --> /tmp/tmpz0s3u7h5.rs:11:17\n   |\n11 |         ys.push(i as isize);\n  \
    \ |                 -^^^^^^^^^\n   |                 |\n   |                 cannot\
    \ cast `&isize` as `isize`\n   |                 help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.reverse();\n    dx.push(0);\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpttqcyza_.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i + 1]\
    \ - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpo859lrax.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push((xs.len() - i) *\
    \ i);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqloc4y02.rs:11:29\n   |\n\
    11 |         ys.push((xs.len() - i) * i);\n   |                             ^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from\
    \ `usize`\n  --> /tmp/tmpqloc4y02.rs:11:27\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                           ^ no implementation for `usize -\
    \ &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqloc4y02.rs:11:34\n   |\n11 |         ys.push((xs.len()\
    \ - i) * i);\n   |                                  ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot multiply `usize` by `&isize`\n  --> /tmp/tmpqloc4y02.rs:11:32\n\
    \   |\n11 |         ys.push((xs.len() - i) * i);\n   |                       \
    \         ^ no implementation for `usize * &isize`\n   |\n   = help: the trait\
    \ `Mul<&isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqloc4y02.rs:13:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     ys\n   |     ^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 5 pre"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    let mut x = 1;\n    for &x in xs {\n        ys.push(x\
    \ / x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4kz98za.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.extend_from_slice(xs.iter().cloned());\n    ys.iter_mut().for_each(|x|\
    \ {\n        *x -= 1;\n    });\n    ys\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiipuvkx5.rs:10:26\n   |\n\
    10 |     ys.extend_from_slice(xs.iter().cloned());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `&[_]`, found struct `Cloned`\n   |\n   = note:\
    \ expected reference `&[_]`\n                 found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_len = xs.len();\n    if xs_len == 0 {\n\
    \        return result;\n    }\n    let mut x = xs[0];\n    let mut y = 1;\n \
    \   let mut pow = 1;\n    for &x in xs[1..] {\n        pow *= x;\n        y +=\
    \ pow;\n    }\n    result.append(y / x);\n    for &x in xs[1..] {\n        let\
    \ mut pow = 1;\n        for &y in &result {\n            pow *= y;\n        }\n\
    \        result.append(pow * x);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp93ghsh2g.rs:17:15\n   |\n17 |     for &x in\
    \ xs[1..] {\n   |               ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n17 |     for &x in &xs[1..]\
    \ {\n   |               +\n17 |     for &x in &mut xs[1..] {\n   |           \
    \    ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp93ghsh2g.rs:17:15\n\
    \   |\n17 |     for &x in xs[1..] {\n   |               ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n17 | \
    \    for &x in &xs[1..] {\n   |               +\n17 |     for &x in &mut xs[1..]\
    \ {\n   |               ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp93ghsh2g.rs:21:19\n\
    \   |\n21 |     result.append(y / x);\n   |                   ^^^^^ expected `&mut\
    \ Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `isize`\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmp93ghsh2g.rs:22:15\n   |\n22 |     for &x in xs[1..] {\n   |   \
    \            ^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n \
    \  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `[isize]`\n\
    help: consider borrowing here\n   |\n22 |     for &x in &xs[1..] {\n   |     \
    \          +\n22 |     for &x in &mut xs[1..] {\n   |               ++++\n\nerror[E0277]:\
    \ `[isize]` is not an iterator\n  --> /tmp/tmp93ghsh2g.rs:22:15\n   |\n22 |  \
    \   for &x in xs[1..] {\n   |               ^^^^^^^ expected an implementor of\
    \ trait `IntoIterator`\n   |\n   = note"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push(i\
    \ * xs.last().unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[25, 20, 10, 5, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpf98ry2qd.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp157wc3lm.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_dp = vec![];\n    for i in xs.iter() {\n        xs_dp.push(i * i);\n\
    \    }\n    xs_dp\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3pz2cvfr.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in xs.iter() {\n        result.push(i *\
    \ i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpclsg417p.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_power = xs.clone();\n    xs_power.push(1);\n    let mut result = vec![];\n\
    \    while xs_power.len() > 1 {\n        let mut sum = 0;\n        for &x in xs_power\
    \ {\n            sum += x * x;\n        }\n        result.push(sum);\n       \
    \ xs_power.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwzkmawmi.rs:14:13\n   |\n\
    14 |         for &x in xs_power {\n   |             ^^    -------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `x`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_power = xs.clone();\n    let mut power\
    \ = 1;\n    while xs_power.len() > 0 {\n        let mut next_power = 1;\n    \
    \    for &x in xs_power {\n            next_power *= x;\n        }\n        result.push(power);\n\
    \        xs_power = xs_power.iter().skip(1).collect();\n        power *= next_power;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmidq2z_g.rs:14:13\n   |\n\
    14 |         for &x in xs_power {\n   |             ^^    -------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `x`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpmidq2z_g.rs:18:44\n     |\n\
    18   |         xs_power = xs_power.iter().skip(1).collect();\n     |         \
    \                                   ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_power = xs.clone();\n    xs_power.push(1);\n    let mut result = vec![];\n\
    \    for i in xs.iter().rev() {\n        result.push(xs_power[i - 1] * i);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpad8p8a_r.rs:13:21\n\
    \   |\n13 |         result.push(xs_power[i - 1] * i);\n   |                  \
    \   ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp63o3vf2b.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 1;\n    for &x in\
    \ xs {\n        result.push(y * (x - 1));\n        y += x;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbeqec8da.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi2rpy84j.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjqnixr4b.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - xs.iter().cloned().sum() / xs.len());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg16nam9x.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ - xs[0]) / (xs[1] - xs[0]));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9o5ug3cq.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 1;\n    let mut y = 1;\n    for &x\
    \ in xs {\n        y += x;\n        result.push((y - x) / x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe7glfbwk.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n\
    \    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n    let mut xs_pow5\
    \ = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7 = vec![];\n  \
    \  let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n    let mut xs_pow10\
    \ = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12 = vec![];\n\
    \    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n    let mut xs_pow15\
    \ = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17 = vec![];\n\
    \    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n    let mut xs_pow20\
    \ = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22 = vec![];\n\
    \    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n    let mut xs_pow25\
    \ = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27 = vec![];\n\
    \    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n    let mut xs_pow30\
    \ = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32 = vec![];\n\
    \    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n    let mut xs_pow35\
    \ = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37 = vec![];\n\
    \    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n    let mut xs_pow40\
    \ = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42 = vec![];\n\
    \    let mut xs_pow43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw_48s3y.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - x * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsdyn5sa7.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj442awzn.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i]\
    \ + xs[i + 1] * xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 3, 10, 24]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpw4sywtym.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.extend_from_slice(xs.iter().cloned());\n    ys.iter_mut().enumerate().for_each(|(i,\
    \ &x)| {\n        if i == 0 {\n            ys[i] = x;\n        } else {\n    \
    \        ys[i] = ys[i - 1] * x;\n        }\n    });\n    ys\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnbyoqyo_.rs:10:26\n   |\n\
    10 |     ys.extend_from_slice(xs.iter().cloned());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `&[_]`, found struct `Cloned`\n   |\n   = note:\
    \ expected reference `&[_]`\n                 found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnbyoqyo_.rs:11:45\n\
    \   |\n11 |     ys.iter_mut().enumerate().for_each(|(i, &x)| {\n   |         \
    \                                    ^^- expected due to this\n   |          \
    \                                   |\n   |                                  \
    \           types differ in mutability\n   |                                 \
    \            help: you can probably remove the explicit borrow: `x`\n   |\n  \
    \ = note: expected mutable reference `&mut _`\n                      found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push((xs[0] -\
    \ xs[i]) / (xs[i] - 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpi_69lim5.rs:11:30\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - 1));\n   |        \
    \                      ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpi_69lim5.rs:11:40\n\
    \   |\n11 |         result.push((xs[0] - xs[i]) / (xs[i] - 1));\n   |        \
    \                                ^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n    let mut xs_pow3 = vec![];\n\
    \    let mut xs_pow4 = vec![];\n    let mut xs_pow5 = vec![];\n    let mut xs_pow6\
    \ = vec![];\n    let mut xs_pow7 = vec![];\n    let mut xs_pow8 = vec![];\n  \
    \  let mut xs_pow9 = vec![];\n    let mut xs_pow10 = vec![];\n    let mut xs_pow11\
    \ = vec![];\n    let mut xs_pow12 = vec![];\n    let mut xs_pow13 = vec![];\n\
    \    let mut xs_pow14 = vec![];\n    let mut xs_pow15 = vec![];\n    let mut xs_pow16\
    \ = vec![];\n    let mut xs_pow17 = vec![];\n    let mut xs_pow18 = vec![];\n\
    \    let mut xs_pow19 = vec![];\n    let mut xs_pow20 = vec![];\n    let mut xs_pow21\
    \ = vec![];\n    let mut xs_pow22 = vec![];\n    let mut xs_pow23 = vec![];\n\
    \    let mut xs_pow24 = vec![];\n    let mut xs_pow25 = vec![];\n    let mut xs_pow26\
    \ = vec![];\n    let mut xs_pow27 = vec![];\n    let mut xs_pow28 = vec![];\n\
    \    let mut xs_pow29 = vec![];\n    let mut xs_pow30 = vec![];\n    let mut xs_pow31\
    \ = vec![];\n    let mut xs_pow32 = vec![];\n    let mut xs_pow33 = vec![];\n\
    \    let mut xs_pow34 = vec![];\n    let mut xs_pow35 = vec![];\n    let mut xs_pow36\
    \ = vec![];\n    let mut xs_pow37 = vec![];\n    let mut xs_pow38 = vec![];\n\
    \    let mut xs_pow39 = vec![];\n    let mut xs_pow40 = vec![];\n    let mut xs_pow41\
    \ = vec![];\n    let mut xs_pow42 = vec![];\n    let mut xs_pow43 = vec![];\n\
    \    let mut xs_pow44 = \n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpf6op2vqz.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push(i * i);\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpasdk_s9s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.push(1);\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ * ys[i - 1]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 8, 40]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5beqzawd.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp3l6unxa1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_len = xs.len();\n    if xs_len == 0 {\n\
    \        return result;\n    }\n    let mut xs_pow = vec![];\n    for i in 0..xs_len\
    \ - 1 {\n        xs_pow.push(xs.len() - i);\n    }\n    for i in 0..xs_len - 2\
    \ {\n        result.push(xs.len() - xs_len + i);\n        result.push(xs.len()\
    \ - xs_len - i);\n    }\n    for i in 0..xs_len - 1 {\n        result.push(xs.len()\
    \ - xs_len - i);\n    }\n    for i in 0..xs_len - 2 {\n        result.push(xs.len()\
    \ - xs_len + i);\n        result.push(xs.len() - xs_len - i);\n    }\n    for\
    \ i in 0..xs_len - 3 {\n        result.push(xs.len() - xs_len + i);\n        result.push(xs.len()\
    \ - xs_len - i);\n        result.push(xs.len() - xs_len - i + 1);\n    }\n   \
    \ for i in 0..xs_len - 2 {\n        result.push(xs.len() - xs_len + i);\n    \
    \    result.push(xs.len() - xs_len - i);\n        result.push(xs.len() - xs_len\
    \ - i + 1);\n    }\n    for i in 0..xs_len - 1 {\n        result.push(xs.len()\
    \ - xs_len - i);\n    }\n    for i in 0..xs_len - 2 {\n        result.push(xs.len()\
    \ - xs_len + i);\n        result.push(xs.len() - xs_len - i);\n        result.push(xs.len()\
    \ - xs_len - i + 1);\n    }\n    for i in 0..xs_len - 3 {\n        result.push(xs.len()\
    \ - xs_len + i);\n        result.push(xs.len() - xs_len - i);\n        result.push(xs.len()\
    \ - xs_len - i + 1);\n    }\n    for i in 0..xs_len - 4 {\n        result.push(xs.len()\
    \ - xs_len + i);\n        result.push(xs.len() - xs_len - i);\n        result.push(xs.len()\
    \ - xs_len - i + 1);\n        result.push(xs.len() - xs_len - i + 2);\n    }\n\
    \    for i in 0..xs_len - 3 {\n        result.push(xs.len() - xs_len + i);\n \
    \       result.push(xs.len() - xs_len - i);\n        result.push(xs.len() - xs_len\
    \ - i + 1);\n        result.push(xs.len() - xs_len - i + 2);\n    }\n    for i\
    \ in 0..xs_len - 4 {\n        result.push(xs.len() - xs_len + i);\n        result.push(xs.len()\
    \ - xs_len - i);\n        result.push(xs.len() - xs_len - i + 1);\n        result.push(xs.len()\
    \ - xs_len - i + 2);\n        result.push(xs.\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmps0gxhlzl.rs:79:3\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                               - unclosed delimiter\n...\n64 |     for i in 0..xs_len\
    \ - 4 {\n   |                            - this delimiter might not be properly\
    \ closed...\n...\n70 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n79 | }\n   |   ^\n\nerror: unexpected token: `)`\n  --> /tmp/tmps0gxhlzl.rs:70:1\n\
    \   |\n70 | }\n   | ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmps0gxhlzl.rs:69:20\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                               - closing delimiter possibly meant for this\n\
    ...\n69 |         result.push(xs.\n   |                    ^ unclosed delimiter\n\
    70 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmps0gxhlzl.rs:19:21\n   |\n19 |         result.push(xs.len() - xs_len\
    \ + i);\n   |                     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |         result.push((xs.len() - xs_len\
    \ + i).try_into().unwrap());\n   |                     +                     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps0gxhlzl.rs:20:21\n   |\n20 |\
    \         result.push(xs.len() - xs_len - i);\n   |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |         result.push((xs.len()\
    \ - xs_len - i).try_into().unwrap());\n   |                     +            \
    \         +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps0gxhlzl.rs:23:21\n\
    \   |\n23 |         result.push(xs.len() - xs_len - i);\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n23 |         result.push((xs.len("
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i\
    \ + 1] - xs[i] * xs[i] / xs.len());\n    }\n    ys\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp_1lu44n.rs:11:45\n   |\n\
    11 |         ys.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n   |            \
    \                                 ^^^^^^^^ expected `isize`, found `usize`\n\n\
    error[E0277]: cannot divide `isize` by `usize`\n  --> /tmp/tmpp_1lu44n.rs:11:43\n\
    \   |\n11 |         ys.push(xs[i + 1] - xs[i] * xs[i] / xs.len());\n   |     \
    \                                      ^ no implementation for `isize / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * (i -\
    \ 1));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpapu5szde.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj442awzn.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow_2 = vec![];\n\
    \    let mut xs_pow_3 = vec![];\n    let mut xs_pow_4 = vec![];\n    let mut xs_pow_5\
    \ = vec![];\n    let mut xs_pow_6 = vec![];\n    let mut xs_pow_7 = vec![];\n\
    \    let mut xs_pow_8 = vec![];\n    let mut xs_pow_9 = vec![];\n    let mut xs_pow_10\
    \ = vec![];\n    let mut xs_pow_11 = vec![];\n    let mut xs_pow_12 = vec![];\n\
    \    let mut xs_pow_13 = vec![];\n    let mut xs_pow_14 = vec![];\n    let mut\
    \ xs_pow_15 = vec![];\n    let mut xs_pow_16 = vec![];\n    let mut xs_pow_17\
    \ = vec![];\n    let mut xs_pow_18 = vec![];\n    let mut xs_pow_19 = vec![];\n\
    \    let mut xs_pow_20 = vec![];\n    let mut xs_pow_21 = vec![];\n    let mut\
    \ xs_pow_22 = vec![];\n    let mut xs_pow_23 = vec![];\n    let mut xs_pow_24\
    \ = vec![];\n    let mut xs_pow_25 = vec![];\n    let mut xs_pow_26 = vec![];\n\
    \    let mut xs_pow_27 = vec![];\n    let mut xs_pow_28 = vec![];\n    let mut\
    \ xs_pow_29 = vec![];\n    let mut xs_pow_30 = vec![];\n    let mut xs_pow_31\
    \ = vec![];\n    let mut xs_pow_32 = vec![];\n    let mut xs_pow_33 = vec![];\n\
    \    let mut xs_pow_34 = vec![];\n    let mut xs_pow_35 = vec![];\n    let mut\
    \ xs_pow_36 = vec![];\n    let mut xs_pow_37 = vec![];\n    let mut xs_pow_38\
    \ = vec![];\n    let mut xs_pow_39 = vec![];\n    let mut xs_pow_40 = vec![];\n\
    \    let mut xs_pow_41 = vec![];\n    let mut xs_pow_42 = vec![];\n    let mut\
    \ xs_pow_43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl29b2ibu.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * x) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1wnmgxq.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i]\
    \ + xs[i + 1] * xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 3, 10, 24]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpw4sywtym.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2 = vec![];\n\
    \    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n    let mut xs_pow5\
    \ = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7 = vec![];\n  \
    \  let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n    let mut xs_pow10\
    \ = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12 = vec![];\n\
    \    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n    let mut xs_pow15\
    \ = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17 = vec![];\n\
    \    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n    let mut xs_pow20\
    \ = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22 = vec![];\n\
    \    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n    let mut xs_pow25\
    \ = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27 = vec![];\n\
    \    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n    let mut xs_pow30\
    \ = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32 = vec![];\n\
    \    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n    let mut xs_pow35\
    \ = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37 = vec![];\n\
    \    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n    let mut xs_pow40\
    \ = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42 = vec![];\n\
    \    let mut xs_pow43 = vec![];\n\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw_48s3y.rs:8:34\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |    ----------           \
    \         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    let mut x = 0;\n    for &x in xs {\n        ys.push(1);\n\
    \        ys.push(x * x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dz3hzh9.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut x =\
    \ xs[i];\n        let mut y = x;\n        for j in (i + 1)..(xs.len()) {\n   \
    \         y *= x;\n            y += xs[j];\n        }\n        result.push(y);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[305, 12, 21, 21]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpr6de2d2w.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktywynnu.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        ys.push(xs[i\
    \ + 1] - xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjqnixr4b.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push((xs.len()\
    \ - i).powf(2));\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp77xz0kog.rs:11:33\n   |\n\
    11 |         result.push((xs.len() - i).powf(2));\n   |                      \
    \           ^ expected `usize`, found `isize`\n\nerror[E0599]: no method named\
    \ `powf` found for type `usize` in the current scope\n  --> /tmp/tmp77xz0kog.rs:11:36\n\
    \   |\n11 |         result.push((xs.len() - i).powf(2));\n   |               \
    \                     ^^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n  --> /tmp/tmp77xz0kog.rs:11:31\n\
    \   |\n11 |         result.push((xs.len() - i).powf(2));\n   |               \
    \                ^ no implementation for `usize - &isize`\n   |\n   = help: the\
    \ trait `Sub<&isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push((xs.len()\
    \ - i - 1) * xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe8kzlye0.rs:11:33\n   |\n\
    11 |         result.push((xs.len() - i - 1) * xs[i]);\n   |                  \
    \               ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `&isize` from `usize`\n  --> /tmp/tmpe8kzlye0.rs:11:31\n   |\n11 |         result.push((xs.len()\
    \ - i - 1) * xs[i]);\n   |                               ^ no implementation for\
    \ `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpe8kzlye0.rs:11:42\n   |\n11 |         result.push((xs.len() - i\
    \ - 1) * xs[i]);\n   |                                          ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_power = xs.clone();\n    let mut xs_power\
    \ = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power\
    \ = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power\
    \ = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power\
    \ = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power\
    \ = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut xs_power = xs_power.iter().cloned().collect::<Vec<_>>();\n    let mut xs_power\
    \ = xs_power.iter().\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpt1_q_akz.rs:32:1\n   |\n32\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpt1_q_akz.rs:31:40\n\
    \   |\n31 |     let mut xs_power = xs_power.iter().\n   |                    \
    \                    ^ help: add `;` here\n32 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpt1_q_akz.rs:8:34\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ----------                    ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    for &x in xs {\n        result.push((x\
    \ * (x - 1)) as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4k6abgi9.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut xs_len = xs.len();\n    let mut xs_pow = vec![];\n\
    \    let mut xs_pow_len = xs_len + 1;\n    let mut xs_pow_last = vec![];\n   \
    \ let mut xs_pow_last_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow = vec![];\n\
    \    let mut xs_pow_last_pow_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow_last\
    \ = vec![];\n    let mut xs_pow_last_pow_last_len = xs_pow_len + 1;\n    let mut\
    \ xs_pow_last_pow_last_pow = vec![];\n    let mut xs_pow_last_pow_last_pow_len\
    \ = xs_pow_len + 1;\n    let mut xs_pow_last_pow_last_pow_last = vec![];\n   \
    \ let mut xs_pow_last_pow_last_pow_last_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow\
    \ = vec![];\n    let mut xs_pow_last_pow_last_pow_last_pow_len = xs_pow_len +\
    \ 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last = vec![];\n    let mut\
    \ xs_pow_last_pow_last_pow_last_pow_last_len = xs_pow_len + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last_pow\
    \ = vec![];\n    let mut xs_pow_last_pow_last_pow_last_pow_last_len = xs_pow_len\
    \ + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last_pow = vec![];\n   \
    \ let mut xs_pow_last_pow_last_pow_last_pow_last_pow_len = xs_pow_len + 1;\n \
    \   let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last = vec![];\n    let\
    \ mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_len = xs_pow_len + 1;\n\
    \    let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last = vec![];\n    let\
    \ mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_len = xs_pow_len + 1;\n\
    \    let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_len = xs_pow_len\
    \ + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_pow_len =\
    \ xs_pow_len + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_pow_last_len\
    \ = xs_pow_len + 1;\n    let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_pow_last_pow_len\
    \ = x\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuc7gcw2z.rs:38:81\n   |\n\
    38 |     let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_pow_last_pow_len\
    \ = x\n   |                                                                  \
    \               ^ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `x` in this scope\n  --> /tmp/tmpuc7gcw2z.rs:38:80\n   |\n\
    38 |     let mut xs_pow_last_pow_last_pow_last_pow_last_pow_last_pow_last_pow_len\
    \ = x\n   |                                                                  \
    \              ^ help: a local variable with a similar name exists: `xs`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpuc7gcw2z.rs:8:34\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ----------                    ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 0;\n    for &x in xs {\n        result.push((*x\
    \ - x) / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7h3dmdw.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut tmp\
    \ = 0;\n        for j in 0..(xs.len() - 1) {\n            tmp += xs[j] * xs[j\
    \ + i];\n        }\n        result.push(tmp);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpefdu334a.rs:13:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 0;\n    let mut y = 0;\n    for &x in\
    \ xs {\n        y += x;\n        result.push(y);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj442awzn.rs:12:9\n   |\n\
    12 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x = 1;\n    for &x in xs {\n        result.push(x\
    \ - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp157wc3lm.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp63o3vf2b.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in xs.iter() {\n        ys.push(i * i);\n  \
    \  }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4h4_rthz.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(0);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2tpzaet7.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_power = xs.clone();\n    let mut power\
    \ = 1;\n    let mut xs_power = xs_power.clone();\n    let mut i = 0;\n    while\
    \ i < xs_power.len() {\n        let mut sum = 0;\n        while i < xs_power.len()\
    \ {\n            sum += xs_power[i] * power;\n            i += 1;\n        }\n\
    \        result.push(sum);\n        power = power * xs[i];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpjfsv0_32.rs:21:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_len = xs.len();\n    let mut ys = vec![];\n    while xs_len > 0 {\n \
    \       let x = xs.last();\n        xs.pop();\n        ys.push(x.clone());\n \
    \       xs_len -= 1;\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpms7o0c2k.rs:17:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n17\
    \ |     ys\n   |     ^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut xs_len = xs.len();\n    let mut xs_pow\
    \ = &xs[1..xs_len];\n    let mut xs_pow_len = xs_pow.len();\n    let mut xs_pow_pow\
    \ = &xs_pow[2..xs_pow_len];\n    let mut xs_pow_pow_len = xs_pow_pow.len();\n\
    \    let mut xs_pow_pow_pow = &xs_pow_pow[3..xs_pow_pow_len];\n    let mut xs_pow_pow_pow_len\
    \ = xs_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow = &xs_pow_pow_pow[4..xs_pow_pow_pow_len];\n\
    \    let mut xs_pow_pow_pow_pow_pow_len = xs_pow_pow_pow_pow.len();\n    let mut\
    \ xs_pow_pow_pow_pow_pow_len = xs_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n    let mut\
    \ xs_pow_pow_pow_pow_\n}\n\nfn main() {\n    let candidate = derivative;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptdo37_2f.rs:30:32\n   |\n\
    30 |     let mut xs_pow_pow_pow_pow_\n   |                                ^ help:\
    \ add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `xs_pow_pow_pow_pow_pow` in this scope\n  --> /tmp/tmptdo37_2f.rs:19:42\n  \
    \ |\n19 |     let mut xs_pow_pow_pow_pow_pow_len = xs_pow_pow_pow_pow_pow.len();\n\
    \   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `xs_pow_pow_pow_pow`\n\nerror[E0425]:\
    \ cannot find value `xs_pow_pow_pow_pow_pow_pow` in this scope\n  --> /tmp/tmptdo37_2f.rs:20:46\n\
    \   |\n20 |     let mut xs_pow_pow_pow_pow_pow_pow_len = xs_pow_pow_pow_pow_pow_pow.len();\n\
    \   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `xs_pow_pow_pow_pow_pow_len`\n\
    \nerror[E0425]: cannot find value `xs_pow_pow_pow_pow_pow_pow_pow_pow` in this\
    \ scope\n  --> /tmp/tmptdo37_2f.rs:21:50\n   |\n21 |     let mut xs_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow.len();\n   |                          \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `xs_pow_pow_pow_pow_pow_pow_len`\n\nerror[E0425]:\
    \ cannot find value `xs_pow_pow_pow_pow_pow_pow_pow_pow_pow` in this scope\n \
    \ --> /tmp/tmptdo37_2f.rs:22:54\n   |\n22 |     let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n   |                      \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `xs_pow_pow_pow_pow_pow_pow_pow_len`\n\
    \nerror[E0425]: cannot find value `xs_pow_pow_pow_pow_pow_pow_pow_pow_pow` in\
    \ this scope\n  --> /tmp/tmptdo37_2f.rs:23:54\n   |\n23 |     let mut xs_pow_pow_pow_pow_pow_pow_pow_pow_len\
    \ = xs_pow_pow_pow_pow_pow_pow_pow_pow_pow.len();\n   |                      \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name ex"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphs4is5fb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010608
