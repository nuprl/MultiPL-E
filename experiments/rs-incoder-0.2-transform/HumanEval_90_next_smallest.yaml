name: HumanEval_90_next_smallest
language: rs
prompt: "/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n///\
  \ >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n\
  /// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>)\
  \ -> Option<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut smallest = vec![std::i32::MAX; 2];\n    for elt in lst\
    \ {\n        if *elt < smallest[0] {\n            smallest[0] = *elt;\n      \
    \  }\n        if *elt < smallest[1] {\n            smallest[1] = *elt;\n     \
    \   }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)", "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for el in lst {\n        if el < smallest[smallest_idx] {\n      \
    \      smallest[smallest_idx] = el;\n            smallest_idx += 1;\n        }\n\
    \    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else {\n\
    \        None\n    }", "    let mut smallest = vec![std::i32::MAX; 2];\n    let\
    \ mut smallest_idx = 1;\n    for &x in lst {\n        if x < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = x;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = 0;\n    for &i in lst {\n        if i < smallest\
    \ {\n            smallest_index += 1;\n            smallest = i;\n        }\n\
    \    }\n    Some(smallest)", "    if lst.len() == 0 {\n        return None;\n\
    \    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for &i in lst {\n        if smallest[smallest_idx] < i {\n       \
    \     smallest[smallest_idx] = i;\n            smallest_idx += 1;\n        }\n\
    \    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else {\n\
    \        None\n    }", "    let mut smallest = lst[0];\n    let mut smallest_index\
    \ = 0;\n    for &x in lst {\n        if x < smallest {\n            smallest =\
    \ x;\n            smallest_index = 1;\n        } else if x == smallest {\n   \
    \         smallest_index += 1;\n        }\n    }\n    if smallest_index == lst.len()\
    \ {\n        None\n    } else {\n        Some(smallest)\n    }", "    if lst.is_empty()\
    \ {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest)", '    lst.iter().cloned().enumerate().find(|(i, v)| v < &lst[i
    + 1]).map(|(i, v)| v)', "    let mut smallest = vec![std::i32::MAX; 2];\n    let\
    \ mut smallest_idx = 1;\n    for el in lst {\n        if el < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = el;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    if lst.is_empty() {\n        return None;\n\
    \    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest * smallest_index\
    \ + 1)", '    lst.iter().cloned().enumerate().find(|(_, i)| i < lst.len() - 2).map(|(_,
    i)| lst[i + 1])', "    let mut smallest = lst.iter().min().unwrap();\n    let\
    \ mut smallest_index = 0;\n    for &i in lst {\n        if i == smallest {\n \
    \           smallest_index += 1;\n        }\n        if i == smallest {\n    \
    \        break;\n        }\n    }\n    Some(smallest * smallest_index)", "   \
    \ let mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|&x|\
    \ x == smallest);\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    let mut smallest_idx = smallest_idx + 1;\n    if smallest_idx < lst.len()\
    \ {\n        smallest = lst.iter().nth(smallest_idx).unwrap();\n    }\n    Some(smallest)",
  "    if lst.is_empty() {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest)", "    let mut smallest = lst.iter().min();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    let mut second_smallest_index = lst.iter().position(|x| *x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  Some(second_smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n \
    \   for elt in lst {\n        if smallest[0] < elt {\n            smallest[0]\
    \ = elt;\n        }\n        if smallest[1] < elt {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[0] < smallest[1] {\n        Some(smallest[0])\n\
    \    } else {\n        None\n    }", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n    let mut\
    \ second_smallest_index = lst.iter().position(|x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  Some(second_smallest)", "    if lst.len() == 0 {\n        return None;\n  \
    \  }\n    let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n  \
    \  for &x in lst {\n        if x < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = x;\n            smallest_idx += 1;\n        }\n    }\n    Some(smallest[smallest_idx\
    \ - 1])", "    let mut smallest = vec![lst[0]];\n    let mut smallest_index =\
    \ 0;\n    for &i in lst {\n        if *i < smallest[smallest_index] {\n      \
    \      smallest[smallest_index] = *i;\n            smallest_index += 1;\n    \
    \    }\n    }\n    if smallest_index == 0 {\n        return None;\n    }\n   \
    \ let mut smallest_value = smallest[0];\n    for &i in &smallest[1..] {\n    \
    \    if *i < smallest_value {\n            smallest_value = *i;\n        }\n \
    \   }\n    Some(smallest_value)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    if lst.is_empty() {\n        return None;\n\
    \    }\n\n    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_value_index = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \    if smallest_value_index == lst.len() {\n        return None;\n    }\n\n \
    \   Some(smallest_value)", "    if lst.len() == 0 {\n        return None;\n  \
    \  }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_idx == lst.len()\
    \ - 1 {\n        smallest_idx = 0;\n    }\n    Some(smallest[smallest_idx + 1])",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if\
    \ x < smallest[0] {\n            smallest[0] = x;\n        }\n        if x >=\
    \ smallest[1] {\n            smallest[1] = x;\n        }\n    }\n    smallest.iter().cloned().next()",
  "    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest[smallest_index + 1])", "    let mut smallest = vec![0; lst.len()];\n\
    \    let mut smallest_idx = 0;\n    for &x in lst {\n        if x < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = x;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    Some(smallest[smallest_idx])", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index\
    \ = smallest_index + 1;\n    while smallest_index < lst.len() {\n        if *smallest_value\
    \ < lst.iter().nth(smallest_index).unwrap() {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \            smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    for x in lst {\n        if x < smallest[0] {\n\
    \            smallest[0] = x;\n        }\n        if x > smallest[1] {\n     \
    \       smallest[1] = x;\n        }\n    }\n    smallest\n        .iter()\n  \
    \      .next()\n        .cloned()\n        .map(|x| x as isize)", "    let mut\
    \ smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if x < smallest[0]\
    \ {\n            smallest[0] = x;\n        }\n        if x >= smallest[1] {\n\
    \            smallest[1] = x;\n        }\n    }\n    smallest", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n    let mut smallest_val\
    \ = std::i32::MAX;\n    for &i in lst {\n        if i < smallest_val {\n     \
    \       smallest_val = i;\n            smallest_idx = 1;\n        }\n        if\
    \ i == smallest_val {\n            smallest_idx += 1;\n        }\n        if smallest_idx\
    \ == 2 {\n            smallest = vec![smallest_val; 2];\n            smallest_idx\
    \ = 1;\n        }\n        smallest[smallest_idx] = i;\n    }\n    if smallest_idx\
    \ == 2 {\n        smallest = vec![smallest_val; 2];\n        smallest_idx = 1;\n\
    \    }\n    smallest[smallest_idx].cloned()", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for elt in lst {\n        if smallest[0] < elt {\n            smallest[0]\
    \ = elt;\n        }\n        if smallest[1] < elt {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[0] == std::i32::MAX {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_idx = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_idx == lst.len() {\n        return None;\n    }\n    let mut\
    \ smallest_val = lst.iter().nth(smallest_idx).unwrap();\n    if smallest_val ==\
    \ smallest {\n        smallest_idx += 1;\n    }\n    Some(smallest)", "    let\
    \ mut smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut second_smallest = lst.iter().skip(smallest_index +\
    \ 1).min();\n    if second_smallest == smallest {\n        return None;\n    }\n\
    \    Some(second_smallest)", '    lst.iter().enumerate().find(|(_, i)| i < lst.len()
    - 2).map(|(_, i)| lst[i + 1])', "    if lst.len() == 0 {\n        return None;\n\
    \    }\n    let mut smallest = vec![lst[0]];\n    let mut smallest_index = 1;\n\
    \    let mut smallest_value = smallest[0];\n    for &x in lst {\n        if x\
    \ < smallest_value {\n            smallest_value = x;\n            smallest_index\
    \ = smallest_index + 1;\n        }\n        smallest[smallest_index] = x;\n  \
    \  }\n    smallest[smallest_index].clone()", '    lst.iter().cloned().enumerate().find(|(_,
    i)| i.1 < i.2).map(|(_, i)| i.1)', "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for el in lst {\n        if el < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = el;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", '    lst.iter().cloned().skip(1).next()', " \
    \   let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n    for &i\
    \ in lst {\n        if *i < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = *i;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n    Some(smallest[smallest_idx])",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if\
    \ *x < smallest[0] {\n            smallest[0] = x;\n        }\n        if *x >\
    \ smallest[1] {\n            smallest[1] = x;\n        }\n    }\n    smallest.iter().cloned().next()",
  '    lst.iter().cloned().enumerate().find(|(_, x)| x < lst.len() - 2).map(|(_, x)|
    x).ok()', "    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_idx == lst.len() - 1 {\n        smallest_idx\
    \ = 0;\n    }\n    Some(smallest[smallest_idx + 1])", '    lst.iter().enumerate().find(|(i,
    v)| v < lst.iter().skip(i + 1).next().unwrap()).map(|(_, v)| v)', "    let mut\
    \ smallest = lst[0];\n    let mut smallest_idx = 1;\n    for &i in lst {\n   \
    \     if i < smallest {\n            smallest = i;\n            smallest_idx =\
    \ i;\n        }\n    }\n    Some(smallest_idx)", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = lst.iter().position(|&x| x == smallest);\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index = smallest_index\
    \ + 1;\n    while smallest_index != lst.len() {\n        if lst.iter().nth(smallest_index).unwrap()\
    \ < smallest_value {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \            smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)", "    let mut smallest\
    \ = vec![0; lst.len()];\n    let mut smallest_idx = vec![0; lst.len()];\n    let\
    \ mut smallest_val = vec![0; lst.len()];\n    for i in 0..lst.len() {\n      \
    \  smallest[i] = i;\n        smallest_idx[i] = i;\n        smallest_val[i] = i;\n\
    \    }\n    for i in 1..lst.len() {\n        if smallest[smallest_idx[i - 1]]\
    \ > lst[smallest_idx[i - 1]] {\n            smallest[smallest_idx[i - 1]] = lst[smallest_idx[i\
    \ - 1]];\n            smallest_idx[smallest_idx[i - 1]] = i;\n            smallest_val[smallest_idx[i\
    \ - 1]] = lst[smallest_idx[i - 1]];\n        }\n    }\n    if smallest[smallest_idx[0]]\
    \ > 0 {\n        Some(smallest[smallest_idx[0]])\n    } else {\n        None\n\
    \    }", "    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = 0;\n    for index\
    \ in lst.iter().rev() {\n        if index == smallest {\n            break;\n\
    \        }\n        smallest_index += 1;\n    }\n    Some(smallest[smallest_index..])",
  "    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index =\
    \ 0;\n    for &i in lst {\n        if *i < smallest {\n            smallest =\
    \ i;\n            smallest_index = i;\n        }\n    }\n    Some(smallest)",
  "    let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n    for &i\
    \ in lst {\n        if i < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = i;\n            smallest_idx += 1;\n        }\n    }\n    smallest[smallest_idx..]\n\
    \        .iter()\n        .cloned()\n        .find(|&x| x < smallest[smallest_idx])",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if\
    \ x < smallest[0] {\n            smallest[0] = x;\n        }\n        if x < smallest[1]\
    \ {\n            smallest[1] = x;\n        }\n    }\n    if smallest[0] == std::i32::MAX\
    \ {\n        None\n    } else {\n        Some(smallest[1])\n    }", "    let mut\
    \ smallest = lst.iter().min();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().skip(smallest_index).min();\n    smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    Some(smallest)", "    let mut\
    \ smallest = vec![std::i32::MAX; 2];\n    for &i in lst {\n        if *i < smallest[0]\
    \ {\n            smallest[0] = *i;\n        }\n        if *i < smallest[1] {\n\
    \            smallest[1] = *i;\n        }\n    }\n    if smallest[1] == std::i32::MAX\
    \ {\n        None\n    } else {\n        Some(smallest[1])\n    }", "    let mut\
    \ smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n    for el\
    \ in lst {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == 0 {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index = smallest_index\
    \ - 1;\n    while smallest_index >= 0 {\n        let mut value = lst.iter().nth(smallest_index).unwrap();\n\
    \        if value < smallest_value {\n            smallest_value = value;\n  \
    \          smallest_index = smallest_index - 1;\n        }\n        smallest_index\
    \ -= 1;\n    }\n    Some(smallest_value)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for elt in lst {\n        if smallest[smallest_idx]\
    \ < elt {\n            smallest[smallest_idx] = elt;\n            smallest_idx\
    \ += 1;\n        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n\
    \    } else {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for &x in lst {\n        if x < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = x;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for elt in lst {\n        if elt < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = elt;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for x in lst {\n        if x < smallest[0] {\n            smallest[0]\
    \ = x;\n        }\n        if x < smallest[1] {\n            smallest[1] = x;\n\
    \        }\n    }\n    smallest.iter().cloned().next()", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n    for &i in lst\
    \ {\n        if *i < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = *i;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for el in lst {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for el in lst {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = lst.iter().min();\n    if smallest.is_none() {\n        return\
    \ None;\n    }\n    let mut smallest_index = lst.iter().position(|x| *x == *smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest.clone() + smallest_index)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", '    lst.iter().cloned().enumerate().find(|(_,
    elem)| elem < lst.iter().cloned().next().unwrap()).map(|(_, elem)| elem)', " \
    \   if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = 0;\n    for index in lst.iter().rev() {\n      \
    \  if index == smallest {\n            smallest_index += 1;\n        }\n     \
    \   if index == smallest_index {\n            return Some(index);\n        }\n\
    \    }\n    None", "    if lst.len() == 0 {\n        return None;\n    }\n\n \
    \   let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n\n    for\
    \ &x in lst {\n        if x < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = x;\n            smallest_idx += 1;\n        }\n    }\n\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n\n    Some(smallest[smallest_idx])",
  "    let mut smallest = vec![lst[0]; 2];\n    let mut index = 0;\n    for ele in\
    \ lst {\n        if ele < smallest[index] {\n            smallest[index] = ele;\n\
    \        }\n        index += 1;\n        if index == 2 {\n            return Some(smallest[1]);\n\
    \        }\n    }\n    None", "    if lst.len() == 0 {\n        return None;\n\
    \    }\n    let mut smallest = vec![0; lst.len()];\n    let mut smallest_idx =\
    \ 0;\n    let mut smallest_val = lst.iter().min().unwrap();\n    for i in lst.iter().rev()\
    \ {\n        if *i < smallest_val {\n            smallest_val = *i;\n        \
    \    smallest_idx = i;\n        }\n    }\n    Some(smallest_idx)", "    let mut\
    \ smallest = vec![0; lst.len()];\n    let mut smallest_idx = -1;\n    for &i in\
    \ lst {\n        if smallest_idx < i {\n            smallest_idx = i;\n      \
    \  }\n        smallest[i] = i;\n    }\n    smallest.iter().skip(1).find(|&i| i\
    \ < smallest[smallest_idx + 1]).map(|&i| i + 1)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for el in lst {\n        if el < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = el;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = lst.iter().min();\n\
    \    if smallest.is_none() {\n        return None;\n    }\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_index\
    \ = smallest_index + 1;\n    while smallest_index < lst.len() {\n        if lst.iter()[smallest_index]\
    \ > lst.iter()[smallest_index + 1] {\n            break;\n        }\n        smallest_index\
    \ += 1;\n    }\n    Some(lst.iter()[smallest_index])", "    lst.iter().cloned().enumerate().find(|(_,\
    \ i)| {\n        i < (lst.len() - 2)\n    }).map(|(_, i)| lst[i + 1])", '    lst.iter().cloned().enumerate().find(|(_,
    i)| i < lst.len() - 2).map(|(_, i)| lst[i + 1])', "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for elt in lst {\n        if elt < smallest[0] {\n            smallest[0]\
    \ = elt;\n        }\n        if elt < smallest[1] {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[0] == smallest[1] {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    let mut smallest = lst.iter().min();\n\
    \    if smallest.is_none() {\n        return None;\n    }\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    if lst.is_empty() {\n        return None;\n    }\n\n    let mut\
    \ smallest = lst.iter().min();\n    let mut smallest_idx = 1;\n\n    for &x in\
    \ lst {\n        if x < smallest {\n            smallest = x;\n            smallest_idx\
    \ = 1;\n        } else if x == smallest {\n            smallest_idx += 1;\n  \
    \      }\n    }\n\n    Some(smallest)", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n    let mut\
    \ second_smallest_index = lst.iter().position(|x| *x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  Some(second_smallest)", '    lst.iter().enumerate().find(|(_, elem)| elem <
    lst.iter().skip(1).next().unwrap()).map(|(_, elem)| elem)', '    lst.iter().cloned().enumerate().find(|(_,
    i)| i < lst.len() - 2).map(|(_, i)| lst[i + 1])', "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for elt in lst {\n        if elt < smallest[0] {\n            smallest[0]\
    \ = elt;\n        }\n        if elt < smallest[1] {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[1] == std::i32::MAX {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    if lst.len() == 0 {\n \
    \       return None;\n    }\n\n    let mut smallest = vec![lst[0]];\n    let mut\
    \ smallest_idx = 1;\n\n    for &x in lst {\n        if x < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = x;\n            smallest_idx += 1;\n\
    \        }\n    }\n\n    smallest[smallest_idx..]\n        .iter()\n        .next()\n\
    \        .cloned()\n        .map(|x| x - smallest[smallest_idx])\n        .next()",
  "    lst.iter().cloned().enumerate().find(|(_, i)| {\n        i < lst.len() - 2\
    \ && lst[i] < lst[i + 1]\n    }).map(|(_, i)| lst[i + 1])", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    smallest[0] = std::i32::MAX;\n    smallest[1]\
    \ = std::i32::MAX;\n    for x in lst {\n        if x < smallest[0] {\n       \
    \     smallest[0] = x;\n        }\n        if x < smallest[1] {\n            smallest[1]\
    \ = x;\n        }\n    }\n    if smallest[0] == smallest[1] {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    let mut smallest_val = std::i32::MAX;\n\
    \    for &i in lst {\n        if i < smallest_val {\n            smallest_val\
    \ = i;\n            smallest_idx = 1;\n        }\n        if i == smallest_val\
    \ {\n            smallest_idx += 1;\n        }\n        if smallest_idx > 2 {\n\
    \            break;\n        }\n        smallest[smallest_idx] = i;\n    }\n \
    \   if smallest_idx == 2 && smallest_val == std::i32::MAX {\n        None\n  \
    \  } else {\n        Some(smallest[1])\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for x in lst {\n        if x < smallest[0] {\n            smallest[0]\
    \ = x;\n        }\n        if x > smallest[1] {\n            smallest[1] = x;\n\
    \        }\n    }\n    smallest\n        .iter()\n        .next()\n        .cloned()\n\
    \        .ok_or(std::iter::Error::custom(\"No such element\"))", "    let mut\
    \ smallest = vec![0; lst.len()];\n    let mut smallest_idx = lst.len();\n    let\
    \ mut smallest_val = lst.len();\n    for i in lst.iter() {\n        if smallest[smallest_idx]\
    \ < i {\n            smallest[smallest_idx] = i;\n            smallest_idx = i;\n\
    \        }\n    }\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    Some(smallest[smallest_idx])", '    lst.iter().cloned().enumerate().find(|(_,
    x)| x < lst.len() - 2).map(|(_, x)| x).ok()', '    lst.iter().cloned().enumerate().find(|(_,
    i)| i < lst.len() - 2).map(|(_, i)| lst[i + 1])', "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for x in lst {\n        if x < smallest[0] {\n            smallest[0]\
    \ = x;\n        }\n        if x > smallest[1] {\n            smallest[1] = x;\n\
    \        }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)", "    if lst.len() == 0 {\n        return None;\n    }\n    let\
    \ mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest);\n    if smallest_idx == lst.len() - 1 {\n        return None;\n\
    \    }\n    let mut smallest_val = lst.iter().nth(smallest_idx + 1).unwrap();\n\
    \    if smallest_val < smallest {\n        smallest = smallest_val;\n        smallest_idx\
    \ = smallest_idx + 1;\n    }\n    Some(smallest)", '    lst.iter().enumerate().find(|(_,
    i)| i < lst.len() - 2).map(|(_, i)| lst[i + 1])', "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = 0;\n    for &i in lst {\n        if *i < smallest\
    \ {\n            smallest = i;\n            smallest_index += 1;\n        }\n\
    \    }\n    Some(smallest)", "    if lst.len() == 0 {\n        return None;\n\
    \    }\n    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for &x in lst {\n        if x < smallest[smallest_idx] {\n       \
    \     smallest[smallest_idx] = x;\n            smallest_idx += 1;\n        }\n\
    \    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else {\n\
    \        None\n    }", "    let mut smallest = vec![std::i32::MAX; 2];\n    let\
    \ mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for el in lst {\n        if el < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = el;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = vec![lst[0]];\n    let\
    \ mut smallest_index = 0;\n    for &i in lst {\n        if i < smallest[smallest_index]\
    \ {\n            smallest[smallest_index] = i;\n            smallest_index +=\
    \ 1;\n        }\n    }\n    if smallest_index == 0 {\n        return None;\n \
    \   }\n    Some(smallest[smallest_index - 1])", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for elt in lst {\n        if smallest[smallest_idx]\
    \ < elt {\n            smallest[smallest_idx] = elt;\n            smallest_idx\
    \ += 1;\n        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n\
    \    } else {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    let mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = vec![lst[0]; 2];\n \
    \   let mut smallest_idx = 1;\n    for &x in lst {\n        if x < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = x;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", '    lst.iter().cloned().enumerate().find(|(_,
    elem)| elem < lst.iter().cloned().next().unwrap()).map(|(_, elem)| elem)', " \
    \   let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for el in lst {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for el in lst {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index =\
    \ 0;\n    let mut smallest_value = lst.iter().min().unwrap();\n    for &x in lst\
    \ {\n        if x < smallest {\n            smallest_value = x;\n            smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n        }\n    }\n    Some(smallest_value)",
  "    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest[smallest_index + 1])", "    let mut smallest = lst.iter().min();\n\
    \    if smallest.is_none() {\n        return None;\n    }\n    let mut smallest_idx\
    \ = 1;\n    for idx in lst.iter().rev() {\n        if *idx < smallest {\n    \
    \        smallest = *idx;\n            smallest_idx = idx;\n        }\n    }\n\
    \    Some(smallest_idx)", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    Some(smallest)", '    lst.iter().cloned().enumerate().find(|(_,
    elem)| elem < lst.iter().skip(1).next().unwrap()).map(|(_, elem)| elem)', '    lst.iter().cloned().enumerate().find(|(_,
    x)| x < lst.len() - 2).map(|(_, x)| x).ok()', "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for el in lst {\n        if el < smallest[0] {\n            smallest[0]\
    \ = el;\n        }\n        if el < smallest[1] {\n            smallest[1] = el;\n\
    \        }\n    }\n    if smallest[1] == std::i32::MAX {\n        None\n    }\
    \ else {\n        Some(smallest[1])\n    }", "    if lst.is_empty() {\n      \
    \  return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n  \
    \  let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n    if second_smallest\
    \ == smallest {\n        return None;\n    }\n    Some(second_smallest)", "  \
    \  let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if\
    \ x < smallest[0] {\n            smallest[0] = x;\n        }\n        if x > smallest[1]\
    \ {\n            smallest[1] = x;\n        }\n    }\n    smallest", "    let mut\
    \ smallest = lst[0];\n    let mut smallest_index = 0;\n    for &x in lst {\n \
    \       if x < smallest {\n            smallest = x;\n            smallest_index\
    \ = 1;\n        }\n        if x == smallest {\n            smallest_index += 1;\n\
    \        }\n    }\n    Some(smallest)", "    let mut smallest = vec![0; lst.len()];\n\
    \    let mut smallest_idx = lst.len();\n    let mut smallest_val = lst.len();\n\
    \    let mut smallest_next = vec![0; lst.len()];\n    let mut smallest_next_idx\
    \ = lst.len();\n    let mut smallest_next_val = lst.len();\n    let mut smallest_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_idx = lst.len();\n   \
    \ let mut smallest_next_next_val = lst.len();\n    let mut smallest_next_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_next_idx = lst.len();\n\
    \    let mut smallest_next_next_next_val = lst.len();\n    let mut smallest_next_next_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_next_next_idx = lst.len();\n\
    \    let mut smallest_next_next_next_next_val = lst.len();\n    let mut smallest_next_next_next_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_next_next_next_idx = lst.len();\n\
    \    let mut smallest_next_next_next_next_next_val = lst.len();\n    let mut smallest_next_next_next_next_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_next_next_next_idx = lst.len();\n\
    \    let mut smallest_next_next_next_next_next_val = lst.len();\n    let mut smallest_next_next_next_next_next_next\
    \ = vec![0; lst.len()];\n    let mut smallest_next_next_next_next_next_next_idx\
    \ = lst.len();\n    let mut smallest_next_next_next_next_next_next_val = lst.len();\n\
    \    let mut smallest_next_next_next_next_next_next_next = vec![0; lst.len()];\n\
    \    let mut smallest_next_next_next_next_next_next_next_idx = lst.len();\n  \
    \  let mut smallest_next_next_next_next_next_next_next_val = lst.len();\n    let\
    \ mut smallest_next_next_next_next_next_next_next_next = vec![0; lst.len()];\n\
    \    let mut smallest_next_next_next_next_next_next_next_next_idx = lst.len();\n\
    \    let mut smallest_next_next_next_next_next_next_next_next_val = lst.len();\n\
    \    let mut smallest_next_next_next_next_next_next_next_next_next = vec![0; lst.len()];\n\
    \    let mut smallest_next_next_next_next_next_next_next_next_next_idx = l", " \
    \   if lst.is_empty() {\n        return None;\n    }\n\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_idx == lst.len() - 1 {\n        smallest_idx\
    \ = 0;\n    }\n\n    Some(smallest)", "    if lst.is_empty() {\n        return\
    \ None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut\
    \ smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index\
    \ == lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest)",
  "    if lst.is_empty() {\n        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest).and_then(|x| lst.iter().skip(smallest_index + 1).find(|x|\
    \ x == x).unwrap())", "    let mut smallest = lst.iter().min().unwrap();\n   \
    \ let mut smallest_idx = lst.iter().position(|x| x == smallest).unwrap();\n  \
    \  if smallest_idx == lst.len() {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_idx).unwrap();\n    if smallest_value == smallest\
    \ {\n        smallest_idx += 1;\n    }\n    Some(smallest_value)", '    lst.iter().cloned().enumerate().find(|(_,
    x)| x < lst.len() - 2).map(|(_, x)| x).ok()', "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for el in lst {\n        if el < smallest[0] {\n            smallest[0]\
    \ = el;\n        }\n        if el < smallest[1] {\n            smallest[1] = el;\n\
    \        }\n    }\n    if smallest[0] == std::i32::MAX {\n        None\n    }\
    \ else {\n        Some(smallest[1])\n    }", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    if smallest.is_none() {\n        return None;\n    }\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_index\
    \ = smallest_index + 1;\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    while smallest_index != lst.len() - 1 {\n        if smallest_value < lst.iter().nth(smallest_index).unwrap()\
    \ {\n            smallest_value = lst.iter().nth(smallest_index).unwrap();\n \
    \           smallest_index = smallest_index + 1;\n        }\n        smallest_index\
    \ = smallest_index + 1;\n    }\n    Some(smallest_value)", "    if lst.len() ==\
    \ 0 {\n        return None;\n    }\n    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest);\n    if\
    \ smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    let mut smallest = vec![std::i32::MAX; 2];\n    for elt in lst\
    \ {\n        if elt < smallest[0] {\n            smallest[0] = elt;\n        }\n\
    \        if elt < smallest[1] {\n            smallest[1] = elt;\n        }\n \
    \   }\n    if smallest[0] == std::i32::MAX {\n        None\n    } else {\n   \
    \     Some(smallest[1])\n    }", "    let mut smallest = vec![lst[0]];\n    let\
    \ mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    Some(smallest[smallest_idx])", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    smallest_index = lst.iter().position(|x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    Some(smallest)", "    let mut smallest = lst[0];\n    let\
    \ mut smallest_idx = 1;\n    for &x in lst {\n        if x < smallest {\n    \
    \        smallest = x;\n            smallest_idx = 1;\n        } else if x ==\
    \ smallest {\n            smallest_idx += 1;\n        }\n    }\n    Some(smallest)",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    for elt in lst {\n        if\
    \ elt < smallest[0] {\n            smallest[0] = elt;\n        }\n        if elt\
    \ < smallest[1] {\n            smallest[1] = elt;\n        }\n    }\n    if smallest[0]\
    \ == smallest[1] {\n        None\n    } else {\n        Some(smallest[1])\n  \
    \  }", "    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    Some(smallest)",
  "    let mut smallest = vec![lst[0]];\n    let mut smallest_index = vec![0];\n \
    \   for &i in lst {\n        if *i < smallest[0] {\n            smallest[0] =\
    \ i;\n            smallest_index[0] = i;\n        }\n        if *i == smallest[0]\
    \ {\n            smallest_index[0] += 1;\n        }\n    }\n    if smallest_index[0]\
    \ == lst.len() {\n        return None;\n    }\n    let mut smallest_index = smallest_index.clone();\n\
    \    let mut smallest = smallest.clone();\n    let mut smallest_index = smallest_index.clone();\n\
    \    let mut smallest = smallest.clone();\n    for &i in lst {\n        if *i\
    \ < smallest[0] {\n            smallest[0] = i;\n            smallest_index[0]\
    \ = i;\n        }\n        if *i == smallest[0] {\n            smallest_index[0]\
    \ += 1;\n        }\n    }\n    if smallest_index[0] == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_index = smallest_index.clone();\n    let\
    \ mut smallest = smallest.clone();\n    let mut smallest_index = smallest_index.clone();\n\
    \    let mut smallest = smallest.clone();\n    for &i in lst {\n        if *i\
    \ < smallest[0] {\n            smallest[0] = i;\n            smallest_index[0]\
    \ = i;\n        }\n        if *i == smallest[0] {\n            smallest_index[0]\
    \ += 1;\n        }\n    }\n    if smallest_index[0] == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_index = smallest_index.clone();\n    let\
    \ mut smallest = smallest.clone();\n    let mut smallest_index = smallest_index.clone();\n\
    \    let mut smallest = smallest.clone();\n    for &i in lst {\n        if *i\
    \ < smallest[0] {\n            smallest[0] = i;\n            smallest_index[0]\
    \ = i;\n        }\n        if *i == smallest[0] {\n            smallest_index[0]\
    \ += 1;\n        }\n    }\n    if smallest_index[0] == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_index = smallest_index.clone();\n    let\
    \ mut smallest = smallest.clone();\n    let mut smallest_index = smallest_index.clone();\n\
    \    let mut smallest = smallest.clone();\n    for &i in lst {\n        if *i\
    \ < smallest[0] {\n            smallest[0] = i;\n            smallest_index[0]\
    \ = i;\n        }\n        if *i == smallest[0] {\n            smallest_index[0]\
    \ += 1;\n        }\n    }\n    if smallest_index[0] == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_index = ", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for x in lst {\n        if x < smallest[0] {\n            smallest[0]\
    \ = x;\n        }\n        if x > smallest[1] {\n            smallest[1] = x;\n\
    \        }\n    }\n    if smallest[0] == smallest[1] {\n        None\n    } else\
    \ {\n        Some(smallest[1])\n    }", "    let mut smallest = vec![lst[0]];\n\
    \    let mut smallest_idx = 1;\n    let mut smallest_val = lst[0];\n    for &i\
    \ in &lst {\n        if *i < smallest_val {\n            smallest_idx = i;\n \
    \           smallest_val = *i;\n        }\n        smallest.push(smallest_idx);\n\
    \    }\n    smallest.iter().skip(1).next().unwrap()", "    let mut smallest =\
    \ lst.iter().min();\n    let mut smallest_index = 0;\n    for &i in lst {\n  \
    \      if *i < smallest {\n            smallest = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for elt in lst {\n        if elt < smallest[0] {\n            smallest[0]\
    \ = elt;\n        }\n        if elt < smallest[1] {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[1] == std::i32::MAX {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    if lst.len() == 0 {\n \
    \       return None;\n    }\n\n    let mut smallest = vec![vec![0; lst.len()];\
    \ 2];\n    let mut smallest_idx = 1;\n    let mut smallest_val = vec![0; lst.len()];\n\
    \n    for &i in lst {\n        smallest[smallest_idx][smallest_val[0]] = i;\n\
    \        smallest_val[0] += 1;\n        if smallest_val[0] == smallest[smallest_idx].len()\
    \ {\n            smallest_idx += 1;\n            smallest_val[0] = 0;\n      \
    \  }\n    }\n\n    if smallest_val[0] == 0 {\n        return None;\n    }\n\n\
    \    let mut smallest_idx = 0;\n    let mut smallest_val = vec![0; lst.len()];\n\
    \n    for &i in lst {\n        if smallest[smallest_idx][smallest_val[0]] == i\
    \ {\n            smallest_val[0] += 1;\n            if smallest_val[0] == smallest[smallest_idx].len()\
    \ {\n                smallest_idx += 1;\n                smallest_val[0] = 0;\n\
    \            }\n        } else {\n            break;\n        }\n    }\n\n   \
    \ Some(smallest[smallest_idx][smallest_val[0]])", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    if smallest.is_some() {\n        smallest = lst.iter().skip(1).min().unwrap();\n\
    \    }\n    smallest", "    let mut smallest = vec![0; lst.len()];\n    let mut\
    \ smallest_idx = vec![0; lst.len()];\n    let mut smallest_val = vec![0; lst.len()];\n\
    \    for &i in lst {\n        smallest[smallest_idx[i]] = i;\n        smallest_idx[i]\
    \ = i;\n        smallest_val[i] = i;\n    }\n    for i in 0..lst.len() {\n   \
    \     if smallest[smallest_idx[i]] > smallest[smallest_idx[i + 1]] {\n       \
    \     smallest_idx[i] = smallest_idx[i + 1];\n            smallest_val[i] = smallest[smallest_idx[i\
    \ + 1]];\n        } else {\n            smallest_idx[i + 1] += 1;\n        }\n\
    \    }\n    if smallest_idx[lst.len() - 1] == lst.len() {\n        None\n    }\
    \ else {\n        Some(smallest_val[lst.len() - 1])\n    }", "    let mut smallest\
    \ = vec![0; lst.len()];\n    let mut smallest_idx = vec![0; lst.len()];\n\n  \
    \  for &i in lst {\n        smallest[smallest_idx[i]] = i;\n        smallest_idx[i]\
    \ = i;\n    }\n\n    for i in 0..lst.len() {\n        if smallest[smallest_idx[i]]\
    \ > smallest[smallest_idx[i + 1]] {\n            smallest_idx[i + 1] = smallest_idx[i];\n\
    \        }\n    }\n\n    if smallest_idx[lst.len() - 1] == lst.len() - 1 {\n \
    \       None\n    } else {\n        Some(smallest[smallest_idx[lst.len() - 1]])\n\
    \    }", "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for ele in lst {\n        if ele < smallest[smallest_idx] {\n    \
    \        smallest[smallest_idx] = ele;\n            smallest_idx += 1;\n     \
    \   }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else\
    \ {\n        None\n    }", "    let mut smallest = vec![0; lst.len()];\n    let\
    \ mut smallest_idx = 0;\n    for &x in lst {\n        if smallest[smallest_idx]\
    \ < x {\n            smallest[smallest_idx] = x;\n            smallest_idx +=\
    \ 1;\n        }\n    }\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    Some(smallest[smallest_idx])", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ second_smallest = lst.iter().skip(smallest_index).min().unwrap();\n    let mut\
    \ second_smallest_index = lst.iter().position(|&x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  Some(second_smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n \
    \   let mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    lst.iter().cloned().enumerate().find(|(_,\
    \ i)| {\n        i < lst.len() - 1 && lst[i] < lst[i + 1]\n    }).map(|(_, i)|\
    \ lst[i + 1])", "    let mut smallest = lst.iter().min();\n    if smallest ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_idx = 1;\n  \
    \  for idx in lst.iter().skip(smallest_idx).rev() {\n        if *idx < smallest\
    \ {\n            smallest = *idx;\n            smallest_idx = idx;\n        }\n\
    \    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n\
    \    for x in lst {\n        if x < smallest[0] {\n            smallest[0] = x;\n\
    \        }\n        if x > smallest[1] {\n            smallest[1] = x;\n     \
    \   }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)", "    let mut smallest = lst.iter().min().unwrap();\n    let mut\
    \ smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index\
    \ == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_index).min().unwrap();\n\
    \    smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if\
    \ smallest_index == lst.len() {\n        return None;\n    }\n    Some(smallest)",
  '    lst.iter().enumerate().filter(|(i, _)| i < lst.len() - 1).next()', "    if\
    \ lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = vec![0;\
    \ lst.len()];\n    let mut smallest_index = 0;\n    let mut smallest_value = lst.iter().min().unwrap();\n\
    \    for &x in lst {\n        if x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = 0;\n        }\n        if x == smallest_value\
    \ {\n            smallest_index += 1;\n        }\n        smallest[smallest_index]\
    \ = x;\n    }\n    smallest\n        .iter()\n        .find(|&x| x < smallest_value)\n\
    \        .map(|x| smallest[x])", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_idx = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_idx == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().nth(smallest_idx + 1).unwrap();\n    Some(smallest)", '    lst.iter().cloned().enumerate().find(|(_,
    i)| i < lst.len() - 2).map(|(_, i)| lst[i + 1])', "    let mut smallest = lst.iter().min();\n\
    \    if smallest.is_none() {\n        return None;\n    }\n    let mut smallest_index\
    \ = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index ==\
    \ lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    let mut smallest = vec![std::i32::MAX; 2];\n    for elt in lst\
    \ {\n        smallest[0] = std::cmp::min(smallest[0], elt);\n        smallest[1]\
    \ = std::cmp::min(smallest[1], elt);\n    }\n    if smallest[0] < smallest[1]\
    \ {\n        Some(smallest[1])\n    } else {\n        None\n    }", "    let mut\
    \ smallest = lst.iter().min().unwrap();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_idx == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_idx).unwrap();\n\
    \    for idx in 1..lst.len() {\n        if smallest_value < lst.iter().nth(idx).unwrap()\
    \ {\n            smallest_value = lst.iter().nth(idx).unwrap();\n            smallest_idx\
    \ = idx;\n        }\n    }\n    Some(smallest_value)", "    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = 0;\n    for &i in lst\
    \ {\n        if *i < smallest {\n            smallest = i;\n            smallest_index\
    \ += 1;\n        }\n    }\n    Some(smallest + smallest_index as isize)", "  \
    \  let mut smallest = lst.iter().min();\n    if smallest.is_none() {\n       \
    \ return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x| x\
    \ == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n        smallest_index\
    \ = 0;\n    }\n    Some(smallest[smallest_index + 1])", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n    for el in lst\
    \ {\n        if el < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = el;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index =\
    \ lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index == lst.len()\
    \ {\n        return None;\n    }\n    smallest = lst.iter().nth(smallest_index).unwrap();\n\
    \    smallest_index += 1;\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    smallest = lst.iter().nth(smallest_index).unwrap();\n    Some(smallest)",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for &i in lst {\n        if *i < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = *i;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n    for &x\
    \ in lst {\n        if *x < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = x;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n    Some(smallest[smallest_idx])",
  "    let mut smallest = vec![0; lst.len()];\n    let mut smallest_idx = 0;\n   \
    \ let mut smallest_val = vec![0; lst.len()];\n    for &x in lst {\n        smallest[smallest_idx]\
    \ = x;\n        smallest_val[smallest_idx] = x;\n        smallest_idx += 1;\n\
    \    }\n    smallest_idx\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .filter(|(_, idx)| smallest[idx] < smallest_val[idx])\n        .next()\n\
    \        .map(|(_, idx)| smallest[idx])", "    if lst.len() == 0 {\n        return\
    \ None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut\
    \ smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index\
    \ == lst.len() - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n\
    \        if x < smallest[0] {\n            smallest[0] = x;\n        }\n     \
    \   if x > smallest[1] {\n            smallest[1] = x;\n        }\n    }\n   \
    \ if smallest[1] == std::i32::MAX {\n        None\n    } else {\n        Some(smallest[1])\n\
    \    }", "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for elt in lst {\n        if smallest[smallest_idx] < elt {\n    \
    \        smallest[smallest_idx] = elt;\n            smallest_idx += 1;\n     \
    \   }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else\
    \ {\n        None\n    }", "    let mut smallest = vec![std::i32::MAX; 2];\n \
    \   for x in lst {\n        if x < smallest[0] {\n            smallest[0] = x;\n\
    \        }\n        if x > smallest[1] {\n            smallest[1] = x;\n     \
    \   }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)", "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx\
    \ = 1;\n    for &x in lst {\n        if x < smallest[smallest_idx] {\n       \
    \     smallest[smallest_idx] = x;\n            smallest_idx += 1;\n        }\n\
    \    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n    } else {\n\
    \        None\n    }", "    let mut smallest = lst.iter().min();\n    let mut\
    \ smallest_idx = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n    smallest = lst.iter().skip(smallest_idx).min();\n\
    \    smallest_idx = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n    Some(smallest)", '    lst.iter().cloned().enumerate().find(|(_,
    i)| i < lst.len() - 2)', "    let mut smallest = vec![std::i32::MAX; 2];\n   \
    \ for x in lst {\n        if x < smallest[0] {\n            smallest[0] = x;\n\
    \        }\n        if x > smallest[1] {\n            smallest[1] = x;\n     \
    \   }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)", "    if lst.len() == 0 {\n        return None;\n    }\n\n    let\
    \ mut smallest = vec![0; lst.len()];\n    let mut smallest_idx = lst.len();\n\n\
    \    for &i in lst {\n        if smallest[smallest_idx] < i {\n            smallest[smallest_idx]\
    \ = i;\n            smallest_idx += 1;\n        }\n    }\n\n    if smallest_idx\
    \ == lst.len() {\n        return None;\n    }\n\n    Some(smallest[smallest_idx\
    \ - 1])", "    if lst.is_empty() {\n        return None;\n    }\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n       \
    \ smallest_index = 0;\n    }\n    Some(smallest)", "    if lst.len() == 0 {\n\
    \        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = 0;\n    let mut smallest_value = lst.iter().min().unwrap();\n\
    \    for &i in lst {\n        if *i < smallest {\n            smallest_value =\
    \ i;\n            smallest_index = i;\n        }\n    }\n    Some(smallest_value)",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n\
    \    for &x in lst {\n        if x < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = x;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", '    lst.iter().cloned().enumerate().find(|(_,
    x)| x < lst.len() - 2).map(|(_, x)| x).ok()', "    let mut smallest = lst[0];\n\
    \    let mut smallest_idx = 1;\n    for &i in lst {\n        if i < smallest {\n\
    \            smallest = i;\n            smallest_idx = 1;\n        }\n       \
    \ if i == smallest {\n            smallest_idx += 1;\n        }\n    }\n    Some(smallest)",
  "    let mut smallest = vec![lst[0]];\n    let mut smallest_idx = 1;\n    for &i\
    \ in lst {\n        if *i < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = *i;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == lst.len() {\n        None\n    } else {\n        Some(smallest[smallest_idx])\n\
    \    }", "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n\
    \        if x < smallest[0] {\n            smallest[0] = x;\n        }\n     \
    \   if x > smallest[1] {\n            smallest[1] = x;\n        }\n    }\n   \
    \ smallest.iter().next().map(|x| x).ok()", "    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut\
    \ smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index\
    \ == 0 {\n        smallest_index = 1;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        smallest_index = 0;\n    }\n    Some(lst[smallest_index + 1])",
  "    let mut smallest = lst.iter().min();\n    if smallest.is_none() {\n       \
    \ return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x| x\
    \ == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n        smallest_index\
    \ = 0;\n    }\n    Some(smallest[smallest_index + 1])", "    lst.iter().cloned().enumerate().find(|(_,\
    \ i)| {\n        i < lst.len() - 2 && lst[i] < lst[i + 1]\n    }).map(|(_, i)|\
    \ lst[i + 1])", "    let mut smallest = vec![std::i32::MAX; 2];\n    for el in\
    \ lst {\n        if el < smallest[0] {\n            smallest[0] = el;\n      \
    \  }\n        if el < smallest[1] {\n            smallest[1] = el;\n        }\n\
    \    }\n    if smallest[0] == std::i32::MAX {\n        None\n    } else {\n  \
    \      Some(smallest[1])\n    }", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for x in lst {\n        if x < smallest[0] {\n            smallest[0]\
    \ = x;\n        }\n        if x >= smallest[1] {\n            smallest[1] = x;\n\
    \        }\n    }\n    smallest.iter().next().map(|x| x).ok()", "    let mut smallest\
    \ = vec![std::i32::MAX; 2];\n    let mut smallest_idx = 1;\n    for &x in lst\
    \ {\n        if x < smallest[smallest_idx] {\n            smallest[smallest_idx]\
    \ = x;\n            smallest_idx += 1;\n        }\n    }\n    if smallest_idx\
    \ == 2 {\n        Some(smallest[1])\n    } else {\n        None\n    }", "   \
    \ if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = lst.iter().position(|&x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \    Some(smallest[smallest_index + 1])", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ smallest_value = lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index2\
    \ = lst.iter().position(|x| *x == smallest_value).unwrap();\n    if smallest_index2\
    \ == lst.len() {\n        return None;\n    }\n    if smallest_index2 > smallest_index\
    \ {\n        smallest = lst.iter().nth(smallest_index2).unwrap();\n        smallest_index\
    \ = smallest_index2;\n    }\n    Some(smallest)", "    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ second_smallest = lst.iter().skip(smallest_index + 1).min().unwrap();\n    let\
    \ mut second_smallest_index = lst.iter().position(|x| x == second_smallest).unwrap();\n\
    \    if second_smallest_index == lst.len() {\n        return None;\n    }\n  \
    \  Some(second_smallest)", "    let mut smallest = vec![0; lst.len()];\n    let\
    \ mut smallest_idx = vec![0; lst.len()];\n    let mut smallest_val = vec![0; lst.len()];\n\
    \    for &i in lst {\n        smallest[smallest_idx[i]] = i;\n        smallest_idx[i]\
    \ = i;\n        smallest_val[i] = i;\n    }\n    for i in 0..lst.len() {\n   \
    \     if smallest[smallest_idx[i]] > smallest[smallest_idx[i + 1]] {\n       \
    \     smallest_idx[i] = smallest_idx[i + 1];\n            smallest_val[i] = smallest_val[i\
    \ + 1];\n            smallest_idx[i + 1] = i;\n        }\n    }\n    if smallest_idx[lst.len()\
    \ - 1] == lst.len() - 1 {\n        None\n    } else {\n        Some(smallest[smallest_idx[lst.len()\
    \ - 1]])\n    }", "    if lst.len() == 0 {\n        return None;\n    }\n    let\
    \ mut min_val = lst[0];\n    let mut min_idx = 1;\n    for i in 1..lst.len() {\n\
    \        if lst[i] < min_val {\n            min_val = lst[i];\n            min_idx\
    \ = i;\n        }\n    }\n    Some(min_idx)", "    let mut smallest = lst[0];\n\
    \    let mut smallest_index = lst.iter().enumerate().find(|&(_, v)| v < smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    for i\
    \ in smallest_index..lst.len() {\n        if lst[i] < smallest {\n           \
    \ smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n    Some(smallest)",
  "    let mut smallest = vec![std::i32::MAX; 2];\n    for x in lst {\n        if\
    \ *x < smallest[0] {\n            smallest[0] = x;\n        }\n        if *x >\
    \ smallest[1] {\n            smallest[1] = x;\n        }\n    }\n    smallest.iter().next().map(|x|\
    \ x).ok()", "    let mut smallest = vec![std::i32::MAX; 2];\n    for elt in lst\
    \ {\n        if elt < smallest[0] {\n            smallest[0] = elt;\n        }\n\
    \        if elt < smallest[1] {\n            smallest[1] = elt;\n        }\n \
    \   }\n    if smallest[0] == std::i32::MAX {\n        return None;\n    }\n  \
    \  Some(smallest[1])", "    let mut smallest = lst.iter().min().unwrap();\n  \
    \  let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    Some(smallest)", "    if lst.len() == 0 {\n        return\
    \ None;\n    }\n    let mut smallest = lst.iter().min();\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest);\n    if smallest_index == lst.len()\
    \ - 1 {\n        smallest_index = 0;\n    }\n    Some(smallest[smallest_index\
    \ + 1])", "    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest\
    \ = lst[0];\n    let mut smallest_index = 1;\n    for &i in lst {\n        if\
    \ i < smallest {\n            smallest = i;\n            smallest_index = 1;\n\
    \        }\n        if i == smallest {\n            smallest_index += 1;\n   \
    \     }\n    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX;\
    \ 2];\n    for elt in lst {\n        if smallest[0] < elt {\n            smallest[0]\
    \ = elt;\n        }\n        if smallest[1] < elt {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[0] == std::i32::MAX {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = 0;\n    for &i in lst {\n        if i < smallest\
    \ {\n            smallest_index += 1;\n            smallest = i;\n        }\n\
    \    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n\
    \    for elt in lst {\n        if elt < smallest[0] {\n            smallest[0]\
    \ = elt;\n        }\n        if elt < smallest[1] {\n            smallest[1] =\
    \ elt;\n        }\n    }\n    if smallest[1] == std::i32::MAX {\n        None\n\
    \    } else {\n        Some(smallest[1])\n    }", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    smallest\
    \ = lst.iter().nth(smallest_index).unwrap();\n    Some(smallest)", "    if lst.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| x == smallest).unwrap();\n\
    \n    if smallest_index == lst.len() - 1 {\n        smallest_index = 0;\n    }\n\
    \n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n    let\
    \ mut smallest_idx = 1;\n    for &i in lst {\n        if *i < smallest[smallest_idx]\
    \ {\n            smallest[smallest_idx] = *i;\n            smallest_idx += 1;\n\
    \        }\n    }\n    if smallest_idx == 2 {\n        Some(smallest[1])\n   \
    \ } else {\n        None\n    }", "    let mut smallest = lst.iter().min();\n\
    \    let mut smallest_index = 0;\n    for &i in lst {\n        if i < smallest\
    \ {\n            smallest_index += 1;\n            smallest = i;\n        }\n\
    \    }\n    Some(smallest)", "    let mut smallest = vec![std::i32::MAX; 2];\n\
    \    for x in lst {\n        if x < smallest[0] {\n            smallest[0] = x;\n\
    \        }\n        if x > smallest[1] {\n            smallest[1] = x;\n     \
    \   }\n    }\n    smallest\n        .iter()\n        .next()\n        .map(|x|\
    \ x as isize)"]
stop_tokens:
- "\n}"
