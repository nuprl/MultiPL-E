name: HumanEval_59_largest_prime_factor
language: rs
prompt: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
  /// 2\nfn largest_prime_factor(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut i = 2;\n    let mut factor = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factor *= i;\n            n /= i;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    factor", "    let mut\
    \ i = 2;\n    let mut largest = i;\n    while i <= n {\n        if n % i == 0\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest",
  "    let mut i = 2;\n    let mut max_factor = 1;\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            max_factor = i;\n        }\n        i += 1;\n\
    \    }\n    max_factor", "    let mut factors = vec![1isize; n];\n    let mut\
    \ i = 2;\n    while i < n {\n        if n % i == 0 {\n            factors[i] =\
    \ i;\n            i += 2;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    factors.iter().max().unwrap_or(n)", "    let mut i = 2;\n    let mut\
    \ largest = i;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            i += 1;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest", "    let mut i = 2;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n   \
    \ return n;", "    let mut i = 2;\n    let mut factor = 1;\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            factor *= i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factor", "    let\
    \ mut i = 2;\n    let mut factor = 1;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            factor *= i;\n            n /= i;\n        }\n       \
    \ i += 1;\n    }\n    factor", "    let mut i = 2;\n    while i * i <= n {\n \
    \       if n % i == 0 {\n            return i;\n        }\n        i += 1;\n \
    \   }\n    n", "    let mut i = 2;\n    let mut max_factor = 1;\n    while i *\
    \ i <= n {\n        if n % i == 0 {\n            max_factor = i;\n        }\n\
    \        i += 1;\n    }\n    max_factor", "    let mut factors = vec![1usize;\
    \ n];\n    let mut i = 2;\n    while i < n {\n        if n % i == 0 {\n      \
    \      factors[i] = i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.iter().max().unwrap_or(n)", "    let mut i\
    \ = 2;\n    let mut factor = 1;\n    while i * i <= n {\n        if n % i == 0\
    \ {\n            factor = i;\n            i += 1;\n        }\n        i += 1;\n\
    \    }\n    factor", "    let mut i = 2;\n    let mut prime_factor = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            prime_factor = i;\n     \
    \       i += 1;\n        } else {\n            i += 2;\n        }\n    }\n   \
    \ prime_factor", "    let mut i = 2;\n    let mut factor = 1;\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            factor *= i;\n            n /=\
    \ i;\n        }\n        i += 1;\n    }\n    factor", "    let mut i = 2;\n  \
    \  let mut largest = i;\n    while i * i <= n {\n        if n % i == 0 {\n   \
    \         largest = i;\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    largest", "    let mut i = 2;\n    let mut max_factor\
    \ = 1;\n    while i <= n {\n        if n % i == 0 {\n            max_factor =\
    \ i;\n        }\n        i += 1;\n    }\n    max_factor", "    let mut i = 2;\n\
    \    let mut factor = 1;\n    while i <= n {\n        if n % i == 0 {\n      \
    \      factor = i;\n            break;\n        }\n        i += 1;\n    }\n  \
    \  factor", "    let mut i = 2;\n    let mut prime_factor = 1;\n    while i *\
    \ i <= n {\n        if n % i == 0 {\n            prime_factor = i;\n         \
    \   i += 1;\n        } else {\n            i += 2;\n        }\n    }\n    prime_factor",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return i;\n        }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n\
    \    let mut factor = 1;\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          factor *= i;\n            n /= i;\n        }\n        i += 1;\n   \
    \ }\n    factor"]
stop_tokens:
- "\n}"
