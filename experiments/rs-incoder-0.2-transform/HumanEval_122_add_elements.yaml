name: HumanEval_122_add_elements
language: rs
prompt: "/// Given a non-empty array of integers arr and an integer k, return\n///\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  /// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n///\
  \ 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\n\
  fn add_elements(arr: Vec<isize>, k: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    for i in 0..k {\n        sum += arr[i];\n\
    \    }\n    sum", "    let mut sum = 0;\n    for el in arr.iter().take(k) {\n\
    \        sum += el;\n    }\n    sum", "    let mut sum = 0;\n    for &i in arr[k..]\
    \ {\n        sum += i;\n    }\n    sum", "    let mut sum = 0;\n    let mut i\
    \ = 0;\n    while i < k {\n        if arr[i] < 10 {\n            sum += arr[i];\n\
    \            i += 1;\n        } else {\n            sum += arr[i] - 10;\n    \
    \        i += 1;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for &i\
    \ in arr[k..] {\n        if i >= 10 {\n            sum += i;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for i in 0..k {\n        sum += arr[i];\n\
    \    }\n    for i in 0..k {\n        sum += arr[i + k];\n    }\n    sum", "  \
    \  let mut sum = 0;\n    for &i in arr.iter().take(k) {\n        sum += i;\n \
    \   }\n    sum", "    let mut sum = 0;\n    for &i in arr[k..].iter() {\n    \
    \    sum += i;\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k {\n\
    \        sum += arr[i];\n    }\n    for i in k..arr.len() {\n        sum += arr[i];\n\
    \    }\n    sum", "    let mut sum = 0;\n    for e in arr.iter().take(k) {\n \
    \       sum += e;\n    }\n    sum", "    let mut sum = 0;\n    for el in arr.iter().take(k)\
    \ {\n        sum += el;\n    }\n    sum", "    let mut sum = 0;\n    for &i in\
    \ arr[k..].iter() {\n        sum += i;\n    }\n    sum", "    let mut sum = 0;\n\
    \    for &i in arr[k..] {\n        sum += i;\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for e in arr.iter().take(k) {\n        sum += e;\n    }\n    sum",
  "    let mut sum = 0;\n    for i in 0..k {\n        sum += arr[i];\n    }\n    for\
    \ i in k..arr.len() {\n        sum += arr[i] - arr[k];\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for e in arr.iter().take(k) {\n        sum += e;\n   \
    \ }\n    sum", "    let mut sum = 0;\n    let mut i = 1;\n    while i <= k {\n\
    \        if arr[i] < 10 {\n            sum += arr[i];\n            i += 1;\n \
    \       } else {\n            sum += 10 + arr[i];\n            i += 2;\n     \
    \   }\n    }\n    sum", "    let mut sum = 0;\n    for &i in arr[k..].iter() {\n\
    \        sum += i;\n    }\n    sum", "    let mut sum = 0;\n    for e in arr[k..].iter()\
    \ {\n        sum += e;\n    }\n    sum", "    let mut sum = 0;\n    for i in 0..k\
    \ {\n        if arr[i] > 9 {\n            sum += arr[i] - 10;\n        } else\
    \ {\n            sum += arr[i];\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
