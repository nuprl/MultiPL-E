name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a dictionary, return True if\
  \ all keys are strings in lower \n/// case or all keys are strings in upper case,\
  \ else return False.\n/// The function should return False is the given dictionary\
  \ is empty.\n/// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n\
  /// true\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"\
  ), String::from(\"banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: ["    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            None => false,\n            Some(lower) => value == lower,\n\
    \        }\n    })", '    dict.len() == 0 || dict.iter().all(|(_, v)| v.is_lowercase())',
  '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    match dict.len() {\n        0\
    \ => false,\n        _ => true,\n    }", "    dict.iter().all(|(_, value)| {\n\
    \        value.is_lowercase()\n            || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n   \
    \         None => false,\n            Some(lower) => value == lower,\n       \
    \ }\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", "    dict.iter().all(|(key, _)| {\n      \
    \  if key.len() != 0 {\n            key.to_lowercase().is_empty() || key.to_uppercase().is_empty()\n\
    \        } else {\n            true\n        }\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    !dict.is_empty() && dict.iter().all(|(key, value)| {\n        match\
    \ key.to_lowercase() {\n            Some(lower) => value == lower,\n         \
    \   None => false,\n        }\n    })", "    dict.iter().all(|(_, value)| {\n\
    \        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    if dict.len()\
    \ == 0 {\n        return false;\n    }\n    for entry in dict.iter() {\n     \
    \   let key = entry.key().to_lowercase();\n        let value = entry.value().to_lowercase();\n\
    \        if key != value {\n            return false;\n        }\n    }\n    true",
  "    match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    match dict.len()\
    \ {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, _)| {\n\
    \        key.to_lowercase() == key\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => value == key.to_uppercase(),\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        if key.to_lowercase() == key {\n\
    \            true\n        } else {\n            false\n        }\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.len() == 0 ||\n    dict.iter().all(|(_, value)| {\n      \
    \  value.len() == 0 ||\n        value.chars().all(|c| c.is_ascii_lowercase() ||\
    \ c.is_ascii_uppercase())\n    })", "    dict.iter().all(|(key, value)| {\n  \
    \      if key.to_lowercase() == key {\n            true\n        } else {\n  \
    \          false\n        }\n    })", "    match dict.len() {\n        0 => false,\n\
    \        _ => true,\n    }", '    dict.iter().all(|(key, _)| key.to_lowercase()
    == key)', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        key.to_lowercase() == value.to_lowercase()\n\
    \    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        let mut key = key.to_lowercase();\n\
    \        let mut value = value.to_lowercase();\n        key.chars().all(|c| {\n\
    \            if c != c.to_uppercase() {\n                false\n            }\
    \ else {\n                true\n            }\n        })\n    })", "    match\
    \ dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.is_lowercase() {\n            true\n        } else\
    \ {\n            false\n        }\n    })", "    if dict.is_empty() {\n      \
    \  return false;\n    }\n    let mut keys = dict.keys().collect::<Vec<_>>();\n\
    \    keys.sort();\n    for k in keys {\n        if k.len() != 1 {\n          \
    \  return false;\n        }\n        if k.to_lowercase() != k {\n            return\
    \ false;\n        }\n    }\n    for k in keys {\n        if k.len() != 1 {\n \
    \           return false;\n        }\n        if k.to_uppercase() != k {\n   \
    \         return false;\n        }\n    }\n    true", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    if dict.is_empty() {\n \
    \       return false;\n    }\n\n    for entry in dict.iter() {\n        let key\
    \ = entry.key().to_string();\n        let value = entry.value().to_string();\n\
    \n        if key.len() != value.len() {\n            return false;\n        }\n\
    \n        for (i, c) in key.chars().enumerate() {\n            if c != value[i]\
    \ {\n                return false;\n            }\n        }\n    }\n\n    return\
    \ true;", "    if dict.is_empty() {\n        return false;\n    }\n    for k in\
    \ dict.keys() {\n        if k.len() != 1 {\n            return false;\n      \
    \  }\n        if k.to_lowercase() != k {\n            return false;\n        }\n\
    \    }\n    for k in dict.keys() {\n        if k.len() != 1 {\n            return\
    \ false;\n        }\n        if k.to_uppercase() != k {\n            return false;\n\
    \        }\n    }\n    return true;", "    dict.iter().all(|(key, _)| {\n    \
    \    key.chars().all(|c| c.is_ascii_lowercase() || c.is_ascii_uppercase())\n \
    \   })", "    dict.len() == 0 ||\n    dict.iter().all(|(_, v)| v.len() == 1 &&\
    \ v[0] >= 'A' && v[0] <= 'Z')", "    dict.iter().all(|(_, value)| {\n        value.len()\
    \ == 0 || value.chars().all(|c| c.is_ascii_lowercase())\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        if key.is_lowercase() {\n      \
    \      true\n        } else {\n            false\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        key.to_lowercase() == value.to_lowercase()\n    })", "  \
    \  match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    for entry in dict.iter()\
    \ {\n        let key = entry.key().to_string();\n        if key.len() > 1 && key[0]\
    \ >= 'A' && key[0] <= 'Z' {\n            return false;\n        }\n        if\
    \ key.len() > 1 && key[0] >= 'a' && key[0] <= 'z' {\n            return false;\n\
    \        }\n    }\n    return true;", "    dict.iter().all(|(key, _)| {\n    \
    \    key.to_lowercase() == key\n    })", "    dict.iter().all(|(key, value)| {\n\
    \        if key.to_lowercase() == key {\n            true\n        } else {\n\
    \            false\n        }\n    })", "    dict.iter().all(|(key, value)| {\n\
    \        match key.to_lowercase() {\n            None => false,\n            Some(lower)\
    \ => value == lower,\n        }\n    })", "    match dict.len() {\n        0 =>\
    \ false,\n        _ => true,\n    }", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.is_lowercase() {\n            true\n        } else\
    \ {\n            false\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    match\
    \ dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n   \
    \         Some(lower) => value == lower.to_lowercase(),\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    !dict.is_empty() &&\
    \ dict.keys().all(|key| {\n        key.to_lowercase() == key || key.to_uppercase()\
    \ == key\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key,\
    \ value)| {\n        let mut key = key.to_lowercase();\n        let mut value\
    \ = value.to_lowercase();\n        match key.chars().next() {\n            Some('\
    \ ') => false,\n            Some(' ') => false,\n            Some(c) => c != '_',\n\
    \            None => false,\n        }\n        match value.chars().next() {\n\
    \            Some(' ') => false,\n            Some(' ') => false,\n          \
    \  Some(c) => c != '_',\n            None => false,\n        }\n        key ==\
    \ value\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == lower,\n            None => value == key.to_uppercase(),\n\
    \        }\n    })", '    dict.len() == 0 || dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        None => false,\n            Some(lower) => value == lower,\n        }\n\
    \    })", "    if dict.is_empty() {\n        return false;\n    }\n    let mut\
    \ keys = dict.keys();\n    let mut keys_iter = keys.iter();\n    let mut keys_iter_next\
    \ = keys_iter.next();\n    while let Some(key) = keys_iter_next {\n        if\
    \ key.to_lowercase() == key {\n            if keys_iter_next.is_none() {\n   \
    \             return true;\n            }\n            keys_iter_next = keys_iter.next();\n\
    \        } else {\n            if key.to_uppercase() == key {\n              \
    \  if keys_iter_next.is_none() {\n                    return true;\n         \
    \       }\n                keys_iter_next = keys_iter.next();\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    false",
  "    dict.iter().all(|(key, value)| {\n        let mut key = key.to_lowercase();\n\
    \        let mut value = value.to_lowercase();\n        match key.len() {\n  \
    \          0 => false,\n            1 => value == key,\n            _ => value\
    \ == key,\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        if key.is_lowercase()\
    \ {\n            true\n        } else if key.is_uppercase() {\n            true\n\
    \        } else {\n            false\n        }\n    })", '    dict.iter().all(|&(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, _)| {\n\
    \        key.to_lowercase() == key\n    })", "    match dict.len() {\n       \
    \ 0 => false,\n        _ => true,\n    }", "    dict.iter().all(|&(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            None => false,\n            Some(lower) => value == lower,\n\
    \        }\n    })", "    if dict.is_empty() {\n        return false;\n    }\n\
    \    for entry in dict.iter() {\n        if entry.key().is_lowercase() {\n   \
    \         return true;\n        }\n        if entry.key().is_uppercase() {\n \
    \           return true;\n        }\n    }\n    false", "    !dict.is_empty()\
    \ && dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n  \
    \          true => value.to_lowercase() == true,\n            false => value.to_uppercase()\
    \ == true,\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(key, _)| key.to_lowercase() == key)',
  "    match dict.len() {\n        0 => false,\n        1 => true,\n        _ => dict.values().iter().all(|v|\
    \ v.is_lowercase()),\n    }", '    dict.iter().all(|(key, _)| key.to_lowercase()
    == key)', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    match dict.len() {\n        0 => false,\n        _ => true,\n \
    \   }", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            None => false,\n            Some(lower) => value == lower,\n\
    \        }\n    })", "    if dict.is_empty() {\n        return false;\n    }\n\
    \    let mut iter = dict.iter();\n    let mut key_iter = iter.keys().cloned().collect::<Vec<_>>();\n\
    \    let mut val_iter = iter.values().cloned().collect::<Vec<_>>();\n    let mut\
    \ key_iter = key_iter.into_iter();\n    let mut val_iter = val_iter.into_iter();\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_some());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_some());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_none());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_none());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_some());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_some());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_none());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_none());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_some());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_some());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_none());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_none());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_some());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_some());\n\
    \    let mut key_iter = key_iter.zip(0..).filter(|&(_, i)| key_iter.next().unwrap().is_none());\n\
    \    let mut val_iter = val_iter.zip(0..).filter(|&(_, i)| val_iter.next().unwrap().is_none());\n",
  "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    if dict.len() == 0 {\n        return false;\n    }\n    for entry\
    \ in dict.iter() {\n        let key = entry.key().to_lowercase();\n        let\
    \ value = entry.value().to_lowercase();\n        if key != value {\n         \
    \   return false;\n        }\n    }\n    return true;", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    match dict.len() {\n        0\
    \ => false,\n        _ => true,\n    }", "    if dict.is_empty() {\n        return\
    \ false;\n    }\n\n    for entry in dict.iter() {\n        if entry.key().is_lowercase()\
    \ {\n            return true;\n        }\n        if entry.key().is_uppercase()\
    \ {\n            return true;\n        }\n    }\n\n    return false;", "    if\
    \ dict.is_empty() {\n        return false;\n    }\n\n    for entry in dict.iter()\
    \ {\n        let key = entry.key().to_lowercase();\n        let value = entry.value().to_lowercase();\n\
    \n        if key != value {\n            return false;\n        }\n    }\n\n \
    \   return true;", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        key.to_lowercase() == value.to_lowercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(_, value)| {\n        match value.to_lowercase() {\n    \
    \        true => true,\n            false => false,\n        }\n    })", '    !dict.is_empty()
    && dict.keys().all(|&key| key.to_lowercase() == key)', '    !dict.is_empty() &&
    dict.keys().all(|key| key.to_lowercase() == key)', "    match dict.len() {\n \
    \       0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", '    dict.iter().all(|(_, v)|
    v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n\
    \        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", '    dict.iter().all(|(_, v)|
    v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|&(_, value)| {\n\
    \        value.len() == 1 && value[0] >= 'a' && value[0] <= 'z'\n    })", "  \
    \  dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    match dict.len() {\n        0 => false,\n        _ => true,\n \
    \   }", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", "    dict.iter().all(|(_, value)| {\n    \
    \    value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        let mut lower = String::new();\n        let mut upper = String::new();\n\
    \        key.to_lowercase(&mut lower);\n        value.to_uppercase(&mut upper);\n\
    \        lower == upper\n    })", "    dict.iter().all(|(_, value)| {\n      \
    \  value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase()\n            || value.is_uppercase()\n\
    \    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        let mut key = key.to_lowercase();\n\
    \        let mut value = value.to_lowercase();\n        key.chars().all(|c| {\n\
    \            value.chars().all(|c| c.is_ascii_lowercase())\n        })\n    })",
  "    dict.iter().all(|(key, _)| {\n        key.to_lowercase() == key\n    })", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    let mut keys = dict.keys();\n\
    \    while let Some(key) = keys.next() {\n        let key_str = key.to_string();\n\
    \        if key_str.is_lowercase() {\n            return true;\n        }\n  \
    \      if key_str.is_uppercase() {\n            return true;\n        }\n    }\n\
    \    false", '    !dict.is_empty() && dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        key.to_lowercase()\
    \ == value.to_lowercase()\n    })", "    dict.iter().all(|(key, value)| {\n  \
    \      match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    match\
    \ dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        if let Ok(key) = key.to_lowercase() {\n            true\n\
    \        } else if let Ok(key) = key.to_uppercase() {\n            true\n    \
    \    } else {\n            false\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase()\n            || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == String::from(lower),\n            None => false,\n        }\n    })", '    dict.iter().all(|(key,
    _)| key.chars().all(|c| c.is_lowercase()))', "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase() ==\
    \ key {\n            true\n        } else {\n            false\n        }\n  \
    \  })", "    match dict.len() {\n        0 => false,\n        1 => true,\n   \
    \     _ => false,\n    }", "    dict.iter().all(|(key, value)| {\n        match\
    \ key.to_lowercase() {\n            Some(key_lower) => key_lower == value,\n \
    \           None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        key.to_lowercase() == value.to_lowercase()\n    })", "    dict.iter().all(|(key,\
    \ _)| {\n        key.chars().all(|c| c.is_ascii_lowercase())\n    })", "    if\
    \ dict.len() == 0 {\n        return false;\n    }\n    for entry in dict.iter()\
    \ {\n        let key = entry.key();\n        let value = entry.value();\n    \
    \    if key.len() != 1 || value.len() != 1 || key[0] != 'a' || value[0] != 'A'\
    \ {\n            return false;\n        }\n    }\n    true", '    dict.len() ==
    0 || dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    match\
    \ dict.len() {\n        0 => false,\n        1 => true,\n        _ => false,\n\
    \    }", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == String::from(lower),\n            None => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == lower,\n            None => false,\n        }\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, _)| {\n        key.to_lowercase()\
    \ == key\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase()\
    \ == key {\n            true\n        } else if key.to_uppercase() == key {\n\
    \            true\n        } else {\n            false\n        }\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n   \
    \         Some(lower) => value == lower,\n            None => false,\n       \
    \ }\n    })", "    !dict.is_empty() && dict.keys().all(|key| {\n        key.to_lowercase()\
    \ == key\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\n\
    \            || value.is_uppercase()\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.len() == 0 || value.chars().all(|c|\
    \ c.is_ascii_lowercase() || c.is_ascii_uppercase())\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == String::from(lower),\n\
    \            None => value == String::from(key.to_uppercase()),\n        }\n \
    \   })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() ||\
    \ value.is_uppercase()\n    })", '    dict.iter().all(|(key, _)| key.to_lowercase()
    == key)', "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() ||\
    \ value.is_uppercase()\n    })", "    dict.iter().all(|(key, value)| {\n     \
    \   match key.to_lowercase() {\n            Some(lower) => value == lower,\n \
    \           None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    match dict.len() {\n        0\
    \ => false,\n        _ => true,\n    }", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        key.to_lowercase()\
    \ == value.to_lowercase()\n    })", "    dict.iter().all(|(key, value)| {\n  \
    \      match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", '    !dict.is_empty() && dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        let mut lower = String::new();\n        let mut upper = String::new();\n\
    \        lower.push_str(key.to_lowercase());\n        upper.push_str(key.to_uppercase());\n\
    \        lower.cmp(&upper) == 0\n    })", "    dict.iter().all(|(_, value)| {\n\
    \        value.is_lowercase()\n    })", "    dict.iter().all(|(_, value)| {\n\
    \        value.is_lowercase()\n            || value.is_uppercase()\n    })", " \
    \   match dict.len() {\n        0 => false,\n        _ => true,\n    }", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", "    if dict.len() == 0 {\n      \
    \  return false;\n    }\n    for entry in dict.iter() {\n        if entry.key().is_lowercase()\
    \ {\n            return false;\n        }\n        if entry.key().is_uppercase()\
    \ {\n            return false;\n        }\n    }\n    return true;"]
stop_tokens:
- "\n}"
