name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a dictionary, return True if\
  \ all keys are strings in lower \n/// case or all keys are strings in upper case,\
  \ else return False.\n/// The function should return False is the given dictionary\
  \ is empty.\n/// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n\
  /// true\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"\
  ), String::from(\"banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    dict.iter().all(|(key, value)| {\n        key.to_lowercase() ==\
    \ value.to_lowercase()\n    })", "    dict.iter().all(|(_, value)| {\n       \
    \ value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.chars().all(|c| c.is_ascii_lowercase())\n    })", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    let mut iter = dict.iter().cloned();\n\
    \    loop {\n        let (key, value) = iter.next().unwrap();\n        if key.is_lowercase()\
    \ {\n            if value.is_lowercase() {\n                return true;\n   \
    \         }\n        } else {\n            if value.is_uppercase() {\n       \
    \         return true;\n            }\n        }\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == String::from(lower),\n            None => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    match\
    \ dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        let mut key = key.to_lowercase();\n        let mut value\
    \ = value.to_lowercase();\n        key.chars().all(|c| !value.chars().any(|c|\
    \ c.is_uppercase()))\n    })", "    dict.iter().all(|(key, _)| {\n        key.to_lowercase()\
    \ == key\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        key.to_lowercase()\
    \ == value.to_lowercase()\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())']
stop_tokens:
- "\n}"
