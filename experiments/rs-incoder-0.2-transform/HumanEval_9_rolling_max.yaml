name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1, 2,\
  \ 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result",
  "    let mut max = numbers[0];\n    let mut max_idx = 1;\n    for &n in numbers\
    \ {\n        if n > max {\n            max = n;\n            max_idx = 1;\n  \
    \      }\n        if n == max {\n            max_idx += 1;\n        }\n    }\n\
    \    vec![max; max_idx]", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for number in numbers.iter().rev() {\n       \
    \ if number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers.iter().rev() {\n\
    \        if number > max_number {\n            max_numbers.push(number);\n   \
    \     }\n    }\n    max_numbers", "    let mut result = vec![];\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result[max_index] = n;\n    }\n    result", "    let mut max_value\
    \ = numbers[0];\n    let mut max_pos = 0;\n    for pos in 1..numbers.len() {\n\
    \        if numbers[pos] > max_value {\n            max_value = numbers[pos];\n\
    \            max_pos = pos;\n        }\n    }\n    let mut result = vec![max_value];\n\
    \    for i in 1..max_pos {\n        result.push(numbers[i]);\n    }\n    result",
  "    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    for\
    \ value in numbers {\n        if value > max_value {\n            result.push(max_value);\n\
    \            max_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    result.push(max_value);\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index =\
    \ 0;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling_index_rolling_index = 0;\n    for n in\
    \ numbers {\n        if n == max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n            max_so_far_rolling_index_rolling_index += 1;\n        }\n\
    \    }\n    let mut max_so_far_rolling_index_rolling_max = max_so_far_rolling_index;\n\
    \    let mut max_so_far_rolling_max = max_so_far;\n    for n in numbers {\n  \
    \      if n == max_so_far {\n            max_so_far_rolling_index_rolling_max\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_index = 0;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_index\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max = max_so_far_rolling_index_rolling_max;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_index\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_index\
    \ += 1;\n        }\n        if n > max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_index_rolling_max_rolling_index;\n    for n in numbers\
    \ {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max ",
  "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_numbers.clear();\n        }\n        if max_numbers.is_empty()\
    \ {\n            max_numbers.push(number);\n        } else {\n            max_numbers.push(max_number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = vec![];\n    let mut\
    \ max_value = numbers[0];\n    for number in numbers {\n        if number > max_value\
    \ {\n            max_value = number;\n        }\n    }\n    for number in numbers\
    \ {\n        if number == max_value {\n            result.push(number);\n    \
    \    }\n    }\n    result", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_so_far = numbers[0];\n \
    \   let mut max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max\
    \ = max_so_far_rolling_max;\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_index;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far_rolling_max_rolling_max {\n            max_so_far_rolling_max_rolling_max\
    \ = number;\n            max_so_far_rolling_max_rolling_max_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_index;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max {\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max = number;\n        \
    \    max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.len() - 1;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ number;\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mu", "    let mut result = vec![];\n\
    \    let mut max_value = numbers[0];\n    for value in numbers {\n        if value\
    \ > max_value {\n            max_value = value;\n        }\n    }\n    for value\
    \ in numbers {\n        if value == max_value {\n            result.push(value);\n\
    \        }\n    }\n    result", "    let mut max_so_far = numbers[0];\n    let\
    \ mut max_so_far_index = 0;\n    for num in numbers {\n        if num > max_so_far\
    \ {\n            max_so_far = num;\n            max_so_far_index = num;\n    \
    \    }\n    }\n    vec![max_so_far, max_so_far_index]", "    let mut result =\
    \ Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max_value {\n            max_value =\
    \ n;\n            max_index = result.len();\n        }\n        result.push(n);\n\
    \    }\n    result.push(max_value);\n    result.push(max_index);\n    result",
  "    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    let\
    \ mut max_index = 0;\n    let mut max_index = numbers.iter().position(|x| x >\
    \ max_value);\n    while max_index != numbers.len() - 1 {\n        result.push(max_value);\n\
    \        max_value = numbers[max_index + 1];\n        max_index = numbers.iter().position(|x|\
    \ x > max_value);\n    }\n    result", "    let mut max_number: isize = 0;\n \
    \   let mut max_index: usize = 0;\n    for n in numbers {\n        if n > max_number\
    \ {\n            max_number = n;\n            max_index = numbers.iter().position(|&x|\
    \ x == n).unwrap();\n        }\n    }\n    numbers.iter().take(max_index).collect()",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for i in numbers.iter().rev() {\n        if i\
    \ > max_number {\n            max_number = i;\n            max_index = i;\n  \
    \      }\n    }\n    for i in numbers.iter().rev() {\n        if i == max_number\
    \ {\n            max_numbers.push(max_number);\n        } else {\n           \
    \ max_numbers.push(max_number);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers", "    let mut max_number: isize = 0;\n    let mut max_numbers\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.clear();\n        }\n\
    \        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers", "    let mut result = vec![];\n    let mut max_value =\
    \ numbers[0];\n    for value in numbers {\n        if value > max_value {\n  \
    \          max_value = value;\n        }\n    }\n    for value in numbers {\n\
    \        if value == max_value {\n            result.push(value);\n        }\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
