name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1,\
  \ 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for\
    \ &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n      \
    \  min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().min().unwrap();\n    for num in nums.iter() {\n\
    \        min_sum = min_sum + num;\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum = min_sum\
    \ - num;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    let mut min_sub_array =\
    \ Vec::new();\n    for num in nums.iter() {\n        let mut sub_array = Vec::new();\n\
    \        let mut sub_array_sum = isize::MAX;\n        for sub_num in nums.iter()\
    \ {\n            if sub_num == num {\n                sub_array_sum += sub_num;\n\
    \            } else {\n                sub_array.push(sub_num);\n            \
    \    sub_array_sum += sub_num;\n            }\n        }\n        if sub_array_sum\
    \ < min_sub_array {\n            min_sub_array = sub_array_sum;\n            min_sub_array\
    \ = sub_array;\n        }\n    }\n    min_sub_array", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum -\
    \ i;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n \
    \   min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums[0] as isize;\n    for &n in nums.iter().rev()\
    \ {\n        min_sum = min_sum + n;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums[0] as isize;\n    for num in nums.iter().rev() {\n        min_sum = min_sum\
    \ + num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut\
    \ sum, i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n\
    \    });\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().sum();\n    for &n in nums.iter().rev()\
    \ {\n        min_sum = min_sum - n;\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    for num in nums.iter() {\n        min_sum = min_sum.min(num);\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum <\
    \ 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().min().unwrap();\n    for num in nums.iter().skip(1) {\n      \
    \  min_sum = min_sum + num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    for num in nums.iter().rev() {\n        min_sum\
    \ = min_sum.min(num + min_sum);\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        if num < 0 {\n            break;\n\
    \        }\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut\
    \ min_sum = nums[0] as isize;\n    for &n in nums.iter().skip(1) {\n        min_sum\
    \ = min_sum.min(n as isize);\n    }\n    min_sum"]
stop_tokens:
- "\n}"
