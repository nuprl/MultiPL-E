name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1,\
  \ 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ["    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| sum + i);\n    for &i in nums.iter().rev() {\n        if i > min_sum\
    \ {\n            min_sum = i;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().rev() {\n\
    \        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum", "   \
    \ let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |mut sum, i| {\n        sum += i;\n \
    \       sum\n    });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min = num + min;\n    }\n    min",
  "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    for num in nums.iter() {\n        min_sum = min_sum.min(num);\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        if num < min {\n            min =\
    \ num;\n        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum + n;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n \
    \   for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    let mut min_sub_array =\
    \ Vec::new();\n    for num in nums.iter() {\n        if min_sum < num {\n    \
    \        min_sum = num;\n            min_sub_array.clear();\n        }\n     \
    \   if min_sum > num {\n            min_sub_array.push(num);\n        }\n    }\n\
    \    if min_sub_array.len() == 0 {\n        min_sum\n    } else {\n        min_sub_array\n\
    \            .iter()\n            .fold(min_sum, |acc, num| acc + num)\n    }",
  "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum", "   \
    \ let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in nums.iter() {\n\
    \        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum", "    let\
    \ mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n        if min_sum < 0 {\n            break;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut\
    \ sum, i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum.min(|a,\
    \ b| a.partial_cmp(&b).unwrap());\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter() {\n  \
    \      min_sum = min_sum.min(|a, b| a.partial_cmp(&b).unwrap());\n    }\n    min_sum",
  "    let mut min_sum = isize::MAX;\n    for i in 0..nums.len() {\n        let mut\
    \ cur_sum = nums[i];\n        for j in (i + 1)..nums.len() {\n            cur_sum\
    \ += nums[j];\n            if cur_sum < min_sum {\n                min_sum = cur_sum;\n\
    \            }\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for\
    \ num in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min = nums.iter().min().unwrap();\n    for n in nums.iter().rev() {\n      \
    \  if n >= min {\n            min = n;\n        }\n    }\n    min", "    let mut\
    \ min_sum = nums.iter().min().unwrap();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum + num;\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum.min(|a, b| a.cmp(b));\n    }\n    min_sum", " \
    \   let mut min_sum = nums[0] as isize;\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum.min(num);\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum =\
    \ min_sum - num;\n        if min_sum < 0 {\n            min_sum = 0;\n       \
    \ }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n    let mut min_sub_array\
    \ = vec![];\n    for num in nums {\n        let sub_array = nums.iter().filter(|&x|\
    \ x != num).collect::<Vec<_>>();\n        let sum = sub_array.iter().sum();\n\
    \        if sum < min_sum {\n            min_sum = sum;\n            min_sub_array\
    \ = sub_array;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n      \
    \  min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum =\
    \ min_sum - num;\n        if min_sum < 0 {\n            min_sum = 0;\n       \
    \ }\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum + n;\n    }\n  \
    \  min_sum", "    let mut min_sum = isize::MAX;\n    for num in nums.iter() {\n\
    \        min_sum = min_sum.min(num);\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    for n in nums.iter() {\n        min_sum = min_sum.min(n.unwrap());\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum <\
    \ 0 {\n            break;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter() {\n    \
    \    min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum\
    \ = min_sum - num;\n    }\n    min_sum", "    let mut min = isize::MAX;\n    for\
    \ num in nums {\n        if num > 0 {\n            min = nums.iter().filter(|&x|\
    \ x > num).sum();\n        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   let mut min_sub_array = Vec::new();\n    for num in nums {\n        if min_sum\
    \ > num {\n            min_sum = num;\n            min_sub_array.clear();\n  \
    \      }\n        if min_sum < num {\n            min_sub_array.push(num);\n \
    \       }\n    }\n    if min_sub_array.len() == 0 {\n        min_sum\n    } else\
    \ {\n        let mut min_sub_array_sum = isize::MAX;\n        for num in min_sub_array\
    \ {\n            min_sub_array_sum += num;\n        }\n        min_sum - min_sub_array_sum\n\
    \    }", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |a, b| a + b);\n   \
    \ for &n in nums.iter().skip(1) {\n        min_sum = min_sum - n;\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| {\n      \
    \  sum += i;\n        sum\n    });\n    for num in nums.iter() {\n        min_sum\
    \ = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum\
    \ = min_sum - num;\n        if min_sum < 0 {\n            break;\n        }\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |a, b| a + b);\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter().rev() {\n        if i >= min_sum {\n            min_sum\
    \ = i;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in\
    \ nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum", "   \
    \ let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n       \
    \ min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n\
    \    for num in nums {\n        min_sum = min_sum.min(num);\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for num in nums.iter().skip(1) {\n        min_sum =\
    \ min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum.min(|a,\
    \ b| a.partial_cmp(&b).unwrap());\n    }\n    min_sum", "    let mut min_sum =\
    \ nums[0] as isize;\n    for &n in nums.iter().skip(1) {\n        min_sum = min_sum.min(&n);\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum <\
    \ 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum\
    \ = min_sum - num;\n        if min_sum < 0 {\n            break;\n        }\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for num in nums.iter() {\n        min_sum = min_sum.min(num);\n \
    \   }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| {\n\
    \        if sum < i {\n            sum = i;\n        }\n        sum\n    });\n\
    \    for &i in nums.iter().skip(1) {\n        min_sum = min_sum + i;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n\
    \    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n    min_sum",
  "    let mut min_sum = nums[0] as isize;\n    for &n in nums.iter().rev() {\n  \
    \      min_sum = min_sum + n;\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum\
    \ = min_sum - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| sum + i);\n    for num in nums.iter().skip(1) {\n        min_sum\
    \ = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums[0] as isize;\n\
    \    for &n in nums.iter().skip(1) {\n        min_sum = min_sum + n;\n    }\n\
    \    min_sum", "    let mut min = nums.iter().min().unwrap();\n    for num in\
    \ nums.iter().skip(1) {\n        min = num + min;\n    }\n    min", "    let mut\
    \ min_sum = nums.iter().fold(0, |mut sum, i| {\n        sum += i;\n        sum\n\
    \    });\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n\
    \    min_sum", "    let mut min = std::i32::MAX;\n    for num in nums.iter() {\n\
    \        if num < 0 {\n            min = std::i32::MAX;\n            break;\n\
    \        }\n        min = std::cmp::min(min, num);\n    }\n    min", "    let\
    \ mut min_sum = isize::MAX;\n    for i in nums.iter() {\n        min_sum = if\
    \ min_sum < i {\n            min_sum\n        } else {\n            min_sum +\
    \ i\n        };\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for num in nums.iter().rev() {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum", "    let mut min = isize::MAX;\n    for &n\
    \ in nums {\n        if n >= min {\n            min = n;\n        }\n    }\n \
    \   min", "    let mut min_sum = nums.iter().min().unwrap();\n    for num in nums.iter().rev()\
    \ {\n        if num < min_sum {\n            min_sum = num;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    let mut min_sub_array =\
    \ Vec::new();\n    for num in nums {\n        if min_sum < num {\n           \
    \ min_sum = num;\n            min_sub_array.clear();\n        }\n        if min_sum\
    \ == num {\n            min_sub_array.push(num);\n        }\n    }\n    min_sub_array\n\
    \        .iter()\n        .fold(isize::MAX, |acc, x| acc + x)", "    let mut min_sum\
    \ = isize::MAX;\n    let mut min_sub_arr = vec![];\n    for num in nums {\n  \
    \      if min_sum > num {\n            min_sum = num;\n            min_sub_arr\
    \ = vec![];\n        }\n        if min_sum < num {\n            min_sub_arr.push(num);\n\
    \        }\n    }\n    min_sub_arr.iter().fold(0, |sum, num| sum + num)", "  \
    \  let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in\
    \ nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n\
    \            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   for num in nums.iter() {\n        min_sum = min_sum.min(num);\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter().skip(1) {\n        min_sum = min_sum.min(|a, b| a.partial_cmp(&b).unwrap());\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min", "    let mut min_sum = nums.iter().fold(0, |sum,\
    \ num| sum + num);\n    for num in nums.iter() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum\
    \ - i;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n    min_sum",
  "    let mut min = nums[0] as isize;\n    for i in 1..nums.len() {\n        if nums[i]\
    \ - nums[i - 1] < min {\n            min = nums[i] - nums[i - 1];\n        }\n\
    \    }\n    min", "    let mut min_sum = isize::MAX;\n    let mut min_sub_array\
    \ = Vec::new();\n    for num in nums {\n        if min_sum < num {\n         \
    \   min_sum = num;\n            min_sub_array.clear();\n        }\n        if\
    \ min_sum == num {\n            min_sub_array.push(num);\n        }\n    }\n \
    \   if min_sub_array.len() == 0 {\n        min_sum\n    } else {\n        min_sub_array\n\
    \            .iter()\n            .fold(min_sum, |min_sum, num| min_sum + num)\n\
    \    }", "    let mut min = nums.iter().min().unwrap();\n    for num in nums.iter().skip(1)\
    \ {\n        let sum = num + min;\n        if sum < min {\n            min = sum;\n\
    \        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n    for\
    \ num in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        if num > 0 {\n            min_sum = min_sum - num;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| {\n   \
    \     if sum < i {\n            sum = i;\n        }\n        sum\n    });\n  \
    \  for &i in nums.iter().skip(1) {\n        min_sum = min_sum + i;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n \
    \   for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n    }\n \
    \   min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |mut sum, i| {\n        sum += i;\n        sum\n    });\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min =\
    \ std::i32::MAX;\n    for num in nums.iter() {\n        if num < min {\n     \
    \       min = num;\n        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for &num in nums.iter().rev() {\n        min_sum = min_sum - num;\n     \
    \   if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n\
    \            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n        if min_sum < 0 {\n            break;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n \
    \   for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum.min(num + min_sum);\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n    for num\
    \ in nums.iter() {\n        min_sum = min_sum + num;\n    }\n    min_sum", " \
    \   let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n     \
    \   min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for num in nums.iter() {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut\
    \ sum, i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter()\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    let mut min_sub_array = Vec::new();\n    for num in nums.iter()\
    \ {\n        if num < 0 {\n            continue;\n        }\n        let mut sub_array\
    \ = Vec::new();\n        for sub_num in nums.iter() {\n            if sub_num\
    \ < 0 {\n                continue;\n            }\n            if sub_num == num\
    \ {\n                sub_array.push(sub_num);\n            }\n        }\n    \
    \    if sub_array.len() > 0 {\n            let mut sub_array_sum = sub_array\n\
    \                .iter()\n                .filter(|&x| x > 0)\n              \
    \  .sum();\n            if sub_array_sum < min_sum {\n                min_sum\
    \ = sub_array_sum;\n                min_sub_array = sub_array;\n            }\n\
    \        }\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min", "    let mut min_sum = isize::MAX;\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum.min(num);\n    }\n    min_sum", " \
    \   let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n     \
    \   min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum + num;\n    }\n    min_sum",
  "    let mut min = nums.iter().min().unwrap();\n    for num in nums.iter() {\n \
    \       if num < min {\n            min = num;\n        }\n    }\n    min", " \
    \   let mut min_sum = nums.iter().fold(0, |a, b| a + b);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    for num in nums.iter() {\n        min_sum = min(min_sum,\
    \ num + nums.iter().min().unwrap());\n    }\n    min_sum", "    let mut min =\
    \ isize::MAX;\n    for num in nums {\n        if num < min {\n            min\
    \ = num;\n        }\n    }\n    min", "    let mut min_sum = nums[0] as isize;\n\
    \    for i in 1..nums.len() {\n        min_sum = min_sum.min(nums[i]);\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        if num < 0 {\n            return min_sum;\n        }\n        min_sum\
    \ = min_sum + num;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum -\
    \ i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum\
    \ = isize::MAX;\n    for num in nums.iter() {\n        min_sum = min(min_sum,\
    \ num + minSubArraySum(vec![num] + nums.iter().cloned()));\n    }\n    min_sum",
  "    let mut min = nums.iter().min().unwrap();\n    for num in nums.iter() {\n \
    \       if num < min {\n            min = num;\n        }\n    }\n    min", " \
    \   let mut min_sum = isize::MAX;\n    let mut min_sub_array = Vec::new();\n \
    \   for num in nums {\n        let mut sub_array = Vec::new();\n        for _\
    \ in 0..num {\n            sub_array.push(-num);\n        }\n        let sum =\
    \ sub_array.iter().sum();\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_sub_array = sub_array;\n        }\n    }\n    min_sum", "   \
    \ let mut min = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter()\
    \ {\n        min = std::cmp::min(min, i);\n    }\n    min", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum.min(num + min_sum);\n    }\n    min_sum", "   \
    \ let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n \
    \       min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   let mut min_sub_arr = Vec::new();\n    for num in nums {\n        if min_sum\
    \ > num {\n            min_sum = num;\n            min_sub_arr.clear();\n    \
    \    }\n        if min_sum == num {\n            min_sub_arr.push(num);\n    \
    \    }\n    }\n    min_sub_arr.iter().fold(isize::MAX, |acc, &num| {\n       \
    \ acc - num\n    })", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min = isize::MAX;\n    let mut sum = 0;\n    for num in nums.iter()\
    \ {\n        sum += num;\n        if sum < min {\n            min = sum;\n   \
    \     }\n    }\n    min", "    let mut min_sum = nums.iter().fold(0, |a, b| a\
    \ + b);\n    for &n in nums.iter() {\n        min_sum = min_sum.min(&n);\n   \
    \ }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |sum, num| sum + num);\n    for num in nums.iter() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   for num in nums.iter() {\n        min_sum = min_sum.min(num);\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum.min(num + min_sum);\n\
    \    }\n    min_sum", "    let mut min = std::i32::MAX;\n    for i in nums.iter()\
    \ {\n        if *i < min {\n            min = *i;\n        }\n    }\n    min",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum + num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in\
    \ nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = isize::MAX;\n    for num in nums.iter() {\n        min_sum\
    \ = min(min_sum, num + min_sum);\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter() {\n  \
    \      min_sum = min_sum - i;\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    for num in nums.iter() {\n        min_sum = min_sum\
    \ - num;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum.min(num);\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().rev() {\n\
    \        min_sum = min_sum - i;\n        if min_sum < 0 {\n            break;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n    let mut\
    \ min_sub_array = Vec::new();\n    for num in nums {\n        let mut sub_array\
    \ = Vec::new();\n        let mut sub_array_sum = 0;\n        for sub_num in nums.iter().rev()\
    \ {\n            if sub_num == num {\n                sub_array_sum += sub_num;\n\
    \            } else {\n                sub_array_sum += sub_num + sub_array_sum;\n\
    \                sub_array.push(sub_num);\n            }\n        }\n        if\
    \ sub_array_sum < min_sum {\n            min_sum = sub_array_sum;\n          \
    \  min_sub_array = sub_array;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |a, b| a + b);\n    for &n in nums.iter().rev() {\n  \
    \      min_sum = min_sum - n;\n        if min_sum < 0 {\n            min_sum =\
    \ 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| sum + i);\n    for num in nums.iter() {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n        if\
    \ min_sum < 0 {\n            break;\n        }\n    }\n    min_sum", "    let\
    \ mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min =\
    \ isize::MAX;\n    let mut sum = 0;\n    for num in nums.iter() {\n        sum\
    \ += num;\n        if sum < min {\n            min = sum;\n        }\n    }\n\
    \    min", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for &num in nums.iter().rev() {\n        min_sum = min_sum - num;\n     \
    \   if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min = nums[0] as isize;\n    let mut min_sum = nums[0] as isize;\n\
    \    for num in nums.iter().rev() {\n        if num < min {\n            min =\
    \ num;\n        }\n        if num < min_sum {\n            min_sum = num;\n  \
    \      }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n   \
    \ for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in\
    \ nums.iter().rev() {\n        min_sum = min_sum - i;\n    }\n    min_sum", " \
    \   let mut min_sum = nums.iter().sum();\n    let mut min_sub_array = Vec::new();\n\
    \    for num in nums {\n        if min_sum > num {\n            min_sum = num;\n\
    \            min_sub_array.clear();\n        }\n        if min_sum < num {\n \
    \           min_sub_array.push(num);\n        }\n    }\n    min_sub_array.iter().sum().unwrap_or(min_sum)",
  "    let mut min_sum = isize::MAX;\n    for n in nums.iter() {\n        min_sum\
    \ = min_sum.min(&n);\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n    for\
    \ num in nums.iter().rev() {\n        if num > 0 {\n            min_sum = min_sum\
    \ - num;\n        }\n    }\n    min_sum", "    let mut min_sum = nums[0] as isize;\n\
    \    for &n in nums.iter().skip(1) {\n        min_sum = min_sum + n;\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min(min_sum, num + minSubArraySum(vec![num] + nums));\n\
    \    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in\
    \ nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum <\
    \ 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n        if min_sum < 0 {\n            break;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n    let mut\
    \ min_sub_arr = Vec::new();\n    for num in nums.iter() {\n        if min_sum\
    \ < num {\n            min_sum = num;\n            min_sub_arr.clear();\n    \
    \    }\n        if min_sum == num {\n            min_sub_arr.push(num);\n    \
    \    }\n    }\n    min_sub_arr.iter().fold(isize::MAX, |acc, x| acc + x).unwrap()",
  "    let mut min_sum = nums.iter().sum();\n    let mut min_sub_array = vec![];\n\
    \    for num in nums {\n        if min_sum > num {\n            min_sum = num;\n\
    \            min_sub_array = [num];\n        } else if min_sum == num {\n    \
    \        min_sub_array.push(num);\n        }\n    }\n    min_sub_array.iter().sum().unwrap()",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   for num in nums.iter() {\n        min_sum = min_sum.min(num);\n    }\n   \
    \ min_sum", "    let mut min = nums.iter().min().unwrap();\n    for num in nums.iter()\
    \ {\n        if num < min {\n            min = num;\n        }\n    }\n    min",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = isize::MAX;\n \
    \   for num in nums.iter() {\n        min_sum = min_sum.min(num);\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n  \
    \  for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n    for num in\
    \ nums.iter() {\n        min_sum = min_sum + num;\n    }\n    min_sum", "    let\
    \ mut min_sum = isize::MAX;\n    for n in nums.iter() {\n        min_sum = min(min_sum,\
    \ n);\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |a, b|\
    \ a + b);\n    for &n in nums.iter().rev() {\n        min_sum = min_sum - n;\n\
    \    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        if num < 0 {\n            return min_sum;\n\
    \        }\n        min_sum = min_sum + num;\n    }\n    min_sum", "    let mut\
    \ min_sum = nums.iter().fold(0, |sum, num| sum + num);\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum.min(|a, b| a.partial_cmp(&b).unwrap());\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n\
    \    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n    }\n\
    \    min_sum", "    let mut min_sum = isize::MAX;\n    for n in nums.iter() {\n\
    \        min_sum = min(min_sum, n);\n    }\n    min_sum", "    let mut min_sum\
    \ = nums[0] as isize;\n    for num in nums.iter().rev() {\n        min_sum = min_sum.min(num);\n\
    \    }\n    min_sum", "    let mut min_sum = nums[0] as isize;\n    for &n in\
    \ nums.iter().rev() {\n        min_sum = min_sum.min(n as isize);\n    }\n   \
    \ min_sum", "    let mut min_sum = nums.iter().min().unwrap();\n    for num in\
    \ nums.iter().skip(1) {\n        min_sum = min_sum + num;\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter() {\n      \
    \  min_sum = min_sum - num;\n    }\n    min_sum"]
stop_tokens:
- "\n}"
