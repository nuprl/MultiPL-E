language: rs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ce5rkkn.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6ce5rkkn.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6ce5rkkn.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ce5rkkn.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ce5rkkn.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6ce5rkkn.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6ce5rkkn.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6ce5rkkn.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ce5rkkn.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ce5rkkn.rs:25:13\n\
    \   |\n22 |         match op {\n   | "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphipclz92.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphipclz92.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphipclz92.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphipclz92.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphipclz92.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphipclz92.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphipclz92.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphipclz92.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => {\n                result\
    \ += operand[1];\n            }\n            \"-\" => {\n                result\
    \ -= operand[1];\n            }\n            \"*\" => {\n                result\
    \ *= operand[1];\n            }\n            \"/\" => {\n                result\
    \ /= operand[1];\n            }\n            \"//\" => {\n                result\
    \ /= operand[1];\n            }\n            \"**\" => {\n                result\
    \ *= operand[1];\n            }\n            _ => {\n                return -1;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpaemt1992.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaemt1992.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaemt1992.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaemt1992.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaemt1992.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaemt1992.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaemt1992.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaemt1992.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaemt1992.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaemt1992.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpptbgaotj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptbgaotj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpptbgaotj.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpptbgaotj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        match operator[i] {\n            \"\
    +\" => {\n                result = result + operand[i];\n            }\n     \
    \       \"-\" => {\n                result = result - operand[i];\n          \
    \  }\n            \"*\" => {\n                result = result * operand[i];\n\
    \            }\n            \"/\" => {\n                result = result / operand[i];\n\
    \            }\n            \"**\" => {\n                result = result ** operand[i];\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgk10a_p8.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgk10a_p8.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgk10a_p8.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgk10a_p8.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgk10a_p8.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgk10a_p8.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgk10a_p8.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpgk10a_p8.rs:36:34\n   |\n36 |                 result = result **\
    \ operand[i];\n   |                                  ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb97o25yr.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb97o25yr.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb97o25yr.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb97o25yr.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb97o25yr.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb97o25yr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb97o25yr.rs:25:13\n\
    \   |\n22 |         match op {\n   | "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fvw66pw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1fvw66pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1fvw66pw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fvw66pw.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fvw66pw.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fvw66pw.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzxhh9mv5.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzxhh9mv5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzxhh9mv5.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- thi"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        let mut temp: isize = 0;\n        for j in 0..operator.len()\
    \ {\n            temp = temp + operand[j] * operator[j].parse::<isize>().unwrap();\n\
    \        }\n        result = result + temp;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0hkimiyc.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0hkimiyc.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0hkimiyc.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0hkimiyc.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0hkimiyc.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0hkimiyc.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result += operand;\n\
    \            }\n            \"-\" => {\n                result -= operand;\n \
    \           }\n            \"*\" => {\n                result *= operand;\n  \
    \          }\n            \"/\" => {\n                result /= operand;\n   \
    \         }\n            \"//\" => {\n                result /= operand;\n   \
    \         }\n            \"**\" => {\n                result **= operand;\n  \
    \          }\n            _ => {\n                return -1;\n            }\n\
    \        }\n        operator_index += 1;\n        operand_index += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqpjk4haj.rs:43:25\n\
    \   |\n43 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqpjk4haj.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqpjk4haj.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqpjk4haj.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqpjk4haj.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqpjk4haj.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqpjk4haj.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqpjk4haj.rs:27:13\n   |\n26 |         match operator {\n\
    \   |               -------- this expression has type `String`\n27 |         \
    \    \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqpjk4haj.rs:30:13\n   |\n26 |\
    \         match operator {\n   |               -------- this expression has type\
    \ `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqpjk4haj.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphipclz92.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphipclz92.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphipclz92.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphipclz92.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphipclz92.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphipclz92.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphipclz92.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphipclz92.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        match operator[i] {\n            \"+\" => {\n  \
    \              result = result + operand[i];\n            }\n            \"-\"\
    \ => {\n                result = result - operand[i];\n            }\n       \
    \     \"*\" => {\n                result = result * operand[i];\n            }\n\
    \            \"//\" => {\n                result = result / operand[i];\n    \
    \        }\n            \"**\" => {\n                result = result ** operand[i];\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp3f46mjh.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp3f46mjh.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp3f46mjh.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp3f46mjh.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp3f46mjh.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp3f46mjh.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3f46mjh.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpp3f46mjh.rs:36:34\n   |\n36 |                 result = result **\
    \ operand[i];\n   |                                  ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fvw66pw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1fvw66pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1fvw66pw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fvw66pw.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fvw66pw.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fvw66pw.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut operand = operand[i];\n        let mut operator = operator[i];\n\
    \        while operand > 0 {\n            result += (operand % 10) * operator;\n\
    \            operand /= 10;\n            operator /= 10;\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvay7fglp.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvay7fglp.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvay7fglp.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvay7fglp.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvay7fglp.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvay7fglp.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: cannot multiply `isize` by `String`\n  --> /tmp/tmpvay7fglp.rs:25:38\n\
    \   |\n25 |             result += (operand % 10) * operator;\n   |           \
    \                           ^ no implementation for `isize * String`\n   |\n \
    \  = help: the trait `Mul<String>` is not implemented for `isize`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `String`\n  --> /tmp/tmpvay7fglp.rs:27:13\n\
    \   |\n27 |             operator /= 10;\n   |             --------^^^^^^\n   |\
    \             |\n   |             cannot use `/=` on type `String`\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0277, E0368,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        let mut operator\
    \ = operator[i];\n        let mut operand = operand[i];\n        match operator\
    \ {\n            \"+\" => {\n                result += operand;\n            \
    \    i += 1;\n            }\n            \"-\" => {\n                result -=\
    \ operand;\n                i += 1;\n            }\n            \"*\" => {\n \
    \               result *= operand;\n                i += 1;\n            }\n \
    \           \"/\" => {\n                if operand == 0 {\n                  \
    \  panic!(\"Cannot divide by zero\");\n                }\n                result\
    \ /= operand;\n                i += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand;\n                i += 1;\n            }\n\
    \            _ => {\n                panic!(\"Invalid operator\");\n         \
    \   }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmptngqgubd.rs:46:25\n\
    \   |\n46 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptngqgubd.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptngqgubd.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptngqgubd.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptngqgubd.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptngqgubd.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptngqgubd.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptngqgubd.rs:26:13\n   |\n25 |         match operator {\n\
    \   |               -------- this expression has type `String`\n26 |         \
    \    \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptngqgubd.rs:30:13\n   |\n25 |\
    \         match operator {\n   |               -------- this expression has type\
    \ `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptngqgubd.rs:34:13\n\
    \   |\n25 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n34 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched "
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result = operator[i] + result;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdf8jt55z.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdf8jt55z.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdf8jt55z.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdf8jt55z.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdf8jt55z.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdf8jt55z.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdf8jt55z.rs:22:18\n\
    \   |\n22 |         result = operator[i] + result;\n   |                  ^^^^^^^^^^^^^^^^^^^^\n\
    \   |                  |\n   |                  expected `&str`, found struct\
    \ `String`\n   |                  help: consider borrowing here: `&(operator[i]\
    \ + result)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdf8jt55z.rs:24:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n24 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&str`\n\nerror[E0277]: the trait bound `&str: Sum<&isize>` is\
    \ not satisfied\n  --> /tmp/tmpdf8jt55z.rs:20:37\n   |\n20 |     let mut result\
    \ = operand.iter().sum();\n   |                                     ^^^ the trait\
    \ `Sum<&isize>` is not implemented for `&str`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome erro"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fvw66pw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1fvw66pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1fvw66pw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fvw66pw.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fvw66pw.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fvw66pw.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpptbgaotj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptbgaotj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpptbgaotj.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpptbgaotj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x / x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp22vk6b2l.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp22vk6b2l.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp22vk6b2l.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp22vk6b2l.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp22vk6b2l.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp22vk6b2l.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22vk6b2l.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp22vk6b2l.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n24 |        \
    \     \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n   |        \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp22vk6b2l.rs:25:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x|\
    \ x * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatc"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj85a9pz8.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj85a9pz8.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj85a9pz8.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj85a9pz8.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj85a9pz8.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj85a9pz8.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj85a9pz8.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj85a9pz8.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj85a9pz8.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj85a9pz8.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            _ => panic!(\"Invalid operator: {}\", operator[operator_index]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpt0p58ccv.rs:51:25\n\
    \   |\n51 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt0p58ccv.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0p58ccv.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0p58ccv.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0p58ccv.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0p58ccv.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0p58ccv.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt0p58ccv.rs:24:15\n   |\n24 |         match\
    \ operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 8 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fvw66pw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1fvw66pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1fvw66pw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fvw66pw.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fvw66pw.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fvw66pw.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpptbgaotj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptbgaotj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpptbgaotj.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpptbgaotj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvtt8_3my.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvtt8_3my.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvtt8_3my.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvtt8_3my.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvtt8_3my.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvtt8_3my.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvtt8_3my.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvtt8_3my.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtt8_3my.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtt8_3my.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- thi"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphipclz92.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphipclz92.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphipclz92.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphipclz92.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphipclz92.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphipclz92.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphipclz92.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphipclz92.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x / 1).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwyrb4r66.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyrb4r66.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwyrb4r66.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwyrb4r66.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwyrb4r66.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwyrb4r66.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwyrb4r66.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwyrb4r66.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n24 |        \
    \     \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n   |        \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwyrb4r66.rs:25:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x|\
    \ x * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatc"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n \
    \           \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|&x| x % 2 == 0).sum()),\n            \"\
    **\" => result.push(result.iter().map(|&x| x ** 2).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfl48dnnp.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfl48dnnp.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfl48dnnp.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfl48dnnp.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfl48dnnp.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfl48dnnp.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfl48dnnp.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfl48dnnp.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().sum()),\n24 |             \"-\" => result.push(result.iter().filter(|&x|\
    \ x < 0).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfl48dnnp.rs:25:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n25 |             \"*\" => result.push(result.iter().product()),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfl48dnnp.rs:2"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzxhh9mv5.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzxhh9mv5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzxhh9mv5.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- thi"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.pop(),\n     \
    \       \"-\" => result -= operand.pop(),\n            \"*\" => result *= operand.pop(),\n\
    \            \"//\" => result /= operand.pop(),\n            \"**\" => result\
    \ **= operand.pop(),\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmplyrlcm43.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.pop(),\n   |            \
    \      --         ^^ expected expression\n   |                  |\n   |      \
    \            while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplyrlcm43.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplyrlcm43.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplyrlcm43.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplyrlcm43.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplyrlcm43.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplyrlcm43.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplyrlcm43.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.pop(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplyrlcm43.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.pop(),\n24 |         \
    \    \"-\" => result -= operand.pop(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplyrlcm43.rs:25:13\n\
    \   |\n22 |         match op {\n   |         "
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpzxhh9mv5.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzxhh9mv5.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzxhh9mv5.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzxhh9mv5.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzxhh9mv5.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- thi"
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fvw66pw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1fvw66pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1fvw66pw.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1fvw66pw.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fvw66pw.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fvw66pw.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fvw66pw.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ - 1 {\n        let mut operand1 = operand[i];\n        let mut operand2 = operand[i\
    \ + 1];\n        let mut operator1 = operator[i];\n        let mut operator2 =\
    \ operator[i + 1];\n        match operator1 {\n            \"+\" => {\n      \
    \          result += operand1 + operand2;\n            }\n            \"-\" =>\
    \ {\n                result -= operand1 - operand2;\n            }\n         \
    \   \"*\" => {\n                result *= operand1 * operand2;\n            }\n\
    \            \"/\" => {\n                result /= operand1 / operand2;\n    \
    \        }\n            \"//\" => {\n                result /= operand1;\n   \
    \         }\n            \"**\" => {\n                result **= operand2;\n \
    \           }\n            _ => panic!(\"Invalid operator: {}\", operator1),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmhtrzadw.rs:43:25\n\
    \   |\n43 |                 result **= operand2;\n   |                       \
    \  ^^ expected expression\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmhtrzadw.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmhtrzadw.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmhtrzadw.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmhtrzadw.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmhtrzadw.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmhtrzadw.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmhtrzadw.rs:27:13\n   |\n26 |         match operator1 {\n\
    \   |               --------- this expression has type `String`\n27 |        \
    \     \"+\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmhtrzadw.rs:30:13\n   |\n26 |\
    \         match operator1 {\n   |               --------- this expression has\
    \ type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhtrzadw.rs:33:13\n\
    \   |\n26 |         match operator1 {\n   |               --------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphipclz92.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphipclz92.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphipclz92.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphipclz92.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphipclz92.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphipclz92.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphipclz92.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphipclz92.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", operator[operator_index]),\n        }\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6ept2ks4.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp6ept2ks4.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6ept2ks4.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6ept2ks4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6ept2ks4.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6ept2ks4.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6ept2ks4.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6ept2ks4.rs:24:15\n   |\n24 |         match\
    \ operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 8 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpwxi22xxh.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwxi22xxh.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwxi22xxh.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwxi22xxh.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwxi22xxh.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwxi22xxh.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwxi22xxh.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwxi22xxh.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwxi22xxh.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwxi22xxh.rs:25:13\n\
    \   |\n22 |         match op {\n   | "
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb97o25yr.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb97o25yr.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb97o25yr.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb97o25yr.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb97o25yr.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb97o25yr.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb97o25yr.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb97o25yr.rs:25:13\n\
    \   |\n22 |         match op {\n   | "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpptbgaotj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptbgaotj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpptbgaotj.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpptbgaotj.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpptbgaotj.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbgaotj.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut operand = operand[i];\n        let mut operator = operator[i];\n\
    \        while operand > 0 {\n            match operator {\n                '+'\
    \ => {\n                    result += operand;\n                    operand -=\
    \ 1;\n                }\n                '-' => {\n                    result\
    \ -= operand;\n                    operand -= 1;\n                }\n        \
    \        '*' => {\n                    result *= operand;\n                  \
    \  operand -= 1;\n                }\n                '/' => {\n              \
    \      result /= operand;\n                    operand -= 1;\n               \
    \ }\n                '%' => {\n                    result %= operand;\n      \
    \              operand -= 1;\n                }\n                '^' => {\n  \
    \                  result **= operand;\n                    operand -= 1;\n  \
    \              }\n                '**' => {\n                    result **= operand;\n\
    \                    operand -= 1;\n                }\n                _ => {}\n\
    \            }\n            operator = operators[operator];\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpqehyxm50.rs:50:17\n\
    \   |\n50 |                 '**' => {\n   |                 ^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n50 |       \
    \          \"**\" => {\n   |                 ~~~~\n\nerror: expected expression,\
    \ found `*=`\n  --> /tmp/tmpqehyxm50.rs:47:29\n   |\n47 |                    \
    \ result **= operand;\n   |                             ^^ expected expression\n\
    \nerror: expected expression, found `*=`\n  --> /tmp/tmpqehyxm50.rs:51:29\n  \
    \ |\n51 |                     result **= operand;\n   |                      \
    \       ^^ expected expression\n\nerror[E0425]: cannot find value `operators`\
    \ in this scope\n  --> /tmp/tmpqehyxm50.rs:56:24\n   |\n56 |             operator\
    \ = operators[operator];\n   |                        ^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `operator`\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpqehyxm50.rs:64:17\n   |\n64 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqehyxm50.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqehyxm50.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqehyxm50.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqehyxm50.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqehyxm50.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqehyxm50.rs:26:17"
  stdout: ''
  timestamp: 1659792456
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphipclz92.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphipclz92.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphipclz92.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphipclz92.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphipclz92.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphipclz92.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphipclz92.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphipclz92.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphipclz92.rs:25:13\n\
    \   |\n22 |         match op {\n   |     "
  stdout: ''
  timestamp: 1659746710
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8l1hpyx9.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8l1hpyx9.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8l1hpyx9.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8l1hpyx9.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8l1hpyx9.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.iter().sum(),\n24 |             \"-\" => result -= operand.iter().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8l1hpyx9.rs:25:13\n   |\n22 |     "
  stdout: ''
  timestamp: 1659746709
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x / 1).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwyrb4r66.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyrb4r66.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwyrb4r66.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwyrb4r66.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwyrb4r66.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwyrb4r66.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwyrb4r66.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwyrb4r66.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n24 |        \
    \     \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n   |        \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwyrb4r66.rs:25:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x|\
    \ x * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatc"
  stdout: ''
  timestamp: 1659792456
