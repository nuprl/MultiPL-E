language: rs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5agzdtos.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5agzdtos.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5agzdtos.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 101
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        let mut temp: isize = 0;\n        for j in 0..operator.len()\
    \ {\n            temp = temp + operand[j] * operator[j].parse::<isize>().unwrap();\n\
    \        }\n        result = result + temp;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpnea01itu.rs:24:69

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcaybigow.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpcaybigow.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                result += operand.iter().sum();\n\
    \            }\n            \"-\" => {\n                result -= operand.iter().sum();\n\
    \            }\n            \"*\" => {\n                result *= operand.iter().sum();\n\
    \            }\n            \"/\" => {\n                result /= operand.iter().sum();\n\
    \            }\n            \"//\" => {\n                result /= operand.iter().sum();\n\
    \            }\n            \"**\" => {\n                result *= operand.iter().sum();\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkdu3fdkq.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 101
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut temp = 0;\n        for j in 0..operator.len() {\n       \
    \     temp = temp + operand[j] * operator[j].parse::<isize>().unwrap();\n    \
    \    }\n        result = result + temp;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmp_1s1azbg.rs:24:69

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter( |x| x == 0 ).product()),\n            \"\
    //\" => result.push(result.iter().filter( |x| x != 0 ).product()),\n         \
    \   \"**\" => result.push(result.iter().filter( |x| x != 0 ).product()),\n   \
    \         _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0pxp0t3c.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0pxp0t3c.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0pxp0t3c.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp0pxp0t3c.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |x| x == 0 ).product()),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pxp0t3c.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result.push(result.iter().filter(\
    \ |x| x != 0 ).product()),\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pxp0t3c.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().filter(\
    \ |x| x != 0 ).product()),\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pxp0t3c.rs:24:62\n\
    \   |\n24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |                                                              ^ expected\
    \ `&&isize`, found integer\n\nerror[E0277]: can't "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.clone(),\n            \"-\" => result = result - operand.clone(),\n\
    \            \"*\" => result = result * operand.clone(),\n            \"/\" =>\
    \ result = result / operand.clone(),\n            \"//\" => result = result /\
    \ operand.clone(),\n            \"**\" => result = result ** operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpubpg32c0.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.clone(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpubpg32c0.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.clone(),\n24 |             \"-\" => result = result - operand.clone(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpubpg32c0.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.clone(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubpg32c0.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result = result / operand.clone(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpubpg32c0.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result = result / operand.clone(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpubpg32c0.rs:28:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n28 |             \"**\" => result\
    \ = result ** operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  -->\
    \ /tmp/tmpubpg32c0.rs:23:36\n   |\n23 |             \"+\" => result = result +\
    \ operand.clone(),\n   |                             ------ ^ ---------------\
    \ Vec<isize>\n   |                             |\n   |                       \
    \      Vec<isize>\n\nerror[E0369]: cannot subtract `Vec<isize>` from `Vec<isize>`\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"//\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", operator[operator_index]),\n        }\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpwocxrq33.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwocxrq33.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvtuq_u7s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvb1oahg7.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvb1oahg7.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvb1oahg7.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvb1oahg7.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvb1oahg7.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmpvb1oahg7.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpvb1oahg7.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"**\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjuqi7tgo.rs:24:15\n   |\n\
    24 |         match operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|&x| x != 0).product()),\n            \"\
    **\" => result.push(result.iter().pow(2).sum()),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result.last()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr73alyu.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcr73alyu.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcr73alyu.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpcr73alyu.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|&x|\
    \ x != 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcr73alyu.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().pow(2).sum()),\n   |\
    \             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcr73alyu.rs:24:63\n   |\n24 |             \"-\" => result.push(result.iter().filter(\
    \ |&x| x < 0 ).sum()),\n   |                                                 \
    \              ^\n   |                                                       \
    \        |\n   |                                                             \
    \  expected `&isize`, found integer\n   |                                    \
    \                           help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmpcr73alyu.rs:26:61\n \
    \  |\n26 "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\")\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpczjz8dnw.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpczjz8dnw.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.last(),\n            \"-\" => result = result - operand.last(),\n\
    \            \"*\" => result = result * operand.last(),\n            \"/\" =>\
    \ result = result / operand.last(),\n            \"//\" => result = result / operand.last(),\n\
    \            \"**\" => result = result ** operand.last(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qkykxlk.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.last(),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9qkykxlk.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.last(),\n24 |             \"-\" => result = result - operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qkykxlk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.last(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9qkykxlk.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result = result / operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qkykxlk.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result = result / operand.last(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp9qkykxlk.rs:28:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n28 |             \"**\" => result\
    \ = result ** operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n\
    \  --> /tmp/tmp9qkykxlk.rs:23:36\n   |\n23 |             \"+\" => result = result\
    \ + operand.last(),\n   |                             ------ ^ --------------\
    \ Option<&isize>\n   |                             |\n   |                   \
    \          Option<&isize>\n\nerror[E0369]: cannot subtract `Option<&isize>` from\
    \ `O"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x / x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuyifgjd0.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuyifgjd0.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuyifgjd0.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpuyifgjd0.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x / x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuyifgjd0.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuyifgjd0.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpuyifgjd0.rs:32:12\n    |\n32  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterato"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| *x != 0).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| *x != 0).product()),\n            \"\
    **\" => result.push(result.iter().map(|x| *x).product()),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result.last()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg65iyo40.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg65iyo40.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| *x != 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg65iyo40.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg65iyo40.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ *x != 0).product()),\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg65iyo40.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"**\" => result.push(result.iter().map(|x|\
    \ *x).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpg65iyo40.rs:24:60\n\
    \   |\n24 |             \"-\" => result.push(result.iter().filter(|x| *x != 0).sum()),\n\
    \   |                                                            ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n     "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n  \
    \          \"*\" => result.push(result.iter().product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** 2).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qd87tfh.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9qd87tfh.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qd87tfh.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp9qd87tfh.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9qd87tfh.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qd87tfh.rs:24:61\n   |\n24 |             \"\
    -\" => result.push(result.iter().filter(|x| x < 0).sum()),\n   |             \
    \                                                ^ expected `&&isize`, found integer\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9qd87tfh.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                 "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter( |x| x == 0 ).product()),\n            \"\
    //\" => result.push(result.iter().filter( |x| x % 2 == 0 ).product()),\n     \
    \       \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n        \
    \    _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqg_0cjk.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuqg_0cjk.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuqg_0cjk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpuqg_0cjk.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |x| x == 0 ).product()),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuqg_0cjk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result.push(result.iter().filter(\
    \ |x| x % 2 == 0 ).product()),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuqg_0cjk.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().map(|x|\
    \ x ** 2).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuqg_0cjk.rs:24:62\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |                                                              ^ expected\
    \ `&&isize`, found integer\n\nerror[E0277]: can't compa"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvb1oahg7.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvb1oahg7.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvb1oahg7.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvb1oahg7.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvb1oahg7.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmpvb1oahg7.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmpvb1oahg7.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpsux3ieec.rs:22:16\n\
    \   |\n22 |         result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \   |                ^^ cannot infer type\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n22 |         result *= operand.iter().map(|x|\
    \ operator[i].parse::<isize>().unwrap()).sum::<S>();\n   |                   \
    \                                                                 +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => {\n                result\
    \ += operand[1];\n            }\n            \"-\" => {\n                result\
    \ -= operand[1];\n            }\n            \"*\" => {\n                result\
    \ *= operand[1];\n            }\n            \"/\" => {\n                result\
    \ /= operand[1];\n            }\n            \"//\" => {\n                result\
    \ /= operand[1];\n            }\n            \"**\" => {\n                result\
    \ *= operand[1];\n            }\n            _ => panic!(\"Invalid operator: {}\"\
    , op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6m4nraf.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"/\" => result /=\
    \ operand.iter().cloned().sum(),\n            \"//\" => result /= operand.iter().cloned().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().sum(),\n           \
    \ _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpeekbqpqn.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeekbqpqn.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeekbqpqn.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeekbqpqn.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeekbqpqn.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.iter().cloned().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeekbqpqn.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().cloned().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe6g5spjl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe6g5spjl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6g5spjl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n            \"**\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).product()),\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc5xf5qf_.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc5xf5qf_.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc5xf5qf_.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc5xf5qf_.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc5xf5qf_.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpc5xf5qf_.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                                                          &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n26 | \
    \            \"//\" => result.push(result.iter().filter(|x| *x % 2 == 0).sum()),\n\
    \   |                                           "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => {\n         \
    \       for i in 0..result.len() {\n                    result[i] += operand[i];\n\
    \                }\n            }\n            \"-\" => {\n                for\
    \ i in 0..result.len() {\n                    result[i] -= operand[i];\n     \
    \           }\n            }\n            \"*\" => {\n                for i in\
    \ 0..result.len() {\n                    result[i] *= operand[i];\n          \
    \      }\n            }\n            \"/\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] /= operand[i];\n                }\n       \
    \     }\n            \"//\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] /= operand[i];\n                }\n           \
    \ }\n            \"**\" => {\n                for i in 0..result.len() {\n   \
    \                 result[i] *= operand[i];\n                }\n            }\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:33:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv58vo66.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5agzdtos.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5agzdtos.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5agzdtos.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result = result\
    \ + operand.last(),\n            \"-\" => result = result - operand.last(),\n\
    \            \"*\" => result = result * operand.last(),\n            \"/\" =>\
    \ result = result / operand.last(),\n            \"//\" => result = result / operand.last(),\n\
    \            \"**\" => result = result ** operand.last(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qkykxlk.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result = result + operand.last(),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9qkykxlk.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ = result + operand.last(),\n24 |             \"-\" => result = result - operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qkykxlk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result = result * operand.last(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9qkykxlk.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result = result / operand.last(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9qkykxlk.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result = result / operand.last(),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp9qkykxlk.rs:28:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n28 |             \"**\" => result\
    \ = result ** operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n\
    \  --> /tmp/tmp9qkykxlk.rs:23:36\n   |\n23 |             \"+\" => result = result\
    \ + operand.last(),\n   |                             ------ ^ --------------\
    \ Option<&isize>\n   |                             |\n   |                   \
    \          Option<&isize>\n\nerror[E0369]: cannot subtract `Option<&isize>` from\
    \ `O"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe6g5spjl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe6g5spjl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6g5spjl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe6g5spjl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe6g5spjl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6g5spjl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.len() - i;\n    \
    \    result = operator[i] + result;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4pitvms.rs:23:18\n   |\n\
    20 |     let mut result = operand.iter().sum();\n   |                      --------------------\
    \ expected due to this value\n...\n23 |         result = operator[i] + result;\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^\n   |                  |\n   |   \
    \               expected `&str`, found struct `String`\n   |                 \
    \ help: consider borrowing here: `&(operator[i] + result)`\n\nerror[E0277]: cannot\
    \ multiply-assign `&str` by `usize`\n  --> /tmp/tmpx4pitvms.rs:22:16\n   |\n22\
    \ |         result *= operand.len() - i;\n   |                ^^ no implementation\
    \ for `&str *= usize`\n   |\n   = help: the trait `MulAssign<usize>` is not implemented\
    \ for `&str`\n\nerror[E0277]: the trait bound `&str: Sum<&isize>` is not satisfied\n\
    \    --> /tmp/tmpx4pitvms.rs:20:37\n     |\n20   |     let mut result = operand.iter().sum();\n\
    \     |                                     ^^^ the trait `Sum<&isize>` is not\
    \ implemented for `&str`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n          \
    \     <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n      \
    \         <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32, LANES>\
    \ as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n  \
    \             <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n              \
    \ <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a bound\
    \ in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4pitvms.rs:25:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n25 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Unknown\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp34z1gyvx.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp34z1gyvx.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34z1gyvx.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34z1gyvx.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp34z1gyvx.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34z1gyvx.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ - 1 {\n        let mut temp = 0;\n        for j in 0..operator.len() - 1 {\n\
    \            let mut temp2 = 0;\n            if operator[j] == \"+\" {\n     \
    \           temp2 = temp + operand[j];\n            } else if operator[j] ==\"\
    -\" {\n                temp2 = temp - operand[j];\n            } else if operator[j]\
    \ ==\"*\" {\n                temp2 = temp * operand[j];\n            } else if\
    \ operator[j] ==\"//\" {\n                temp2 = temp / operand[j];\n       \
    \     } else if operator[j] ==\"**\" {\n                temp2 = temp ** operand[j];\n\
    \            }\n            temp = temp2;\n        }\n        result = temp;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp6_kzq7ww.rs:34:31\n\
    \   |\n34 |                 temp2 = temp ** operand[j];\n   |                \
    \               ^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", operator[operator_index]),\n        }\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqpyu5oxy.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqpyu5oxy.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        match operator[i] {\n            \"+\" => {\n                result\
    \ += operand[i];\n            }\n            \"-\" => {\n                result\
    \ -= operand[i];\n            }\n            \"*\" => {\n                result\
    \ *= operand[i];\n            }\n            \"//\" => {\n                result\
    \ /= operand[i];\n            }\n            \"**\" => {\n                result\
    \ **= operand[i];\n            }\n            _ => panic!(\"Invalid operator:\
    \ {}\", operator[i]),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxxdq3bzk.rs:36:25\n\
    \   |\n36 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdq3bzk.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n          \
    \  \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9sj07rc5.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9sj07rc5.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9sj07rc5.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9sj07rc5.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9sj07rc5.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmp9sj07rc5.rs:27:58\n   |\n\
    27 |             \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n\
    \   |                                                          ^^^\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp9sj07rc5.rs:31:12\n    |\n31\
    \  |       result.sum()\n    |              ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ I"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcaybigow.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpcaybigow.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe6g5spjl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe6g5spjl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6g5spjl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6g5spjl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                result += operand.iter().sum();\n\
    \            }\n            \"-\" => {\n                result -= operand.iter().sum();\n\
    \            }\n            \"*\" => {\n                result *= operand.iter().sum();\n\
    \            }\n            \"/\" => {\n                result /= operand.iter().sum();\n\
    \            }\n            \"//\" => {\n                result /= operand.iter().sum();\n\
    \            }\n            \"**\" => {\n                result **= operand.iter().sum();\n\
    \            }\n            _ => {\n                panic!(\"Invalid operator:\
    \ {}\", op);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1q77v9i1.rs:39:25\n\
    \   |\n39 |                 result **= operand.iter().sum();\n   |           \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1q77v9i1.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => {\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1q77v9i1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1q77v9i1.rs:29:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n29 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1q77v9i1.rs:32:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n32 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q77v9i1.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q77v9i1.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..operand.len()\
    \ {\n                    result += operand[i];\n                }\n          \
    \  }\n            \"-\" => {\n                for i in 0..operand.len() {\n  \
    \                  result -= operand[i];\n                }\n            }\n \
    \           \"*\" => {\n                for i in 0..operand.len() {\n        \
    \            result *= operand[i];\n                }\n            }\n       \
    \     \"//\" => {\n                for i in 0..operand.len() {\n             \
    \       result /= operand[i];\n                }\n            }\n            \"\
    **\" => {\n                for i in 0..operand.len() {\n                    result\
    \ **= operand[i];\n                }\n            }\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02hfwvk4.rs:45:29\n\
    \   |\n45 |                     result **= operand[i];\n   |                 \
    \            ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02hfwvk4.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02hfwvk4.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02hfwvk4.rs:33:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02hfwvk4.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02hfwvk4.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n  \
    \          \"*\" => result.push(result.iter().product()),\n            \"/\" =>\
    \ result.push(result.iter().filter(|x| x != 0).product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x != 0).filter(|x| x % 2 == 0).product()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x != 0).filter(|x|\
    \ x % 2 == 0).filter(|x| x % 2 == 0).product()),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgwd2eejf.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgwd2eejf.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgwd2eejf.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpgwd2eejf.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgwd2eejf.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x != 0).filter(|x|\
    \ x % 2 == 0).product()),\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgwd2eejf.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().filter(|x|\
    \ x != 0).filter(|x| x % 2 == 0).filter(|x| x % 2 == 0).product()),\n   |    \
    \         ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgwd2eejf.rs:24:61\n   |\n24 |             \"-\" => result.push(result.iter().filter(|x|\
    \ x < 0).sum()),\n   |                                                       \
    \     "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        match operator[i]\
    \ {\n            \"+\" => result += operand[i++],\n            \"-\" => result\
    \ -= operand[i++],\n            \"*\" => result *= operand[i++],\n           \
    \ \"/\" => result /= operand[i++],\n            \"//\" => result /= operand[i++],\n\
    \            \"**\" => result **= operand[i++],\n            _ => panic!(\"Invalid\
    \ operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp1a3k7l1h.rs:24:39\n\
    \   |\n24 |             \"+\" => result += operand[i++],\n   |               \
    \  --                    ^^ not a valid postfix operator\n   |               \
    \  |\n   |                 while parsing the `match` arm starting here\n   |\n\
    help: use `+= 1` instead\n   |\n24 |             \"+\" => result += operand[{\
    \ let tmp = i; i += 1; tmp }],\n   |                                      +++++++++++\
    \  ~~~~~~~~~~~~~~~\n24 -             \"+\" => result += operand[i++],\n24 +  \
    \           \"+\" => result += operand[i += 1],\n   | \n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => {\n         \
    \       result.push(result.iter().map(|x| x + 1).sum());\n            }\n    \
    \        \"-\" => {\n                result.push(result.iter().map(|x| x - 1).sum());\n\
    \            }\n            \"*\" => {\n                result.push(result.iter().map(|x|\
    \ x * x).sum());\n            }\n            \"/\" => {\n                result.push(result.iter().map(|x|\
    \ x % x).sum());\n            }\n            \"**\" => {\n                result.push(result.iter().map(|x|\
    \ x ** x).sum());\n            }\n            _ => panic!(\"Invalid operator:\
    \ {}\", op)\n        }\n    }\n    result.iter().sum().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp77puhe15.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77puhe15.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77puhe15.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77puhe15.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77puhe15.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Unknown operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxgpufsa6.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxgpufsa6.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxgpufsa6.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxgpufsa6.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxgpufsa6.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxgpufsa6.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpxgpufsa6.rs:23:20\n\
    \   |\n23 |             \"+\" => result += operand.clone(),\n   |            \
    \        ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n   |          \
    \          cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `Vec<isize>`\n  --> /tm"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n \
    \           \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter(|&x| x != 0).product()),\n            \"\
    //\" => result.push(result.iter().filter(|&x| x % 1 == 0).product()),\n      \
    \      \"**\" => result.push(result.iter().map(|&x| x ** 2).sum()),\n        \
    \    _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt1xrxm9i.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt1xrxm9i.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt1xrxm9i.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpt1xrxm9i.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|&x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt1xrxm9i.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|&x| x % 1 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt1xrxm9i.rs:28:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"**\" => result.push(result.iter().map(|&x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt1xrxm9i.rs:24:62\n   |\n24 |             \"\
    -\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n   |            \
    \                                                  ^\n   |                   \
    \                                        "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 1..operand.len() {\n        result *= operator[i - 1].parse().unwrap();\n\
    \        result += operand[i];\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpn6m94hiq.rs:22:16\n\
    \   |\n22 |         result *= operator[i - 1].parse().unwrap();\n   |        \
    \        ^^ cannot infer type\n   |\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n22 |         result *= operator[i - 1].parse::<F>().unwrap();\n\
    \   |                                        +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n  \
    \          \"*\" => result.push(result.iter().product()),\n            \"/\" =>\
    \ result.push(result.iter().filter(|x| x != 0).product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x % 1 == 0).product()),\n          \
    \  \"**\" => result.push(result.iter().filter(|x| x % 1 == 0).sum()),\n      \
    \      _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf9yk09sj.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf9yk09sj.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf9yk09sj.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpf9yk09sj.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf9yk09sj.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x % 1 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf9yk09sj.rs:28:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"**\" => result.push(result.iter().filter(|x| x % 1 ==\
    \ 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpf9yk09sj.rs:24:61\n   |\n24 |  \
    \           \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n   |\
    \                                                             ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: can't compare"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    let mut operator =\
    \ operator[operator_index].to_string();\n    let mut operand = operand[operand_index].to_string();\n\
    \    while operand != \"0\" && operator != \"0\" && operand_index < operand.len()\
    \ && operator_index < operator.len() {\n        match operator {\n           \
    \ \"+\" => {\n                result += operand.to_isize();\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index].to_string();\n\
    \                operand = operand[operand_index].to_string();\n            }\n\
    \            \"-\" => {\n                result -= operand.to_isize();\n     \
    \           operator_index += 1;\n                operand_index += 1;\n      \
    \          operator = operator[operator_index].to_string();\n                operand\
    \ = operand[operand_index].to_string();\n            }\n            \"*\" => {\n\
    \                result *= operand.to_isize();\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index].to_string();\n\
    \                operand = operand[operand_index].to_string();\n            }\n\
    \            \"/\" => {\n                result /= operand.to_isize();\n     \
    \           operator_index += 1;\n                operand_index += 1;\n      \
    \          operator = operator[operator_index].to_string();\n                operand\
    \ = operand[operand_index].to_string();\n            }\n            \"**\" =>\
    \ {\n                result **= operand.to_isize();\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index].to_string();\n\
    \                operand = operand[operand_index].to_string();\n            }\n\
    \            _ => panic!(\"Invalid operator: {}\", operator),\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl51ecmnz.rs:56:25\n\
    \   |\n56 |                 result **= operand.to_isize();\n   |             \
    \            ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl51ecmnz.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl51ecmnz.rs:34:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n34 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl51ecmnz.rs:41:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n41 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl51ecmnz.rs:48:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n48 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl51ecmnz.rs:55:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n55 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: no method named `to_isize`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpl51ecmnz.rs:28:35\n\
    \   |\n28 |                 result += operand.to_isize();\n   |              \
    \                     ^^^^^^^^ method not found in `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpl51ecmnz.rs:31:28\n\
    \   |\n31 |                 operator = operator[operator_index].to_string();\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmprl6zkfoj.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprl6zkfoj.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprl6zkfoj.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprl6zkfoj.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprl6zkfoj.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `isize`\n  -->\
    \ /tmp/tmprl6zkfoj.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `isize += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n  \
    \          \"*\" => result.push(result.iter().product()),\n            \"/\" =>\
    \ result.push(result.iter().filter(|x| x != 0).product()),\n            \"//\"\
    \ => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n          \
    \  \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6e2vlhre.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6e2vlhre.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6e2vlhre.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6e2vlhre.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6e2vlhre.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6e2vlhre.rs:28:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6e2vlhre.rs:24:61\n   |\n24 |             \"\
    -\" => result.push(result.iter().filter(|x| x < 0).sum()),\n   |             \
    \                                                ^ expected `&&isize`, found integer\n\
    \nerror[E0277]: can't compare `&&isi"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"/\" => result.push(result.iter().rev().product()),\n\
    \            \"//\" => result.push(result.iter().rev().floor()),\n           \
    \ \"**\" => result.push(result.iter().rev().pow(*2)),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3elf031p.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3elf031p.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3elf031p.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3elf031p.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result.push(result.iter().rev().product()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3elf031p.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().rev().floor()),\n   |         \
    \    ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3elf031p.rs:28:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n28 |             \"**\" =>\
    \ result.push(result.iter().rev().pow(*2)),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `floor` found for struct\
    \ `Rev` in the current scope\n  --> /tmp/tmp3elf031p.rs:27:53\n   |\n27 |    \
    \         \"//\" => result.push(result.iter().rev().floor()),\n   |          \
    \                                           ^^^^^ method not found in `Rev<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method nam"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvtuq_u7s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        match operator[i]\
    \ {\n            \"+\" => {\n                result += operand[i];\n         \
    \       i += 1;\n            }\n            \"-\" => {\n                result\
    \ -= operand[i];\n                i += 1;\n            }\n            \"*\" =>\
    \ {\n                result *= operand[i];\n                i += 1;\n        \
    \    }\n            \"/\" => {\n                result /= operand[i];\n      \
    \          i += 1;\n            }\n            \"//\" => {\n                result\
    \ /= operand[i];\n                i += 1;\n            }\n            \"**\" =>\
    \ {\n                result *= operand[i];\n                i += 1;\n        \
    \    }\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcolgaqw.rs:23:15\n   |\n\
    23 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 1;\n            }\n            \"-\" => {\n      \
    \          result -= operand[operand_index] * operand[operand_index + 1];\n  \
    \              operator_index += 2;\n                operand_index += 1;\n   \
    \         }\n            \"*\" => {\n                result *= operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 1;\n            }\n            \"//\" => {\n     \
    \           result /= operand[operand_index] * operand[operand_index + 1];\n \
    \               operator_index += 2;\n                operand_index += 1;\n  \
    \          }\n            \"**\" => {\n                result **= operand[operand_index]\
    \ * operand[operand_index + 1];\n                operator_index += 2;\n      \
    \          operand_index += 1;\n            }\n            _ => {\n          \
    \      panic!(\"Invalid operator\");\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp95z5ipmf.rs:46:25\n\
    \   |\n46 |                 result **= operand[operand_index] * operand[operand_index\
    \ + 1];\n   |                         ^^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp95z5ipmf.rs:24:15\n   |\n24 |         match\
    \ operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n     \
    \       \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n         \
    \   \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpic2r2var.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpic2r2var.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpic2r2var.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpic2r2var.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpic2r2var.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmpic2r2var.rs:31:12\n    |\n31  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"/\" => result /= operand[1],\n            \"//\" => result /= operand[1],\n\
    \            \"**\" => result **= operand[1],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvtuq_u7s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvtuq_u7s.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtuq_u7s.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand[1],\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 1..operand.len() {\n        let op = operator[i - 1];\n        match op {\n\
    \            \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n\
    \            \"*\" => result *= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result **= operand[i],\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmptrvtmk4s.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[i],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptrvtmk4s.rs:24:13\n   |\n23 |         match op {\n   |\
    \               -- this expression has type `String`\n24 |             \"+\" =>\
    \ result += operand[i],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptrvtmk4s.rs:25:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n24 |             \"+\" => result += operand[i],\n25 |            \
    \ \"-\" => result -= operand[i],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptrvtmk4s.rs:26:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"*\" => result *= operand[i],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptrvtmk4s.rs:27:13\n   |\n23 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n27 |             \"\
    //\" => result /= operand[i],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand.iter().map(|x| operator[i].to_string().parse::<isize>()).sum();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmplrp4slqf.rs:22:16\n\
    \   |\n22 |         result *= operand.iter().map(|x| operator[i].to_string().parse::<isize>()).sum();\n\
    \   |                ^^ cannot infer type\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n22 |         result *= operand.iter().map(|x|\
    \ operator[i].to_string().parse::<isize>()).sum::<S>();\n   |                \
    \                                                                       +++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5agzdtos.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5agzdtos.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5agzdtos.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5agzdtos.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => {\n         \
    \       let mut i = 0;\n                while i < result.len() {\n           \
    \         result[i] += result[i + 1];\n                    i += 2;\n         \
    \       }\n            }\n            \"-\" => {\n                let mut i =\
    \ 0;\n                while i < result.len() {\n                    result[i]\
    \ -= result[i + 1];\n                    i += 2;\n                }\n        \
    \    }\n            \"*\" => {\n                let mut i = 0;\n             \
    \   while i < result.len() {\n                    result[i] *= result[i + 1];\n\
    \                    i += 2;\n                }\n            }\n            \"\
    /\" => {\n                let mut i = 0;\n                while i < result.len()\
    \ {\n                    result[i] /= result[i + 1];\n                    i +=\
    \ 2;\n                }\n            }\n            \"**\" => {\n            \
    \    let mut i = 0;\n                while i < result.len() {\n              \
    \      result[i] **= result[i + 1];\n                    i += 2;\n           \
    \     }\n            }\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6wiry98d.rs:54:32\n\
    \   |\n54 |                     result[i] **= result[i + 1];\n   |           \
    \                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6wiry98d.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6wiry98d.rs:30:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n30 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6wiry98d.rs:37:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n37 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6wiry98d.rs:44:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n44 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6wiry98d.rs:51:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n51 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().rev().sum()),\n            \"\
    *\" => result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|&x|\
    \ x != 0).count()),\n            \"**\" => result.push(result.iter().map(|&x|\
    \ x ** 2).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n  \
    \      }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_oboz5tc.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_oboz5tc.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_oboz5tc.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_oboz5tc.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|&x|\
    \ x != 0).count()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_oboz5tc.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().map(|&x| x ** 2).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmp_oboz5tc.rs:26:61\n \
    \  |\n26 |             \"//\" => result.push(result.iter().filter(|&x| x != 0).count()),\n\
    \   |                                                             ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    let mut operator = operator[operator_index];\n\
    \    let mut operand = operand[operand_index];\n    while operand != 0 {\n   \
    \     match operator {\n            \"+\" => {\n                result += operand;\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \               operator = operator[operator_index];\n                operand\
    \ = operand[operand_index];\n            }\n            \"-\" => {\n         \
    \       result -= operand;\n                operator_index += 1;\n           \
    \     operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"*\" => {\n                result *= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"/\" => {\n                result /= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"**\" => {\n                result **= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  _ => panic!(\"Invalid operator: {}\", operator),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpsl6gne_o.rs:56:25\n\
    \   |\n56 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl6gne_o.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl6gne_o.rs:34:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n34 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl6gne_o.rs:41:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n41 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl6gne_o.rs:48:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n48 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl6gne_o.rs:55:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n55 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmpsl6gne_o.rs:31:28\n   |\n31 |         \
    \        operator = operator[operator_index];\n   |                          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclu"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpz0gt60sz.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0gt60sz.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0gt60sz.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0gt60sz.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0gt60sz.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand[1],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"//\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             break;\n            }\n        }\n        operand_index += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpuhz1upl1.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuhz1upl1.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcaybigow.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpcaybigow.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator\"),\n     \
    \   }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp7j75b2ye.rs:46:25\n\
    \   |\n46 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7j75b2ye.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    let mut operator =\
    \ operator[operator_index];\n    let mut operand = operand[operand_index];\n \
    \   while operand != 0 {\n        match operator {\n            \"+\" => {\n \
    \               result += operand;\n                operator_index += 1;\n   \
    \             operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"-\" => {\n                result -= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"*\" => {\n                result *= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"//\" => {\n                result /= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"**\" => {\n                result **= operand;\n                operator_index\
    \ += 1;\n                operand_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  _ => {\n                panic!(\"Invalid operator\");\n            }\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmz98y0ls.rs:56:25\n\
    \   |\n56 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmz98y0ls.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmz98y0ls.rs:34:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n34 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmz98y0ls.rs:41:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n41 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmz98y0ls.rs:48:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n48 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpmz98y0ls.rs:55:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n55 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpmz98y0ls.rs:31:28\n\
    \   |\n31 |                 operator = operator[operator_index];\n   |       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInc"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand.clone(),\n\
    \            \"-\" => result -= operand.clone(),\n            \"*\" => result\
    \ *= operand.clone(),\n            \"/\" => result /= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcaybigow.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcaybigow.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcaybigow.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `isize`\n  --> /tmp/tmpcaybigow.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand.clone(),\n   |                   \
    \        ^^ no implementation for `isize += Vec<isize>`\n   |\n   = help: the\
    \ trait `AddAssign<Vec<isize>>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"/\" => result /= operand.clone(),\n        \
    \    \"//\" => result /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp02qplr47.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02qplr47.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02qplr47.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp02qplr47.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.clone(),\n   \
    \         \"-\" => result -= operand.clone(),\n            \"*\" => result *=\
    \ operand.clone(),\n            \"//\" => result /= operand.clone(),\n       \
    \     \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpj7asze6j.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7asze6j.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7asze6j.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpj7asze6j.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n  "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 1..operand.len() {\n        let mut op = operator[0];\n        let mut operand\
    \ = operand[i];\n        while operand > 0 {\n            match op {\n       \
    \         \"+\" => {\n                    result += operand;\n               \
    \ }\n                \"-\" => {\n                    result -= operand;\n    \
    \            }\n                \"*\" => {\n                    result *= operand;\n\
    \                }\n                \"/\" => {\n                    result /=\
    \ operand;\n                }\n                \"//\" => {\n                 \
    \   result /= operand;\n                }\n                \"**\" => {\n     \
    \               result **= operand;\n                }\n                _ => panic!(\"\
    Invalid operator: {}\", op),\n            }\n            op = operator[i % operator.len()];\n\
    \            operand /= operand;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpv82t8ojx.rs:42:29\n\
    \   |\n42 |                     result **= operand;\n   |                    \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv82t8ojx.rs:26:17\n\
    \   |\n25 |             match op {\n   |                   -- this expression\
    \ has type `String`\n26 |                 \"+\" => {\n   |                 ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpv82t8ojx.rs:29:17\n   |\n25 |             match op {\n   |     \
    \              -- this expression has type `String`\n...\n29 |               \
    \  \"-\" => {\n   |                 ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv82t8ojx.rs:32:17\n   |\n25 |\
    \             match op {\n   |                   -- this expression has type `String`\n\
    ...\n32 |                 \"*\" => {\n   |                 ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv82t8ojx.rs:35:17\n\
    \   |\n25 |             match op {\n   |                   -- this expression\
    \ has type `String`\n...\n35 |                 \"/\" => {\n   |              \
    \   ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv82t8ojx.rs:38:17\n   |\n25 |             match op {\n   |    \
    \               -- this expression has type `String`\n...\n38 |              \
    \   \"//\" => {\n   |                 ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv82t8ojx.rs:41:17\n   |\n25 |\
    \             match op {\n   |                   -- this expression has type `String`\n\
    ...\n41 |                 \"**\" => {\n   |                 ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() {\n        match operator[i] {\n            \"+\"\
    \ => {\n                result += operand[i];\n                i += 1;\n     \
    \       }\n            \"-\" => {\n                result -= operand[i];\n   \
    \             i += 1;\n            }\n            \"*\" => {\n               \
    \ result *= operand[i];\n                i += 1;\n            }\n            \"\
    /\" => {\n                result /= operand[i];\n                i += 1;\n   \
    \         }\n            \"//\" => {\n                result /= operand[i];\n\
    \                i += 1;\n            }\n            \"**\" => {\n           \
    \     result **= operand[i];\n                i += 1;\n            }\n       \
    \     _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvape8azm.rs:45:25\n\
    \   |\n45 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvape8azm.rs:23:15\n\
    \   |\n23 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"/\" => result /= operand.last(),\n          \
    \  \"//\" => result /= operand.last(),\n            \"**\" => result **= operand.last(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpk_65wney.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk_65wney.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.last(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_65wney.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.last(),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpk_65wney.rs:23:20\n   |\n23 |             \"+\" => result += operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        match operator[i] {\n            \"+\" => {\n                result\
    \ += operand[i];\n            }\n            \"-\" => {\n                result\
    \ -= operand[i];\n            }\n            \"*\" => {\n                result\
    \ *= operand[i];\n            }\n            \"/\" => {\n                result\
    \ /= operand[i];\n            }\n            \"//\" => {\n                result\
    \ /= operand[i];\n            }\n            \"**\" => {\n                result\
    \ *= operand[i];\n            }\n            _ => panic!(\"Invalid operator: {}\"\
    , operator[i]),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdq0qvn_j.rs:22:15\n   |\n\
    22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n \
    \           \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter(|&x| x != 0).product()),\n            \"\
    //\" => result.push(result.iter().filter(|&x| x % 1 == 0).product()),\n      \
    \      \"**\" => result.push(result.iter().filter(|&x| x % 1 != 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgciil9ay.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgciil9ay.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgciil9ay.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpgciil9ay.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|&x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgciil9ay.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|&x| x % 1 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgciil9ay.rs:28:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"**\" => result.push(result.iter().filter(|&x| x % 1 !=\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgciil9ay.rs:24:62\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n\
    \   |                                                              ^\n   |   \
    \                                             "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut operand = operand[i];\n        for j in 0..operator.len()\
    \ {\n            let mut operator = operator[j];\n            match operator {\n\
    \                \"+\" => {\n                    result += operand;\n        \
    \        }\n                \"-\" => {\n                    result -= operand;\n\
    \                }\n                \"*\" => {\n                    result *=\
    \ operand;\n                }\n                \"//\" => {\n                 \
    \   result /= operand;\n                }\n                \"**\" => {\n     \
    \               result **= operand;\n                }\n                _ => {\n\
    \                    panic!(\"Invalid operator\");\n                }\n      \
    \      }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb8rpl3u2.rs:39:29\n\
    \   |\n39 |                     result **= operand;\n   |                    \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb8rpl3u2.rs:26:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n26 |                 \"+\" => {\n   |        \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb8rpl3u2.rs:29:17\n   |\n25 |             match operator\
    \ {\n   |                   -------- this expression has type `String`\n...\n\
    29 |                 \"-\" => {\n   |                 ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb8rpl3u2.rs:32:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n...\n32 |                 \"*\" => {\n   |   \
    \              ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb8rpl3u2.rs:35:17\n   |\n25 |             match operator\
    \ {\n   |                   -------- this expression has type `String`\n...\n\
    35 |                 \"//\" => {\n   |                 ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb8rpl3u2.rs:38:17\n\
    \   |\n25 |             match operator {\n   |                   -------- this\
    \ expression has type `String`\n...\n38 |                 \"**\" => {\n   |  \
    \               ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 101
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..operand.len()\
    \ {\n        let mut temp = 0;\n        for j in 0..operator.len() {\n       \
    \     temp += operand[j] * operator[j].parse::<isize>().unwrap();\n        }\n\
    \        result += temp;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpato0dht6.rs:24:63

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660009825
- exit_code: 101
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand[operator.len() -\
    \ i - 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `336`,\n right: `37`', /tmp/tmpqvys4hfa.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 101
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for i in 0..operator.len() {\n        result *= operand[operator.len() -\
    \ i - 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `336`,\n right: `37`', /tmp/tmpqvys4hfa.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        let operator =\
    \ operator[operator_index];\n        let operand = operand[operand_index];\n \
    \       match operator {\n            \"+\" => {\n                result += operand;\n\
    \            }\n            \"-\" => {\n                result -= operand;\n \
    \           }\n            \"*\" => {\n                result *= operand;\n  \
    \          }\n            \"/\" => {\n                result /= operand;\n   \
    \         }\n            \"//\" => {\n                result /= operand;\n   \
    \         }\n            \"**\" => {\n                result **= operand;\n  \
    \          }\n            _ => {\n                panic!(\"Invalid operator\"\
    );\n            }\n        }\n        operator_index += 1;\n        operand_index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpas4ipfjx.rs:43:25\n\
    \   |\n43 |                 result **= operand;\n   |                        \
    \ ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas4ipfjx.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas4ipfjx.rs:30:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n30 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas4ipfjx.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas4ipfjx.rs:36:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas4ipfjx.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpas4ipfjx.rs:42:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n42 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 7 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().sum()),\n\
    \            \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \            \"*\" => result.push(result.iter().product()),\n            \"/\"\
    \ => result.push(result.iter().filter( |x| x % 2 == 0 ).product()),\n        \
    \    \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n           \
    \ _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi_q2sli.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxi_q2sli.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxi_q2sli.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpxi_q2sli.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |x| x % 2 == 0 ).product()),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxi_q2sli.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"**\" => result.push(result.iter().map(|x|\
    \ x ** 2).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxi_q2sli.rs:24:62\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |                                                              ^ expected\
    \ `&&isize`, found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpxi_q2sli.rs:26:60\n   |\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |x| x % 2 == 0 ).product()),\n   |                                         \
    \                 - ^ - {integer}\n   |                                      \
    \                    |\n   |   "
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    for i in\
    \ 0..operand.len() {\n        match operator[i] {\n            \"+\" => {\n  \
    \              result += operand[i];\n            }\n            \"-\" => {\n\
    \                result -= operand[i];\n            }\n            \"*\" => {\n\
    \                result *= operand[i];\n            }\n            \"/\" => {\n\
    \                result /= operand[i];\n            }\n            \"//\" => {\n\
    \                result /= operand[i];\n            }\n            \"**\" => {\n\
    \                result *= operand[i];\n            }\n            _ => {\n  \
    \              return -1;\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn6mc25vm.rs:22:15\n   |\n\
    22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.first();\n   \
    \ for op in operator {\n        match op {\n            \"+\" => result += operand.last(),\n\
    \            \"-\" => result -= operand.last(),\n            \"*\" => result *=\
    \ operand.last(),\n            \"//\" => result /= operand.last(),\n         \
    \   \"**\" => result **= operand.last(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe5wazj0f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.last(),\n   |           \
    \       --         ^^ expected expression\n   |                  |\n   |     \
    \             while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.last(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.last(),\n24 |        \
    \     \"-\" => result -= operand.last(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wazj0f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.last(),\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe5wazj0f.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.last(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<&isize>`\n  --> /tmp/tmpe5wazj0f.rs:23:20\n   |\n23 |      \
    \       \"+\" => result += operand.last(),\n   |                    ------^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpe5wazj0f.rs:24:20\n   |\n24 |             \"-\" => result -= operand.last(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.clone();\n   \
    \ for i in 0..operator.len() - 1 {\n        match operator[i] {\n            \"\
    +\" => {\n                result += operand[i];\n            }\n            \"\
    -\" => {\n                result -= operand[i];\n            }\n            \"\
    *\" => {\n                result *= operand[i];\n            }\n            \"\
    /\" => {\n                result /= operand[i];\n            }\n            \"\
    //\" => {\n                result /= operand[i];\n            }\n            \"\
    **\" => {\n                result **= operand[i];\n            }\n           \
    \ _ => panic!(\"Invalid operator: {}\", operator[i]),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp4nkxcqab.rs:39:25\n\
    \   |\n39 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4nkxcqab.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp4nkxcqab.rs:24:17\n  \
    \ |\n24 |                 result += operand[i];\n   |                 ------^^^^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp4nkxcqab.rs:27:17\n   |\n27 |                 result -= operand[i];\n\
    \   |                 ------^^^^^^^^^^^^^^\n   |                 |\n   |     \
    \            cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `*=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp4nkxcqab.rs:30:17\n\
    \   |\n30 |                 result *= operand[i];\n   |                 ------^^^^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `*=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `/=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp4nkxcqab.rs:33:17\n   |\n33 |                 result /= operand[i];\n\
    \   |                 ------^^^^^^^^^^^^^^\n   |                 |\n   |     \
    \            cannot use `/=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `/=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp4nkxcqab.rs:36:17\n\
    \   |\n36 |                 result /= operand[i];\n   |                 ------^^^^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `/=` on type `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4nkxcqab.rs:44:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2158bz5u.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2158bz5u.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2158bz5u.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2158bz5u.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result: isize = 0;\n    let mut\
    \ operator_index = 0;\n    let mut operand_index = 0;\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index]\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbq2hasr0.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbq2hasr0.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for op\
    \ in operator {\n        match op {\n            \"+\" => result += operand[1],\n\
    \            \"-\" => result -= operand[1],\n            \"*\" => result *= operand[1],\n\
    \            \"//\" => result /= operand[1],\n            \"**\" => result **=\
    \ operand[1],\n            _ => panic!(\"Invalid operator: {}\", op),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpz0gt60sz.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0gt60sz.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0gt60sz.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n24 |            \
    \ \"-\" => result -= operand[1],\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0gt60sz.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand[1],\n   |       \
    \      ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0gt60sz.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand[1],\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 1
  program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp348kyeqv.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp348kyeqv.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp348kyeqv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp348kyeqv.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660009825
