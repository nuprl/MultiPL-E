name: HumanEval_27_flip_case
language: rs
prompt: "/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
  hELLO\")\nfn flip_case(string: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
  \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
  \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' =>\
    \ c as u8 | 42 as u8,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' ..\
    \ b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n   \
    \         c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n            _ => c,\n       \
    \ })\n        .collect()", "    string.chars()\n        .map(|c| match c {\n \
    \           c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c @ b'A' .. b'Z' =>\
    \ c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n     \
    \       _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 42 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c @ b'A' .. b'Z' =>\
    \ c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n     \
    \       _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 42 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 65 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | ('A' as u8)\
    \ as u8,\n        'A' .. 'Z' => c as u8 | ('a' as u8) as u8,\n        _ => c,\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars()\n        .map(|c| match c {\n        \
    \    c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c\
    \ @ b'A' .. b'Z',\n            _ => c,\n        })\n        .collect()", "   \
    \ string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n  \
    \      'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", "  \
    \  string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            'a' .. 'z' => c as\
    \ char + 'A' as char,\n            'A' .. 'Z' => c as char + 'a' as char,\n  \
    \          _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars()\n      \
    \  .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    c if c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase()\
    \ => c.to_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' =>\
    \ c as u8 | 42 as u8,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n\
    \            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n            _ => c,\n    \
    \    })\n        .collect()", "    string.chars().map(|c| match c {\n        c\
    \ if c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       c if c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase()\
    \ => c.to_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'a' => b'A'..b'Z' as u8,\n        c @ b'A'..b'Z' =>\
    \ b'a'..b'z' as u8,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' ..\
    \ b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 32 as u8,\n        'A' .. 'Z' => c as u8 | 42 as u8,\n        _ =>\
    \ c,\n    }).collect()", "    string.chars().map(|c| match c {\n        'a' ..\
    \ 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char + 'a' as char,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       c if c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase()\
    \ => c.to_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' ..\
    \ b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c @ b'A' => b'a',\n            c @ b'a'\
    \ => b'A',\n            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            'a' .. 'z' => c as u8 | 32 as u8,\n \
    \           'A' .. 'Z' => c as u8 | 65 as u8,\n            _ => c,\n        })\n\
    \        .collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars()\n        .map(|c| match c {\n        \
    \    c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' =>\
    \ c as u8 | 42 as u8,\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars()\n \
    \       .map(|c| match c {\n            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n\
    \            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n            _ => c,\n    \
    \    })\n        .collect()", "    string.chars()\n        .map(|c| match c {\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c @ b'A' => c @ b'a',\n        c\
    \ @ b'a' => c @ b'A',\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c @ b'A' as b'a' =>\
    \ b'a' as b'A',\n            c @ b'a' as b'A' => b'A' as b'a',\n            _\
    \ => c,\n        })\n        .collect()", "    string.chars().map(|c| match c\
    \ {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n  \
    \      .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars().map(|c| match c {\n    \
    \    'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char +\
    \ 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars()\n    \
    \    .map(|c| match c {\n            'a' .. 'z' => c as u8 | 32 as u8,\n     \
    \       'A' .. 'Z' => c as u8 | 42 as u8,\n            _ => c,\n        })\n \
    \       .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n\
    \    }).collect()", "    string.chars()\n        .map(|c| match c {\n        \
    \    c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c\
    \ @ b'A' .. b'Z',\n            _ => c,\n        })\n        .collect()", "   \
    \ string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as char,\n\
    \        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 32 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c @ b'A' => b'a',\n\
    \            c @ b'a' => b'A',\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        c @ b'A' as b'a'\
    \ => b'a' as b'A',\n        c @ b'a' as b'A' => b'A' as b'a',\n        _ => c,\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      c if c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase()\
    \ => c.to_lowercase(),\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c @ b'A' => c @ b'a',\n        c\
    \ @ b'a' => c @ b'A',\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n            c @ b'a'\
    \ .. b'z' => c @ b'A' .. b'Z',\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 32 as u8,\n        'A' .. 'Z' => c as u8 | 65 as u8,\n        _ =>\
    \ c,\n    }).collect()", "    string.chars()\n        .map(|c| match c {\n   \
    \         c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n            c @ b'A' .. b'Z'\
    \ => c @ b'a' .. b'z',\n            _ => c,\n        })\n        .collect()",
  "    string.chars()\n        .map(|c| match c {\n            c @ b'A' .. b'Z' =>\
    \ c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n     \
    \       _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' =>\
    \ c as u8 | 42 as u8,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x21,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c @ b'A' .. b'Z' => c @ b'a' ..\
    \ b'z',\n        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c @ b'A' .. b'Z' =>\
    \ c @ b'a' .. b'z',\n            c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n     \
    \       _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 65 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c @ b'A' .. b'Z' =>\
    \ b'a' .. b'z' + b'A' .. b'Z',\n            c => c,\n        })\n        .collect::<String>()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            'a' => { 'A' }\n            'b' => { 'B' }\n            'c'\
    \ => { 'C' }\n            'd' => { 'D' }\n            'e' => { 'E' }\n       \
    \     'f' => { 'F' }\n            'g' => { 'G' }\n            'h' => { 'H' }\n\
    \            'i' => { 'I' }\n            'j' => { 'J' }\n            'k' => {\
    \ 'K' }\n            'l' => { 'L' }\n            'm' => { 'M' }\n            'n'\
    \ => { 'N' }\n            'o' => { 'O' }\n            'p' => { 'P' }\n       \
    \     'q' => { 'Q' }\n            'r' => { 'R' }\n            's' => { 'S' }\n\
    \            't' => { 'T' }\n            'u' => { 'U' }\n            'v' => {\
    \ 'V' }\n            'w' => { 'W' }\n            'x' => { 'X' }\n            'y'\
    \ => { 'Y' }\n            'z' => { 'Z' }\n            _ => c,\n        })\n  \
    \      .collect::<String>()", "    string.chars()\n        .map(|c| match c {\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 65 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n \
    \       'a' .. 'z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c @ b'A' .. b'Z' => c @ b'a' ..\
    \ b'z',\n        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' =>\
    \ c as u8 | 32 as u8,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        c @ b'a' => c\
    \ @ b'A',\n        c @ b'A' => c @ b'a',\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n\
    \        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       'a' .. 'z' => c as u8 | 32 as u8,\n        'A' .. 'Z' => c as u8 | 42\
    \ as u8,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 |\
    \ 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c| match\
    \ c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' .. b'z'\
    \ => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars()\n\
    \        .map(|c| match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n\
    \            c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n\
    \        })\n        .collect()", "    string.chars()\n        .map(|c| match\
    \ c {\n            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n            c @ b'a'\
    \ .. b'z' => c @ b'A' .. b'Z',\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'A'..='Z' => c as char + 'a' - 'A'\
    \ as char,\n        'a'..='z' => c as char + 'A' - 'a' as char,\n        _ =>\
    \ c,\n    }).collect()", "    string.chars()\n        .map(|c| match c {\n   \
    \         c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()",
  "    string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | ('A' as u8) as u8,\n        'A' ..\
    \ 'Z' => c as u8 | ('a' as u8) as u8,\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'a' .. 'z' =>\
    \ c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        c @ b'A' .. b'Z'\
    \ => c @ b'a' .. b'z',\n        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n      \
    \  _ => c,\n    }).collect()", "    string.chars()\n        .map(|c| match c {\n\
    \            c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n            c @ b'a' .. b'z'\
    \ => c @ b'A' .. b'Z',\n            _ => c,\n        })\n        .collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as char + 'A' as\
    \ char,\n        'A' .. 'Z' => c as char + 'a' as char,\n        _ => c,\n   \
    \ }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        'A' .. 'Z' =>\
    \ c as u8 | 0x20,\n        'a' .. 'z' => c as u8 | 0x21,\n        _ => c,\n  \
    \  }).collect()", "    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n \
    \       _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n  \
    \      'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z' => c as char\
    \ + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n        c if\
    \ c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()", " \
    \   string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n        c @ b'A' ..\
    \ b'Z' => c @ b'a' .. b'z',\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'A' .. 'Z' => c as u8 | 0x20,\n        'a' .. 'z' => c as\
    \ u8 | 0x20,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as char + 'A' as char,\n        'A' .. 'Z'\
    \ => c as char + 'a' as char,\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' ..\
    \ b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars().map(|c|\
    \ match c {\n        c @ b'A' => c @ b'a',\n        c @ b'a' => c @ b'A',\n  \
    \      _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n   \
    \     c @ b'A' .. b'Z' => c @ b'a' .. b'z',\n        c @ b'a' .. b'z' => c @ b'A'\
    \ .. b'Z',\n        _ => c,\n    }).collect()", "    string.chars()\n        .map(|c|\
    \ match c {\n            c if c.is_lowercase() => c.to_uppercase(),\n        \
    \    c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n       \
    \ })\n        .collect()", "    string.chars().map(|c| match c {\n        'a'\
    \ .. 'z' => c as u8 | 0x20,\n        'A' .. 'Z' => c as u8 | 0x20,\n        _\
    \ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n        c if\
    \ c.is_lowercase() => c.to_uppercase(),\n        c if c.is_uppercase() => c.to_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    string.chars().map(|c| match c {\n \
    \       c @ b'A' => b'a',\n        c @ b'a' => b'A',\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        c if c.is_lowercase() => c.to_uppercase(),\n\
    \        c if c.is_uppercase() => c.to_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 0x20,\n \
    \       'A' .. 'Z' => c as u8 | 0x20,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        c @ b'A' .. b'Z' => c @ b'a' ..\
    \ b'z',\n        c @ b'a' .. b'z' => c @ b'A' .. b'Z',\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            c if c.is_uppercase() => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()", "    string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c as u8 | ('A' as u8) as u8,\n        'A' ..\
    \ 'Z' => c as u8 | ('a' as u8) as u8,\n        _ => c,\n    }).collect()", " \
    \   string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 42 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars().map(|c| match c {\n        'a' .. 'z' => c as u8 | 32 as u8,\n\
    \        'A' .. 'Z' => c as u8 | 32 as u8,\n        _ => c,\n    }).collect()",
  "    string.chars()\n        .map(|c| match c {\n            c @ b'A' => b'Z',\n\
    \            c @ b'a' => b'z',\n            _ => c,\n        })\n        .collect()"]
stop_tokens:
- "\n}"
