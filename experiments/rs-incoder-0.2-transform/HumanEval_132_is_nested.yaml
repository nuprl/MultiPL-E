name: HumanEval_132_is_nested
language: rs
prompt: "/// Create a function that takes a string as input which contains only square\
  \ brackets.\n/// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n/// where at least one bracket in the subsequence is\
  \ nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
  []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n/// false\n\
  /// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
  [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\nfn\
  \ is_nested(string: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "  \
    \  string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    string.chars().any(|c| c == '[' || c == '{' ||\
    \ c == '(')", "    string.chars().any(|c| c == '[' || c == '{' || c == '(')",
  "    let mut stack = Vec::new();\n    stack.push(0);\n    let mut i = 0;\n    while\
    \ i < string.len() {\n        if stack.is_empty() {\n            return false;\n\
    \        }\n        let mut j = i;\n        while j < string.len() {\n       \
    \     if string[j] == ']' {\n                stack.pop();\n            } else\
    \ {\n                stack.push(j);\n            }\n            j += 1\n     \
    \   }\n        i += 1\n    }\n    stack.is_empty()", "    string.chars().all(|c|\
    \ {\n        c != '[' && c != ']'\n    })", "    string.chars().any(|c| c == '['\
    \ || c == '{' || c == '(')", "    let mut stack = Vec::new();\n    let mut open_brackets\
    \ = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n    while i < string.len()\
    \ {\n        if string[i] == ']' {\n            close_brackets++;\n          \
    \  if close_brackets == 1 {\n                stack.pop();\n            }\n   \
    \     } else if string[i] == '[' {\n            open_brackets++;\n           \
    \ if open_brackets == 1 {\n                stack.push(string[i]);\n          \
    \  }\n        } else {\n            stack.pop();\n            close_brackets =\
    \ 0;\n            open_brackets = 0;\n        }\n        i += 1;\n    }\n    stack.len()\
    \ == 0 && open_brackets == 0 && close_brackets == 0", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    string.chars().any(|c| c == '[' || c == '{' ||\
    \ c == '(')", "    string.chars().any(|c| c == '[' || c == '{' || c == '(')",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    let mut stack = Vec::new();\n    let mut open_brackets\
    \ = 0;\n    let mut close_brackets = 0;\n    for c in string.chars() {\n     \
    \   if c == '[' {\n            stack.push(c);\n            open_brackets += 1;\n\
    \        } else if c == '{' {\n            stack.push(c);\n        } else if c\
    \ == '}' {\n            close_brackets += 1;\n            if stack.len() == 0\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        } else if c == ']' {\n            if stack.len() == 0 {\n           \
    \     return false;\n            }\n            close_brackets += 1;\n       \
    \     stack.pop();\n        } else {\n            if stack.len() == 0 || close_brackets\
    \ < open_brackets {\n                return false;\n            }\n        }\n\
    \    }\n    stack.len() == 0", "    string.chars().any(|c| c == '[' || c == '{'\
    \ || c == '(')", "    string.chars().any(|c| c == '[' || c == '{' || c == '(')",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().all(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    let mut stack: Vec<usize> = vec![];\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        if string[i] == '[' {\n      \
    \      stack.push(i);\n        }\n        if string[i] == ']' {\n            if\
    \ stack.len() == 0 {\n                return false;\n            }\n         \
    \   stack.pop();\n        }\n        i += 1;\n    }\n    stack.len() == 0", " \
    \   let mut stack = Vec::new();\n    let mut bracket_count = 0;\n    let mut bracket_open\
    \ = false;\n    let mut bracket_closed = false;\n    let mut bracket_opening_count\
    \ = 0;\n    let mut bracket_closing = false;\n    let mut bracket_opening_open\
    \ = false;\n    let mut bracket_opening_closed = false;\n    let mut bracket_closing_open\
    \ = false;\n    let mut bracket_closing_closed = false;\n    let mut bracket_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_closing_count = 0;\n    let mut bracket_closing_opening_count\
    \ = 0;\n    let mut bracket_closing_closing_count = 0;\n    let mut bracket_opening_opening_closing_count\
    \ = 0;\n    let mut bracket_closing_opening_opening_count = 0;\n    let mut bracket_closing_opening_closing_count\
    \ = 0;\n    let mut bracket_closing_closing_opening_count = 0;\n    let mut bracket_closing_closing_closing_count\
    \ = 0;\n    let mut bracket_opening_opening_closing_closing_count = 0;\n    let\
    \ mut bracket_closing_opening_opening_closing_count = 0;\n    let mut bracket_closing_opening_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_closing_opening_opening_closing_count = 0;\n\
    \    let mut bracket_closing_closing_closing_opening_closing_count = 0;\n    let\
    \ mut bracket_closing_closing_closing_closing_opening_closing_count = 0;\n   \
    \ let mut bracket_opening_opening_closing_closing_closing_count = 0;\n    let\
    \ mut bracket_closing_opening_opening_closing_closing_count = 0;\n    let mut\
    \ bracket_closing_opening_closing_closing_closing_count = 0;\n    let mut bracket_closing_closing_opening_opening_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_closing_closing_opening_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_closing_closing_closing_opening_closing_closing_count\
    \ = 0;\n    let mut bracket_opening_opening_closing_closing_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_opening_opening_closing_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_opening_closing_closing_closing_closing_count\
    \ = 0;\n    let mut bracket_closing_closing_opening_opening_clo", "    let mut\
    \ stack: Vec<usize> = vec![0; string.len()];\n    let mut index = 0;\n    let\
    \ mut open_brackets = 0;\n    let mut closed_brackets = 0;\n    while index <\
    \ string.len() {\n        if string[index] == '[' {\n            stack.push(index);\n\
    \            open_brackets += 1;\n        }\n        if string[index] == ']' {\n\
    \            closed_brackets += 1;\n            if open_brackets > closed_brackets\
    \ {\n                return true;\n            }\n            open_brackets -=\
    \ 1;\n        }\n        index += 1;\n    }\n    false", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    let mut stack = Vec::new();\n    let mut i = 0;\n\
    \    let mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut\
    \ current_open_brackets = 0;\n    let mut current_close_brackets = 0;\n    let\
    \ mut current_string = \"\";\n    while i < string.len() {\n        let c = string[i];\n\
    \        if c == '[' {\n            stack.push(current_string);\n            current_open_brackets\
    \ += 1;\n            current_string += c;\n        }\n        if c == '[' {\n\
    \            stack.push(current_string);\n            current_close_brackets +=\
    \ 1;\n            current_string += c;\n        }\n        if c == '{' {\n   \
    \         stack.push(current_string);\n            current_open_brackets += 1;\n\
    \            current_string += c;\n        }\n        if c == '}' {\n        \
    \    stack.push(current_string);\n            current_close_brackets += 1;\n \
    \           current_string += c;\n        }\n        if c == '[' {\n         \
    \   current_open_brackets += 1;\n        }\n        if c == '}' {\n          \
    \  current_close_brackets += 1;\n        }\n        if c == '{' {\n          \
    \  current_close_brackets += 1;\n        }\n        if c == '[' {\n          \
    \  current_string += c;\n        }\n        if c == '}' {\n            current_string\
    \ += c;\n        }\n        if c == '{' {\n            current_string += c;\n\
    \        }\n        if c == '[' {\n            current_string += c;\n        }\n\
    \        if c == '}' {\n            current_string += c;\n        }\n        if\
    \ c == '[' {\n            current_string += c;\n        }\n        if c == '}'\
    \ {\n            current_string += c;\n        }\n        if c == '{' {\n    \
    \        current_string += c;\n        }\n        if c == '}' {\n            current_string\
    \ += c;\n        }\n        if c == '[' {\n            current_string += c;\n\
    \        }\n        if c == '}' {\n            current_string += c;\n        }\n\
    \        if c == '{' {\n            current_string += c;\n        }\n        if\
    \ c == '}' {\n            current_string += c;\n        }\n        if c == '['\
    \ {\n            current_string += c;\n        }\n        if c == '}' {\n    \
    \        current_string += c;\n        }\n        if c == '{' {\n            current_string\
    \ += c;\n        }\n        if c == '}' {\n            current_string += c;\n\
    \        }\n        if c == '[' {\n            current_string += c;\n        }\n\
    \        if c == '}' {\n            current_string += c;\n        }\n        if\
    \ c == '{' {\n            current_string += c;\n        }\n        if c == '}'\
    \ {\n            current_string += c;\n        }\n        if ", "    let mut stack\
    \ = Vec::new();\n    let mut open_brackets = 0;\n    for c in string.chars() {\n\
    \        if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == ']' {\n            open_brackets -= 1;\n     \
    \       if open_brackets == 0 {\n                stack.pop();\n            }\n\
    \        }\n    }\n    stack.len() == 0 && open_brackets == 0", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    string.chars().any(|c| c == '[' ||\
    \ c == '{' || c == '(')", "    string.chars().any(|c| c == '[' || c == '{' ||\
    \ c == '(')", "    let mut stack: Vec<usize> = Vec::new();\n    let mut open_brackets:\
    \ Vec<usize> = Vec::new();\n    let mut close_brackets: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets_size: usize = 0;\n    let mut close_brackets_size:\
    \ usize = 0;\n    let mut bracket_depth: usize = 0;\n    let mut bracket_depth_size:\
    \ usize = 0;\n    let mut bracket_depth_size_max: usize = 0;\n    let mut bracket_depth_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_max: usize = 0;\n    let mut open_brackets_size_min:\
    \ usize = 0;\n    let mut close_brackets_size_max: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_min: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_max: usize = 0;\n    let mut open_brackets_size_min:\
    \ usize = 0;\n    let mut close_brackets_size_max: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_min: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_max: usize = 0;\n    let mut open_brackets_size_min:\
    \ usize = 0;\n    let mut close_brackets_size_max: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_min: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_max: usize = 0;\n    let mut open_brackets_size_min:\
    \ usize = 0;\n    let mut close_brackets_size_max: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_min: usize = 0;\n    let mut close_brackets_size_min:\
    \ usize = 0;\n    let mut open_brackets_size_max: usize = 0;\n    let mut open",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    let mut stack:\
    \ Vec<usize> = vec![0; string.len()];\n    let mut index = 0;\n    while index\
    \ < string.len() {\n        if string[index] == '[' {\n            stack.push(index);\n\
    \        }\n        if string[index] == ']' {\n            if stack.is_empty()\
    \ {\n                return false;\n            }\n            let top = stack.pop();\n\
    \            if top < index {\n                return false;\n            }\n\
    \        }\n        index += 1;\n    }\n    stack.is_empty()", "    let mut stack:\
    \ Vec<usize> = vec![];\n    let mut open_brackets: usize = 0;\n    for c in string.chars()\
    \ {\n        if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == '[' {\n            open_brackets += 1;\n     \
    \   } else if c == ']' {\n            open_brackets -= 1;\n            if open_brackets\
    \ == 0 {\n                stack.pop();\n            }\n        } else if c ==\
    \ ']' {\n            open_brackets -= 1;\n        }\n    }\n    stack.len() ==\
    \ 0 && open_brackets == 0", "    let mut stack: Vec<usize> = vec![];\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        if let Some(index) = get_index(&string,\
    \ i) {\n            stack.push(index);\n            i += 1;\n        } else {\n\
    \            if stack.len() > 0 {\n                if stack.is_empty() {\n   \
    \                 return false;\n                } else {\n                  \
    \  let top = stack.last().unwrap();\n                    if top < i {\n      \
    \                  return false;\n                    }\n                }\n \
    \           }\n            i += 1;\n        }\n    }\n    true", "    let mut\
    \ stack: Vec<usize> = Vec::new();\n    let mut i = 0;\n    while i < string.len()\
    \ {\n        if string[i] == '[' {\n            stack.push(i);\n        } else\
    \ if string[i] == ']' {\n            if stack.len() == 0 {\n                return\
    \ false;\n            }\n            let top = stack.pop();\n            if top\
    \ != i {\n                return false;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    stack.len() == 0", "    let mut stack: Vec<usize> = vec![];\n\
    \    let mut index = 0;\n    let mut bracket_count = 0;\n    let mut bracket_open\
    \ = false;\n    let mut bracket_closed = false;\n    let mut bracket_open_index\
    \ = 0;\n    let mut bracket_close_index = 0;\n    let mut bracket_open_bracket\
    \ = false;\n    let mut bracket_close_bracket = false;\n    let mut bracket_open_brackets\
    \ = false;\n    let mut bracket_close_brackets = false;\n    let mut bracket_open_brackets_index\
    \ = 0;\n    let mut bracket_close_brackets_index = 0;\n    let mut bracket_open_brackets_bracket\
    \ = false;\n    let mut bracket_close_brackets_bracket = false;\n    let mut bracket_open_brackets_brackets\
    \ = false;\n    let mut bracket_close_brackets_brackets = false;\n    let mut\
    \ bracket_open_brackets_brackets_index = 0;\n    let mut bracket_close_brackets_brackets_index\
    \ = 0;\n    let mut bracket_open_brackets_brackets_bracket = false;\n    let mut\
    \ bracket_close_brackets_brackets_bracket = false;\n    let mut bracket_open_brackets_brackets_brackets\
    \ = false;\n    let mut bracket_close_brackets_brackets_brackets = false;\n  \
    \  let mut bracket_open_brackets_brackets_brackets_index = 0;\n    let mut bracket_close_brackets_brackets_brackets_index\
    \ = 0;\n    let mut bracket_open_brackets_brackets_brackets_bracket = false;\n\
    \    let mut bracket_close_brackets_brackets_brackets_bracket = false;\n    let\
    \ mut bracket_open_brackets_brackets_brackets_brackets = false;\n    let mut bracket_close_brackets_brackets_brackets_brackets\
    \ = false;\n    let mut bracket_open_brackets_brackets_brackets_brackets_index\
    \ = 0;\n    let mut bracket_close_brackets_brackets_brackets_brackets_index =\
    \ 0;\n    let mut bracket_open_brackets_brackets_brackets_brackets_bracket = false;\n\
    \    let mut bracket_close_brackets_brackets_brackets_brackets_bracket = false;\n\
    \    let mut bracket_open_brackets_brackets_brackets_brackets_brackets = false;\n",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n\
    \    while i < string.len() {\n        if string[i] == '[' {\n            stack.push(string[i]);\n\
    \            open_brackets += 1;\n        }\n        if string[i] == ']' {\n \
    \           close_brackets += 1;\n            if close_brackets == open_brackets\
    \ {\n                stack.pop();\n            }\n        }\n        i += 1;\n\
    \    }\n    stack.len() > 0 && stack.len() == open_brackets", "    let mut stack:\
    \ Vec<usize> = Vec::new();\n    let mut open_brackets: usize = 0;\n    let mut\
    \ closed_brackets: usize = 0;\n    let mut i = 0;\n    while i < string.len()\
    \ {\n        if string[i] == '[' {\n            stack.push(i);\n            open_brackets\
    \ += 1;\n        } else if string[i] == ']' {\n            closed_brackets +=\
    \ 1;\n            if closed_brackets == open_brackets {\n                stack.pop();\n\
    \            }\n        }\n        i += 1;\n    }\n    stack.len() > 0 && stack[0]\
    \ == 0", "    let mut stack: Vec<usize> = vec![];\n    let mut bracket_count =\
    \ 0;\n    for c in string.chars() {\n        if c == '[' {\n            stack.push(bracket_count);\n\
    \            bracket_count += 1;\n        } else if c == ']' {\n            bracket_count\
    \ -= 1;\n            if bracket_count == 0 {\n                stack.pop();\n \
    \           }\n        }\n    }\n    stack.len() > 0", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    let mut stack = Vec::new();\n    let\
    \ mut open_brackets = false;\n    let mut closed_brackets = false;\n    let mut\
    \ open_brackets_depth = 0;\n    let mut closed_brackets_depth = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < string.len() {\n\
    \        if string[i] == '[' {\n            open_brackets = true;\n          \
    \  stack.push(string[i]);\n            open_brackets_depth += 1;\n        }\n\
    \        if string[i] == ']' {\n            closed_brackets = true;\n        \
    \    closed_brackets_depth += 1;\n            if closed_brackets_depth > open_brackets_depth\
    \ {\n                closed_brackets_depth -= 1;\n            }\n        }\n \
    \       if open_brackets && closed_brackets {\n            if string[i] == ']'\
    \ {\n                closed_brackets_depth += 1;\n                if closed_brackets_depth\
    \ > open_brackets_depth {\n                    closed_brackets_depth -= 1;\n \
    \               }\n            }\n            if string[i] == '[' {\n        \
    \        open_brackets_depth += 1;\n            }\n        }\n        if open_brackets\
    \ && string[i] == '[' {\n            open_brackets_depth += 1;\n        }\n  \
    \      if closed_brackets && string[i] == ']' {\n            closed_brackets_depth\
    \ += 1;\n        }\n        if open_brackets && closed_brackets && string[i] ==\
    \ '[' {\n            open_brackets_depth += 1;\n        }\n        if closed_brackets\
    \ && string[i] == ']' {\n            closed_brackets_depth += 1;\n        }\n\
    \        if open_brackets && closed_brackets && string[i] == '[' {\n         \
    \   open_brackets_depth += 1;\n        }\n        if closed_brackets && string[i]\
    \ == ']' {\n            closed_brackets_depth += 1;\n        }\n        if open_brackets\
    \ && closed_brackets && string[i] == '[' {\n            open_brackets_depth +=\
    \ 1;\n        }\n        if closed_brackets && string[i] == ']' {\n          \
    \  closed_brackets_depth += 1;\n        }\n        if open_brackets && closed_brackets\
    \ && string[i] == '[' {\n            open_brackets_depth += 1;\n        }\n  \
    \      if closed_brackets && string[i] == ']' {\n            closed_brackets_depth\
    \ += 1;\n        }\n        if open_brackets && closed_brackets && string[i] ==\
    \ '[' {\n            open_brackets_depth += 1;\n        }\n        if closed_brackets\
    \ && string[i] == ", "    let mut stack = Vec::new();\n    let mut open_brackets\
    \ = 0;\n    let mut close_brackets = 0;\n    let mut i = 0;\n    while i < string.len()\
    \ {\n        if string[i] == '[' {\n            stack.push(string[i]);\n     \
    \       open_brackets += 1;\n        } else if string[i] == ']' {\n          \
    \  close_brackets += 1;\n            if close_brackets > open_brackets {\n   \
    \             return false;\n            }\n            stack.pop();\n       \
    \ }\n        i += 1;\n    }\n    stack.is_empty()"]
stop_tokens:
- "\n}"
