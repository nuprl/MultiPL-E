name: HumanEval_80_is_happy
language: rs
prompt: "/// You are given a string s.\n/// Your task is to check if the string is\
  \ happy or not.\n/// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n/// For example:\n/// >>> is_happy(a)\n/// false\n/// >>>\
  \ is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n/// >>> is_happy(aabb)\n\
  /// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n/// false\nfn\
  \ is_happy(s: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while\
    \ i < s.len() {\n        if s[i] != s[j] {\n            return false;\n      \
    \  }\n        i += 1;\n        j += 1;\n        k += 1;\n    }\n    return k ==\
    \ 3 && j >= 3;", "    let mut s = s;\n    s.chars().filter(|c| !c.is_ascii_lowercase()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_lowercase()).count();\n    s.chars().filter(|c|\
    \ !c.is_ascii_uppercase()).count();\n    s.chars().filter(|c| c.is_ascii_uppercase()).count();\n\
    \    s.chars().filter(|c| !c.is_ascii_digit()).count();\n    s.chars().filter(|c|\
    \ c.is_ascii_digit()).count();\n    s.chars().filter(|c| !c.is_ascii_letter()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_letter()).count();\n    s.chars().filter(|c|\
    \ !c.is_ascii_whitespace()).count();\n    s.chars().filter(|c| c.is_ascii_whitespace()).count();\n\
    \    s.chars().filter(|c| !c.is_ascii_symbol()).count();\n    s.chars().filter(|c|\
    \ c.is_ascii_symbol()).count();\n    s.chars().filter(|c| !c.is_ascii_control()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_control()).count();\n    s.chars().filter(|c|\
    \ !c.is_ascii_print()).count();\n    s.chars().filter(|c| c.is_ascii_print()).count();\n\
    \    s.chars().filter(|c| !c.is_ascii_graph()).count();\n    s.chars().filter(|c|\
    \ c.is_ascii_graph()).count();\n    s.chars().filter(|c| !c.is_ascii_printable()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_printable()).count();\n    s.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count();\n    s.chars().filter(|c| c.is_ascii_lowercase()).count();\n\
    \    s.chars().filter(|c| !c.is_ascii_uppercase()).count();\n    s.chars().filter(|c|\
    \ c.is_ascii_uppercase()).count();\n    s.chars().filter(|c| !c.is_ascii_digit()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_digit()).count();\n    s.chars().filter(|c|\
    \ !c.is_ascii_letter()).count();\n    s.chars().filter(|c| c.is_ascii_letter()).count();\n\
    \    s.chars().filter(|c| !c.is_ascii_whitespace()).count();\n    s.chars().filter(|c|\
    \ c.is_ascii_whitespace()).count();\n    s.chars().filter(|c| !c.is_ascii_symbol()).count();\n\
    \    s.chars().filter(|c| c.is_ascii_symbol()).count();\n    s.chars().filter(|c|\
    \ !", '    s.len() >= 3 && s.chars().all(|c| !s.contains(&c))', "    let mut i\
    \ = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < s.len() {\n    \
    \    if j == i {\n            j = 0;\n            i += 1;\n        }\n       \
    \ if k == i {\n            k = 0;\n            i += 1;\n        }\n        if\
    \ s[i] != s[j] {\n            return false;\n        }\n        i += 1;\n    \
    \    j += 1;\n        k += 1;\n    }\n    true", "    let mut s = s;\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s.len() < 3 {\n            return\
    \ false;\n        }\n        if s.chars().filter(|&c| !c.is_ascii()).count() !=\
    \ 3 {\n            return false;\n        }\n        i += 3;\n    }\n    return\
    \ true;", "    let mut chars = s.chars();\n    let mut i = 0;\n    while i < chars.len()\
    \ {\n        if chars[i] != chars[i + 1] {\n            return false;\n      \
    \  }\n        i += 2;\n    }\n    true", "    s.len() >= 3 &&\n    s.chars().filter(|c|\
    \ !c.is_ascii()).all(|c| s.chars().count(c) == 3)", "    let mut chars = s.chars();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        if chars[i] != chars[i\
    \ + 1] {\n            return false;\n        }\n        i += 2;\n    }\n    true",
  "    s.len() >= 3 &&\n    s.chars().filter(|c| !c.is_ascii_lowercase()).all(|c|\
    \ !s.chars().any(|c| c == c))", "    let mut s = s;\n    s.chars().filter(|c|\
    \ c.is_alphabetic()).count() >= 3\n        && s.chars().filter(|c| c.is_alphabetic()).count()\
    \ == s.chars().count()", "    let mut s = s;\n    s.chars().filter(|c| c.is_alphabetic()).count()\
    \ >= 3\n        && s.chars().filter(|c| c.is_alphabetic()).count() % 3 == 0",
  "    let mut s = s;\n    s.chars().filter(|&c| !c.is_ascii_lowercase()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_uppercase()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_digit()).count();\n    s.chars().filter(|&c| !c.is_ascii_letter()).count();\n\
    \    s.len() >= 3", "    let mut counter = 0;\n    let mut chars = s.chars();\n\
    \    while let Some(next) = chars.next() {\n        if counter == 3 {\n      \
    \      if chars.next().unwrap() != chars.next().unwrap() {\n                return\
    \ false;\n            }\n        }\n        counter += 1;\n    }\n    counter\
    \ >= 3", "    let mut s = s;\n    s.chars().filter(|c| c != 'a').count();\n  \
    \  s.chars().filter(|c| c != 'b').count();\n    s.chars().filter(|c| c != 'c').count();\n\
    \    s.chars().filter(|c| c != 'd').count();\n    s.chars().filter(|c| c != 'e').count();\n\
    \    s.chars().filter(|c| c != 'f').count();\n    s.chars().filter(|c| c != 'g').count();\n\
    \    s.chars().filter(|c| c != 'h').count();\n    s.chars().filter(|c| c != 'i').count();\n\
    \    s.chars().filter(|c| c != 'j').count();\n    s.chars().filter(|c| c != 'k').count();\n\
    \    s.chars().filter(|c| c != 'l').count();\n    s.chars().filter(|c| c != 'm').count();\n\
    \    s.chars().filter(|c| c != 'n').count();\n    s.chars().filter(|c| c != 'o').count();\n\
    \    s.chars().filter(|c| c != 'p').count();\n    s.chars().filter(|c| c != 'q').count();\n\
    \    s.chars().filter(|c| c != 'r').count();\n    s.chars().filter(|c| c != 's').count();\n\
    \    s.chars().filter(|c| c != 't').count();\n    s.chars().filter(|c| c != 'u').count();\n\
    \    s.chars().filter(|c| c != 'v').count();\n    s.chars().filter(|c| c != 'w').count();\n\
    \    s.chars().filter(|c| c != 'x').count();\n    s.chars().filter(|c| c != 'y').count();\n\
    \    s.chars().filter(|c| c != 'z').count();\n    s.chars().filter(|c| c != 'A').count();\n\
    \    s.chars().filter(|c| c != 'B').count();\n    s.chars().filter(|c| c != 'C').count();\n\
    \    s.chars().filter(|c| c != 'D').count();\n    s.chars().filter(|c| c != 'E').count();\n\
    \    s.chars().filter(|c| c != 'F').count();\n    s.chars().filter(|c| c != 'G').count();\n\
    \    s.chars().filter(|c| c != 'H').count();\n    s.chars().filter(|c| c != 'I').count();\n\
    \    s.chars().filter(|c| c != 'J').count();\n    s.char", "    let mut s = s;\n\
    \    s.chars().filter(|c| c.is_alphabetic()).count() >= 3\n        && s.chars().filter(|c|\
    \ c.is_alphabetic()).count() == s.chars().count()", "    let mut counter = 0;\n\
    \    let mut is_happy = true;\n    for c in s.chars() {\n        if counter ==\
    \ 3 {\n            if !is_distinct {\n                is_happy = false;\n    \
    \            break;\n            }\n            counter = 0;\n        }\n    \
    \    if c != c.to_ascii_lowercase() {\n            is_happy = false;\n       \
    \     break;\n        }\n        counter += 1;\n    }\n    return is_happy;",
  '    s.len() >= 3 && s.chars().all(|c| !is_distinct(&c))', "    let mut s = s;\n\
    \    s.chars().filter(|c| c.is_ascii_lowercase()).count() >= 3\n        && s.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count() % 3 == 0", "    let mut s = s;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < s.len() {\n  \
    \      if j == 3 {\n            j = 0;\n            i += 1;\n        }\n     \
    \   if k == 3 {\n            k = 0;\n            j += 1;\n        }\n        if\
    \ s[i] == s[j] {\n            i += 1;\n            j += 1;\n            k += 1;\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;",
  "    let mut chars = s.chars();\n    let mut i = 0;\n    while i < chars.len() {\n\
    \        if chars[i] != chars[i + 1] {\n            return false;\n        }\n\
    \        i += 2;\n    }\n    true"]
stop_tokens:
- "\n}"
